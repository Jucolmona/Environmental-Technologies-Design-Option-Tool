Attribute VB_Name = "ASAP_Mod"
Option Explicit

''''''''''''''''''''''''''''
' Visual Basic global constant file. This file can be loaded
' into a code module.
'
' Some constants are commented out because they have
' duplicates (e.g., NONE appears several places).
'
' If you are updating a Visual Basic application written with
' an older version, you should replace your global constants
' with the constants in this file.
'
''''''''''''''''''''''''''''

' General
Global Const Application_Name = "ASAP"
Global NL As String
Global AddFlag As Integer

' ErrNum (LinkError)
Global Const WRONG_FORMAT = 1
Global Const DDE_SOURCE_CLOSED = 6
Global Const TOO_MANY_LINKS = 7
Global Const DATA_TRANSFER_FAILED = 8

' Enumerated Types

' Align (picture box)
Global Const NONE = 0
Global Const ALIGN_TOP = 1
Global Const ALIGN_BOTTOM = 2

' BorderStyle (form)
Global Const FIXED_SINGLE = 1   ' 1 - Fixed Single
Global Const SIZABLE = 2        ' 2 - Sizable (Forms only)
Global Const FIXED_DOUBLE = 3   ' 3 - Fixed Double (Forms only)

' LinkMode (forms and controls)
' Global Const NONE = 0         ' 0 - None
Global Const LINK_SOURCE = 1    ' 1 - Source (forms only)
Global Const LINK_AUTOMATIC = 1 ' 1 - Automatic (controls only)
Global Const LINK_MANUAL = 2    ' 2 - Manual (controls only)
Global Const LINK_NOTIFY = 3    ' 3 - Notify (controls only)

' ScaleMode
Global Const TWIPS = 1       ' 1 - Twip
Global Const PIXELS = 3      ' 3 - Pixel

' Function Parameters
' MsgBox parameters
Global Const MB_OK = 0                 ' OK button only
Global Const MB_OKCANCEL = 1           ' OK and Cancel buttons
Global Const MB_ABORTRETRYIGNORE = 2   ' Abort, Retry, and Ignore buttons
Global Const MB_YESNOCANCEL = 3        ' Yes, No, and Cancel buttons
Global Const MB_YESNO = 4              ' Yes and No buttons
Global Const MB_RETRYCANCEL = 5        ' Retry and Cancel buttons

Global Const MB_ICONSTOP = 16          ' Critical message
Global Const MB_ICONquestion = 32      ' Warning query
Global Const MB_ICONEXCLAMATION = 48   ' Warning message
Global Const MB_ICONINFORMATION = 64   ' Information message

' MsgBox return values
Global Const IDOK = 1                  ' OK button pressed
Global Const IDCANCEL = 2              ' Cancel button pressed
Global Const IDABORT = 3               ' Abort button pressed
Global Const IDRETRY = 4               ' Retry button pressed
Global Const IDIGNORE = 5              ' Ignore button pressed
Global Const IDYES = 6                 ' Yes button pressed
Global Const IDNO = 7                  ' No button pressed

' SetAttr, Dir, GetAttr functions
Global Const ATTR_NORMAL = 0
Global Const ATTR_READONLY = 1
Global Const ATTR_HIDDEN = 2
Global Const ATTR_SYSTEM = 4
Global Const ATTR_VOLUME = 8
Global Const ATTR_DIRECTORY = 16
Global Const ATTR_ARCHIVE = 32


'File Open/Save Dialog Flags
Global Const OFN_READONLY = &H1&
Global Const OFN_OVERWRITEPROMPT = &H2&
Global Const OFN_HIDEREADONLY = &H4&
Global Const OFN_NOCHANGEDIR = &H8&
Global Const OFN_SHOWHELP = &H10&
Global Const OFN_NOVALIDATE = &H100&
Global Const OFN_ALLOWMULTISELECT = &H200&
Global Const OFN_EXTENSIONDIFFERENT = &H400&
Global Const OFN_PATHMUSTEXIST = &H800&
Global Const OFN_FILEMUSTEXIST = &H1000&
Global Const OFN_CREATEPROMPT = &H2000&
Global Const OFN_SHAREAWARE = &H4000&
Global Const OFN_NOREADONLYRETURN = &H8000&


'Printer Dialog Flags
Global Const PD_PRINTSETUP = &H40&

Global ContaminantData(0 To MAXCHEMICAL) As StrippingContaminantProperties

Global Const TOLERANCE = 0.00000000000001
Global Const NUMBER_CHANGING_CRITERIA = 1E-17

Global PressureChanged As Integer
Global TemperatureChanged As Integer

Global ShownForm As Integer

Global scr1 As SCR  'Data structure for screen 1 of PTAD
Global Scr2 As SCR  'Data structure for screen 2 of PTAD

Global Temp_Text As String

Global IsError As Integer

Global ListContaminantMenuOptionsIndex As Integer

Global OriginalProperties As ContaminantPropertyType

Global Const CONTAMINANTS_PTAD_FILEID = "Contaminant_Properties_PTAD"
Global Const SCREEN1_PTAD1_FILEID = "DesignProperties_PTAD_Screen1"
Global Const SCREEN2_PTAD2_FILEID = "RatingProperties_PTAD_Screen2"

Global Filename As String
Global PrintFileName As String

Global ErrorFlag As Long

Global CurrentScreen As SCR   'Current screen user is
                              'manipulating - Screen 1 or
                              'Screen 2 in PTAD

Global ScreenNumber As Integer


Global DefaultPacking As PackingDataType

'Screen Sizes for a Standard VGA Screen
Global Const SCREEN_WIDTH_STANDARD = 9600
Global Const SCREEN_HEIGHT_STANDARD = 7200

Sub CalculateAirWaterProperties()
    Dim Pressure As Double
    Dim Temperature As Double
    Dim WaterDensity As Double
    Dim WaterViscosity As Double
    Dim WaterSurfaceTension As Double
    Dim AirDensity As Double
    Dim AirViscosity As Double
    Dim i As Integer
    
    If scr1.OperatingPressure.ValChanged Or scr1.operatingtemperature.ValChanged Then
       Pressure = scr1.OperatingPressure.Value
       Temperature = scr1.operatingtemperature.Value

       For i = 0 To 4
           If frmAirWaterProperties!chkUpdateValues(i).Value = True Then
              Select Case i
                 Case 0
                    If HaveValue(Temperature) Then
                       Call H2ODENS(WaterDensity, Temperature)
                       scr1.WaterDensity.Value = WaterDensity
                       scr1.WaterDensity.UserInput = False
                       scr1.WaterDensity.ValChanged = True
                       frmAirWaterProperties.txtAirWaterProperties(0).Text = Format$(WaterDensity, "0.00")
                       frmAirWaterProperties.lblValueSource(0).Caption = "Correlation"
                    End If
                 Case 1
                    If HaveValue(Temperature) Then
                       Call H2OVISC(WaterViscosity, Temperature)
                       scr1.WaterViscosity.Value = WaterViscosity
                       scr1.WaterViscosity.UserInput = False
                       scr1.WaterViscosity.ValChanged = True
                       frmAirWaterProperties.txtAirWaterProperties(1).Text = Format$(WaterViscosity, GetTheFormat(WaterViscosity))
                       frmAirWaterProperties.lblValueSource(1).Caption = "Correlation"
                    End If
                 Case 2
                    If HaveValue(Temperature) Then
                       Call H2OST(WaterSurfaceTension, Temperature)
                       scr1.WaterSurfaceTension.Value = WaterSurfaceTension
                       scr1.WaterSurfaceTension.UserInput = False
                       scr1.WaterSurfaceTension.ValChanged = True
                       frmAirWaterProperties.txtAirWaterProperties(2).Text = Format$(WaterSurfaceTension, GetTheFormat(WaterSurfaceTension))
                       frmAirWaterProperties.lblValueSource(2).Caption = "Correlation"
                    End If
                 Case 3
                    If HaveValue(Temperature) And HaveValue(Pressure) Then
                       Call AIRDENS(AirDensity, Temperature, Pressure)
                       scr1.AirDensity.Value = AirDensity
                       scr1.AirDensity.UserInput = False
                       scr1.AirDensity.ValChanged = True
                       frmAirWaterProperties.txtAirWaterProperties(3).Text = Format$(AirDensity, GetTheFormat(AirDensity))
                       frmAirWaterProperties.lblValueSource(3).Caption = "Correlation"
                    End If
                 Case 4
                    If HaveValue(Temperature) Then
                       Call AIRVISC(AirViscosity, Temperature)
                       scr1.AirViscosity.Value = AirViscosity
                       scr1.AirViscosity.UserInput = False
                       scr1.AirViscosity.ValChanged = True
                       frmAirWaterProperties.txtAirWaterProperties(4).Text = Format$(AirViscosity, GetTheFormat(AirViscosity))
                       frmAirWaterProperties.lblValueSource(4).Caption = "Correlation"
                    End If
              End Select
          End If
       Next i
    End If
End Sub

Sub CalculatePowerScreen1(CalculatedPower As Integer)
Dim CalculatedBlowerPower As Integer
Dim CalculatedPumpPower As Integer

  CalculatedBlowerPower = False
  If HaveValue(scr1.AirFlowRate.Value) And HaveValue(scr1.TowerArea.Value) And HaveValue(scr1.OperatingPressure.Value) And HaveValue(scr1.AirPressureDrop.Value) And HaveValue(scr1.TowerHeight.Value) And HaveValue(scr1.AirDensity.Value) Then
    Call PBLOWPT(scr1.Power.BlowerBrakePower, scr1.AirFlowRate.Value, scr1.TowerArea.Value, scr1.OperatingPressure.Value, scr1.AirPressureDrop.Value, scr1.TowerHeight.Value, scr1.AirDensity.Value, scr1.Power.InletAirTemperature, scr1.Power.BlowerEfficiency)
    CalculatedBlowerPower = True
  End If

  CalculatedPumpPower = False
  If HaveValue(scr1.WaterDensity.Value) And HaveValue(scr1.WaterFlowRate.Value) And HaveValue(scr1.TowerHeight.Value) Then
    Call PPUMPPT(scr1.Power.PumpBrakePower, scr1.Power.PumpEfficiency, scr1.WaterDensity.Value, scr1.WaterFlowRate.Value, scr1.TowerHeight.Value)
    CalculatedPumpPower = True
  End If

  If CalculatedBlowerPower And CalculatedPumpPower Then
    Call PTOTALPT(scr1.Power.TotalBrakePower, scr1.Power.BlowerBrakePower, scr1.Power.PumpBrakePower)
    CalculatedPower = True
  End If

End Sub

Sub GetDesignKLaOrKLaSafetyFactor()

  If scr1.KLaSafetyFactor.UserInput = True Then
    Call SpecifiedKLaSafetyFactor
  ElseIf scr1.DesignMassTransferCoefficient.UserInput = True Then
    Call SpecifiedDesignMassTransferCoefficient
  End If

End Sub

Sub GetLoadings()

  If HaveValue(scr1.AirPressureDrop.Value) And HaveValue(scr1.AirToWaterRatio.Value) And HaveValue(scr1.AirDensity.Value) And HaveValue(scr1.WaterDensity.Value) And HaveValue(scr1.Packing.PackingFactor) And HaveValue(scr1.WaterViscosity.Value) Then
    Call PT1LDAIR(scr1.AirLoadingRate.Value, scr1.AirPressureDrop.Value, scr1.AirToWaterRatio.Value, scr1.AirDensity.Value, scr1.WaterDensity.Value, scr1.Packing.PackingFactor, scr1.WaterViscosity.Value)
    scr1.AirLoadingRate.ValChanged = True
    scr1.AirLoadingRate.UserInput = False
    'frmPTADScreen1.lblFlowsLoadings(6).Caption = Format$(Scr1.AirLoadingRate.Value, GetTheFormat(Scr1.AirLoadingRate.Value))
    Call Unitted_NumberUpdate(frmPTADScreen1!lblFlowsUnits(6))
  End If

  If HaveValue(scr1.AirToWaterRatio.Value) And HaveValue(scr1.AirDensity.Value) And HaveValue(scr1.WaterDensity.Value) And HaveValue(scr1.AirLoadingRate.Value) Then
    Call PT1LDH2O(scr1.WaterLoadingRate.Value, scr1.AirToWaterRatio.Value, scr1.AirDensity.Value, scr1.WaterDensity.Value, scr1.AirLoadingRate.Value)
    scr1.WaterLoadingRate.ValChanged = True
    scr1.WaterLoadingRate.UserInput = False
    'frmPTADScreen1.lblFlowsLoadings(7).Caption = Format$(Scr1.WaterLoadingRate.Value, GetTheFormat(Scr1.WaterLoadingRate.Value))
    Call Unitted_NumberUpdate(frmPTADScreen1!lblFlowsUnits(7))
  End If

End Sub

Sub GetOndaMassTransferCoefficient()

  If HaveValue(scr1.Packing.CriticalSurfaceTension) And HaveValue(scr1.WaterSurfaceTension.Value) And HaveValue(scr1.WaterLoadingRate.Value) And HaveValue(scr1.Packing.SpecificSurfaceArea) And HaveValue(scr1.WaterViscosity.Value) And HaveValue(scr1.WaterDensity.Value) And HaveValue(scr1.DesignContaminant.LiquidDiffusivity.Value) And HaveValue(scr1.Packing.NominalSize) And HaveValue(scr1.AirLoadingRate.Value) And HaveValue(scr1.AirViscosity.Value) And HaveValue(scr1.AirDensity.Value) And HaveValue(scr1.DesignContaminant.GasDiffusivity.Value) And HaveValue(scr1.DesignContaminant.HenrysConstant.Value) Then
    Call AWCALC(scr1.Packing.OndaWettedSurfaceArea, scr1.Packing.CriticalSurfaceTension, scr1.WaterSurfaceTension.Value, scr1.WaterLoadingRate.Value, scr1.Packing.SpecificSurfaceArea, scr1.WaterViscosity.Value, scr1.WaterDensity.Value, scr1.Onda.ReynoldsNumber, scr1.Onda.FroudeNumber, scr1.Onda.WeberNumber)
    Call ONDAKLPT(scr1.Onda.LiquidPhaseMassTransferCoefficient, scr1.WaterLoadingRate.Value, scr1.Packing.OndaWettedSurfaceArea, scr1.WaterViscosity.Value, scr1.WaterDensity.Value, scr1.DesignContaminant.LiquidDiffusivity.Value, scr1.Packing.SpecificSurfaceArea, scr1.Packing.NominalSize)
    Call ONDAKGPT(scr1.Onda.GasPhaseMassTransferCoefficient, scr1.AirLoadingRate.Value, scr1.Packing.SpecificSurfaceArea, scr1.AirViscosity.Value, scr1.AirDensity.Value, scr1.DesignContaminant.GasDiffusivity.Value, scr1.Packing.NominalSize)
    Call ONDKLAPT(scr1.Onda.OverallMassTransferCoefficient, scr1.Onda.LiquidPhaseMassTransferResistance, scr1.Onda.GasPhaseMassTransferResistance, scr1.Onda.TotalMassTransferResistance, scr1.Onda.LiquidPhaseMassTransferCoefficient, scr1.Packing.OndaWettedSurfaceArea, scr1.Onda.GasPhaseMassTransferCoefficient, scr1.DesignContaminant.HenrysConstant.Value)

    'frmPTADScreen1!lblMassTransfer(0).Caption = Format$(Scr1.Onda.OverallMassTransferCoefficient, GetTheFormat(Scr1.Onda.OverallMassTransferCoefficient))
    Call Unitted_NumberUpdate(frmPTADScreen1!UnitsMassTransfer(0))
    scr1.Onda.ValChanged = True

    Call ShowOndaKLaProperties

  End If

End Sub

Sub GetPrintFileName(PrintFileName As String)
Dim Ctl As Control
Set Ctl = frmPTADScreen1.CommonDialog1

  On Error Resume Next
  'frmPTADScreen1!CMDialog1.DefaultExt = "prt"
  'frmPTADScreen1!CMDialog1.Filter = "Print Files (*.prt)|*.prt"
  'frmPTADScreen1!CMDialog1.DialogTitle = "Print ASAP Results To File"
  'frmPTADScreen1!CMDialog1.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
  'frmPTADScreen1!CMDialog1.Action = 2
  'PrintFileName$ = frmPTADScreen1!CMDialog1.Filename
  Ctl.DefaultExt = "prt"
  Ctl.Filter = "Print Files (*.prt)|*.prt"
  Ctl.DialogTitle = "Print ASAP Results To File"
  Ctl.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
  Ctl.Action = 2
  PrintFileName$ = Ctl.Filename
  If Err = 32755 Then   'Cancel selected by user
    PrintFileName$ = ""
  End If

End Sub

Sub GetTowerAreaAndDiameter()

  If HaveValue(scr1.WaterFlowRate.Value) And HaveValue(scr1.WaterDensity.Value) And HaveValue(scr1.WaterLoadingRate.Value) Then
    Call PT1AREA(scr1.TowerArea.Value, scr1.WaterFlowRate.Value, scr1.WaterDensity.Value, scr1.WaterLoadingRate.Value)
    scr1.TowerArea.ValChanged = True
    scr1.TowerArea.UserInput = False
    'frmPTADScreen1!lblTowerParameters(0).Caption = Format$(Scr1.TowerArea.Value, GetTheFormat(Scr1.TowerArea.Value))
    Call Unitted_NumberUpdate(frmPTADScreen1!lblTowerUnits(0))
  End If

  If HaveValue(scr1.TowerArea.Value) Then
    Call PT1DTOW(scr1.TowerDiameter.Value, scr1.TowerArea.Value)
    scr1.TowerDiameter.ValChanged = True
    scr1.TowerDiameter.UserInput = False
    'frmPTADScreen1!lblTowerParameters(1).Caption = Format$(Scr1.TowerDiameter.Value, GetTheFormat(Scr1.TowerDiameter.Value))
    Call Unitted_NumberUpdate(frmPTADScreen1!lblTowerUnits(1))
  End If

End Sub

Sub GetTowerHeightAndVolume()

  If HaveValue(scr1.AirToWaterRatio.Value) And HaveValue(scr1.DesignContaminant.HenrysConstant.Value) And HaveValue(scr1.DesignContaminant.Influent.Value) And HaveValue(scr1.DesignContaminant.TreatmentObjective.Value) And HaveValue(scr1.WaterFlowRate.Value) And HaveValue(scr1.TowerArea.Value) And HaveValue(scr1.DesignMassTransferCoefficient.Value) Then
    Call GETCSPT(scr1.DesignContaminant.AirWaterInterfaceConcentration, scr1.AirToWaterRatio.Value, scr1.DesignContaminant.HenrysConstant.Value, scr1.DesignContaminant.Influent.Value, scr1.DesignContaminant.TreatmentObjective.Value)
    Call GETHTUPT(scr1.TransferUnitHeight, scr1.WaterFlowRate.Value, scr1.TowerArea.Value, scr1.DesignMassTransferCoefficient.Value)
    Call GETNTUPT(scr1.NumberOfTransferUnits, scr1.DesignContaminant.Influent.Value, scr1.DesignContaminant.TreatmentObjective.Value, scr1.DesignContaminant.AirWaterInterfaceConcentration)
    Call PT1HTOW(scr1.TowerHeight.Value, scr1.TransferUnitHeight, scr1.NumberOfTransferUnits)
    Call PT1TVOL(scr1.TowerVolume.Value, scr1.TowerArea.Value, scr1.TowerHeight.Value)

    'frmPTADScreen1!lblTowerParameters(2).Caption = Format$(Scr1.TowerHeight.Value, GetTheFormat(Scr1.TowerHeight.Value))
    'frmPTADScreen1!lblTowerParameters(3).Caption = Format$(Scr1.TowerVolume.Value, GetTheFormat(Scr1.TowerVolume.Value))
    Call Unitted_NumberUpdate(frmPTADScreen1!lblTowerUnits(2))
    Call Unitted_NumberUpdate(frmPTADScreen1!lblTowerUnits(3))

  End If

End Sub

Sub GetVQmultVQAndAirFlowRate()

  If scr1.MultipleOfMinimumAirToWaterRatio.UserInput = True Then
    Call SpecifiedVQminMultiple
  ElseIf scr1.AirToWaterRatio.UserInput = True Then
    Call SpecifiedAirToWaterRatio
  ElseIf scr1.AirFlowRate.UserInput = True Then
    Call SpecifiedAirFlowRate
  End If

End Sub

Function HaveValue(Value As Double) As Integer

  If Value > 0# Then HaveValue = True Else HaveValue = False

End Function

Sub InitializeAirPressureDrop()

  scr1.AirPressureDrop.Value = 50#
  scr1.AirPressureDrop.UserInput = True
  scr1.AirPressureDrop.ValChanged = True

  'frmPTADScreen1!txtFlowsLoadings(5).Text = Format$(Scr1.AirPressureDrop.Value, GetTheFormat(Scr1.AirPressureDrop.Value))
  Call Unitted_NumberUpdate(frmPTADScreen1!txtFlowsUnits(5))

End Sub

Sub InitializeCalculatedProperties()
Dim i As Integer
    
    'Flow and Loading Properties
 
    frmPTADScreen1.lblFlowsLoadings(1).Caption = "0.0"

    For i = 3 To 4
        frmPTADScreen1.txtFlowsLoadings(i).Text = "0.0"
    Next i

    For i = 6 To 7
        frmPTADScreen1.lblFlowsLoadings(i).Caption = "0.0"
    Next i

    frmPTADScreen1!txtFlowsLoadings(0).Enabled = False
    frmPTADScreen1.lblFlowsLoadings(1).Enabled = False
       
    For i = 2 To 5
        frmPTADScreen1!txtFlowsLoadings(i).Enabled = False
    Next i

    For i = 6 To 7
        frmPTADScreen1!lblFlowsLoadings(i).Enabled = False
    Next i


    'Mass Transfer Properties

    frmPTADScreen1.lblMassTransfer(0).Caption = "0.0"
    frmPTADScreen1.txtMassTransfer(2).Text = "0.0"

    frmPTADScreen1!lblMassTransfer(0).Enabled = False
    For i = 1 To 2
        frmPTADScreen1.txtMassTransfer(i).Enabled = False
    Next i


    'Tower Parameter Properties

    For i = 0 To 3
        frmPTADScreen1!lblTowerParameters(i).Caption = "0.0"
        frmPTADScreen1!lblTowerParameters(i).Enabled = False
    Next i

End Sub

Sub InitializeKLaSafetyFactor()

  scr1.KLaSafetyFactor.Value = 1#
  scr1.KLaSafetyFactor.UserInput = True
  scr1.KLaSafetyFactor.ValChanged = True
  scr1.DesignMassTransferCoefficient.UserInput = False

  frmPTADScreen1!txtMassTransfer(1).Text = Format$(scr1.KLaSafetyFactor.Value, GetTheFormat(scr1.KLaSafetyFactor.Value))

End Sub

Sub InitializePacking()

'*** This subroutine initializes the packing to a default
'*** value.

    Dim i As Integer
    Dim packingname As String

    PackingDatabaseSource = ORIGINALPACKINGDATABASE
    packingname = "Tri-Packs_No.2"

' DEMO MODE CHANGE ::TACK
    If DemoMode% Then
        packingname = "Tri-Packs_No.1"
    End If
' END DEMO CHANGE

    For i = 1 To NumPackingsInDatabase
        If DatabasePacking(i).Name = packingname Then
           scr1.Packing = DatabasePacking(i)
        End If
    Next i

    frmPTADScreen1!lblPackingType.Caption = packingname
    
End Sub

Sub InitializePressureTemperature()
    
    '*****************************************************
    '*                                                   *
    '* Initialize Pressure and Temperature to defaults:  *
    '*                                                   *
    '*  Operating Pressure = 1 atm                       *
    '*  Operating Temperature = 283.15 K                 *
    '*                                                   *
    '*  Note:  Operating Pressure stored as atm but      *
    '*         displayed in Pa.  Operating Temperature   *
    '*         stored as K but displayed in C            *
    '*                                                   *
    '*****************************************************

    scr1.OperatingPressure.Value = 1#
    scr1.OperatingPressure.UserInput = True
    scr1.OperatingPressure.ValChanged = True
    scr1.operatingtemperature.Value = 283.15
    scr1.operatingtemperature.UserInput = True
    scr1.operatingtemperature.ValChanged = True

    frmPTADScreen1!txtOperatingPressure.Text = "101325.0"
    frmPTADScreen1!txtOperatingTemperature.Text = "10.0"

End Sub

Sub InitializeVQminMultiple()

  scr1.MultipleOfMinimumAirToWaterRatio.Value = 3.5
  scr1.MultipleOfMinimumAirToWaterRatio.UserInput = True
  scr1.MultipleOfMinimumAirToWaterRatio.ValChanged = True
  scr1.AirToWaterRatio.UserInput = False
  scr1.AirFlowRate.UserInput = False

  frmPTADScreen1.txtFlowsLoadings(2).Text = Format$(scr1.MultipleOfMinimumAirToWaterRatio.Value, GetTheFormat(scr1.MultipleOfMinimumAirToWaterRatio.Value))

End Sub

Sub InitializeWaterFlowRate()

  scr1.WaterFlowRate.Value = 0.1262 'm3/sec = 2000 gpm
  scr1.WaterFlowRate.UserInput = True
  scr1.WaterFlowRate.ValChanged = True
  frmPTADScreen1.txtFlowsLoadings(0).Text = Format$(scr1.WaterFlowRate.Value, GetTheFormat(scr1.WaterFlowRate.Value))
    
End Sub

Sub KLaOverSpecificationMessage()
Dim msg As String

  msg = "You may only specify one of these two values:" & Chr$(13) & Chr$(13)
  msg = msg + "     KLa Safety Factor" & Chr$(13)
  msg = msg + "     Design Mass Transfer Coefficient" & Chr$(13) & Chr$(13)
  msg = msg + "Either of the two values that was not just specified will be set to zero."
  MsgBox msg, MB_ICONEXCLAMATION, "Overspecification Error"

End Sub

Sub LoadContaminantList()
    Dim FileID As String, msg As String
    Dim Pressure As Double, Temperature As Double
    Dim i As Integer
    Dim NotSpecifiedAtOperatingTemperature As Integer
    Dim NotSpecifiedAtOperatingPressure As Integer

    Call LoadFile(Filename)
    
    If Filename$ <> "" Then
       FileID = ""
       Open Filename$ For Input As #1
       On Error Resume Next
       Input #1, FileID
       If FileID <> CONTAMINANTS_PTAD_FILEID Then
          msg = "Invalid Contaminant File"
          MsgBox msg, 48, "Error"
          Close #1
          Exit Sub
       End If

       'frmListContaminant.ListContaminants.Clear
       frmPTADScreen1!cboSelectCompo.Clear

       i = 0
       NotSpecifiedAtOperatingTemperature = False
       NotSpecifiedAtOperatingPressure = False
       Do Until EOF(1)
          i = i + 1
          Input #1, scr1.Contaminant(i).Pressure, scr1.Contaminant(i).Temperature, scr1.Contaminant(i).Name, scr1.Contaminant(i).MolecularWeight.Value, scr1.Contaminant(i).HenrysConstant.Value, scr1.Contaminant(i).MolarVolume.Value, scr1.Contaminant(i).NormalBoilingPoint.Value, scr1.Contaminant(i).LiquidDiffusivity.Value, scr1.Contaminant(i).GasDiffusivity.Value, scr1.Contaminant(i).Influent.Value, scr1.Contaminant(i).TreatmentObjective.Value
          'frmListContaminant.ListContaminants.AddItem Scr1.Contaminant(i).Name
          frmPTADScreen1!cboSelectCompo.AddItem scr1.Contaminant(i).Name

          If Not NotSpecifiedAtOperatingTemperature Then
             If Abs(scr1.Contaminant(i).Temperature - scr1.operatingtemperature.Value) > TOLERANCE Then
                NotSpecifiedAtOperatingTemperature = True
             End If
          End If
          If Not NotSpecifiedAtOperatingPressure Then
             If Abs(scr1.Contaminant(i).Pressure - scr1.OperatingPressure.Value) > TOLERANCE Then
                NotSpecifiedAtOperatingPressure = True
             End If
          End If

       Loop
       scr1.NumChemical = i
          
       Close #1

       'If frmListContaminant.mnuOptionsManipulateContaminant(1).Enabled = False Then
       '   frmListContaminant.mnuOptionsManipulateContaminant(1).Enabled = True
       '   frmListContaminant.mnuOptionsManipulateContaminant(3).Enabled = True
       '   frmListContaminant.mnuOptionsManipulateContaminant(4).Enabled = True
       '   frmListContaminant.mnuOptionsSave.Enabled = True
       '   frmListContaminant.mnuOptionsView.Enabled = True
       'End If

       'frmListContaminant.ListContaminants.Selected(0) = True

       If NotSpecifiedAtOperatingPressure And NotSpecifiedAtOperatingTemperature Then
          MsgBox "For one or more contaminants, the temperature and pressure at which the contaminant properties are specified differs from the operating temperature and pressure.", MB_ICONINFORMATION, "Warning"
       ElseIf NotSpecifiedAtOperatingTemperature Then
          MsgBox "For one or more contaminants, the temperature at which the contaminant properties are specified differs from the operating temperature.", MB_ICONINFORMATION, "Warning"
       ElseIf NotSpecifiedAtOperatingPressure Then
          MsgBox "For one or more contaminants, the pressure at which the contaminant properties are specified differs from the operating pressure.", MB_ICONINFORMATION, "Warning"
       End If

    End If
          
End Sub

Sub LoadFile(Filename As String)

'    'frmFileSelector.Show 1
'    On Error Resume Next
''    frmListContaminant!CMDialog1.Dir = app.path
'    frmListContaminant!CMDialog1.DefaultExt = "con"
'    frmListContaminant!CMDialog1.Filter = "Contaminant Files (*.con)|*.con"
'    frmListContaminant!CMDialog1.DialogTitle = "Load Contaminants"
'    frmListContaminant!CMDialog1.Flags = OFN_FILEMUSTEXIST Or OFN_PATHMUSTEXIST
'    frmListContaminant!CMDialog1.Action = 1
'    Filename$ = frmListContaminant!CMDialog1.Filename
'    If Err = 32755 Then  'Cancel selected by user
'       Filename$ = ""
'    End If

End Sub

Sub LoadFileScreen1(Filename As String)
Dim Ctl As Control
Set Ctl = frmPTADScreen1.CommonDialog1
  On Error Resume Next
  'frmPTADScreen1!cmdialog1.DefaultExt = "des"
  'frmPTADScreen1!cmdialog1.Filter = "Design Files (*.des)|*.des"
  'frmPTADScreen1!cmdialog1.DialogTitle = "Load Packed Tower Aeration Design File"
  'frmPTADScreen1!cmdialog1.flags = OFN_FILEMUSTEXIST Or OFN_PATHMUSTEXIST
  'frmPTADScreen1!cmdialog1.Action = 1
  'Filename$ = frmPTADScreen1!cmdialog1.Filename
  Ctl.DefaultExt = "des"
  Ctl.Filter = "Design Files (*.des)|*.des"
  Ctl.DialogTitle = "Load Packed Tower Aeration Design File"
  Ctl.flags = OFN_FILEMUSTEXIST Or OFN_PATHMUSTEXIST
  Ctl.Action = 1
  Filename$ = Ctl.Filename
  If Err = 32755 Then   'Cancel selected by user
    Filename$ = ""
  End If

End Sub

Sub loadscreen1(OverrideFilename As String)
Dim FileID As String, msg As String
Dim i As Integer
Dim FoundCurrentPacking As Integer  'Whether packing user specified is currently in the user-modified database or if we have to add it when the database is the user-modified one.
Dim CurrPackingIndex As Integer
ReDim u(10) As String
Dim xu As rec_Units_frmContaminantPropertyEdit

    If (OverrideFilename <> "") Then
      Filename = OverrideFilename
    Else
      If Filename = "TheDefaultCaseScreen1" Then
        Filename = App.Path & "\dbase\default.des"
      Else
        Call LoadFileScreen1(Filename)
      End If
    End If
    
    If Filename$ <> "" Then
       FileID = ""
       Open Filename$ For Input As #1
       On Error Resume Next
       Input #1, FileID
       If FileID <> SCREEN1_PTAD1_FILEID Then
          msg = "Invalid Design File"
          MsgBox msg, 48, "Error"
          Close #1
          Exit Sub
       End If

       frmPTADScreen1!cboSelectCompo.Clear

       Input #1, scr1.OperatingPressure.Value
       frmPTADScreen1!txtOperatingPressure.Text = Format$(scr1.OperatingPressure.Value * 101325# / 1#, "0.00")
       Scr2.OperatingPressure.ValChanged = True

       Input #1, scr1.operatingtemperature.Value
       frmPTADScreen1!txtOperatingTemperature.Text = Format$(scr1.operatingtemperature.Value - 273.15, "0.0")
       Scr2.operatingtemperature.ValChanged = True

       Call CalculateAirWaterProperties

       Input #1, scr1.Packing.Name, scr1.Packing.NominalSize, scr1.Packing.PackingFactor, scr1.Packing.SpecificSurfaceArea, scr1.Packing.CriticalSurfaceTension, scr1.Packing.Material, scr1.Packing.source, scr1.Packing.UserInput, scr1.Packing.SourceDatabase
       frmPTADScreen1!lblPackingType.Caption = scr1.Packing.Name

       If PackingDatabaseSource <> scr1.Packing.SourceDatabase Then
          frmSelectPacking!cboSelectPacking.Clear
          If scr1.Packing.SourceDatabase = ORIGINALPACKINGDATABASE Then
             frmSelectPacking!mnuPackDatabase(0).Checked = True
             frmSelectPacking!mnuPackDatabase(1).Checked = False
             frmSelectPacking!mnuPackDatabaseOptions(0).Enabled = False
          
             For i = 1 To NumPackingsInDatabase
                 frmSelectPacking!cboSelectPacking.AddItem DatabasePacking(i).Name
             Next i
             frmSelectPacking!mnuPackDatabase(3).Enabled = False
          ElseIf scr1.Packing.SourceDatabase = USERMODIFIEDPACKINGDATABASE Then
             frmSelectPacking!mnuPackDatabase(0).Checked = False
             frmSelectPacking!mnuPackDatabase(1).Checked = True
       
             For i = 1 To NumUserPackings
                 frmSelectPacking!cboSelectPacking.AddItem UserPacking(i).Name
             Next i
             frmSelectPacking!mnuPackDatabase(3).Enabled = True
          End If
       End If

       If scr1.Packing.SourceDatabase = USERMODIFIEDPACKINGDATABASE Then
             FoundCurrentPacking = False
             For i = 1 To NumUserPackings
                 If UserPacking(i).Name = scr1.Packing.Name Then
                    FoundCurrentPacking = True
                    CurrPackingIndex = i
                 End If
             Next i

             If FoundCurrentPacking Then
                If scr1.Packing.NominalSize <> UserPacking(CurrPackingIndex).NominalSize Or scr1.Packing.PackingFactor <> UserPacking(CurrPackingIndex).PackingFactor Or scr1.Packing.SpecificSurfaceArea <> UserPacking(CurrPackingIndex).SpecificSurfaceArea Or scr1.Packing.CriticalSurfaceTension <> UserPacking(CurrPackingIndex).CriticalSurfaceTension Or scr1.Packing.Material <> UserPacking(CurrPackingIndex).Material Or scr1.Packing.source <> UserPacking(CurrPackingIndex).source Then
                   msg = "Name of packing to be loaded matches the name "
                   msg = msg + "of a packing in the user-modified packing "
                   msg = msg + "database, but the properties of the two "
                   msg = msg + "packings differ." & Chr$(13) & Chr$(13)
                   msg = msg + "The properties of the packing to be loaded "
                   msg = msg + "will overwrite the properties currently "
                   msg = msg + "in the user-modified packing database."
                   MsgBox msg, MB_ICONEXCLAMATION, "Name of Packing Conflict"
                   UserPacking(CurrPackingIndex) = scr1.Packing

                End If
             End If

             If Not FoundCurrentPacking Then
                NumUserPackings = NumUserPackings + 1
                UserPacking(NumUserPackings) = scr1.Packing
                frmSelectPacking!cboSelectPacking.AddItem scr1.Packing.Name
                frmSelectPacking!cboSelectPacking.ListIndex = NumUserPackings - 1
             End If
       End If

       Input #1, scr1.NumChemical
       For i = 1 To scr1.NumChemical
           Input #1, scr1.Contaminant(i).Pressure, scr1.Contaminant(i).Temperature, scr1.Contaminant(i).Name, scr1.Contaminant(i).MolecularWeight.Value, scr1.Contaminant(i).HenrysConstant.Value, scr1.Contaminant(i).MolarVolume.Value, scr1.Contaminant(i).NormalBoilingPoint.Value, scr1.Contaminant(i).LiquidDiffusivity.Value, scr1.Contaminant(i).GasDiffusivity.Value, scr1.Contaminant(i).Influent.Value, scr1.Contaminant(i).TreatmentObjective.Value
           frmPTADScreen1!cboSelectCompo.AddItem scr1.Contaminant(i).Name
       Next i

       Input #1, scr1.DesignContaminant.Name

       Call SetDesignContaminantEnabled(CInt(frmPTADScreen1!cboSelectCompo.ListCount))

       frmPTADScreen1.cboSelectCompo.ListIndex = 0
       For i = 1 To scr1.NumChemical
           If scr1.DesignContaminant.Name = scr1.Contaminant(i).Name Then
              scr1.DesignContaminant = scr1.Contaminant(i)
              Exit For
           End If
       Next i

       Input #1, scr1.WaterFlowRate.Value
       frmPTADScreen1!txtFlowsLoadings(0).Text = Trim$(Str$(scr1.WaterFlowRate.Value))

       Input #1, scr1.MultipleOfMinimumAirToWaterRatio.Value, scr1.MultipleOfMinimumAirToWaterRatio.UserInput
       Input #1, scr1.AirToWaterRatio.Value, scr1.AirToWaterRatio.UserInput
       Input #1, scr1.AirFlowRate.Value, scr1.AirFlowRate.UserInput
       If scr1.MultipleOfMinimumAirToWaterRatio.UserInput = True Then
          frmPTADScreen1!txtFlowsLoadings(2).Text = Format$(scr1.MultipleOfMinimumAirToWaterRatio.Value, GetTheFormat(scr1.MultipleOfMinimumAirToWaterRatio.Value))
       ElseIf scr1.AirToWaterRatio.UserInput = True Then
          frmPTADScreen1!txtFlowsLoadings(3).Text = Format$(scr1.AirToWaterRatio.Value, GetTheFormat(scr1.AirToWaterRatio.Value))
       ElseIf scr1.AirFlowRate.UserInput = True Then
          frmPTADScreen1!txtFlowsLoadings(4).Text = Format$(scr1.AirFlowRate.Value, GetTheFormat(scr1.AirFlowRate.Value))
       End If

       Input #1, scr1.AirPressureDrop.Value
       frmPTADScreen1!txtFlowsLoadings(5).Text = Format$(scr1.AirPressureDrop.Value, GetTheFormat(scr1.AirPressureDrop.Value))

       Call GetVQmultVQAndAirFlowRate
       Call GetLoadings


       Input #1, scr1.KLaSafetyFactor.Value, scr1.KLaSafetyFactor.UserInput
       Input #1, scr1.DesignMassTransferCoefficient.Value, scr1.DesignMassTransferCoefficient.UserInput
       If scr1.KLaSafetyFactor.UserInput = True Then
          frmPTADScreen1!txtMassTransfer(1).Text = Format$(scr1.KLaSafetyFactor.Value, GetTheFormat(scr1.KLaSafetyFactor.Value))
       ElseIf scr1.DesignMassTransferCoefficient.UserInput = True Then
          frmPTADScreen1!txtMassTransfer(2).Text = Format$(scr1.DesignMassTransferCoefficient.Value, GetTheFormat(scr1.DesignMassTransferCoefficient.Value))
       End If

       'Input the units of this screen.
       Input #1, u(1), u(2)
       Call SetUnits(frmPTADScreen1!txtPUnits, u(1))
       Call SetUnits(frmPTADScreen1!txtTUnits, u(2))
       
       Input #1, u(1), u(2), u(3), u(4), u(5)
       Call SetUnits(frmPTADScreen1!txtFlowsUnits(0), u(1))
       Call SetUnits(frmPTADScreen1!txtFlowsUnits(4), u(2))
       Call SetUnits(frmPTADScreen1!txtFlowsUnits(5), u(3))
       Call SetUnits(frmPTADScreen1!lblFlowsUnits(6), u(4))
       Call SetUnits(frmPTADScreen1!lblFlowsUnits(7), u(5))
       
       Input #1, u(1), u(2)
       Call SetUnits(frmPTADScreen1!UnitsMassTransfer(0), u(1))
       Call SetUnits(frmPTADScreen1!UnitsMassTransfer(2), u(2))
       
       Input #1, u(1), u(2), u(3), u(4)
       Call SetUnits(frmPTADScreen1!lblTowerUnits(0), u(1))
       Call SetUnits(frmPTADScreen1!lblTowerUnits(1), u(2))
       Call SetUnits(frmPTADScreen1!lblTowerUnits(2), u(3))
       Call SetUnits(frmPTADScreen1!lblTowerUnits(3), u(4))
       
       'Input the units of frmContaminantPropertyEdit.
       xu = Units_frmContaminantPropertyEdit
       Input #1, xu.UnitsProp(0), xu.UnitsProp(2), xu.UnitsProp(3), xu.UnitsProp(4), xu.UnitsProp(5)
       Input #1, xu.UnitsConc(0), xu.UnitsConc(1)
       Units_frmContaminantPropertyEdit = xu
       
       Close #1

       Call GetTowerAreaAndDiameter
       Call GetOndaMassTransferCoefficient
       Call GetDesignKLaOrKLaSafetyFactor
       Call GetTowerHeightAndVolume

       frmPTADScreen1.Caption = "Packed Tower Aeration - Design Mode"
       If Right$(Filename, 11) = "default.des" Or Right$(Filename, 11) = "default.rat" Then
          frmPTADScreen1.Caption = frmPTADScreen1.Caption & " (" & "untitled.des" & ")"
       Else
          frmPTADScreen1.Caption = frmPTADScreen1.Caption & " (" & Filename & ")"
       End If

    End If

End Sub

Sub NewPagePTADScreen1()

  Printer.NewPage
  Printer.FontSize = 12
  Printer.FontBold = True
  Printer.Print "Packed Tower Aeration - Design Mode (continued)"
  Printer.Print
  Printer.Print
  Printer.FontSize = 10
  Printer.FontBold = False

End Sub

Sub NumberCheck(KeyAscii As Integer)
    
  If (KeyAscii > Asc("9") Or KeyAscii < Asc("0")) And KeyAscii <> Asc(".") And KeyAscii <> 8 And KeyAscii <> Asc("E") And KeyAscii <> Asc("e") And KeyAscii <> Asc("-") Then
    KeyAscii = 0
    Beep
  End If

End Sub

Sub OptimizeDesignContaminant()
    Dim i As Integer
    Dim msg As String
    ReDim InfluentConcentrations(1 To MAXCHEMICAL) As Double
    ReDim TreatmentObjectives(1 To MAXCHEMICAL) As Double
    ReDim HenrysConstants(1 To MAXCHEMICAL) As Double
    ReDim LiquidDiffusivities(1 To MAXCHEMICAL) As Double
    ReDim GasDiffusivities(1 To MAXCHEMICAL) As Double
    ReDim EffluentConcentrations(1 To MAXCHEMICAL) As Double




       'Create the one-dimensional arrays that will be
       'passed to OPTMAL
       For i = 1 To scr1.NumChemical
           InfluentConcentrations(i) = scr1.Contaminant(i).Influent.Value
           TreatmentObjectives(i) = scr1.Contaminant(i).TreatmentObjective.Value
           HenrysConstants(i) = scr1.Contaminant(i).HenrysConstant.Value
           LiquidDiffusivities(i) = scr1.Contaminant(i).LiquidDiffusivity.Value
           GasDiffusivities(i) = scr1.Contaminant(i).GasDiffusivity.Value
       Next i

       Call OPTMAL(scr1.WaterDensity.Value, scr1.WaterViscosity.Value, scr1.WaterSurfaceTension.Value, scr1.AirDensity.Value, scr1.AirViscosity.Value, scr1.WaterFlowRate.Value, scr1.Packing.NominalSize, scr1.Packing.PackingFactor, scr1.Packing.CriticalSurfaceTension, scr1.Packing.SpecificSurfaceArea, InfluentConcentrations(1), TreatmentObjectives(1), HenrysConstants(1), scr1.NumChemical, scr1.AirPressureDrop.Value, LiquidDiffusivities(1), GasDiffusivities(1), scr1.KLaSafetyFactor.Value, scr1.ID_OptimalDesignContaminant, scr1.MultipleOfMinimumAirToWaterRatio.Value, EffluentConcentrations(1), ErrorFlag)

       'Copy Effluent Concentrations just calculated into
       'the Scr1 Data Structure
       For i = 1 To scr1.NumChemical
           scr1.Contaminant(i).Effluent.Value = EffluentConcentrations(i)
       Next i

       frmPTADScreen1!txtFlowsLoadings(2).Text = Format$(scr1.MultipleOfMinimumAirToWaterRatio.Value, GetTheFormat(scr1.MultipleOfMinimumAirToWaterRatio.Value))
       scr1.MultipleOfMinimumAirToWaterRatio.UserInput = True
       scr1.AirToWaterRatio.UserInput = False
       scr1.AirFlowRate.UserInput = False


       'Show the effluent concentrations for the compounds
       'on the screen.

       If ErrorFlag = 0 Then
          Call ShowOptimizationConcentrations
       Else
          msg = "Could not converge in the optimization "
          msg = "routine.  Design contaminant chosen "
          msg = "arbitrarily between the contaminants "
          msg = "causing this to occur.  Effluent profile "
          msg = "showing these results will appear next."
          MsgBox msg, MB_ICONEXCLAMATION, "Optimization Error"
          Call ShowOptimizationConcentrations
       End If


       'Calculate values on the screen with the new design
       'contaminant


       frmPTADScreen1!cboSelectCompo.ListIndex = scr1.ID_OptimalDesignContaminant - 1
       frmPTADScreen1!cboSelectCompo.SetFocus

End Sub

Sub PrintPTADScreen1()
    Dim CalculatedPower As Integer

    On Error GoTo PrinterError

          Printer.ScaleLeft = -1440
          Printer.ScaleTop = -1440
          Printer.CurrentX = 0
          Printer.CurrentY = 0
          Printer.FontSize = 12
          Printer.FontBold = True
          Printer.Print "Packed Tower Aeration - Design Mode"
          Printer.Print
          Printer.Print
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          Printer.Print "Operating Pressure (" & frmPTADScreen1!txtPUnits; Tab(VALUE_TAB); frmPTADScreen1!txtOperatingPressure.Text
          Printer.Print "Operating Temperature (" & frmPTADScreen1!txtTUnits; Tab(VALUE_TAB); frmPTADScreen1!txtOperatingTemperature.Text
          Printer.Print frmAirWaterProperties!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(0).Text
          Printer.Print frmAirWaterProperties!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(1).Text
          Printer.Print frmAirWaterProperties!lblAirWaterProperties(2).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(2).Text
          Printer.Print frmAirWaterProperties!lblAirWaterProperties(3).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(3).Text
          Printer.Print frmAirWaterProperties!lblAirWaterProperties(4).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(4).Text
          Printer.Print
          CurrentScreen = scr1
          Printer.Print "Packing Name:  "; Trim$(CurrentScreen.Packing.Name)
          Printer.Print "Packing "; frmSelectPacking!lblPackingProperties(1).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.NominalSize, GetTheFormat(CurrentScreen.Packing.NominalSize))
          Printer.Print frmSelectPacking!lblPackingProperties(2).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.PackingFactor, GetTheFormat(CurrentScreen.Packing.PackingFactor))
          Printer.Print "Packing "; frmSelectPacking!lblPackingProperties(3).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.SpecificSurfaceArea, GetTheFormat(CurrentScreen.Packing.SpecificSurfaceArea))
          Printer.Print "Packing "; frmSelectPacking!lblPackingProperties(4).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.CriticalSurfaceTension, GetTheFormat(CurrentScreen.Packing.CriticalSurfaceTension))
          Printer.Print "Packing "; frmSelectPacking!lblPackingProperties(5).Caption; Tab(VALUE_TAB); Trim$(CurrentScreen.Packing.Material)
          Printer.Print "Packing "; frmSelectPacking!lblPackingProperties(6).Caption; Tab(VALUE_TAB); Trim$(CurrentScreen.Packing.source)
          Printer.Print "Source of This Packing Data in Program"; Tab(VALUE_TAB);
          If PackingDatabaseSource = ORIGINALPACKINGDATABASE Then
             Printer.Print "Original Packing Database"
          Else
             Printer.Print "User Input"
          End If
          
          Printer.Print
          Printer.Print "Design Contaminant:  "; scr1.DesignContaminant.Name
          Printer.Print "Molecular Weight"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.MolecularWeight.Value, "0.00")
          Printer.Print "Henry's Constant"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.HenrysConstant.Value, GetTheFormat(scr1.DesignContaminant.HenrysConstant.Value))
          Printer.Print "Molar Volume"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.MolarVolume.Value, GetTheFormat(scr1.DesignContaminant.MolarVolume.Value))
          Printer.Print "Normal Boiling Point"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.NormalBoilingPoint.Value - 273.15, GetTheFormat(scr1.DesignContaminant.NormalBoilingPoint.Value - 273.15))
          Printer.Print "Liquid Diffusivity"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.LiquidDiffusivity.Value, GetTheFormat(scr1.DesignContaminant.LiquidDiffusivity.Value))
          Printer.Print "Gas Diffusivity"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.GasDiffusivity.Value, GetTheFormat(scr1.DesignContaminant.GasDiffusivity.Value))
          Printer.Print "Influent Concentration (" & Chr$(181) & "g/L)"; Tab(VALUE_TAB); frmPTADScreen1!lblDesignConcentrationValue(0).Caption
          Printer.Print "Treatment Objective (" & Chr$(181) & "g/L)"; Tab(VALUE_TAB); frmPTADScreen1!lblDesignConcentrationValue(1).Caption
          Printer.Print "Percent Removal"; Tab(VALUE_TAB); frmPTADScreen1!lblDesignConcentrationValue(2).Caption
          Printer.Print
          Printer.Print frmPTADScreen1!lblFlowsLoadingsLabel(0).Caption & " (" & frmPTADScreen1!txtFlowsUnits(0) & ")"; Tab(VALUE_TAB); frmPTADScreen1!txtFlowsLoadings(0).Text
          Printer.Print frmPTADScreen1!lblFlowsLoadingsLabel(1).Caption & " (vol/vol)"; Tab(VALUE_TAB); frmPTADScreen1!lblFlowsLoadings(1).Caption
          Printer.Print frmPTADScreen1!lblFlowsLoadingsLabel(2).Caption & " (-)"; Tab(VALUE_TAB); frmPTADScreen1!txtFlowsLoadings(2).Text
          Printer.Print frmPTADScreen1!lblFlowsLoadingsLabel(3).Caption & " (vol/vol)"; Tab(VALUE_TAB); frmPTADScreen1!txtFlowsLoadings(3).Text
          Printer.Print frmPTADScreen1!lblFlowsLoadingsLabel(4).Caption & " (" & frmPTADScreen1!txtFlowsUnits(4) & ")"; Tab(VALUE_TAB); frmPTADScreen1!txtFlowsLoadings(4).Text
          Printer.Print frmPTADScreen1!lblFlowsLoadingsLabel(5).Caption & " (" & frmPTADScreen1!txtFlowsUnits(5) & ")"; Tab(VALUE_TAB); frmPTADScreen1!txtFlowsLoadings(5).Text
          Printer.Print frmPTADScreen1!lblFlowsLoadingsLabel(6).Caption & " (" & frmPTADScreen1!lblFlowsUnits(6) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblFlowsLoadings(6).Caption
          Printer.Print frmPTADScreen1!lblFlowsLoadingsLabel(7).Caption & " (" & frmPTADScreen1!lblFlowsUnits(7) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblFlowsLoadings(7).Caption
          Printer.Print
          Printer.Print frmShowOndaKLaProperties!lblOndaPropertiesLabel(0).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(0).Caption
          Printer.Print frmShowOndaKLaProperties!lblOndaPropertiesLabel(1).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(1).Caption
          Printer.Print frmShowOndaKLaProperties!lblOndaPropertiesLabel(2).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(2).Caption
          Printer.Print frmShowOndaKLaProperties!lblOndaPropertiesLabel(3).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(3).Caption
          Printer.Print frmShowOndaKLaProperties!lblOndaPropertiesLabel(4).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(4).Caption
          Printer.Print frmShowOndaKLaProperties!lblOndaPropertiesLabel(5).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(5).Caption
          Printer.Print frmShowOndaKLaProperties!lblOndaPropertiesLabel(6).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(6).Caption
          Printer.Print frmShowOndaKLaProperties!lblOndaPropertiesLabel(7).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(7).Caption
          Printer.Print frmShowOndaKLaProperties!lblOndaPropertiesLabel(8).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(8).Caption
          Printer.Print frmShowOndaKLaProperties!lblOndaPropertiesLabel(9).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(9).Caption
          Printer.Print frmPTADScreen1!lblMassTransferLabel(1).Caption & " (-)"; Tab(VALUE_TAB); frmPTADScreen1!txtMassTransfer(1).Text
          Printer.Print frmPTADScreen1!lblMassTransferLabel(2).Caption & " (" & frmPTADScreen1!UnitsMassTransfer(2) & ")"; Tab(VALUE_TAB); frmPTADScreen1!txtMassTransfer(2).Text
          Printer.Print
          Printer.Print frmPTADScreen1!lblTowerParametersLabel(0).Caption & " (" & frmPTADScreen1!lblTowerUnits(0) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblTowerParameters(0).Caption
          Printer.Print frmPTADScreen1!lblTowerParametersLabel(1).Caption & " (" & frmPTADScreen1!lblTowerUnits(1) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblTowerParameters(1).Caption
          Printer.Print "Conc. of Design Contaminant at Air-Water Interface (" & Chr$(181) & "g/L)"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.AirWaterInterfaceConcentration, GetTheFormat(scr1.DesignContaminant.AirWaterInterfaceConcentration))
          Printer.Print "Height of a Transfer Unit (m)"; Tab(VALUE_TAB); Format$(scr1.TransferUnitHeight, GetTheFormat(scr1.TransferUnitHeight))
          Printer.Print "Number of Transfer Units (-)"; Tab(VALUE_TAB); Format$(scr1.NumberOfTransferUnits, GetTheFormat(scr1.NumberOfTransferUnits))
          Printer.Print frmPTADScreen1!lblTowerParametersLabel(2).Caption & " (" & frmPTADScreen1!lblTowerUnits(2) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblTowerParameters(2).Caption
          Printer.Print frmPTADScreen1!lblTowerParametersLabel(3).Caption & " (" & frmPTADScreen1!lblTowerUnits(3) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblTowerParameters(3).Caption
          Call NewPagePTADScreen1
          Printer.FontBold = True
          Call SetPowerPTADScreen1(CalculatedPower)
          Printer.Print "Power Calculation:"
          Printer.FontUnderline = True
          Printer.Print
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.FontBold = False
          Printer.FontUnderline = False
          Printer.Print
          Printer.Print frmPower!lblPowerLabel(0).Caption; Tab(VALUE_TAB); frmPower!txtPower(0).Text
          Printer.Print frmPower!lblPowerLabel(1).Caption; Tab(VALUE_TAB); frmPower!txtPower(1).Text
          Printer.Print frmPower!lblPowerLabel(2).Caption; Tab(VALUE_TAB); frmPower!lblPower(2).Caption
          Printer.Print frmPower!lblPowerLabel(3).Caption; Tab(VALUE_TAB); frmPower!txtPower(3).Text
          Printer.Print frmPower!lblPowerLabel(4).Caption; Tab(VALUE_TAB); frmPower!lblPower(4).Caption
          Printer.Print frmPower!lblPowerLabel(5).Caption; Tab(VALUE_TAB); frmPower!lblPower(5).Caption
          
          Printer.EndDoc

    Exit Sub

PrinterError:
    MsgBox error$(Err)
    Resume ExitPrint:

ExitPrint:

End Sub

Sub PrintPTADScreen1ToFile()
    Dim CalculatedPower As Integer

        Call GetPrintFileName(PrintFileName)
        If PrintFileName$ = "" Then Exit Sub

        Open PrintFileName$ For Output As #1

          Print #1, "Packed Tower Aeration - Design Mode"
          Print #1,
          Print #1,
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          Print #1,
          Print #1, "Operating Pressure (" & frmPTADScreen1!txtPUnits; Tab(VALUE_TAB); frmPTADScreen1!txtOperatingPressure.Text
          Print #1, "Operating Temperature (" & frmPTADScreen1!txtTUnits; Tab(VALUE_TAB); frmPTADScreen1!txtOperatingTemperature.Text
          Print #1, frmAirWaterProperties!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(0).Text
          Print #1, frmAirWaterProperties!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(1).Text
          Print #1, frmAirWaterProperties!lblAirWaterProperties(2).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(2).Text
          Print #1, frmAirWaterProperties!lblAirWaterProperties(3).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(3).Text
          Print #1, frmAirWaterProperties!lblAirWaterProperties(4).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(4).Text
          Print #1,
          CurrentScreen = scr1
          Print #1, "Packing Name:  "; Trim$(CurrentScreen.Packing.Name)
          Print #1, "Packing "; frmSelectPacking!lblPackingProperties(1).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.NominalSize, GetTheFormat(CurrentScreen.Packing.NominalSize))
          Print #1, frmSelectPacking!lblPackingProperties(2).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.PackingFactor, GetTheFormat(CurrentScreen.Packing.PackingFactor))
          Print #1, "Packing "; frmSelectPacking!lblPackingProperties(3).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.SpecificSurfaceArea, GetTheFormat(CurrentScreen.Packing.SpecificSurfaceArea))
          Print #1, "Packing "; frmSelectPacking!lblPackingProperties(4).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.CriticalSurfaceTension, GetTheFormat(CurrentScreen.Packing.CriticalSurfaceTension))
          Print #1, "Packing "; frmSelectPacking!lblPackingProperties(5).Caption; Tab(VALUE_TAB); Trim$(CurrentScreen.Packing.Material)
          Print #1, "Packing "; frmSelectPacking!lblPackingProperties(6).Caption; Tab(VALUE_TAB); Trim$(CurrentScreen.Packing.source)
          Print #1, "Source of This Packing Data in Program"; Tab(VALUE_TAB);
          If PackingDatabaseSource = ORIGINALPACKINGDATABASE Then
             Print #1, "Original Packing Database"
          Else
             Print #1, "User Input"
          End If
          
          Print #1,
          Print #1, "Design Contaminant:  "; scr1.DesignContaminant.Name
          Print #1, "Molecular Weight"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.MolecularWeight.Value, "0.00")
          Print #1, "Henry's Constant"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.HenrysConstant.Value, GetTheFormat(scr1.DesignContaminant.HenrysConstant.Value))
          Print #1, "Molar Volume"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.MolarVolume.Value, GetTheFormat(scr1.DesignContaminant.MolarVolume.Value))
          Print #1, "Normal Boiling Point"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.NormalBoilingPoint.Value - 273.15, GetTheFormat(scr1.DesignContaminant.NormalBoilingPoint.Value - 273.15))
          Print #1, "Liquid Diffusivity"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.LiquidDiffusivity.Value, GetTheFormat(scr1.DesignContaminant.LiquidDiffusivity.Value))
          Print #1, "Gas Diffusivity"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.GasDiffusivity.Value, GetTheFormat(scr1.DesignContaminant.GasDiffusivity.Value))
          Print #1, "Influent Concentration (" & Chr$(181) & "g/L)"; Tab(VALUE_TAB); frmPTADScreen1!lblDesignConcentrationValue(0).Caption
          Print #1, "Treatment Objective (" & Chr$(181) & "g/L)"; Tab(VALUE_TAB); frmPTADScreen1!lblDesignConcentrationValue(1).Caption
          Print #1, "Percent Removal"; Tab(VALUE_TAB); frmPTADScreen1!lblDesignConcentrationValue(2).Caption
          Print #1,
          Print #1, frmPTADScreen1!lblFlowsLoadingsLabel(0).Caption & " (" & frmPTADScreen1!txtFlowsUnits(0) & ")"; Tab(VALUE_TAB); frmPTADScreen1!txtFlowsLoadings(0).Text
          Print #1, frmPTADScreen1!lblFlowsLoadingsLabel(1).Caption & " (vol/vol)"; Tab(VALUE_TAB); frmPTADScreen1!lblFlowsLoadings(1).Caption
          Print #1, frmPTADScreen1!lblFlowsLoadingsLabel(2).Caption & " (-)"; Tab(VALUE_TAB); frmPTADScreen1!txtFlowsLoadings(2).Text
          Print #1, frmPTADScreen1!lblFlowsLoadingsLabel(3).Caption & " (vol/vol)"; Tab(VALUE_TAB); frmPTADScreen1!txtFlowsLoadings(3).Text
          Print #1, frmPTADScreen1!lblFlowsLoadingsLabel(4).Caption & " (" & frmPTADScreen1!txtFlowsUnits(4) & ")"; Tab(VALUE_TAB); frmPTADScreen1!txtFlowsLoadings(4).Text
          Print #1, frmPTADScreen1!lblFlowsLoadingsLabel(5).Caption & " (" & frmPTADScreen1!txtFlowsUnits(5) & ")"; Tab(VALUE_TAB); frmPTADScreen1!txtFlowsLoadings(5).Text
          Print #1, frmPTADScreen1!lblFlowsLoadingsLabel(6).Caption & " (" & frmPTADScreen1!lblFlowsUnits(6) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblFlowsLoadings(6).Caption
          Print #1, frmPTADScreen1!lblFlowsLoadingsLabel(7).Caption & " (" & frmPTADScreen1!lblFlowsUnits(7) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblFlowsLoadings(7).Caption
          Print #1,
          Print #1, frmShowOndaKLaProperties!lblOndaPropertiesLabel(0).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(0).Caption
          Print #1, frmShowOndaKLaProperties!lblOndaPropertiesLabel(1).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(1).Caption
          Print #1, frmShowOndaKLaProperties!lblOndaPropertiesLabel(2).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(2).Caption
          Print #1, frmShowOndaKLaProperties!lblOndaPropertiesLabel(3).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(3).Caption
          Print #1, frmShowOndaKLaProperties!lblOndaPropertiesLabel(4).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(4).Caption
          Print #1, frmShowOndaKLaProperties!lblOndaPropertiesLabel(5).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(5).Caption
          Print #1, frmShowOndaKLaProperties!lblOndaPropertiesLabel(6).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(6).Caption
          Print #1, frmShowOndaKLaProperties!lblOndaPropertiesLabel(7).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(7).Caption
          Print #1, frmShowOndaKLaProperties!lblOndaPropertiesLabel(8).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(8).Caption
          Print #1, frmShowOndaKLaProperties!lblOndaPropertiesLabel(9).Caption; Tab(VALUE_TAB); frmShowOndaKLaProperties!lblOndaProperties(9).Caption
          Print #1, frmPTADScreen1!lblMassTransferLabel(1).Caption & " (-)"; Tab(VALUE_TAB); frmPTADScreen1!txtMassTransfer(1).Text
          Print #1, frmPTADScreen1!lblMassTransferLabel(2).Caption & " (" & frmPTADScreen1!UnitsMassTransfer(2) & ")"; Tab(VALUE_TAB); frmPTADScreen1!txtMassTransfer(2).Text
          Printer.Print
          Print #1, frmPTADScreen1!lblTowerParametersLabel(0).Caption & " (" & frmPTADScreen1!lblTowerUnits(0) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblTowerParameters(0).Caption
          Print #1, frmPTADScreen1!lblTowerParametersLabel(1).Caption & " (" & frmPTADScreen1!lblTowerUnits(1) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblTowerParameters(1).Caption
          Printer.Print "Conc. of Design Contaminant at Air-Water Interface (" & Chr$(181) & "g/L)"; Tab(VALUE_TAB); Format$(scr1.DesignContaminant.AirWaterInterfaceConcentration, GetTheFormat(scr1.DesignContaminant.AirWaterInterfaceConcentration))
          Printer.Print "Height of a Transfer Unit (m)"; Tab(VALUE_TAB); Format$(scr1.TransferUnitHeight, GetTheFormat(scr1.TransferUnitHeight))
          Printer.Print "Number of Transfer Units (-)"; Tab(VALUE_TAB); Format$(scr1.NumberOfTransferUnits, GetTheFormat(scr1.NumberOfTransferUnits))
          Print #1, frmPTADScreen1!lblTowerParametersLabel(2).Caption & " (" & frmPTADScreen1!lblTowerUnits(2) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblTowerParameters(2).Caption
          Print #1, frmPTADScreen1!lblTowerParametersLabel(3).Caption & " (" & frmPTADScreen1!lblTowerUnits(3) & ")"; Tab(VALUE_TAB); frmPTADScreen1!lblTowerParameters(3).Caption
          Print #1,
          Print #1,
          Call SetPowerPTADScreen1(CalculatedPower)
          Print #1, "Power Calculation:"
          Print #1,
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          Print #1,
          Print #1, frmPower!lblPowerLabel(0).Caption; Tab(VALUE_TAB); frmPower!txtPower(0).Text
          Print #1, frmPower!lblPowerLabel(1).Caption; Tab(VALUE_TAB); frmPower!txtPower(1).Text
          Print #1, frmPower!lblPowerLabel(2).Caption; Tab(VALUE_TAB); frmPower!lblPower(2).Caption
          Print #1, frmPower!lblPowerLabel(3).Caption; Tab(VALUE_TAB); frmPower!txtPower(3).Text
          Print #1, frmPower!lblPowerLabel(4).Caption; Tab(VALUE_TAB); frmPower!lblPower(4).Caption
          Print #1, frmPower!lblPowerLabel(5).Caption; Tab(VALUE_TAB); frmPower!lblPower(5).Caption
          
          Close #1

    Exit Sub

End Sub

Sub ResetVariables()

'*** This subroutine will reset calculated values to 0.0 and
'*** specified values on the right side of the screen to
'*** their defaults when the user empties the contaminant
'*** list

    'Initialize value for Water Flow Rate
    'Call InitializeWaterFlowRate

    'Initialize value for Multiple of Minimum Air to Water Ratio
    Call InitializeVQminMultiple

    'Initialize Value for Air Pressure Drop
    'Call InitializeAirPressureDrop

    'Initialize Value for KLaSafetyFactor
    'Call InitializeKLaSafetyFactor
    If scr1.KLaSafetyFactor.UserInput = False Then
       scr1.KLaSafetyFactor.UserInput = True
       scr1.KLaSafetyFactor.Value = 1#
       frmPTADScreen1!txtMassTransfer(1).Text = "1.0"
    End If

    'Initialize calculated properties text boxes to 0
    'and disabled
    scr1.TowerVolume.Value = -1#
    Call InitializeCalculatedProperties

End Sub

Sub SaveContaminantList()
    Dim FileID As String
    Dim i As Integer

    Call SaveFile(Filename)

    If Filename$ <> "" Then
       FileID = CONTAMINANTS_PTAD_FILEID
       Open Filename$ For Output As #1
       
       Write #1, FileID
      
       For i = 1 To scr1.NumChemical
           Write #1, scr1.Contaminant(i).Pressure, scr1.Contaminant(i).Temperature, scr1.Contaminant(i).Name, scr1.Contaminant(i).MolecularWeight.Value, scr1.Contaminant(i).HenrysConstant.Value, scr1.Contaminant(i).MolarVolume.Value, scr1.Contaminant(i).NormalBoilingPoint.Value, scr1.Contaminant(i).LiquidDiffusivity.Value, scr1.Contaminant(i).GasDiffusivity.Value, scr1.Contaminant(i).Influent.Value, scr1.Contaminant(i).TreatmentObjective.Value
       Next i

       Close #1

    End If


End Sub

Sub SaveFile(Filename As String)
    
    'On Error Resume Next
    'frmListContaminant!CMDialog1.DefaultExt = "con"
    'frmListContaminant!CMDialog1.Filter = "Contaminant Files (*.con)|*.con"
    'frmListContaminant!CMDialog1.DialogTitle = "Save Contaminants"
    'frmListContaminant!CMDialog1.Flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
    'frmListContaminant!CMDialog1.Action = 2
    'Filename$ = frmListContaminant!CMDialog1.Filename
    'If Err = 32755 Then   'Cancel selected by user
    '   Filename$ = ""
    'End If

End Sub

Sub savefilescreen1(Filename As String)
Dim Ctl As Control
Set Ctl = frmPTADScreen1.CommonDialog1

    On Error Resume Next
    'frmPTADScreen1!cmdialog1.DefaultExt = "des"
    'frmPTADScreen1!cmdialog1.Filter = "Design Files (*.des)|*.des"
    'frmPTADScreen1!cmdialog1.DialogTitle = "Save Packed Tower Aeration Design File"
    'frmPTADScreen1!cmdialog1.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
    'frmPTADScreen1!cmdialog1.Action = 2
    'Filename$ = frmPTADScreen1!cmdialog1.Filename
    Ctl.DefaultExt = "des"
    Ctl.Filter = "Design Files (*.des)|*.des"
    Ctl.DialogTitle = "Save Packed Tower Aeration Design File"
    Ctl.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
    Ctl.Action = 2
    Filename$ = Ctl.Filename
    If Err = 32755 Then   'Cancel selected by user
       Filename$ = ""
    End If

End Sub

Sub SaveScreen1()
Dim FileID As String
Dim i As Integer
Dim xu As rec_Units_frmContaminantPropertyEdit

    If Right$(frmPTADScreen1.Caption, 14) = "(untitled.des)" Then
       Call savefilescreen1(Filename)
    End If

    If Filename$ <> "" Then
       FileID = SCREEN1_PTAD1_FILEID
       Open Filename$ For Output As #1
       
       Write #1, FileID
      
       Write #1, scr1.OperatingPressure.Value
       Write #1, scr1.operatingtemperature.Value
       Write #1, scr1.Packing.Name, scr1.Packing.NominalSize, scr1.Packing.PackingFactor, scr1.Packing.SpecificSurfaceArea, scr1.Packing.CriticalSurfaceTension, scr1.Packing.Material, scr1.Packing.source, scr1.Packing.UserInput, scr1.Packing.SourceDatabase

       Write #1, scr1.NumChemical
       For i = 1 To scr1.NumChemical
           Write #1, scr1.Contaminant(i).Pressure, scr1.Contaminant(i).Temperature, scr1.Contaminant(i).Name, scr1.Contaminant(i).MolecularWeight.Value, scr1.Contaminant(i).HenrysConstant.Value, scr1.Contaminant(i).MolarVolume.Value, scr1.Contaminant(i).NormalBoilingPoint.Value, scr1.Contaminant(i).LiquidDiffusivity.Value, scr1.Contaminant(i).GasDiffusivity.Value, scr1.Contaminant(i).Influent.Value, scr1.Contaminant(i).TreatmentObjective.Value
       Next i
       Write #1, scr1.DesignContaminant.Name

       Write #1, scr1.WaterFlowRate.Value
       Write #1, scr1.MultipleOfMinimumAirToWaterRatio.Value, scr1.MultipleOfMinimumAirToWaterRatio.UserInput
       Write #1, scr1.AirToWaterRatio.Value, scr1.AirToWaterRatio.UserInput
       Write #1, scr1.AirFlowRate.Value, scr1.AirFlowRate.UserInput
       Write #1, scr1.AirPressureDrop.Value

       Write #1, scr1.KLaSafetyFactor.Value, scr1.KLaSafetyFactor.UserInput
       Write #1, scr1.DesignMassTransferCoefficient.Value, scr1.DesignMassTransferCoefficient.UserInput

       'Output the units of this screen.
       Write #1, GetUnits(frmPTADScreen1!txtPUnits), GetUnits(frmPTADScreen1!txtTUnits)
       Write #1, GetUnits(frmPTADScreen1!txtFlowsUnits(0)), GetUnits(frmPTADScreen1!txtFlowsUnits(4)), GetUnits(frmPTADScreen1!txtFlowsUnits(5)), GetUnits(frmPTADScreen1!lblFlowsUnits(6)), GetUnits(frmPTADScreen1!lblFlowsUnits(7))
       Write #1, GetUnits(frmPTADScreen1!UnitsMassTransfer(0)), GetUnits(frmPTADScreen1!UnitsMassTransfer(2))
       Write #1, GetUnits(frmPTADScreen1!lblTowerUnits(0)), GetUnits(frmPTADScreen1!lblTowerUnits(1)), GetUnits(frmPTADScreen1!lblTowerUnits(2)), GetUnits(frmPTADScreen1!lblTowerUnits(3))
       
       'Output the units of frmContaminantPropertyEdit.
       xu = Units_frmContaminantPropertyEdit
       Write #1, xu.UnitsProp(0), xu.UnitsProp(2), xu.UnitsProp(3), xu.UnitsProp(4), xu.UnitsProp(5)
       Write #1, xu.UnitsConc(0), xu.UnitsConc(1)
       
       Close #1

       frmPTADScreen1.Caption = "Packed Tower Aeration - Design Mode"
       frmPTADScreen1.Caption = frmPTADScreen1.Caption & " (" & Filename & ")"

    End If

End Sub

Sub screen1_results()
    Dim i As Integer, j As Integer
    ReDim OndaKLa(1 To MAXCHEMICAL) As Double
    Dim KLaSafetyFactor As Double
    ReDim DesignKLa(1 To MAXCHEMICAL) As Double
    ReDim PackingWettedSurfaceArea(1 To MAXCHEMICAL) As Double
    Dim ReynoldsNumber As Double
    Dim FroudeNumber As Double
    Dim WeberNumber As Double
    Dim LiquidPhaseMassTransferCoefficient As Double
    Dim GasPhaseMassTransferCoefficient As Double
    Dim LiquidPhaseMassTransferResistance As Double
    Dim GasPhaseMassTransferResistance As Double
    Dim TotalMassTransferResistance As Double
        Dim ContaminantGlossaryBottom As Integer, GlossaryBottom As Integer
    ReDim DesiredPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim Effluent(1 To MAXCHEMICAL) As Double
    ReDim AchievedPercentRemoval(1 To MAXCHEMICAL) As Double
                                
          '----- View All Concentration Results
         KLaSafetyFactor = scr1.KLaSafetyFactor.Value
          For i = 1 To scr1.NumChemical
              If scr1.DesignContaminant.Name = scr1.Contaminant(i).Name Then
                 PackingWettedSurfaceArea(i) = scr1.Packing.OndaWettedSurfaceArea
                 OndaKLa(i) = scr1.Onda.OverallMassTransferCoefficient
                 DesignKLa(i) = scr1.DesignMassTransferCoefficient.Value
                 Call REMOVPT(DesiredPercentRemoval(i), scr1.DesignContaminant.Influent.Value, scr1.DesignContaminant.TreatmentObjective.Value)
                 Effluent(i) = scr1.DesignContaminant.TreatmentObjective.Value
                 Call REMOVPT(AchievedPercentRemoval(i), scr1.DesignContaminant.Influent.Value, Effluent(i))
              Else
                 Call AWCALC(PackingWettedSurfaceArea(i), scr1.Packing.CriticalSurfaceTension, scr1.WaterSurfaceTension.Value, scr1.WaterLoadingRate.Value, scr1.Packing.SpecificSurfaceArea, scr1.WaterViscosity.Value, scr1.WaterDensity.Value, ReynoldsNumber, FroudeNumber, WeberNumber)
                 Call ONDAKLPT(LiquidPhaseMassTransferCoefficient, scr1.WaterLoadingRate.Value, PackingWettedSurfaceArea(i), scr1.WaterViscosity.Value, scr1.WaterDensity.Value, scr1.Contaminant(i).LiquidDiffusivity.Value, scr1.Packing.SpecificSurfaceArea, scr1.Packing.NominalSize)
                 Call ONDAKGPT(GasPhaseMassTransferCoefficient, scr1.AirLoadingRate.Value, scr1.Packing.SpecificSurfaceArea, scr1.AirViscosity.Value, scr1.AirDensity.Value, scr1.Contaminant(i).GasDiffusivity.Value, scr1.Packing.NominalSize)
                 Call ONDKLAPT(OndaKLa(i), LiquidPhaseMassTransferResistance, GasPhaseMassTransferResistance, TotalMassTransferResistance, LiquidPhaseMassTransferCoefficient, PackingWettedSurfaceArea(i), GasPhaseMassTransferCoefficient, scr1.Contaminant(i).HenrysConstant.Value)
                 Call KLACOR(DesignKLa(i), OndaKLa(i), KLaSafetyFactor)
                 Call REMOVPT(DesiredPercentRemoval(i), scr1.Contaminant(i).Influent.Value, scr1.Contaminant(i).TreatmentObjective.Value)
                 Call EFFLPT2(Effluent(i), scr1.AirToWaterRatio.Value, scr1.Contaminant(i).HenrysConstant.Value, scr1.WaterFlowRate.Value, scr1.TowerArea.Value, scr1.TowerHeight.Value, DesignKLa(i), scr1.Contaminant(i).Influent.Value)
                 Call REMOVPT(AchievedPercentRemoval(i), scr1.Contaminant(i).Influent.Value, Effluent(i))
              End If
          Next i

    For i = 0 To MAXCHEMICAL - 1
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i + 10).Visible = False
        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblContaminantName(i).Visible = False

    Next i

    For i = 1 To scr1.NumChemical
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i + 10 - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblContaminantName(i - 1).Visible = True

        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i - 1).Caption = Format$(scr1.Contaminant(i).Influent.Value, GetTheFormat(scr1.Contaminant(i).Influent.Value))
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i - 1).Caption = Format$(scr1.Contaminant(i).TreatmentObjective.Value, GetTheFormat(scr1.Contaminant(i).TreatmentObjective.Value))
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i - 1).Caption = Format$(DesiredPercentRemoval(i), "0.0")
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i - 1).Caption = Format$(Effluent(i), GetTheFormat(Effluent(i)))
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i - 1).Caption = Format$(AchievedPercentRemoval(i), "0.0")
        frmViewEffluentConcentrationsASAP!lblContaminantName(i - 1).Caption = Trim$(LCase$(scr1.Contaminant(i).Name))

    Next i

    frmViewEffluentConcentrationsASAP!fraConcentrationResults.Height = frmViewEffluentConcentrationsASAP!lblContaminantNumber(scr1.NumChemical - 1).Top + frmViewEffluentConcentrationsASAP!lblContaminantNumber(scr1.NumChemical - 1).Height + 120
    frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Height = frmViewEffluentConcentrationsASAP!lblContaminantNumber(scr1.NumChemical + 10 - 1).Top + frmViewEffluentConcentrationsASAP!lblContaminantNumber(scr1.NumChemical + 10 - 1).Height + 120
    frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top = frmViewEffluentConcentrationsASAP!fraConcentrationResults.Top + frmViewEffluentConcentrationsASAP!fraConcentrationResults.Height + 120
    frmViewEffluentConcentrationsASAP!fraGlossary.Top = frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top
    ContaminantGlossaryBottom = frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top + frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Height
    GlossaryBottom = frmViewEffluentConcentrationsASAP!fraGlossary.Top + frmViewEffluentConcentrationsASAP!fraGlossary.Height
    If GlossaryBottom > ContaminantGlossaryBottom Then
       frmViewEffluentConcentrationsASAP!cmdOK.Top = GlossaryBottom + 360
    Else
       frmViewEffluentConcentrationsASAP!cmdOK.Top = ContaminantGlossaryBottom + 360
    End If
    frmViewEffluentConcentrationsASAP.Height = frmViewEffluentConcentrationsASAP!cmdOK.Top + frmViewEffluentConcentrationsASAP!cmdOK.Height + 500  ' 420

    frmViewEffluentConcentrationsASAP.Show 1

End Sub

Function screen1_savechanges() As Integer
Dim i As Integer, response As Integer
Dim msg As String
                
msg = "Would you like to save the parameters "
msg = msg + "for this design case to a file "
msg = msg + "?" & Chr$(13) & Chr$(13)
msg = msg + "Note:  Any information not saved will be permanently lost."
response = MsgBox(msg, MB_ICONquestion + MB_YESNOCANCEL, "Save Current Design")
                
If response = IDCANCEL Then
  Screen.MousePointer = 0
  screen1_savechanges = 1
  Exit Function
End If
                
If response = IDYES Then
 Call SaveScreen1
 If StrComp(Filename, "") = 0 Then response = 5
                      
 Do While response = 5
    msg = "Would you like to save the parameters "
    msg = msg + "for this design case to a file "
    msg = msg + "?" & Chr$(13) & Chr$(13)
    msg = msg + "Note:  Any information not saved will be permanently lost."
    response = MsgBox(msg, MB_ICONquestion + MB_YESNOCANCEL, "Save Current Design")
                         
    If response = IDCANCEL Then
       Screen.MousePointer = 0
       screen1_savechanges = 1
       Exit Function
    End If
                         
   If response = IDYES Then Call SaveScreen1
   If StrComp(Filename, "") = 0 And response <> IDNO Then response = 5
  Loop
End If

screen1_savechanges = 0

End Function

Sub SetDesignContaminantEnabled(NumInList As Integer)
    Dim i As Integer

  If NumInList = 0 Then
    frmPTADScreen1!mnuFile(4).Enabled = False
    frmPTADScreen1!mnuFile(5).Enabled = False
    frmPTADScreen1!mnuOptions(0).Enabled = False
    'frmPTADScreen1!fraDesignContaminant.Enabled = False
    'frmPTADScreen1!cboDesignContaminant.Enabled = False
    frmPTADScreen1!cmdDesignContaminant.Enabled = False
    For i = 0 To 2
      frmPTADScreen1!lblDesignConcentrationValue(i).Caption = ""
    Next i
    Call ResetVariables
  Else
    frmPTADScreen1!mnuFile(4).Enabled = True
    frmPTADScreen1!mnuFile(5).Enabled = True
    frmPTADScreen1!mnuOptions(0).Enabled = True
    'frmPTADScreen1!fraDesignContaminant.Enabled = True
    'frmPTADScreen1!cboDesignContaminant.Enabled = True
    If NumInList = 1 Then
      frmPTADScreen1!cmdDesignContaminant.Enabled = False
    Else
      frmPTADScreen1!cmdDesignContaminant.Enabled = True
    End If
    For i = 0 To 0
      frmPTADScreen1!txtFlowsLoadings(i).Enabled = True
    Next i
    For i = 1 To 1
      frmPTADScreen1!lblFlowsLoadings(i).Enabled = True
    Next i
    For i = 2 To 5
      frmPTADScreen1!txtFlowsLoadings(i).Enabled = True
    Next i
    For i = 6 To 7
      frmPTADScreen1!lblFlowsLoadings(i).Enabled = True
    Next i

    frmPTADScreen1!lblMassTransfer(0).Enabled = True
    For i = 1 To 2
      frmPTADScreen1!txtMassTransfer(i).Enabled = True
    Next i
    For i = 0 To 3
      frmPTADScreen1!lblTowerParameters(i).Enabled = True
    Next i
  End If

End Sub

Sub SetPowerPTADScreen1(CalculatedPower As Integer)

          scr1.Power.InletAirTemperature = scr1.operatingtemperature.Value - 273.15
          Call CalculatePowerScreen1(CalculatedPower)
          If CalculatedPower Then
             frmPower!txtPower(0).Text = Format$(scr1.Power.InletAirTemperature, GetTheFormat(scr1.Power.InletAirTemperature))
             frmPower!txtPower(1).Text = Format$(scr1.Power.BlowerEfficiency, GetTheFormat(scr1.Power.BlowerEfficiency))
             frmPower!lblPower(2).Caption = Format$(scr1.Power.BlowerBrakePower, GetTheFormat(scr1.Power.BlowerBrakePower))
             frmPower!txtPower(3).Text = Format$(scr1.Power.PumpEfficiency, GetTheFormat(scr1.Power.PumpEfficiency))
             frmPower!lblPower(4).Caption = Format$(scr1.Power.PumpBrakePower, GetTheFormat(scr1.Power.PumpBrakePower))
             frmPower!lblPower(5).Caption = Format$(scr1.Power.TotalBrakePower, GetTheFormat(scr1.Power.TotalBrakePower))
          End If

End Sub

Sub ShowOndaKLaProperties()
    
  frmShowOndaKLaProperties!lblOndaProperties(0).Caption = Format$(scr1.Onda.ReynoldsNumber, GetTheFormat(scr1.Onda.ReynoldsNumber))
  frmShowOndaKLaProperties!lblOndaProperties(1).Caption = Format$(scr1.Onda.FroudeNumber, GetTheFormat(scr1.Onda.FroudeNumber))
  frmShowOndaKLaProperties!lblOndaProperties(2).Caption = Format$(scr1.Onda.WeberNumber, GetTheFormat(scr1.Onda.WeberNumber))
  frmShowOndaKLaProperties!lblOndaProperties(3).Caption = Format$(scr1.Packing.OndaWettedSurfaceArea, GetTheFormat(scr1.Packing.OndaWettedSurfaceArea))
  frmShowOndaKLaProperties!lblOndaProperties(4).Caption = Format$(scr1.Onda.LiquidPhaseMassTransferResistance, GetTheFormat(scr1.Onda.LiquidPhaseMassTransferResistance))
  frmShowOndaKLaProperties!lblOndaProperties(5).Caption = Format$(scr1.Onda.GasPhaseMassTransferResistance, GetTheFormat(scr1.Onda.GasPhaseMassTransferResistance))
  frmShowOndaKLaProperties!lblOndaProperties(6).Caption = Format$(scr1.Onda.TotalMassTransferResistance, GetTheFormat(scr1.Onda.TotalMassTransferResistance))
  frmShowOndaKLaProperties!lblOndaProperties(7).Caption = Format$(scr1.Onda.LiquidPhaseMassTransferCoefficient, GetTheFormat(scr1.Onda.LiquidPhaseMassTransferCoefficient))
  frmShowOndaKLaProperties!lblOndaProperties(8).Caption = Format$(scr1.Onda.GasPhaseMassTransferCoefficient, GetTheFormat(scr1.Onda.GasPhaseMassTransferCoefficient))
  frmShowOndaKLaProperties!lblOndaProperties(9).Caption = Format$(scr1.Onda.OverallMassTransferCoefficient, GetTheFormat(scr1.Onda.OverallMassTransferCoefficient))

End Sub

Sub ShowOptimizationConcentrations()
Dim i As Integer, Tag As Integer

  Tag = scr1.ID_OptimalDesignContaminant
  frmOptimizeContaminant!lblDesignContaminant(0).Caption = scr1.Contaminant(Tag).Name
  frmOptimizeContaminant!lblDesignContaminant(1).Caption = Format$(scr1.Contaminant(Tag).Influent.Value, GetTheFormat(scr1.Contaminant(Tag).Influent.Value))
  frmOptimizeContaminant!lblDesignContaminant(2).Caption = Format$(scr1.Contaminant(Tag).TreatmentObjective.Value, GetTheFormat(scr1.Contaminant(Tag).TreatmentObjective.Value))
  frmOptimizeContaminant!lblDesignContaminant(3).Caption = Format$(scr1.Contaminant(Tag).Effluent.Value, GetTheFormat(scr1.Contaminant(Tag).Effluent.Value))

  frmOptimizeContaminant!lstOptimizeContaminant.Clear

  For i = 1 To (Tag - 1)
    frmOptimizeContaminant!lstOptimizeContaminant.AddItem scr1.Contaminant(i).Name
  Next i

  For i = (Tag + 1) To scr1.NumChemical
    frmOptimizeContaminant!lstOptimizeContaminant.AddItem scr1.Contaminant(i).Name
  Next i

  frmOptimizeContaminant!lstOptimizeContaminant.ListIndex = 0

  frmOptimizeContaminant.Show 1

End Sub

Sub ShowPackingProperties()

    PackingDatabaseSource = CurrentScreen.Packing.SourceDatabase

    If ScreenNumber = 1 Then
       If frmPTADScreen1.lblPackingType.Caption = "" Then Exit Sub
    ElseIf ScreenNumber = 2 Then
       If frmPTADScreen2.lblPackingType.Caption = "" Then Exit Sub
    End If

    If Not ShownPackingProperties Then   'Set labels on frmShowPackingProperties
       frmShowPackingProperties!lblShowPackingProperties(0).Caption = CurrentScreen.Packing.Name
       frmShowPackingProperties!lblShowPackingProperties(1).Caption = Format$(CurrentScreen.Packing.NominalSize, GetTheFormat(CurrentScreen.Packing.NominalSize))
       frmShowPackingProperties!lblShowPackingProperties(2).Caption = Format$(CurrentScreen.Packing.PackingFactor, GetTheFormat(CurrentScreen.Packing.PackingFactor))
       frmShowPackingProperties!lblShowPackingProperties(3).Caption = Format$(CurrentScreen.Packing.SpecificSurfaceArea, GetTheFormat(CurrentScreen.Packing.SpecificSurfaceArea))
       frmShowPackingProperties!lblShowPackingProperties(4).Caption = Format$(CurrentScreen.Packing.CriticalSurfaceTension, GetTheFormat(CurrentScreen.Packing.CriticalSurfaceTension))
       frmShowPackingProperties!lblShowPackingProperties(5).Caption = CurrentScreen.Packing.Material
       frmShowPackingProperties!lblShowPackingProperties(6).Caption = CurrentScreen.Packing.source

       If PackingDatabaseSource = ORIGINALPACKINGDATABASE Then
          frmShowPackingProperties!lblShowPackingProperties(7).Caption = "Original Packing Database"
       Else
          frmShowPackingProperties.lblShowPackingProperties(7).Caption = "User Input"
       End If

       ShownPackingProperties = True

    End If

    frmShowPackingProperties.Show 1

End Sub

Sub SpecifiedAirFlowRate()

    If HaveValue(scr1.WaterFlowRate.Value) Then
       Call VQCALC(scr1.AirToWaterRatio.Value, scr1.AirFlowRate.Value, scr1.WaterFlowRate.Value)
       scr1.AirToWaterRatio.ValChanged = True
       frmPTADScreen1!txtFlowsLoadings(3).Text = Format$(scr1.AirToWaterRatio.Value, GetTheFormat(scr1.AirToWaterRatio.Value))
       If HaveValue(scr1.MinimumAirToWaterRatio.Value) Then
          Call GETMULT(scr1.MultipleOfMinimumAirToWaterRatio.Value, scr1.AirToWaterRatio.Value, scr1.MinimumAirToWaterRatio.Value)
          scr1.MultipleOfMinimumAirToWaterRatio.ValChanged = True
          frmPTADScreen1!txtFlowsLoadings(2).Text = Format$(scr1.MultipleOfMinimumAirToWaterRatio.Value, GetTheFormat(scr1.MultipleOfMinimumAirToWaterRatio.Value))
       Else
          If (scr1.MultipleOfMinimumAirToWaterRatio.Value > 0#) Then
             Call VQOverSpecificationMessage
             scr1.MultipleOfMinimumAirToWaterRatio.Value = 0#
             frmPTADScreen1!txtFlowsLoadings(2).Text = "0.0"
          End If
       End If
    Else
       If scr1.MultipleOfMinimumAirToWaterRatio.Value > 0# Or scr1.AirToWaterRatio.Value > 0# Then
          Call VQOverSpecificationMessage
       End If
       If (scr1.MultipleOfMinimumAirToWaterRatio.Value > 0#) Then
          scr1.MultipleOfMinimumAirToWaterRatio.Value = 0#
          frmPTADScreen1!txtFlowsLoadings(2).Text = "0.0"
       End If
       If scr1.AirToWaterRatio.Value > 0# Then
          scr1.AirToWaterRatio.Value = 0#
          frmPTADScreen1!txtFlowsLoadings(3).Text = "0.0"
       End If

    End If

    scr1.MultipleOfMinimumAirToWaterRatio.UserInput = False
    scr1.AirToWaterRatio.UserInput = False

End Sub

Sub SpecifiedAirToWaterRatio()

    If HaveValue(scr1.MinimumAirToWaterRatio.Value) Then
       Call GETMULT(scr1.MultipleOfMinimumAirToWaterRatio.Value, scr1.AirToWaterRatio.Value, scr1.MinimumAirToWaterRatio.Value)
       scr1.MultipleOfMinimumAirToWaterRatio.ValChanged = True
       frmPTADScreen1!txtFlowsLoadings(2).Text = Format$(scr1.MultipleOfMinimumAirToWaterRatio.Value, GetTheFormat(scr1.MultipleOfMinimumAirToWaterRatio.Value))
       If HaveValue(scr1.WaterFlowRate.Value) Then
          Call AIRFLO(scr1.AirFlowRate.Value, scr1.AirToWaterRatio.Value, scr1.WaterFlowRate.Value)
          scr1.AirFlowRate.ValChanged = True
          frmPTADScreen1!txtFlowsLoadings(4).Text = Format$(scr1.AirFlowRate.Value, GetTheFormat(scr1.AirFlowRate.Value))
       ElseIf scr1.AirFlowRate.Value > 0# Then
          Call VQOverSpecificationMessage
          scr1.AirFlowRate.Value = 0#
          frmPTADScreen1!txtFlowsLoadings(4).Text = "0.0"
       End If
    Else
       If (scr1.MultipleOfMinimumAirToWaterRatio.Value > 0#) Or scr1.AirFlowRate.Value > 0# Then
          Call VQOverSpecificationMessage
       End If
       If (scr1.MultipleOfMinimumAirToWaterRatio.Value > 0#) Then
          scr1.MultipleOfMinimumAirToWaterRatio.Value = 0#
          frmPTADScreen1!txtFlowsLoadings(2).Text = "0.0"
       End If
       If scr1.AirFlowRate.Value > 0# Then
          scr1.AirFlowRate.Value = 0#
          frmPTADScreen1!txtFlowsLoadings(4).Text = "0.0"
       End If

    End If

    scr1.MultipleOfMinimumAirToWaterRatio.UserInput = False
    scr1.AirFlowRate.UserInput = False

End Sub

Sub SpecifiedDesignMassTransferCoefficient()

    If HaveValue(scr1.Onda.OverallMassTransferCoefficient) Then
       Call GETSAF(scr1.KLaSafetyFactor.Value, scr1.Onda.OverallMassTransferCoefficient, scr1.DesignMassTransferCoefficient.Value)
       scr1.KLaSafetyFactor.ValChanged = True
       frmPTADScreen1!txtMassTransfer(1).Text = Format$(scr1.KLaSafetyFactor.Value, GetTheFormat(scr1.KLaSafetyFactor.Value))
    ElseIf scr1.KLaSafetyFactor.Value > 0# Then
       Call KLaOverSpecificationMessage
       scr1.KLaSafetyFactor.Value = 0#
       frmPTADScreen1!txtMassTransfer(1).Text = "0.0"
    End If
    scr1.KLaSafetyFactor.UserInput = False

End Sub

Sub SpecifiedKLaSafetyFactor()

    If HaveValue(scr1.Onda.OverallMassTransferCoefficient) Then
       Call KLACOR(scr1.DesignMassTransferCoefficient.Value, scr1.Onda.OverallMassTransferCoefficient, scr1.KLaSafetyFactor.Value)
       scr1.DesignMassTransferCoefficient.ValChanged = True
       frmPTADScreen1!txtMassTransfer(2).Text = Format$(scr1.DesignMassTransferCoefficient.Value, GetTheFormat(scr1.DesignMassTransferCoefficient.Value))
    ElseIf scr1.DesignMassTransferCoefficient.Value > 0# Then
       Call KLaOverSpecificationMessage
       scr1.DesignMassTransferCoefficient.Value = 0#
       frmPTADScreen1!txtMassTransfer(2).Text = "0.0"
    End If
    scr1.DesignMassTransferCoefficient.UserInput = False

End Sub

Sub SpecifiedVQminMultiple()

'*** This subroutine will calculate air to water ratio
'*** and air flow rate when the user has input a value
'*** for multiple of minimum air to water ratio

    If HaveValue(scr1.MinimumAirToWaterRatio.Value) Then
       Call vqmltpt1(scr1.AirToWaterRatio.Value, scr1.MinimumAirToWaterRatio.Value, scr1.MultipleOfMinimumAirToWaterRatio.Value)
       scr1.AirToWaterRatio.ValChanged = True
       frmPTADScreen1!txtFlowsLoadings(3).Text = Format$(scr1.AirToWaterRatio.Value, GetTheFormat(scr1.AirToWaterRatio.Value))
       If HaveValue(scr1.WaterFlowRate.Value) Then
          Call AIRFLO(scr1.AirFlowRate.Value, scr1.AirToWaterRatio.Value, scr1.WaterFlowRate.Value)
          scr1.AirFlowRate.ValChanged = True
          frmPTADScreen1!txtFlowsLoadings(4).Text = Format$(scr1.AirFlowRate.Value, GetTheFormat(scr1.AirFlowRate.Value))
       ElseIf scr1.AirFlowRate.Value > 0# Then
          Call VQOverSpecificationMessage
          scr1.AirFlowRate.Value = 0#
          frmPTADScreen1!txtFlowsLoadings(4).Text = "0.0"
       End If
    Else
       If (scr1.AirToWaterRatio.Value > 0#) Or (scr1.AirFlowRate.Value > 0#) Then
          Call VQOverSpecificationMessage
       End If
       If (scr1.AirToWaterRatio.Value > 0#) Then
          scr1.AirToWaterRatio.Value = 0#
          frmPTADScreen1!txtFlowsLoadings(3).Text = "0.0"
       End If
       If scr1.AirFlowRate.Value > 0# Then
          scr1.AirFlowRate.Value = 0#
          frmPTADScreen1!txtFlowsLoadings(4).Text = "0.0"
       End If
    End If

    scr1.AirToWaterRatio.UserInput = False
    scr1.AirFlowRate.UserInput = False

End Sub

Sub StartScreen1DefaultCase()

    Filename = "TheDefaultCaseScreen1"
    Call loadscreen1("")
    
End Sub

Sub TextGetFocus(txt As TextBox, Temp_Text As String)
    Temp_Text = txt.Text
    txt.SelStart = 0
    txt.SelLength = Len(txt.Text)

End Sub

Sub TextNumberChanged(ValueChanged As Integer, txt As TextBox, Temp_Text As String)
    Dim Dummy1 As Double, Dummy2 As Double

    If Temp_Text = "" Then
       ValueChanged = True
       Exit Sub
    End If

    Dummy1 = CDbl(txt.Text)
    Dummy2 = CDbl(Temp_Text)
    ValueChanged = True
    If txt.Text = Temp_Text Then ValueChanged = False
    If Abs(Dummy1 - Dummy2) < NUMBER_CHANGING_CRITERIA Then ValueChanged = False

End Sub

Sub TextStringChanged(ValueChanged As Integer, txt As TextBox, Temp_Text As String)
    
    ValueChanged = True
    If txt.Text = Temp_Text Then ValueChanged = False

End Sub

Sub VQOverSpecificationMessage()
    Dim msg As String

    msg = "You may only specify one of these three values:" & Chr$(13) & Chr$(13)
    msg = msg + "     Multiple of Minimum Air To Water Ratio" & Chr$(13)
    msg = msg + "     Air To Water Ratio" & Chr$(13)
    msg = msg + "     Air Flow Rate" & Chr$(13) & Chr$(13)
    msg = msg + "Any of the three values that were not just specified will be set to zero."
    MsgBox msg, MB_ICONEXCLAMATION, "Overspecification Error"

End Sub

Attribute VB_Name = "AsapSc2_Mod"
Option Explicit

Global UsersFlowsLoadingsOption As Integer
Global InitialPressureDrop As Double
Global FinalPressureDrop As Double
Global PressureDropStep As Double

Global CurrentMode As Integer  '1=design, 2=rating

Sub CalculatePowerScreen2(CalculatedPower As Integer)
    Dim CalculatedBlowerPower As Integer
    Dim CalculatedPumpPower As Integer

    CalculatedBlowerPower = False
    If HaveValue(Scr2.AirFlowRate.Value) And HaveValue(Scr2.TowerArea.Value) And HaveValue(Scr2.OperatingPressure.Value) And HaveValue(Scr2.AirPressureDrop.Value) And HaveValue(Scr2.TowerHeight.Value) And HaveValue(Scr2.AirDensity.Value) Then
       Call PBLOWPT(Scr2.Power.BlowerBrakePower, Scr2.AirFlowRate.Value, Scr2.TowerArea.Value, Scr2.OperatingPressure.Value, Scr2.AirPressureDrop.Value, Scr2.SpecifiedTowerHeight.Value, Scr2.AirDensity.Value, Scr2.Power.InletAirTemperature, Scr2.Power.BlowerEfficiency)
       CalculatedBlowerPower = True
    End If

    CalculatedPumpPower = False
    If HaveValue(Scr2.WaterDensity.Value) And HaveValue(Scr2.WaterFlowRate.Value) And HaveValue(Scr2.TowerHeight.Value) Then
       Call PPUMPPT(Scr2.Power.PumpBrakePower, Scr2.Power.PumpEfficiency, Scr2.WaterDensity.Value, Scr2.WaterFlowRate.Value, Scr2.SpecifiedTowerHeight.Value)
       CalculatedPumpPower = True
    End If

    If CalculatedBlowerPower And CalculatedPumpPower Then
       Call PTOTALPT(Scr2.Power.TotalBrakePower, Scr2.Power.BlowerBrakePower, Scr2.Power.PumpBrakePower)
       CalculatedPower = True
    End If

End Sub

Sub GetContaminantConcentrationsScreen2()
Dim PercentRemoval As Double
Dim msg As String, response As Integer
Dim Answer As String
Dim NewStep As Double
Dim Dummy As Double

    Call GetOndaMassTransferCoefficientScreen2
    Call GetDesignKLaOrKLaSafetyFactorScreen2

    'Update Contaminant of Interest | Influent Concentration.
    'frmPTADScreen2!lblDesignConcentrationValue(3).Caption = Format$(Scr2.DesignContaminant.Influent.Value, GetTheFormat(Scr2.DesignContaminant.Influent.Value))
    Call Unitted_NumberUpdate(frmPTADScreen2!UnitsInterest(3))
    
    'Update Contaminant of Interest | Treatment Objective.
    'frmPTADScreen2!lblDesignConcentrationValue(4).Caption = Format$(Scr2.DesignContaminant.TreatmentObjective.Value, GetTheFormat(Scr2.DesignContaminant.TreatmentObjective.Value))
    Call Unitted_NumberUpdate(frmPTADScreen2!UnitsInterest(4))
    
    Call EFFLPT2(Scr2.DesignContaminant.Effluent.Value, Scr2.AirToWaterRatio.Value, Scr2.DesignContaminant.HenrysConstant.Value, Scr2.WaterFlowRate.Value, Scr2.TowerArea.Value, Scr2.SpecifiedTowerHeight.Value, Scr2.DesignMassTransferCoefficient.Value, Scr2.DesignContaminant.Influent.Value)
    'Update Contaminant of Interest | Effluent Concentration.
    'frmPTADScreen2!lblDesignConcentrationValue(5).Caption = Format$(Scr2.DesignContaminant.Effluent.Value, GetTheFormat(Scr2.DesignContaminant.Effluent.Value))
    Call Unitted_NumberUpdate(frmPTADScreen2!UnitsInterest(5))

    Call REMOVPT(PercentRemoval, Scr2.DesignContaminant.Influent.Value, Scr2.DesignContaminant.Effluent.Value)
    frmPTADScreen2!lblDesignConcentrationValue(6).Caption = Format$(PercentRemoval, "0.0")

    'Determine Pressure Drop
    Scr2.AirPressureDrop.Value = -1#
    InitialPressureDrop = 1#
    FinalPressureDrop = 1200#
    PressureDropStep = 1#

xxOLDxxPressureDrop:
    Call PDROP(Scr2.AirPressureDrop.Value, Scr2.AirToWaterRatio.Value, Scr2.AirLoadingRate.Value, Scr2.Packing.PackingFactor, Scr2.WaterViscosity.Value, Scr2.AirDensity.Value, Scr2.WaterDensity.Value, InitialPressureDrop, FinalPressureDrop, PressureDropStep)
    If Scr2.AirPressureDrop.Value < 0 Then
'       Msg = "Failure to get within one percent of the "
'       Msg = Msg + "y-axis value on the Eckert curve "
'       Msg = Msg + "in the pressure drop range of "
'       Msg = Msg + Format$(InitialPressureDrop, "0.0") + " N/m2/m and " + Format$(FinalPressureDrop, "0.0")
'       Msg = Msg + " N/m2/m using a pressure drop step of " + Format$(PressureDropStep, "0.0000") + " N/m2/m."
'       Msg = Msg & Chr$(13) & Chr$(13)
'       Msg = Msg + "Would you like to specify a smaller value for pressure drop step "
'       Msg = Msg + "and attempt to achieve convergence again?"
'       Response = MsgBox(Msg, MB_ICONQUESTION + MB_YESNO, "Pressure Drop Convergence Error")
'       If Response = IDYES Then
'          If PressureDropStep <= .01 Then
'             Msg = "You can not specify a pressure drop "
'             Msg = Msg + "step smaller than 0.01. "
'             Msg = Msg + "Convergence not possible in this "
'             Msg = Msg + "case."
'             MsgBox Msg, MB_ICONEXCLAMATION, "Pressure Drop Convergence Error"
'             frmPTADScreen2!lblDesignConcentrationValue(7).Caption = "N/A"
'          Else
'NewPressureDrop:
'             If PressureDropStep / 10 < .01 Then
'                Answer$ = InputBox$("Enter new value for pressure drop step.", "Pressure Drop Step", Format$(.01, "0.000"))
'             Else
'                Answer$ = InputBox$("Enter new value for pressure drop step.", "Pressure Drop Step", Format$(PressureDropStep / 10, "0.000"))
'             End If
'             On Error GoTo NewPressureDrop:
'                NewStep = CDbl(Answer$)
'                If NewStep < .01 Then
'                   MsgBox "Pressure Drop step must exceed 0.01", MB_ICONEXCLAMATION, "Error"
'                   GoTo NewPressureDrop
'                Else
'                   PressureDropStep = NewStep
'                   GoTo PressureDrop:
'                End If
 '         End If

       NewStep = PressureDropStep / 10#
       If NewStep > 0.001 Then
          PressureDropStep = NewStep
          GoTo xxOLDxxPressureDrop:
       Else
          frmPTADScreen2!lblDesignConcentrationValue(7).Caption = "N/A"
       End If
    Else
       'frmPTADScreen2!lblDesignConcentrationValue(7).Caption = Format$(Scr2.AirPressureDrop.Value, "0.0")
       Call Unitted_NumberUpdate(frmPTADScreen2!UnitsInterest(7))
    End If

End Sub

Sub GetDesignKLaOrKLaSafetyFactorScreen2()

  If Scr2.KLaSafetyFactor.UserInput = True Then
    Call SpecifiedKLaSafetyFactorScreen2
  ElseIf Scr2.DesignMassTransferCoefficient.UserInput = True Then
    Call SpecifiedDesignKLaScreen2
  End If

End Sub

Sub GetFlowsAndLoadingsScreen2()


    If UsersFlowsLoadingsOption = 0 Then

       'Water Flow Rate, Air Flow Rate are specified -->
       '   Calculate:  Air to Water Ratio, Water Loading Rate,
       '               Air Loading Rate
       If HaveValue(Scr2.WaterFlowRate.Value) And HaveValue(Scr2.AirFlowRate.Value) And HaveValue(Scr2.WaterDensity.Value) And HaveValue(Scr2.TowerArea.Value) And HaveValue(Scr2.AirDensity.Value) Then
          Call VQCALC(Scr2.AirToWaterRatio.Value, Scr2.AirFlowRate.Value, Scr2.WaterFlowRate.Value)
          Call LDH2OPT2(Scr2.WaterLoadingRate.Value, Scr2.WaterFlowRate.Value, Scr2.WaterDensity.Value, Scr2.TowerArea.Value)
          Call LDAIRPT2(Scr2.AirLoadingRate.Value, Scr2.AirFlowRate.Value, Scr2.AirDensity.Value, Scr2.TowerArea.Value)
          frmPTADScreen2!txtFlowsLoadings(2).Text = Format$(Scr2.AirToWaterRatio.Value, GetTheFormat(Scr2.AirToWaterRatio.Value))
          'frmPTADScreen2!txtFlowsLoadings(3).Text = Format$(Scr2.WaterLoadingRate.Value, GetTheFormat(Scr2.WaterLoadingRate.Value))
          'frmPTADScreen2!txtFlowsLoadings(4).Text = Format$(Scr2.AirLoadingRate.Value, GetTheFormat(Scr2.AirLoadingRate.Value))
          'Call Unitted_NumberUpdate(frmPTADScreen2!UnitsFlows(2))
          Call Unitted_NumberUpdate(frmPTADScreen2!UnitsFlows(3))
          Call Unitted_NumberUpdate(frmPTADScreen2!UnitsFlows(4))
       End If

    ElseIf UsersFlowsLoadingsOption = 1 Then
       
       'Water Flow Rate, Air to Water Ratio are specified -->
       '   Calculate:  Air Flow Rate, Water Loading Rate,
       '               Air Loading Rate
       If HaveValue(Scr2.AirToWaterRatio.Value) And HaveValue(Scr2.WaterFlowRate.Value) And HaveValue(Scr2.WaterDensity.Value) And HaveValue(Scr2.TowerArea.Value) And HaveValue(Scr2.AirDensity.Value) Then
          Call AIRFLO(Scr2.AirFlowRate.Value, Scr2.AirToWaterRatio.Value, Scr2.WaterFlowRate.Value)
          Call LDH2OPT2(Scr2.WaterLoadingRate.Value, Scr2.WaterFlowRate.Value, Scr2.WaterDensity.Value, Scr2.TowerArea.Value)
          Call LDAIRPT2(Scr2.AirLoadingRate.Value, Scr2.AirFlowRate.Value, Scr2.AirDensity.Value, Scr2.TowerArea.Value)
          'frmPTADScreen2!txtFlowsLoadings(1).Text = Format$(Scr2.AirFlowRate.Value, GetTheFormat(Scr2.AirFlowRate.Value))
          'frmPTADScreen2!txtFlowsLoadings(3).Text = Format$(Scr2.WaterLoadingRate.Value, GetTheFormat(Scr2.WaterLoadingRate.Value))
          'frmPTADScreen2!txtFlowsLoadings(4).Text = Format$(Scr2.AirLoadingRate.Value, GetTheFormat(Scr2.AirLoadingRate.Value))
          Call Unitted_NumberUpdate(frmPTADScreen2!UnitsFlows(1))
          Call Unitted_NumberUpdate(frmPTADScreen2!UnitsFlows(3))
          Call Unitted_NumberUpdate(frmPTADScreen2!UnitsFlows(4))
       End If

    ElseIf UsersFlowsLoadingsOption = 2 Then

   'Water Loading Rate, Air Loading Rate are specified -->
       '   Calculate:  Water Flow Rate, Air Flow Rate,
       '               Air to Water Ratio

       If HaveValue(Scr2.WaterLoadingRate.Value) And HaveValue(Scr2.WaterDensity.Value) And HaveValue(Scr2.TowerArea.Value) And HaveValue(Scr2.AirLoadingRate.Value) And HaveValue(Scr2.AirDensity.Value) Then
          Call QH2OPT2(Scr2.WaterFlowRate.Value, Scr2.WaterLoadingRate.Value, Scr2.WaterDensity.Value, Scr2.TowerArea.Value)
          Call QAIRPT2(Scr2.AirFlowRate.Value, Scr2.AirLoadingRate.Value, Scr2.AirDensity.Value, Scr2.TowerArea.Value)
          Call VQCALC(Scr2.AirToWaterRatio.Value, Scr2.AirFlowRate.Value, Scr2.WaterFlowRate.Value)
          'frmPTADScreen2!txtFlowsLoadings(0).Text = Format$(Scr2.WaterFlowRate.Value, GetTheFormat(Scr2.WaterFlowRate.Value))
          'frmPTADScreen2!txtFlowsLoadings(1).Text = Format$(Scr2.AirFlowRate.Value, GetTheFormat(Scr2.AirFlowRate.Value))
          frmPTADScreen2!txtFlowsLoadings(2).Text = Format$(Scr2.AirToWaterRatio.Value, GetTheFormat(Scr2.AirToWaterRatio.Value))
          Call Unitted_NumberUpdate(frmPTADScreen2!UnitsFlows(0))
          Call Unitted_NumberUpdate(frmPTADScreen2!UnitsFlows(1))
          'Call Unitted_NumberUpdate(frmPTADScreen2!UnitsFlows(2))
       End If

    End If
End Sub

Sub GetOndaMassTransferCoefficientScreen2()
Dim Dummy As Double

    If HaveValue(Scr2.Packing.CriticalSurfaceTension) And HaveValue(Scr2.WaterSurfaceTension.Value) And HaveValue(Scr2.WaterLoadingRate.Value) And HaveValue(Scr2.Packing.SpecificSurfaceArea) And HaveValue(Scr2.WaterViscosity.Value) And HaveValue(Scr2.WaterDensity.Value) And HaveValue(Scr2.DesignContaminant.LiquidDiffusivity.Value) And HaveValue(Scr2.Packing.NominalSize) And HaveValue(Scr2.AirLoadingRate.Value) And HaveValue(Scr2.AirViscosity.Value) And HaveValue(Scr2.AirDensity.Value) And HaveValue(Scr2.DesignContaminant.GasDiffusivity.Value) And HaveValue(Scr2.DesignContaminant.HenrysConstant.Value) Then
       Call AWCALC(Scr2.Packing.OndaWettedSurfaceArea, Scr2.Packing.CriticalSurfaceTension, Scr2.WaterSurfaceTension.Value, Scr2.WaterLoadingRate.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.WaterViscosity.Value, Scr2.WaterDensity.Value, Scr2.Onda.ReynoldsNumber, Scr2.Onda.FroudeNumber, Scr2.Onda.WeberNumber)
       Call ONDAKLPT(Scr2.Onda.LiquidPhaseMassTransferCoefficient, Scr2.WaterLoadingRate.Value, Scr2.Packing.OndaWettedSurfaceArea, Scr2.WaterViscosity.Value, Scr2.WaterDensity.Value, Scr2.DesignContaminant.LiquidDiffusivity.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.Packing.NominalSize)
       Call ONDAKGPT(Scr2.Onda.GasPhaseMassTransferCoefficient, Scr2.AirLoadingRate.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.AirViscosity.Value, Scr2.AirDensity.Value, Scr2.DesignContaminant.GasDiffusivity.Value, Scr2.Packing.NominalSize)
       Call ONDKLAPT(Scr2.Onda.OverallMassTransferCoefficient, Scr2.Onda.LiquidPhaseMassTransferResistance, Scr2.Onda.GasPhaseMassTransferResistance, Scr2.Onda.TotalMassTransferResistance, Scr2.Onda.LiquidPhaseMassTransferCoefficient, Scr2.Packing.OndaWettedSurfaceArea, Scr2.Onda.GasPhaseMassTransferCoefficient, Scr2.DesignContaminant.HenrysConstant.Value)

       'Update Contaminant of Interest | Onda KLa.
       'frmPTADScreen2.lblDesignConcentrationValue(0).Caption = Format$(Scr2.Onda.OverallMassTransferCoefficient, GetTheFormat(Scr2.Onda.OverallMassTransferCoefficient))
       Call Unitted_NumberUpdate(frmPTADScreen2!UnitsInterest(0))

       Scr2.Onda.ValChanged = True

       Call ShowOndaKLaPropertiesScreen2

    End If

End Sub

Sub GetTowerAreaAndVolume()
    
  If HaveValue(Scr2.SpecifiedTowerDiameter.Value) And HaveValue(Scr2.SpecifiedTowerHeight.Value) Then
    Call AREAPT2(Scr2.TowerArea.Value, Scr2.SpecifiedTowerDiameter.Value)
    Call TVOLPT2(Scr2.TowerVolume.Value, Scr2.TowerArea.Value, Scr2.SpecifiedTowerHeight.Value)
    'frmPTADScreen2!lblTowerParameters(2).Caption = Format$(Scr2.TowerArea.Value, GetTheFormat(Scr2.TowerArea.Value))
    'frmPTADScreen2!lblTowerParameters(3).Caption = Format$(Scr2.TowerVolume.Value, GetTheFormat(Scr2.TowerVolume.Value))
    Call Unitted_NumberUpdate(frmPTADScreen2!UnitsTowerParam(2))
    Call Unitted_NumberUpdate(frmPTADScreen2!UnitsTowerParam(3))
  End If

End Sub

Sub LoadContaminantListScreen2()
    Dim FileID As String, msg As String
    Dim Pressure As Double, Temperature As Double
    Dim i As Integer
    Dim NotSpecifiedAtOperatingTemperature As Integer
    Dim NotSpecifiedAtOperatingPressure As Integer

    Call LoadFile(Filename)
    
    If Filename$ <> "" Then
       FileID = ""
       Open Filename$ For Input As #1
       On Error Resume Next
       Input #1, FileID
       If FileID <> CONTAMINANTS_PTAD_FILEID Then
          msg = "Invalid Contaminant File"
          MsgBox msg, 48, "Error"
          Close #1
          Exit Sub
       End If

       'frmListContaminantScreen2.ListContaminants.Clear
       frmPTADScreen2!cboSelectCompo.Clear

       i = 0
       NotSpecifiedAtOperatingTemperature = False
       NotSpecifiedAtOperatingPressure = False
       Do Until EOF(1)
          i = i + 1
          Input #1, Scr2.Contaminant(i).Pressure, Scr2.Contaminant(i).Temperature, Scr2.Contaminant(i).Name, Scr2.Contaminant(i).MolecularWeight.Value, Scr2.Contaminant(i).HenrysConstant.Value, Scr2.Contaminant(i).MolarVolume.Value, Scr2.Contaminant(i).NormalBoilingPoint.Value, Scr2.Contaminant(i).LiquidDiffusivity.Value, Scr2.Contaminant(i).GasDiffusivity.Value, Scr2.Contaminant(i).Influent.Value, Scr2.Contaminant(i).TreatmentObjective.Value
          'frmListContaminantScreen2.ListContaminants.AddItem Scr2.Contaminant(i).Name
          frmPTADScreen2!cboSelectCompo.AddItem Scr2.Contaminant(i).Name

          If Not NotSpecifiedAtOperatingTemperature Then
             If Abs(Scr2.Contaminant(i).Temperature - Scr2.operatingtemperature.Value) > TOLERANCE Then
                NotSpecifiedAtOperatingTemperature = True
             End If
          End If
          If Not NotSpecifiedAtOperatingPressure Then
             If Abs(Scr2.Contaminant(i).Pressure - Scr2.OperatingPressure.Value) > TOLERANCE Then
                NotSpecifiedAtOperatingPressure = True
             End If
          End If

       Loop
       Scr2.NumChemical = i
          
       Close #1

       'If frmListContaminantScreen2.mnuOptionsManipulateContaminant(1).Enabled = False Then
       '   frmListContaminantScreen2.mnuOptionsManipulateContaminant(1).Enabled = True
       '   frmListContaminantScreen2.mnuOptionsManipulateContaminant(3).Enabled = True
       '   frmListContaminantScreen2.mnuOptionsManipulateContaminant(4).Enabled = True
       '   frmListContaminantScreen2.mnuOptionsSave.Enabled = True
       '   frmListContaminantScreen2.mnuOptionsView.Enabled = True
       'End If

       'frmListContaminantScreen2.ListContaminants.Selected(0) = True

       If NotSpecifiedAtOperatingPressure And NotSpecifiedAtOperatingTemperature Then
          MsgBox "For one or more contaminants, the temperature and pressure at which the contaminant properties are specified differs from the operating temperature and pressure.", MB_ICONINFORMATION, "Warning"
       ElseIf NotSpecifiedAtOperatingTemperature Then
          MsgBox "For one or more contaminants, the temperature at which the contaminant properties are specified differs from the operating temperature.", MB_ICONINFORMATION, "Warning"
       ElseIf NotSpecifiedAtOperatingPressure Then
          MsgBox "For one or more contaminants, the pressure at which the contaminant properties are specified differs from the operating pressure.", MB_ICONINFORMATION, "Warning"
       End If

    End If

End Sub

Sub LoadFileScreen2(Filename As String)
Dim Ctl As Control
Set Ctl = frmPTADScreen2.CommonDialog1

    On Error Resume Next
    
    'frmPTADScreen2!CMDialog1.DefaultExt = "rat"
    'frmPTADScreen2!CMDialog1.Filter = "Rating Mode Files (*.rat)|*.rat"
    'frmPTADScreen2!CMDialog1.DialogTitle = "Load Packed Tower Aeration Rating Mode File"
    'frmPTADScreen2!CMDialog1.flags = OFN_FILEMUSTEXIST Or OFN_PATHMUSTEXIST
    'frmPTADScreen2!CMDialog1.Action = 1
    'Filename$ = frmPTADScreen2!CMDialog1.Filename
    Ctl.DefaultExt = "rat"
    Ctl.Filter = "Rating Mode Files (*.rat)|*.rat"
    Ctl.DialogTitle = "Load Packed Tower Aeration Rating Mode File"
    Ctl.flags = OFN_FILEMUSTEXIST Or OFN_PATHMUSTEXIST
    Ctl.Action = 1
    Filename$ = Ctl.Filename
    If Err = 32755 Then   'Cancel selected by user
       Filename$ = ""
    End If

End Sub

Sub loadscreen2(OverrideFilename As String)
Dim FileID As String, msg As String
Dim i As Integer
Dim FoundCurrentPacking As Integer  'Whether packing user specified is currently in the user-modified database or if we have to add it when the database is the user-modified one.
Dim CurrPackingIndex As Integer
Dim FlowsLoadingsString As String
Dim UsersFlowAndLoadingOption As Integer
ReDim u(10) As String
Dim xu As rec_Units_frmContaminantPropertyEdit

    If (OverrideFilename <> "") Then
      Filename = OverrideFilename
    Else
      If Filename = "TheDefaultCaseScreen2" Then
        Filename = App.Path & "\dbase\default.rat"
      Else
        Call LoadFileScreen2(Filename)
      End If
    End If
    
    If Filename$ <> "" Then
       FileID = ""
       Open Filename$ For Input As #1
       On Error Resume Next
       Input #1, FileID
       If FileID <> SCREEN2_PTAD2_FILEID Then
          msg = "Invalid Optimization File"
          MsgBox msg, 48, "Error"
          Close #1
          Exit Sub
       End If

       'frmListContaminantScreen2.ListContaminants.Clear
       frmPTADScreen2!cboSelectCompo.Clear
      
       '**********************
       '*
       '* Tower Parameters
       '*
       '**********************

       Input #1, Scr2.TowerDiameter.Value
       frmPTADScreen2!lblDesignParameters(0).Caption = Format$(Scr2.TowerDiameter.Value, GetTheFormat(Scr2.TowerDiameter.Value))

       Input #1, Scr2.TowerHeight.Value
       frmPTADScreen2!lblDesignParameters(1).Caption = Format$(Scr2.TowerHeight.Value, GetTheFormat(Scr2.TowerHeight.Value))

       Input #1, Scr2.SpecifiedTowerDiameter.Value
       frmPTADScreen2!txtTowerParameters(0).Text = Format$(Scr2.SpecifiedTowerDiameter.Value, GetTheFormat(Scr2.SpecifiedTowerDiameter.Value))

       Input #1, Scr2.SpecifiedTowerHeight.Value
       frmPTADScreen2!txtTowerParameters(1).Text = Format$(Scr2.SpecifiedTowerHeight.Value, GetTheFormat(Scr2.SpecifiedTowerHeight.Value))

       Call GetTowerAreaAndVolume


       '********************************************************************
       '*
       '*  Pressure, Temperature, and Physical Properties of Air and Water
       '*
       '********************************************************************

       Input #1, Scr2.OperatingPressure.Value
       frmPTADScreen2!txtOperatingPressure.Text = Format$(Scr2.OperatingPressure.Value * 101325# / 1#, "0.00")
       Scr2.OperatingPressure.ValChanged = True

       Input #1, Scr2.operatingtemperature.Value
       frmPTADScreen2!txtOperatingTemperature.Text = Format$(Scr2.operatingtemperature.Value - 273.15, "0.0")
       Scr2.operatingtemperature.ValChanged = True

       If HaveValue(Scr2.OperatingPressure.Value) And HaveValue(Scr2.operatingtemperature.Value) Then
          Call CalculateAirWaterPropertiesScreen2
       End If


       '************
       '*
       '* Packing
       '*
       '************

       Input #1, Scr2.Packing.Name, Scr2.Packing.NominalSize, Scr2.Packing.PackingFactor, Scr2.Packing.SpecificSurfaceArea, Scr2.Packing.CriticalSurfaceTension, Scr2.Packing.Material, Scr2.Packing.source, Scr2.Packing.UserInput, Scr2.Packing.SourceDatabase
       frmPTADScreen2!lblPackingType.Caption = Scr2.Packing.Name

       If PackingDatabaseSource <> Scr2.Packing.SourceDatabase Then
          frmSelectPacking!cboSelectPacking.Clear
          If Scr2.Packing.SourceDatabase = ORIGINALPACKINGDATABASE Then
             frmSelectPacking!mnuPackDatabase(0).Checked = True
             frmSelectPacking!mnuPackDatabase(1).Checked = False
             frmSelectPacking!mnuPackDatabaseOptions(0).Enabled = False
          
             For i = 1 To NumPackingsInDatabase
                 frmSelectPacking!cboSelectPacking.AddItem DatabasePacking(i).Name
             Next i
             frmSelectPacking!mnuPackDatabase(3).Enabled = False
          ElseIf Scr2.Packing.SourceDatabase = USERMODIFIEDPACKINGDATABASE Then
             frmSelectPacking!mnuPackDatabase(0).Checked = False
             frmSelectPacking!mnuPackDatabase(1).Checked = True
       
             For i = 1 To NumUserPackings
                 frmSelectPacking!cboSelectPacking.AddItem UserPacking(i).Name
             Next i
             frmSelectPacking!mnuPackDatabase(3).Enabled = True
          End If
       End If

       If Scr2.Packing.SourceDatabase = USERMODIFIEDPACKINGDATABASE Then
             FoundCurrentPacking = False
             For i = 1 To NumUserPackings
                 If UserPacking(i).Name = Scr2.Packing.Name Then
                    FoundCurrentPacking = True
                    CurrPackingIndex = i
                 End If
             Next i

             If FoundCurrentPacking Then
                If Scr2.Packing.NominalSize <> UserPacking(CurrPackingIndex).NominalSize Or Scr2.Packing.PackingFactor <> UserPacking(CurrPackingIndex).PackingFactor Or Scr2.Packing.SpecificSurfaceArea <> UserPacking(CurrPackingIndex).SpecificSurfaceArea Or Scr2.Packing.CriticalSurfaceTension <> UserPacking(CurrPackingIndex).CriticalSurfaceTension Or Scr2.Packing.Material <> UserPacking(CurrPackingIndex).Material Or Scr2.Packing.source <> UserPacking(CurrPackingIndex).source Then
                   msg = "Name of packing to be loaded matches the name "
                   msg = msg + "of a packing in the user-modified packing "
                   msg = msg + "database, but the properties of the two "
                   msg = msg + "packings differ." & Chr$(13) & Chr$(13)
                   msg = msg + "The properties of the packing to be loaded "
                   msg = msg + "will overwrite the properties currently "
                   msg = msg + "in the user-modified packing database."
                   MsgBox msg, MB_ICONEXCLAMATION, "Name of Packing Conflict"
                   UserPacking(CurrPackingIndex) = Scr2.Packing

                End If
             End If

             If Not FoundCurrentPacking Then
                NumUserPackings = NumUserPackings + 1
                UserPacking(NumUserPackings) = Scr2.Packing
                frmSelectPacking!cboSelectPacking.AddItem Scr2.Packing.Name
                frmSelectPacking!cboSelectPacking.ListIndex = NumUserPackings - 1
             End If
       End If


       '*******************************
       '*
       '* Flow and Loading Parameters
       '*
       '*******************************

       Input #1, FlowsLoadingsString$
       If FlowsLoadingsString = "Specified Water Flow Rate and Air Flow Rate" Then
          Input #1, Scr2.WaterFlowRate.Value
          Input #1, Scr2.AirFlowRate.Value
          frmPTADScreen2!txtFlowsLoadings(0).Text = Trim$(Str$(Scr2.WaterFlowRate.Value))
          frmPTADScreen2!txtFlowsLoadings(1).Text = Format$(Scr2.AirFlowRate.Value, GetTheFormat(Scr2.AirFlowRate.Value))
          frmFlowsLoadingsScreen2!optFlowsLoadings(0).Value = True
          UsersFlowAndLoadingOption = 0
       ElseIf FlowsLoadingsString = "Specified Water Flow Rate and Air to Water Ratio" Then
          Input #1, Scr2.WaterFlowRate.Value
          Input #1, Scr2.AirToWaterRatio.Value
          frmPTADScreen2!txtFlowsLoadings(0).Text = Trim$(Str$(Scr2.WaterFlowRate.Value))
          frmPTADScreen2!txtFlowsLoadings(2).Text = Format$(Scr2.AirToWaterRatio.Value, GetTheFormat(Scr2.AirToWaterRatio.Value))
          frmFlowsLoadingsScreen2!optFlowsLoadings(1).Value = True
          UsersFlowAndLoadingOption = 1
       ElseIf FlowsLoadingsString = "Specified Water Loading Rate and Air Loading Rate" Then
          Input #1, Scr2.WaterLoadingRate.Value
          Input #1, Scr2.AirLoadingRate.Value
          frmPTADScreen2!txtFlowsLoadings(3).Text = Format$(Scr2.WaterLoadingRate.Value, GetTheFormat(Scr2.WaterLoadingRate.Value))
          frmPTADScreen2!txtFlowsLoadings(4).Text = Format$(Scr2.AirLoadingRate.Value, GetTheFormat(Scr2.AirLoadingRate.Value))
          frmFlowsLoadingsScreen2!optFlowsLoadings(2).Value = True
          UsersFlowAndLoadingOption = 2
       End If
       Call SetUpFlowsLoadingsTextBoxes(UsersFlowAndLoadingOption)
       UsersFlowsLoadingsOption = UsersFlowAndLoadingOption
       Call GetFlowsAndLoadingsScreen2


       '***********************************
       '*
       '* Contaminant Properties
       '*
       '***********************************

       Input #1, Scr2.NumChemical
       For i = 1 To Scr2.NumChemical
           Input #1, Scr2.Contaminant(i).Pressure, Scr2.Contaminant(i).Temperature, Scr2.Contaminant(i).Name, Scr2.Contaminant(i).MolecularWeight.Value, Scr2.Contaminant(i).HenrysConstant.Value, Scr2.Contaminant(i).MolarVolume.Value, Scr2.Contaminant(i).NormalBoilingPoint.Value, Scr2.Contaminant(i).LiquidDiffusivity.Value, Scr2.Contaminant(i).GasDiffusivity.Value, Scr2.Contaminant(i).Influent.Value, Scr2.Contaminant(i).TreatmentObjective.Value
           'frmListContaminantScreen2.ListContaminants.AddItem Scr2.Contaminant(i).Name
           frmPTADScreen2!cboSelectCompo.AddItem Scr2.Contaminant(i).Name
       Next i
       Input #1, Scr2.DesignContaminant.Name

       For i = 1 To Scr2.NumChemical
           If Scr2.DesignContaminant.Name = Scr2.Contaminant(i).Name Then
              Scr2.DesignContaminant = Scr2.Contaminant(i)
              'frmListContaminantScreen2!ListContaminants.Selected(i - 1) = True
              frmPTADScreen2!cboSelectCompo.ListIndex = i - 1
              Exit For
           End If
       Next i

       'If frmListContaminantScreen2!mnuOptionsManipulateContaminant(1).Enabled = False Then
       '   frmListContaminantScreen2!mnuOptionsManipulateContaminant(1).Enabled = True
       '   frmListContaminantScreen2!mnuOptionsManipulateContaminant(3).Enabled = True
       '   frmListContaminantScreen2!mnuOptionsManipulateContaminant(4).Enabled = True
       '   frmListContaminantScreen2!mnuOptionsSave.Enabled = True
       '   frmListContaminantScreen2!mnuOptionsView.Enabled = True
       '
       '   frmPTADScreen2!mnuFile(4).Enabled = True
       '   frmPTADScreen2!mnuFile(5).Enabled = True
       '   frmPTADScreen2!mnuOptions(0).Enabled = True
       'End If
       
       'Call SetDesignContaminantEnabledScreen2(CInt(frmListContaminantScreen2!ListContaminants.ListCount))


       '*************************************
       '*
       '* Mass Transfer Properties
       '*
       '*************************************

       Input #1, Scr2.KLaSafetyFactor.Value, Scr2.KLaSafetyFactor.UserInput
       Input #1, Scr2.DesignMassTransferCoefficient.Value, Scr2.DesignMassTransferCoefficient.UserInput
       If Scr2.KLaSafetyFactor.UserInput = True Then
          frmPTADScreen2!txtDesignConcentrationValue(1).Text = Format$(Scr2.KLaSafetyFactor.Value, GetTheFormat(Scr2.KLaSafetyFactor.Value))
       ElseIf Scr2.DesignMassTransferCoefficient.UserInput = True Then
          frmPTADScreen2!txtDesignConcentrationValue(2).Text = Format$(Scr2.DesignMassTransferCoefficient.Value, GetTheFormat(Scr2.DesignMassTransferCoefficient.Value))
       End If

       'Input the units of this screen.
       Input #1, u(1), u(2)
       Call SetUnits(frmPTADScreen2!UnitsDesignBasis(0), u(1))
       Call SetUnits(frmPTADScreen2!UnitsDesignBasis(1), u(2))
  
       Input #1, u(1), u(2), u(3), u(4)
       Call SetUnits(frmPTADScreen2!UnitsTowerParam(0), u(1))
       Call SetUnits(frmPTADScreen2!UnitsTowerParam(1), u(2))
       Call SetUnits(frmPTADScreen2!UnitsTowerParam(2), u(3))
       Call SetUnits(frmPTADScreen2!UnitsTowerParam(3), u(4))
       
       Input #1, u(1), u(2)
       Call SetUnits(frmPTADScreen2!UnitsOpCond(0), u(1))
       Call SetUnits(frmPTADScreen2!UnitsOpCond(1), u(2))
  
       Input #1, u(1), u(2), u(3), u(4)
       Call SetUnits(frmPTADScreen2!UnitsFlows(0), u(1))
       Call SetUnits(frmPTADScreen2!UnitsFlows(1), u(2))
       Call SetUnits(frmPTADScreen2!UnitsFlows(2), u(3))
       Call SetUnits(frmPTADScreen2!UnitsFlows(3), u(4))
  
       Input #1, u(1), u(2), u(3), u(4), u(5), u(6)
       Call SetUnits(frmPTADScreen2!UnitsInterest(0), u(1))
       Call SetUnits(frmPTADScreen2!UnitsInterest(2), u(2))
       Call SetUnits(frmPTADScreen2!UnitsInterest(3), u(3))
       Call SetUnits(frmPTADScreen2!UnitsInterest(4), u(4))
       Call SetUnits(frmPTADScreen2!UnitsInterest(5), u(5))
       Call SetUnits(frmPTADScreen2!UnitsInterest(7), u(6))

       'Input the units of frmContaminantPropertyEdit.
       xu = Units_frmContaminantPropertyEdit
       Input #1, xu.UnitsProp(0), xu.UnitsProp(2), xu.UnitsProp(3), xu.UnitsProp(4), xu.UnitsProp(5)
       Input #1, xu.UnitsConc(0), xu.UnitsConc(1)
       Units_frmContaminantPropertyEdit = xu
       
       Close #1

       Call GetContaminantConcentrationsScreen2

       ShownScreen1Previously = False

       frmPTADScreen2.Caption = "Packed Tower Aeration - Rating Mode"
       If Right$(Filename, 11) = "default.des" Or Right$(Filename, 11) = "default.rat" Then
          frmPTADScreen2.Caption = frmPTADScreen2.Caption & " (" & "untitled.rat" & ")"
       Else
          frmPTADScreen2.Caption = frmPTADScreen2.Caption & " (" & Filename & ")"
       End If

    End If

End Sub

Sub NewPagePTADScreen2()

          Printer.NewPage
          Printer.FontSize = 12
          Printer.FontBold = True
          Printer.Print "Packed Tower Aeration - Rating Mode (continued)"
          Printer.Print
          Printer.Print
          Printer.FontSize = 10
          Printer.FontBold = False

End Sub

Sub PrintPTADScreen2()
    Dim i As Integer, j As Integer
    Dim CalculatedPower As Integer
    ReDim OndaKLa(1 To MAXCHEMICAL) As Double
    Dim KLaSafetyFactor As Double
    ReDim DesignKLa(1 To MAXCHEMICAL) As Double
    ReDim PackingWettedSurfaceArea(1 To MAXCHEMICAL) As Double
    Dim ReynoldsNumber As Double
    Dim FroudeNumber As Double
    Dim WeberNumber As Double
    Dim LiquidPhaseMassTransferCoefficient As Double
    Dim GasPhaseMassTransferCoefficient As Double
    Dim LiquidPhaseMassTransferResistance As Double
    Dim GasPhaseMassTransferResistance As Double
    Dim TotalMassTransferResistance As Double
    ReDim DesiredPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim Effluent(1 To MAXCHEMICAL) As Double
    ReDim AchievedPercentRemoval(1 To MAXCHEMICAL) As Double

    On Error GoTo PrinterError

          Printer.ScaleLeft = -1440
          Printer.ScaleTop = -1440
          Printer.CurrentX = 0
          Printer.CurrentY = 0
          Printer.FontSize = 12
          Printer.FontBold = True
          Printer.Print "Packed Tower Aeration - Rating Mode"
          Printer.Print
          Printer.Print
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          If ShownScreen1Previously Then
             Printer.Print "Design based on:  "; frmPTADScreen2!lblDesignParametersLabel(0).Caption & " (" & frmPTADScreen2!UnitsDesignBasis(0) & ")"; Tab(VALUE_TAB); frmPTADScreen2!lblDesignParameters(0).Caption
             Printer.Print "Design based on:  "; frmPTADScreen2!lblDesignParametersLabel(1).Caption & " (" & frmPTADScreen2!UnitsDesignBasis(1) & ")"; Tab(VALUE_TAB); frmPTADScreen2!lblDesignParameters(1).Caption
          End If
          Printer.Print frmPTADScreen2!lblTowerParametersLabel(0).Caption & " (" & frmPTADScreen2!UnitsTowerParam(0) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtTowerParameters(0).Text
          Printer.Print frmPTADScreen2!lblTowerParametersLabel(1).Caption & " (" & frmPTADScreen2!UnitsTowerParam(1) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtTowerParameters(1).Text
          Printer.Print frmPTADScreen2!lblTowerParametersLabel(2).Caption & " (" & frmPTADScreen2!UnitsTowerParam(2) & ")"; Tab(VALUE_TAB); frmPTADScreen2!lblTowerParameters(2).Caption
          Printer.Print frmPTADScreen2!lblTowerParametersLabel(3).Caption & " (" & frmPTADScreen2!UnitsTowerParam(3) & ")"; Tab(VALUE_TAB); frmPTADScreen2!lblTowerParameters(3).Caption
          Printer.Print
          Printer.Print "Operating Pressure" & " (" & frmPTADScreen2!UnitsOpCond(0) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtOperatingPressure.Text
          Printer.Print "Operating Temperature" & " (" & frmPTADScreen2!UnitsOpCond(1) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtOperatingTemperature.Text
          Printer.Print frmAirWaterProperties!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(0).Text
          Printer.Print frmAirWaterProperties!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(1).Text
          Printer.Print frmAirWaterProperties!lblAirWaterProperties(2).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(2).Text
          Printer.Print frmAirWaterProperties!lblAirWaterProperties(3).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(3).Text
          Printer.Print frmAirWaterProperties!lblAirWaterProperties(4).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(4).Text
          Printer.Print
          CurrentScreen = Scr2
          Printer.Print "Packing Name:  "; Trim$(CurrentScreen.Packing.Name)
          Printer.Print "Packing "; frmSelectPacking!lblPackingProperties(1).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.NominalSize, GetTheFormat(CurrentScreen.Packing.NominalSize))
          Printer.Print frmSelectPacking!lblPackingProperties(2).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.PackingFactor, GetTheFormat(CurrentScreen.Packing.PackingFactor))
          Printer.Print "Packing "; frmSelectPacking!lblPackingProperties(3).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.SpecificSurfaceArea, GetTheFormat(CurrentScreen.Packing.SpecificSurfaceArea))
          Printer.Print "Packing "; frmSelectPacking!lblPackingProperties(4).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.CriticalSurfaceTension, GetTheFormat(CurrentScreen.Packing.CriticalSurfaceTension))
          Printer.Print "Packing "; frmSelectPacking!lblPackingProperties(5).Caption; Tab(VALUE_TAB); Trim$(CurrentScreen.Packing.Material)
          Printer.Print "Packing "; frmSelectPacking!lblPackingProperties(6).Caption; Tab(VALUE_TAB); Trim$(CurrentScreen.Packing.source)
          Printer.Print "Source of This Packing Data in Program"; Tab(VALUE_TAB);
          If PackingDatabaseSource = ORIGINALPACKINGDATABASE Then
             Printer.Print "Original Packing Database"
          Else
             Printer.Print "User Input"
          End If
          
          Printer.Print
          Printer.Print frmPTADScreen2!lblFlowsLoadingsLabel(0).Caption & " (" & frmPTADScreen2!UnitsFlows(0) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtFlowsLoadings(0).Text
          Printer.Print frmPTADScreen2!lblFlowsLoadingsLabel(1).Caption & " (" & frmPTADScreen2!UnitsFlows(1) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtFlowsLoadings(1).Text
          Printer.Print frmPTADScreen2!lblFlowsLoadingsLabel(2).Caption & " (-)"; Tab(VALUE_TAB); frmPTADScreen2!txtFlowsLoadings(2).Text
          Printer.Print frmPTADScreen2!lblFlowsLoadingsLabel(3).Caption & " (" & frmPTADScreen2!UnitsFlows(3) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtFlowsLoadings(3).Text
          Printer.Print frmPTADScreen2!lblFlowsLoadingsLabel(4).Caption & " (" & frmPTADScreen2!UnitsFlows(4) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtFlowsLoadings(4).Text
          Printer.Print
          Printer.Print frmPTADScreen2!lblDesignConcentration(7).Caption; Tab(VALUE_TAB); frmPTADScreen2!lblDesignConcentrationValue(7).Caption
          Printer.Print
          Printer.Print
          Printer.FontBold = True
          Call SetPowerPTADScreen2(CalculatedPower)
          Printer.Print "Power Calculation:"
          Printer.FontUnderline = True
          Printer.Print
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.FontBold = False
          Printer.FontUnderline = False
          Printer.Print
          Printer.Print frmPowerScreen2!lblPowerLabel(0).Caption; Tab(VALUE_TAB); frmPowerScreen2!txtPower(0).Text
          Printer.Print frmPowerScreen2!lblPowerLabel(1).Caption; Tab(VALUE_TAB); frmPowerScreen2!txtPower(1).Text
          Printer.Print frmPowerScreen2!lblPowerLabel(2).Caption; Tab(VALUE_TAB); frmPowerScreen2!lblPower(2).Caption
          Printer.Print frmPowerScreen2!lblPowerLabel(3).Caption; Tab(VALUE_TAB); frmPowerScreen2!txtPower(3).Text
          Printer.Print frmPowerScreen2!lblPowerLabel(4).Caption; Tab(VALUE_TAB); frmPowerScreen2!lblPower(4).Caption
          Printer.Print frmPowerScreen2!lblPowerLabel(5).Caption; Tab(VALUE_TAB); frmPowerScreen2!lblPower(5).Caption
          Printer.Print
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Contaminant Glossary:"
          Printer.FontUnderline = False
          For i = 1 To Scr2.NumChemical
              Printer.Print Format$(i, "0"); " = "; Trim$(Scr2.Contaminant(i).Name)
          Next i
          Call NewPagePTADScreen2
          Printer.FontBold = True
          Printer.Print "Contaminant Properties:"
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Con.:"; Tab(MWT_TAB); "MWT"; Tab(HC_TAB); "HC"; Tab(VB_TAB); "Vb"; Tab(DIFL_TAB); "NBP"; Tab(MTCOEFF_TAB); "DIFL"; Tab(STANTON_TAB); "DIFG"
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          For i = 1 To Scr2.NumChemical
              Printer.Print Format$(i, "0"); Tab(MWT_TAB); Format$(Scr2.Contaminant(i).MolecularWeight.Value, "0.00"); Tab(HC_TAB); Format$(Scr2.Contaminant(i).HenrysConstant.Value, GetTheFormat(Scr2.Contaminant(i).HenrysConstant.Value)); Tab(VB_TAB); Format$(Scr2.Contaminant(i).MolarVolume.Value, GetTheFormat(Scr2.Contaminant(i).MolarVolume.Value)); Tab(DIFL_TAB); Format$(Scr2.Contaminant(i).NormalBoilingPoint.Value - 273.15, GetTheFormat(Scr2.Contaminant(i).NormalBoilingPoint.Value - 273.15)); Tab(MTCOEFF_TAB); Format$(Scr2.Contaminant(i).LiquidDiffusivity.Value, GetTheFormat(Scr2.Contaminant(i).LiquidDiffusivity.Value)); Tab(STANTON_TAB); Format$(Scr2.Contaminant(i).GasDiffusivity.Value, GetTheFormat(Scr2.Contaminant(i).GasDiffusivity.Value))
          Next i
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Glossary:"
          Printer.FontUnderline = False
          Printer.Print "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Printer.Print "MWT = Molecular Weight"
          Printer.Print "HC = Henry's Constant"
          Printer.Print "Vb = Molar Volume"
          Printer.Print "NBP = Normal Boiling Point"
          Printer.Print "DIFL = Liquid Diffusivity"
          Printer.Print "DIFG = Gas Diffusivity"
          Printer.Print
          Printer.Print
          Printer.Print
          Printer.FontBold = True
          Printer.Print "Contaminant Mass Transfer Parameters:"
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Con.:"; Tab(MWT_TAB); "Onda KLa"; Tab(HC_TAB); "KLa SF"; Tab(VB_TAB); "Des. KLa"
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          KLaSafetyFactor = Scr2.KLaSafetyFactor.Value
          For i = 1 To Scr2.NumChemical
              If Scr2.DesignContaminant.Name = Scr2.Contaminant(i).Name Then
                 PackingWettedSurfaceArea(i) = Scr2.Packing.OndaWettedSurfaceArea
                 OndaKLa(i) = Scr2.Onda.OverallMassTransferCoefficient
                 DesignKLa(i) = Scr2.DesignMassTransferCoefficient.Value
              Else
                 Call AWCALC(PackingWettedSurfaceArea(i), Scr2.Packing.CriticalSurfaceTension, Scr2.WaterSurfaceTension.Value, Scr2.WaterLoadingRate.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.WaterViscosity.Value, Scr2.WaterDensity.Value, ReynoldsNumber, FroudeNumber, WeberNumber)
                 Call ONDAKLPT(LiquidPhaseMassTransferCoefficient, Scr2.WaterLoadingRate.Value, PackingWettedSurfaceArea(i), Scr2.WaterViscosity.Value, Scr2.WaterDensity.Value, Scr2.Contaminant(i).LiquidDiffusivity.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.Packing.NominalSize)
                 Call ONDAKGPT(GasPhaseMassTransferCoefficient, Scr2.AirLoadingRate.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.AirViscosity.Value, Scr2.AirDensity.Value, Scr2.Contaminant(i).GasDiffusivity.Value, Scr2.Packing.NominalSize)
                 Call ONDKLAPT(OndaKLa(i), LiquidPhaseMassTransferResistance, GasPhaseMassTransferResistance, TotalMassTransferResistance, LiquidPhaseMassTransferCoefficient, PackingWettedSurfaceArea(i), GasPhaseMassTransferCoefficient, Scr2.Contaminant(i).HenrysConstant.Value)
                 Call KLACOR(DesignKLa(i), OndaKLa(i), KLaSafetyFactor)
              End If
              Printer.Print Format$(i, "0"); Tab(MWT_TAB); Format$(OndaKLa(i), GetTheFormat(OndaKLa(i))); Tab(HC_TAB); Format$(KLaSafetyFactor, GetTheFormat(KLaSafetyFactor)); Tab(VB_TAB); Format$(DesignKLa(i), GetTheFormat(DesignKLa(i)))
          Next i
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Glossary:"
          Printer.FontUnderline = False
          Printer.Print "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Printer.Print "Onda KLa = "; frmPTADScreen2!lblDesignConcentration(0).Caption
          Printer.Print "KLa SF = "; frmPTADScreen2!lblDesignConcentration(1).Caption
          Printer.Print "Des. KLa = "; frmPTADScreen2!lblDesignConcentration(2).Caption
          If Scr2.NumChemical > 6 Then
             Call NewPagePTADScreen2
          Else
             Printer.Print
             Printer.Print
             Printer.Print
          End If
          Printer.FontBold = True
          Printer.Print "Concentration Results:"
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Con.:"; Tab(MWT_TAB); "Cinf"; Tab(HC_TAB); "Cto"; Tab(VB_TAB); "De. % Rem."; Tab(DIFL_TAB); "Ceff"; Tab(MTCOEFF_TAB); "Ach. % Rem."
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          For i = 1 To Scr2.NumChemical
              If Scr2.DesignContaminant.Name = Scr2.Contaminant(i).Name Then
                 Call REMOVPT(DesiredPercentRemoval(i), Scr2.DesignContaminant.Influent.Value, Scr2.DesignContaminant.TreatmentObjective.Value)
                 Effluent(i) = Scr2.DesignContaminant.Effluent.Value
                 Call REMOVPT(AchievedPercentRemoval(i), Scr2.DesignContaminant.Influent.Value, Effluent(i))
              Else
                 Call REMOVPT(DesiredPercentRemoval(i), Scr2.Contaminant(i).Influent.Value, Scr2.Contaminant(i).TreatmentObjective.Value)
                 Call EFFLPT2(Effluent(i), Scr2.AirToWaterRatio.Value, Scr2.Contaminant(i).HenrysConstant.Value, Scr2.WaterFlowRate.Value, Scr2.TowerArea.Value, Scr2.SpecifiedTowerHeight.Value, DesignKLa(i), Scr2.Contaminant(i).Influent.Value)
                 Call REMOVPT(AchievedPercentRemoval(i), Scr2.Contaminant(i).Influent.Value, Effluent(i))
              End If
              Printer.Print Format$(i, "0"); Tab(MWT_TAB); Format$(Scr2.Contaminant(i).Influent.Value, GetTheFormat(Scr2.Contaminant(i).Influent.Value)); Tab(HC_TAB); Format$(Scr2.Contaminant(i).TreatmentObjective.Value, GetTheFormat(Scr2.Contaminant(i).TreatmentObjective.Value)); Tab(VB_TAB); Format$(DesiredPercentRemoval(i), GetTheFormat(DesiredPercentRemoval(i))); Tab(DIFL_TAB); Format$(Effluent(i), GetTheFormat(Effluent(i))); Tab(MTCOEFF_TAB); Format$(AchievedPercentRemoval(i), GetTheFormat(AchievedPercentRemoval(i)))
          Next i
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Glossary:"
          Printer.FontUnderline = False
          Printer.Print "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Printer.Print "Cinf = "; frmPTADScreen2!lblDesignConcentration(3).Caption
          Printer.Print "Cto = "; frmPTADScreen2!lblDesignConcentration(4).Caption
          Printer.Print "De. % Rem. = "; "Desired Percent Removal"
          Printer.Print "Ceff = "; frmPTADScreen2!lblDesignConcentration(5).Caption
          Printer.Print "Ach. % Rem. = "; "Achieved Percent Removal"

          Printer.EndDoc

    Exit Sub

PrinterError:
    MsgBox error$(Err)
    Resume ExitPrint:

ExitPrint:

End Sub

Sub PrintPTADScreen2ToFile()
    Dim i As Integer, j As Integer
    Dim CalculatedPower As Integer
    ReDim OndaKLa(1 To MAXCHEMICAL) As Double
    Dim KLaSafetyFactor As Double
    ReDim DesignKLa(1 To MAXCHEMICAL) As Double
    ReDim PackingWettedSurfaceArea(1 To MAXCHEMICAL) As Double
    Dim ReynoldsNumber As Double
    Dim FroudeNumber As Double
    Dim WeberNumber As Double
    Dim LiquidPhaseMassTransferCoefficient As Double
    Dim GasPhaseMassTransferCoefficient As Double
    Dim LiquidPhaseMassTransferResistance As Double
    Dim GasPhaseMassTransferResistance As Double
    Dim TotalMassTransferResistance As Double
    ReDim DesiredPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim Effluent(1 To MAXCHEMICAL) As Double
    ReDim AchievedPercentRemoval(1 To MAXCHEMICAL) As Double

        Call GetPrintFileName(PrintFileName)
        If PrintFileName$ = "" Then Exit Sub

        Open PrintFileName$ For Output As #1

          Print #1, "Packed Tower Aeration - Rating Mode"
          Print #1,
          Print #1,
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          Print #1,
          If ShownScreen1Previously Then
             Print #1, "Design based on:  "; frmPTADScreen2!lblDesignParametersLabel(0).Caption & " (" & frmPTADScreen2!UnitsDesignBasis(0) & ")"; Tab(VALUE_TAB); frmPTADScreen2!lblDesignParameters(0).Caption
             Print #1, "Design based on:  "; frmPTADScreen2!lblDesignParametersLabel(1).Caption & " (" & frmPTADScreen2!UnitsDesignBasis(1) & ")"; Tab(VALUE_TAB); frmPTADScreen2!lblDesignParameters(1).Caption
          End If
          Print #1, frmPTADScreen2!lblTowerParametersLabel(0).Caption & " (" & frmPTADScreen2!UnitsTowerParam(0) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtTowerParameters(0).Text
          Print #1, frmPTADScreen2!lblTowerParametersLabel(1).Caption & " (" & frmPTADScreen2!UnitsTowerParam(1) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtTowerParameters(1).Text
          Print #1, frmPTADScreen2!lblTowerParametersLabel(2).Caption & " (" & frmPTADScreen2!UnitsTowerParam(2) & ")"; Tab(VALUE_TAB); frmPTADScreen2!lblTowerParameters(2).Caption
          Print #1, frmPTADScreen2!lblTowerParametersLabel(3).Caption & " (" & frmPTADScreen2!UnitsTowerParam(3) & ")"; Tab(VALUE_TAB); frmPTADScreen2!lblTowerParameters(3).Caption
          Printer.Print
          Print #1, "Operating Pressure" & " (" & frmPTADScreen2!UnitsOpCond(0) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtOperatingPressure.Text
          Print #1, "Operating Temperature" & " (" & frmPTADScreen2!UnitsOpCond(1) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtOperatingTemperature.Text
          Print #1, frmAirWaterProperties!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(0).Text
          Print #1, frmAirWaterProperties!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(1).Text
          Print #1, frmAirWaterProperties!lblAirWaterProperties(2).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(2).Text
          Print #1, frmAirWaterProperties!lblAirWaterProperties(3).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(3).Text
          Print #1, frmAirWaterProperties!lblAirWaterProperties(4).Caption; Tab(VALUE_TAB); frmAirWaterProperties!txtAirWaterProperties(4).Text
          Print #1,
          CurrentScreen = Scr2
          Print #1, "Packing Name:  "; Trim$(CurrentScreen.Packing.Name)
          Print #1, "Packing "; frmSelectPacking!lblPackingProperties(1).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.NominalSize, GetTheFormat(CurrentScreen.Packing.NominalSize))
          Print #1, frmSelectPacking!lblPackingProperties(2).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.PackingFactor, GetTheFormat(CurrentScreen.Packing.PackingFactor))
          Print #1, "Packing "; frmSelectPacking!lblPackingProperties(3).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.SpecificSurfaceArea, GetTheFormat(CurrentScreen.Packing.SpecificSurfaceArea))
          Print #1, "Packing "; frmSelectPacking!lblPackingProperties(4).Caption; Tab(VALUE_TAB); Format$(CurrentScreen.Packing.CriticalSurfaceTension, GetTheFormat(CurrentScreen.Packing.CriticalSurfaceTension))
          Print #1, "Packing "; frmSelectPacking!lblPackingProperties(5).Caption; Tab(VALUE_TAB); Trim$(CurrentScreen.Packing.Material)
          Print #1, "Packing "; frmSelectPacking!lblPackingProperties(6).Caption; Tab(VALUE_TAB); Trim$(CurrentScreen.Packing.source)
          Print #1, "Source of This Packing Data in Program"; Tab(VALUE_TAB);
          If PackingDatabaseSource = ORIGINALPACKINGDATABASE Then
             Print #1, "Original Packing Database"
          Else
             Print #1, "User Input"
          End If
          
          Print #1,
          Print #1, frmPTADScreen2!lblFlowsLoadingsLabel(0).Caption & " (" & frmPTADScreen2!UnitsFlows(0) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtFlowsLoadings(0).Text
          Print #1, frmPTADScreen2!lblFlowsLoadingsLabel(1).Caption & " (" & frmPTADScreen2!UnitsFlows(1) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtFlowsLoadings(1).Text
          Print #1, frmPTADScreen2!lblFlowsLoadingsLabel(2).Caption & " (-)"; Tab(VALUE_TAB); frmPTADScreen2!txtFlowsLoadings(2).Text
          Print #1, frmPTADScreen2!lblFlowsLoadingsLabel(3).Caption & " (" & frmPTADScreen2!UnitsFlows(3) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtFlowsLoadings(3).Text
          Print #1, frmPTADScreen2!lblFlowsLoadingsLabel(4).Caption & " (" & frmPTADScreen2!UnitsFlows(4) & ")"; Tab(VALUE_TAB); frmPTADScreen2!txtFlowsLoadings(4).Text
          Print #1,
          Print #1, frmPTADScreen2!lblDesignConcentration(7).Caption; Tab(VALUE_TAB); frmPTADScreen2!lblDesignConcentrationValue(7).Caption
          Print #1,
          Print #1,
          Call SetPowerPTADScreen2(CalculatedPower)
          Print #1, "Power Calculation:"
          Print #1,
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          Print #1,
          Print #1, frmPowerScreen2!lblPowerLabel(0).Caption; Tab(VALUE_TAB); frmPowerScreen2!txtPower(0).Text
          Print #1, frmPowerScreen2!lblPowerLabel(1).Caption; Tab(VALUE_TAB); frmPowerScreen2!txtPower(1).Text
          Print #1, frmPowerScreen2!lblPowerLabel(2).Caption; Tab(VALUE_TAB); frmPowerScreen2!lblPower(2).Caption
          Print #1, frmPowerScreen2!lblPowerLabel(3).Caption; Tab(VALUE_TAB); frmPowerScreen2!txtPower(3).Text
          Print #1, frmPowerScreen2!lblPowerLabel(4).Caption; Tab(VALUE_TAB); frmPowerScreen2!lblPower(4).Caption
          Print #1, frmPowerScreen2!lblPowerLabel(5).Caption; Tab(VALUE_TAB); frmPowerScreen2!lblPower(5).Caption
          Print #1,
          Print #1,
          Print #1, "Contaminant Glossary:"
          For i = 1 To Scr2.NumChemical
              Print #1, Format$(i, "0"); " = "; Trim$(Scr2.Contaminant(i).Name)
          Next i
          Print #1,
          Print #1,
          Print #1,
          Print #1, "Contaminant Properties:"
          Print #1,
          Print #1, "Con.:"; Tab(MWT_TAB); "MWT"; Tab(HC_TAB); "HC"; Tab(VB_TAB); "Vb"; Tab(DIFL_TAB); "NBP"; Tab(MTCOEFF_TAB); "DIFL"; Tab(STANTON_TAB); "DIFG"
          Print #1,
          For i = 1 To Scr2.NumChemical
              Print #1, Format$(i, "0"); Tab(MWT_TAB); Format$(Scr2.Contaminant(i).MolecularWeight.Value, "0.00"); Tab(HC_TAB); Format$(Scr2.Contaminant(i).HenrysConstant.Value, GetTheFormat(Scr2.Contaminant(i).HenrysConstant.Value)); Tab(VB_TAB); Format$(Scr2.Contaminant(i).MolarVolume.Value, GetTheFormat(Scr2.Contaminant(i).MolarVolume.Value)); Tab(DIFL_TAB); Format$(Scr2.Contaminant(i).NormalBoilingPoint.Value - 273.15, GetTheFormat(Scr2.Contaminant(i).NormalBoilingPoint.Value - 273.15)); Tab(MTCOEFF_TAB); Format$(Scr2.Contaminant(i).LiquidDiffusivity.Value, GetTheFormat(Scr2.Contaminant(i).LiquidDiffusivity.Value)); Tab(STANTON_TAB); Format$(Scr2.Contaminant(i).GasDiffusivity.Value, GetTheFormat(Scr2.Contaminant(i).GasDiffusivity.Value))
          Next i
          Print #1,
         
          Print #1, "Glossary:"
          Print #1, "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Print #1, "MWT = Molecular Weight"
          Print #1, "HC = Henry's Constant"
          Print #1, "Vb = Molar Volume"
          Print #1, "NBP = Normal Boiling Point"
          Print #1, "DIFL = Liquid Diffusivity"
          Print #1, "DIFG = Gas Diffusivity"
          Print #1,
          Print #1,
          Print #1,
          Print #1, "Contaminant Mass Transfer Parameters:"
          Print #1,
          Print #1, "Con.:"; Tab(MWT_TAB); "Onda KLa"; Tab(HC_TAB); "KLa SF"; Tab(VB_TAB); "Des. KLa"
          Print #1,
          KLaSafetyFactor = Scr2.KLaSafetyFactor.Value
          For i = 1 To Scr2.NumChemical
              If Scr2.DesignContaminant.Name = Scr2.Contaminant(i).Name Then
                 PackingWettedSurfaceArea(i) = Scr2.Packing.OndaWettedSurfaceArea
                 OndaKLa(i) = Scr2.Onda.OverallMassTransferCoefficient
                 DesignKLa(i) = Scr2.DesignMassTransferCoefficient.Value
              Else
                 Call AWCALC(PackingWettedSurfaceArea(i), Scr2.Packing.CriticalSurfaceTension, Scr2.WaterSurfaceTension.Value, Scr2.WaterLoadingRate.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.WaterViscosity.Value, Scr2.WaterDensity.Value, ReynoldsNumber, FroudeNumber, WeberNumber)
                 Call ONDAKLPT(LiquidPhaseMassTransferCoefficient, Scr2.WaterLoadingRate.Value, PackingWettedSurfaceArea(i), Scr2.WaterViscosity.Value, Scr2.WaterDensity.Value, Scr2.Contaminant(i).LiquidDiffusivity.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.Packing.NominalSize)
                 Call ONDAKGPT(GasPhaseMassTransferCoefficient, Scr2.AirLoadingRate.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.AirViscosity.Value, Scr2.AirDensity.Value, Scr2.Contaminant(i).GasDiffusivity.Value, Scr2.Packing.NominalSize)
                 Call ONDKLAPT(OndaKLa(i), LiquidPhaseMassTransferResistance, GasPhaseMassTransferResistance, TotalMassTransferResistance, LiquidPhaseMassTransferCoefficient, PackingWettedSurfaceArea(i), GasPhaseMassTransferCoefficient, Scr2.Contaminant(i).HenrysConstant.Value)
                 Call KLACOR(DesignKLa(i), OndaKLa(i), KLaSafetyFactor)
              End If
              Print #1, Format$(i, "0"); Tab(MWT_TAB); Format$(OndaKLa(i), GetTheFormat(OndaKLa(i))); Tab(HC_TAB); Format$(KLaSafetyFactor, GetTheFormat(KLaSafetyFactor)); Tab(VB_TAB); Format$(DesignKLa(i), GetTheFormat(DesignKLa(i)))
          Next i
          Print #1,
          Print #1, "Glossary:"
          Print #1, "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Print #1, "Onda KLa = "; frmPTADScreen2!lblDesignConcentration(0).Caption
          Print #1, "KLa SF = "; frmPTADScreen2!lblDesignConcentration(1).Caption
          Print #1, "Des. KLa = "; frmPTADScreen2!lblDesignConcentration(2).Caption
             Print #1,
             Print #1,
             Print #1,
          Print #1, "Concentration Results:"
          Print #1,
          Print #1, "Con.:"; Tab(MWT_TAB); "Cinf"; Tab(HC_TAB); "Cto"; Tab(VB_TAB); "De. % Rem."; Tab(DIFL_TAB); "Ceff"; Tab(MTCOEFF_TAB); "Ach. % Rem."
          Print #1,
          For i = 1 To Scr2.NumChemical
              If Scr2.DesignContaminant.Name = Scr2.Contaminant(i).Name Then
                 Call REMOVPT(DesiredPercentRemoval(i), Scr2.DesignContaminant.Influent.Value, Scr2.DesignContaminant.TreatmentObjective.Value)
                 Effluent(i) = Scr2.DesignContaminant.Effluent.Value
                 Call REMOVPT(AchievedPercentRemoval(i), Scr2.DesignContaminant.Influent.Value, Effluent(i))
              Else
                 Call REMOVPT(DesiredPercentRemoval(i), Scr2.Contaminant(i).Influent.Value, Scr2.Contaminant(i).TreatmentObjective.Value)
                 Call EFFLPT2(Effluent(i), Scr2.AirToWaterRatio.Value, Scr2.Contaminant(i).HenrysConstant.Value, Scr2.WaterFlowRate.Value, Scr2.TowerArea.Value, Scr2.SpecifiedTowerHeight.Value, DesignKLa(i), Scr2.Contaminant(i).Influent.Value)
                 Call REMOVPT(AchievedPercentRemoval(i), Scr2.Contaminant(i).Influent.Value, Effluent(i))
              End If
              Print #1, Format$(i, "0"); Tab(MWT_TAB); Format$(Scr2.Contaminant(i).Influent.Value, GetTheFormat(Scr2.Contaminant(i).Influent.Value)); Tab(HC_TAB); Format$(Scr2.Contaminant(i).TreatmentObjective.Value, GetTheFormat(Scr2.Contaminant(i).TreatmentObjective.Value)); Tab(VB_TAB); Format$(DesiredPercentRemoval(i), GetTheFormat(DesiredPercentRemoval(i))); Tab(DIFL_TAB); Format$(Effluent(i), GetTheFormat(Effluent(i))); Tab(MTCOEFF_TAB); Format$(AchievedPercentRemoval(i), GetTheFormat(AchievedPercentRemoval(i)))
          Next i
          Print #1,
          Print #1, "Glossary:"
          Print #1, "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Print #1, "Cinf = "; frmPTADScreen2!lblDesignConcentration(3).Caption
          Print #1, "Cto = "; frmPTADScreen2!lblDesignConcentration(4).Caption
          Print #1, "De. % Rem. = "; "Desired Percent Removal"
          Print #1, "Ceff = "; frmPTADScreen2!lblDesignConcentration(5).Caption
          Print #1, "Ach. % Rem. = "; "Achieved Percent Removal"

          Close #1

End Sub

Sub SaveContaminantListScreen2()
    Dim FileID As String
    Dim i As Integer

    Call SaveFile(Filename)

    If Filename$ <> "" Then
       FileID = CONTAMINANTS_PTAD_FILEID
       Open Filename$ For Output As #1
       
       Write #1, FileID
      
       For i = 1 To Scr2.NumChemical
           Write #1, Scr2.Contaminant(i).Pressure, Scr2.Contaminant(i).Temperature, Scr2.Contaminant(i).Name, Scr2.Contaminant(i).MolecularWeight.Value, Scr2.Contaminant(i).HenrysConstant.Value, Scr2.Contaminant(i).MolarVolume.Value, Scr2.Contaminant(i).NormalBoilingPoint.Value, Scr2.Contaminant(i).LiquidDiffusivity.Value, Scr2.Contaminant(i).GasDiffusivity.Value, Scr2.Contaminant(i).Influent.Value, Scr2.Contaminant(i).TreatmentObjective.Value
       Next i

       Close #1

    End If

End Sub

Sub savefilescreen2(Filename As String)
Dim Ctl As Control
Set Ctl = frmPTADScreen2.CommonDialog1

    On Error Resume Next
    'frmPTADScreen2!CMDialog1.DefaultExt = "rat"
    'frmPTADScreen2!CMDialog1.Filter = "Rating Mode Files (*.rat)|*.rat"
    'frmPTADScreen2!CMDialog1.DialogTitle = "Save Packed Tower Aeration Rating Mode File"
    'frmPTADScreen2!CMDialog1.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
    'frmPTADScreen2!CMDialog1.Action = 2
    'Filename$ = frmPTADScreen2!CMDialog1.Filename
    Ctl.DefaultExt = "rat"
    Ctl.Filter = "Rating Mode Files (*.rat)|*.rat"
    Ctl.DialogTitle = "Save Packed Tower Aeration Rating Mode File"
    Ctl.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
    Ctl.Action = 2
    Filename$ = Ctl.Filename
    If Err = 32755 Then   'Cancel selected by user
       Filename$ = ""
    End If

End Sub

Sub SaveScreen2()
Dim FileID As String
Dim i As Integer
Dim xu As rec_Units_frmContaminantPropertyEdit

    If Right$(frmPTADScreen2.Caption, 14) = "(untitled.rat)" Then
       Call savefilescreen2(Filename)
    End If

    If Filename$ <> "" Then
       FileID = SCREEN2_PTAD2_FILEID
       Open Filename$ For Output As #1
       
       Write #1, FileID
      
       Write #1, Scr2.TowerDiameter.Value
       Write #1, Scr2.TowerHeight.Value
       Write #1, Scr2.SpecifiedTowerDiameter.Value
       Write #1, Scr2.SpecifiedTowerHeight.Value
       Write #1, Scr2.OperatingPressure.Value
       Write #1, Scr2.operatingtemperature.Value
       Write #1, Scr2.Packing.Name, Scr2.Packing.NominalSize, Scr2.Packing.PackingFactor, Scr2.Packing.SpecificSurfaceArea, Scr2.Packing.CriticalSurfaceTension, Scr2.Packing.Material, Scr2.Packing.source, Scr2.Packing.UserInput, Scr2.Packing.SourceDatabase
       If frmFlowsLoadingsScreen2!optFlowsLoadings(0).Value = True Then
          Write #1, "Specified Water Flow Rate and Air Flow Rate"
          Write #1, Scr2.WaterFlowRate.Value
          Write #1, Scr2.AirFlowRate.Value
       ElseIf frmFlowsLoadingsScreen2!optFlowsLoadings(1).Value = True Then
          Write #1, "Specified Water Flow Rate and Air to Water Ratio"
          Write #1, Scr2.WaterFlowRate.Value
          Write #1, Scr2.AirToWaterRatio.Value
       ElseIf frmFlowsLoadingsScreen2!optFlowsLoadings(2).Value = True Then
          Write #1, "Specified Water Loading Rate and Air Loading Rate"
          Write #1, Scr2.WaterLoadingRate.Value
          Write #1, Scr2.AirLoadingRate.Value
       End If

       Write #1, Scr2.NumChemical
       For i = 1 To Scr2.NumChemical
           Write #1, Scr2.Contaminant(i).Pressure, Scr2.Contaminant(i).Temperature, Scr2.Contaminant(i).Name, Scr2.Contaminant(i).MolecularWeight.Value, Scr2.Contaminant(i).HenrysConstant.Value, Scr2.Contaminant(i).MolarVolume.Value, Scr2.Contaminant(i).NormalBoilingPoint.Value, Scr2.Contaminant(i).LiquidDiffusivity.Value, Scr2.Contaminant(i).GasDiffusivity.Value, Scr2.Contaminant(i).Influent.Value, Scr2.Contaminant(i).TreatmentObjective.Value
       Next i
       Write #1, Scr2.DesignContaminant.Name

       Write #1, Scr2.KLaSafetyFactor.Value, Scr2.KLaSafetyFactor.UserInput
       Write #1, Scr2.DesignMassTransferCoefficient.Value, Scr2.DesignMassTransferCoefficient.UserInput

       'Output the units of this screen.
       Write #1, GetUnits(frmPTADScreen2!UnitsDesignBasis(0)), GetUnits(frmPTADScreen2!UnitsDesignBasis(1))
       Write #1, GetUnits(frmPTADScreen2!UnitsTowerParam(0)), GetUnits(frmPTADScreen2!UnitsTowerParam(1)), GetUnits(frmPTADScreen2!UnitsTowerParam(2)), GetUnits(frmPTADScreen2!UnitsTowerParam(3))
       Write #1, GetUnits(frmPTADScreen2!UnitsOpCond(0)), GetUnits(frmPTADScreen2!UnitsOpCond(1))
       Write #1, GetUnits(frmPTADScreen2!UnitsFlows(0)), GetUnits(frmPTADScreen2!UnitsFlows(1)), GetUnits(frmPTADScreen2!UnitsFlows(3)), GetUnits(frmPTADScreen2!UnitsFlows(4))
       Write #1, GetUnits(frmPTADScreen2!UnitsInterest(0)), GetUnits(frmPTADScreen2!UnitsInterest(2)), GetUnits(frmPTADScreen2!UnitsInterest(3)), GetUnits(frmPTADScreen2!UnitsInterest(4)), GetUnits(frmPTADScreen2!UnitsInterest(5)), GetUnits(frmPTADScreen2!UnitsInterest(7))

       'Output the units of frmContaminantPropertyEdit.
       xu = Units_frmContaminantPropertyEdit
       Write #1, xu.UnitsProp(0), xu.UnitsProp(2), xu.UnitsProp(3), xu.UnitsProp(4), xu.UnitsProp(5)
       Write #1, xu.UnitsConc(0), xu.UnitsConc(1)
       
       Close #1

       frmPTADScreen2.Caption = "Packed Tower Aeration - Rating Mode"
       frmPTADScreen2.Caption = frmPTADScreen2.Caption & " (" & Filename & ")"

    End If

End Sub

Sub screen2_results()
    Dim i As Integer, j As Integer
    Dim ContaminantGlossaryBottom As Integer, GlossaryBottom As Integer
    Dim KLaSafetyFactor As Double
    Dim ReynoldsNumber As Double
    Dim FroudeNumber As Double
    Dim WeberNumber As Double
    Dim LiquidPhaseMassTransferCoefficient As Double
    Dim GasPhaseMassTransferCoefficient As Double
    Dim LiquidPhaseMassTransferResistance As Double
    Dim GasPhaseMassTransferResistance As Double
    Dim TotalMassTransferResistance As Double
    
    ReDim DesiredPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim Effluent(1 To MAXCHEMICAL) As Double
    ReDim AchievedPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim OndaKLa(1 To MAXCHEMICAL) As Double
    ReDim DesignKLa(1 To MAXCHEMICAL) As Double
    ReDim PackingWettedSurfaceArea(1 To MAXCHEMICAL) As Double
          
          
          KLaSafetyFactor = Scr2.KLaSafetyFactor.Value
          For i = 1 To Scr2.NumChemical
              If Scr2.DesignContaminant.Name = Scr2.Contaminant(i).Name Then
                 PackingWettedSurfaceArea(i) = Scr2.Packing.OndaWettedSurfaceArea
                 OndaKLa(i) = Scr2.Onda.OverallMassTransferCoefficient
                 DesignKLa(i) = Scr2.DesignMassTransferCoefficient.Value
                 Call REMOVPT(DesiredPercentRemoval(i), Scr2.DesignContaminant.Influent.Value, Scr2.DesignContaminant.TreatmentObjective.Value)
                 Effluent(i) = Scr2.DesignContaminant.Effluent.Value
                 Call REMOVPT(AchievedPercentRemoval(i), Scr2.DesignContaminant.Influent.Value, Effluent(i))
              Else
                 Call AWCALC(PackingWettedSurfaceArea(i), Scr2.Packing.CriticalSurfaceTension, Scr2.WaterSurfaceTension.Value, Scr2.WaterLoadingRate.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.WaterViscosity.Value, Scr2.WaterDensity.Value, ReynoldsNumber, FroudeNumber, WeberNumber)
                 Call ONDAKLPT(LiquidPhaseMassTransferCoefficient, Scr2.WaterLoadingRate.Value, PackingWettedSurfaceArea(i), Scr2.WaterViscosity.Value, Scr2.WaterDensity.Value, Scr2.Contaminant(i).LiquidDiffusivity.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.Packing.NominalSize)
                 Call ONDAKGPT(GasPhaseMassTransferCoefficient, Scr2.AirLoadingRate.Value, Scr2.Packing.SpecificSurfaceArea, Scr2.AirViscosity.Value, Scr2.AirDensity.Value, Scr2.Contaminant(i).GasDiffusivity.Value, Scr2.Packing.NominalSize)
                 Call ONDKLAPT(OndaKLa(i), LiquidPhaseMassTransferResistance, GasPhaseMassTransferResistance, TotalMassTransferResistance, LiquidPhaseMassTransferCoefficient, PackingWettedSurfaceArea(i), GasPhaseMassTransferCoefficient, Scr2.Contaminant(i).HenrysConstant.Value)
                 Call KLACOR(DesignKLa(i), OndaKLa(i), KLaSafetyFactor)
                 Call REMOVPT(DesiredPercentRemoval(i), Scr2.Contaminant(i).Influent.Value, Scr2.Contaminant(i).TreatmentObjective.Value)
                 Call EFFLPT2(Effluent(i), Scr2.AirToWaterRatio.Value, Scr2.Contaminant(i).HenrysConstant.Value, Scr2.WaterFlowRate.Value, Scr2.TowerArea.Value, Scr2.SpecifiedTowerHeight.Value, DesignKLa(i), Scr2.Contaminant(i).Influent.Value)
                 Call REMOVPT(AchievedPercentRemoval(i), Scr2.Contaminant(i).Influent.Value, Effluent(i))
              End If
          Next i

    For i = 0 To MAXCHEMICAL - 1
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i + 10).Visible = False
        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblContaminantName(i).Visible = False

    Next i

    For i = 1 To Scr2.NumChemical
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i + 10 - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblContaminantName(i - 1).Visible = True

        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i - 1).Caption = Format$(Scr2.Contaminant(i).Influent.Value, GetTheFormat(Scr2.Contaminant(i).Influent.Value))
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i - 1).Caption = Format$(Scr2.Contaminant(i).TreatmentObjective.Value, GetTheFormat(Scr2.Contaminant(i).TreatmentObjective.Value))
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i - 1).Caption = Format$(DesiredPercentRemoval(i), "0.0")
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i - 1).Caption = Format$(Effluent(i), GetTheFormat(Effluent(i)))
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i - 1).Caption = Format$(AchievedPercentRemoval(i), "0.0")
        frmViewEffluentConcentrationsASAP!lblContaminantName(i - 1).Caption = Trim$(LCase$(Scr2.Contaminant(i).Name))

    Next i

    frmViewEffluentConcentrationsASAP!fraConcentrationResults.Height = frmViewEffluentConcentrationsASAP!lblContaminantNumber(Scr2.NumChemical - 1).Top + frmViewEffluentConcentrationsASAP!lblContaminantNumber(Scr2.NumChemical - 1).Height + 120
    frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Height = frmViewEffluentConcentrationsASAP!lblContaminantNumber(Scr2.NumChemical + 10 - 1).Top + frmViewEffluentConcentrationsASAP!lblContaminantNumber(Scr2.NumChemical + 10 - 1).Height + 120
    frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top = frmViewEffluentConcentrationsASAP!fraConcentrationResults.Top + frmViewEffluentConcentrationsASAP!fraConcentrationResults.Height + 120
    frmViewEffluentConcentrationsASAP!fraGlossary.Top = frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top
    ContaminantGlossaryBottom = frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top + frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Height
    GlossaryBottom = frmViewEffluentConcentrationsASAP!fraGlossary.Top + frmViewEffluentConcentrationsASAP!fraGlossary.Height
    If GlossaryBottom > ContaminantGlossaryBottom Then
       frmViewEffluentConcentrationsASAP!cmdOK.Top = GlossaryBottom + 360
    Else
       frmViewEffluentConcentrationsASAP!cmdOK.Top = ContaminantGlossaryBottom + 360
    End If
    frmViewEffluentConcentrationsASAP.Height = frmViewEffluentConcentrationsASAP!cmdOK.Top + frmViewEffluentConcentrationsASAP!cmdOK.Height + 500   '420

    frmViewEffluentConcentrationsASAP.Show 1


End Sub

Function screen2_savechanges() As Integer
Dim i As Integer, response As Integer
Dim msg As String

msg = "Would you like to save the parameters "
msg = msg + "for this rating case to a file "
msg = msg + "?" & Chr$(13) & Chr$(13)
msg = msg + "Note:  Any information not saved will be permanently lost."
response = MsgBox(msg, MB_ICONquestion + MB_YESNOCANCEL, "Save Current Design")
                
If response = IDCANCEL Then
 Screen.MousePointer = 0
 screen2_savechanges = 1
 Exit Function
End If
              
If response = IDYES Then
   Call SaveScreen2
                    
   If StrComp(Filename, "") = 0 Then response = 5
      
      Do While response = 5
         msg = "Would you like to save the parameters "
         msg = msg + "for this rating case to a file "
         msg = msg + "?" & Chr$(13) & Chr$(13)
         msg = msg + "Note:  Any information not saved will be permanently lost."
         response = MsgBox(msg, MB_ICONquestion + MB_YESNOCANCEL, "Save Current Design")
                         
         If response = IDCANCEL Then
            Screen.MousePointer = 0
            screen2_savechanges = 1
            Exit Function
        End If
                        
        If response = IDYES Then Call SaveScreen2
        If StrComp(Filename, "") = 0 And response <> IDNO Then response = 5
      Loop
End If

End Function

Sub SetDesignContaminantEnabledScreen2(NumInList As Long)
    Dim i As Integer

    If NumInList = 0 Then
       frmPTADScreen2!mnuFile(4).Enabled = False
       frmPTADScreen2!mnuFile(5).Enabled = False
       frmPTADScreen2!mnuoptions(0).Enabled = False
       'frmPTADScreen2!fraDesignContaminant.Enabled = False
       frmPTADScreen2!cboSelectCompo.Enabled = False
       Scr2.AirPressureDrop.Value = -1#

       For i = 0 To 7
           Select Case i
              Case 0, 3 To 7
                 frmPTADScreen2!lblDesignConcentrationValue(i).Caption = "0.0"
                 frmPTADScreen2!lblDesignConcentrationValue(i).Enabled = False
              Case 1 To 2
                 If i = 2 Then frmPTADScreen2!txtDesignConcentrationValue(i).Text = "0.0"
                 frmPTADScreen2!txtDesignConcentrationValue(i).Enabled = False
           End Select
       Next i

       If Scr2.KLaSafetyFactor.UserInput = False Then
          Scr2.KLaSafetyFactor.UserInput = True
          Scr2.KLaSafetyFactor.Value = 1#
          frmPTADScreen2!txtDesignConcentrationValue(1).Text = "1.0"
          frmPTADScreen2!txtDesignConcentrationValue(2).Text = "0.0"
       End If
    Else
      
       frmPTADScreen2!mnuFile(4).Enabled = True
       frmPTADScreen2!mnuFile(5).Enabled = True
      
       frmPTADScreen2!mnuoptions(0).Enabled = True

       'frmPTADScreen2!fraDesignContaminant.Enabled = True
       frmPTADScreen2!cboSelectCompo.Enabled = True
       For i = 0 To 7
           Select Case i
              Case 0, 3 To 7
                 frmPTADScreen2!lblDesignConcentrationValue(i).Enabled = True
              Case 1 To 2
                 frmPTADScreen2!txtDesignConcentrationValue(i).Enabled = True
           End Select
       Next i
    End If

End Sub

Sub SetPowerPTADScreen2(CalculatedPower As Integer)

          Scr2.Power.InletAirTemperature = Scr2.operatingtemperature.Value - 273.15
          Call CalculatePowerScreen2(CalculatedPower)
          If CalculatedPower Then
             frmPowerScreen2!txtPower(0).Text = Format$(Scr2.Power.InletAirTemperature, GetTheFormat(Scr2.Power.InletAirTemperature))
             frmPowerScreen2!txtPower(1).Text = Format$(Scr2.Power.BlowerEfficiency, GetTheFormat(Scr2.Power.BlowerEfficiency))
             frmPowerScreen2!lblPower(2).Caption = Format$(Scr2.Power.BlowerBrakePower, GetTheFormat(Scr2.Power.BlowerBrakePower))
             frmPowerScreen2!txtPower(3).Text = Format$(Scr2.Power.PumpEfficiency, GetTheFormat(Scr2.Power.PumpEfficiency))
             frmPowerScreen2!lblPower(4).Caption = Format$(Scr2.Power.PumpBrakePower, GetTheFormat(Scr2.Power.PumpBrakePower))
             frmPowerScreen2!lblPower(5).Caption = Format$(Scr2.Power.TotalBrakePower, GetTheFormat(Scr2.Power.TotalBrakePower))
          End If

End Sub

Sub SetUpFlowsLoadingsTextBoxes(UsersFlowAndLoadingOption As Integer)
Dim i As Integer

    Select Case UsersFlowAndLoadingOption

       Case 0  'Specify water flow rate and air flow rate
            Scr2.WaterFlowRate.UserInput = True
            Scr2.AirFlowRate.UserInput = True
            Scr2.AirToWaterRatio.UserInput = False
            Scr2.WaterLoadingRate.UserInput = False
            Scr2.AirLoadingRate.UserInput = False
            For i = 0 To 1
                frmPTADScreen2!txtFlowsLoadings(i).Enabled = True
                frmPTADScreen2!txtFlowsLoadings(i).TabStop = True
            Next i
            For i = 2 To 4
                frmPTADScreen2!txtFlowsLoadings(i).Enabled = False
                frmPTADScreen2!txtFlowsLoadings(i).TabStop = False
            Next i

       Case 1  'Specify water flow rate and air to water ratio
            Scr2.WaterFlowRate.UserInput = True
            Scr2.AirFlowRate.UserInput = False
            Scr2.AirToWaterRatio.UserInput = True
            Scr2.WaterLoadingRate.UserInput = False
            Scr2.AirLoadingRate.UserInput = False
            For i = 0 To 4
                Select Case i
                   Case 0, 2
                        frmPTADScreen2!txtFlowsLoadings(i).Enabled = True
                        frmPTADScreen2!txtFlowsLoadings(i).TabStop = True
                   Case 1, 3, 4
                        frmPTADScreen2!txtFlowsLoadings(i).Enabled = False
                        frmPTADScreen2!txtFlowsLoadings(i).TabStop = False
                 End Select
            Next i
        
       Case 2  'Specify water loading rate and air loading rate
            Scr2.WaterFlowRate.UserInput = False
            Scr2.AirFlowRate.UserInput = False
            Scr2.AirToWaterRatio.UserInput = False
            Scr2.WaterLoadingRate.UserInput = True
            Scr2.AirLoadingRate.UserInput = True
            For i = 0 To 4
                Select Case i
                   Case 3, 4
                        frmPTADScreen2!txtFlowsLoadings(i).Enabled = True
                        frmPTADScreen2!txtFlowsLoadings(i).TabStop = True
                   Case 0 To 2
                        frmPTADScreen2!txtFlowsLoadings(i).Enabled = False
                        frmPTADScreen2!txtFlowsLoadings(i).TabStop = False
                 End Select
            Next i

    End Select

End Sub

Sub ShowOndaKLaPropertiesScreen2()
    
       frmShowOndaKLaProperties!lblOndaProperties(0).Caption = Format$(Scr2.Onda.ReynoldsNumber, GetTheFormat(Scr2.Onda.ReynoldsNumber))
       frmShowOndaKLaProperties!lblOndaProperties(1).Caption = Format$(Scr2.Onda.FroudeNumber, GetTheFormat(Scr2.Onda.FroudeNumber))
       frmShowOndaKLaProperties!lblOndaProperties(2).Caption = Format$(Scr2.Onda.WeberNumber, GetTheFormat(Scr2.Onda.WeberNumber))
       frmShowOndaKLaProperties!lblOndaProperties(3).Caption = Format$(Scr2.Packing.OndaWettedSurfaceArea, GetTheFormat(Scr2.Packing.OndaWettedSurfaceArea))
       frmShowOndaKLaProperties!lblOndaProperties(4).Caption = Format$(Scr2.Onda.LiquidPhaseMassTransferResistance, GetTheFormat(Scr2.Onda.LiquidPhaseMassTransferResistance))
       frmShowOndaKLaProperties!lblOndaProperties(5).Caption = Format$(Scr2.Onda.GasPhaseMassTransferResistance, GetTheFormat(Scr2.Onda.GasPhaseMassTransferResistance))
       frmShowOndaKLaProperties!lblOndaProperties(6).Caption = Format$(Scr2.Onda.TotalMassTransferResistance, GetTheFormat(Scr2.Onda.TotalMassTransferResistance))
       frmShowOndaKLaProperties!lblOndaProperties(7).Caption = Format$(Scr2.Onda.LiquidPhaseMassTransferCoefficient, GetTheFormat(Scr2.Onda.LiquidPhaseMassTransferCoefficient))
       frmShowOndaKLaProperties!lblOndaProperties(8).Caption = Format$(Scr2.Onda.GasPhaseMassTransferCoefficient, GetTheFormat(Scr2.Onda.GasPhaseMassTransferCoefficient))
       frmShowOndaKLaProperties!lblOndaProperties(9).Caption = Format$(Scr2.Onda.OverallMassTransferCoefficient, GetTheFormat(Scr2.Onda.OverallMassTransferCoefficient))

End Sub

Sub SpecifiedDesignKLaScreen2()

    If HaveValue(Scr2.Onda.OverallMassTransferCoefficient) Then
       Call GETSAF(Scr2.KLaSafetyFactor.Value, Scr2.Onda.OverallMassTransferCoefficient, Scr2.DesignMassTransferCoefficient.Value)
       Scr2.KLaSafetyFactor.ValChanged = True
       frmPTADScreen2!txtDesignConcentrationValue(1).Text = Format$(Scr2.KLaSafetyFactor.Value, GetTheFormat(Scr2.KLaSafetyFactor.Value))
    ElseIf Scr2.KLaSafetyFactor.Value > 0# Then
       Call KLaOverSpecificationMessage
       Scr2.KLaSafetyFactor.Value = 0#
       frmPTADScreen2!txtDesignConcentrationValue(1).Text = "0.0"
    End If
    Scr2.KLaSafetyFactor.UserInput = False

End Sub

Sub SpecifiedKLaSafetyFactorScreen2()
Dim Dummy As Double

  If HaveValue(Scr2.Onda.OverallMassTransferCoefficient) Then
    Call KLACOR(Scr2.DesignMassTransferCoefficient.Value, Scr2.Onda.OverallMassTransferCoefficient, Scr2.KLaSafetyFactor.Value)
    Scr2.DesignMassTransferCoefficient.ValChanged = True
    'frmPTADScreen2!txtDesignConcentrationValue(2).Text = Format$(Scr2.DesignMassTransferCoefficient.Value, GetTheFormat(Scr2.DesignMassTransferCoefficient.Value))
    
    'Update Contaminant of Interest | Design KLa.
    Dummy = Scr2.DesignMassTransferCoefficient.Value
    Call Unitted_UnitChange(UNITS_INVERSETIME, Dummy, frmPTADScreen2!UnitsInterest(2), frmPTADScreen2!txtDesignConcentrationValue(2))
  ElseIf Scr2.DesignMassTransferCoefficient.Value > 0# Then
    Call KLaOverSpecificationMessage
    Scr2.DesignMassTransferCoefficient.Value = 0#
    frmPTADScreen2!txtDesignConcentrationValue(2).Text = "0.0"
  End If
  Scr2.DesignMassTransferCoefficient.UserInput = False

End Sub

Sub StartScreen2DefaultCase()

    Filename = "TheDefaultCaseScreen2"
    Call loadscreen2("")

End Sub

Sub CalculateAirWaterPropertiesScreen2()
    Dim Pressure As Double
    Dim Temperature As Double
    Dim WaterDensity As Double
    Dim WaterViscosity As Double
    Dim WaterSurfaceTension As Double
    Dim AirDensity As Double
    Dim AirViscosity As Double
    Dim i As Integer
    
    If Scr2.OperatingPressure.ValChanged Or Scr2.operatingtemperature.ValChanged Then
       Pressure = Scr2.OperatingPressure.Value
       Temperature = Scr2.operatingtemperature.Value

       For i = 0 To 4
           If frmAirWaterProperties.chkUpdateValues(i).Value = True Then
              Select Case i
                 Case 0
                    If HaveValue(Temperature) Then
                       Call H2ODENS(WaterDensity, Temperature)
                       Scr2.WaterDensity.Value = WaterDensity
                       Scr2.WaterDensity.UserInput = False
                       Scr2.WaterDensity.ValChanged = True
                       frmAirWaterProperties.txtAirWaterProperties(0).Text = Format$(WaterDensity, "0.00")
                       frmAirWaterProperties.lblValueSource(0).Caption = "Correlation"
                    End If
                 Case 1
                    If HaveValue(Temperature) Then
                       Call H2OVISC(WaterViscosity, Temperature)
                       Scr2.WaterViscosity.Value = WaterViscosity
                       Scr2.WaterViscosity.UserInput = False
                       Scr2.WaterViscosity.ValChanged = True
                       frmAirWaterProperties.txtAirWaterProperties(1).Text = Format$(WaterViscosity, GetTheFormat(WaterViscosity))
                       frmAirWaterProperties.lblValueSource(1).Caption = "Correlation"
                    End If
                 Case 2
                    If HaveValue(Temperature) Then
                       Call H2OST(WaterSurfaceTension, Temperature)
                       Scr2.WaterSurfaceTension.Value = WaterSurfaceTension
                       Scr2.WaterSurfaceTension.UserInput = False
                       Scr2.WaterSurfaceTension.ValChanged = True
                       frmAirWaterProperties.txtAirWaterProperties(2).Text = Format$(WaterSurfaceTension, GetTheFormat(WaterSurfaceTension))
                       frmAirWaterProperties.lblValueSource(2).Caption = "Correlation"
                    End If
                 Case 3
                    If HaveValue(Temperature) And HaveValue(Pressure) Then
                       Call AIRDENS(AirDensity, Temperature, Pressure)
                       Scr2.AirDensity.Value = AirDensity
                       Scr2.AirDensity.UserInput = False
                       Scr2.AirDensity.ValChanged = True
                       frmAirWaterProperties.txtAirWaterProperties(3).Text = Format$(AirDensity, GetTheFormat(AirDensity))
                       frmAirWaterProperties.lblValueSource(3).Caption = "Correlation"
                    End If
                 Case 4
                    If HaveValue(Temperature) Then
                       Call AIRVISC(AirViscosity, Temperature)
                       Scr2.AirViscosity.Value = AirViscosity
                       Scr2.AirViscosity.UserInput = False
                       Scr2.AirViscosity.ValChanged = True
                       frmAirWaterProperties.txtAirWaterProperties(4).Text = Format$(AirViscosity, GetTheFormat(AirViscosity))
                       frmAirWaterProperties.lblValueSource(4).Caption = "Correlation"
                    End If
              End Select
          End If
       Next i
    End If

End Sub

Sub xOLDxGetContaminantConcentrationsScreen2()
    Dim PercentRemoval As Double
    Dim msg As String, response As Integer
    Dim Answer As String
    Dim NewStep As Double

    Call GetOndaMassTransferCoefficientScreen2
    Call GetDesignKLaOrKLaSafetyFactorScreen2

    frmPTADScreen2!lblDesignConcentrationValue(3).Caption = Format$(Scr2.DesignContaminant.Influent.Value, GetTheFormat(Scr2.DesignContaminant.Influent.Value))
    frmPTADScreen2!lblDesignConcentrationValue(4).Caption = Format$(Scr2.DesignContaminant.TreatmentObjective.Value, GetTheFormat(Scr2.DesignContaminant.TreatmentObjective.Value))

    Call EFFLPT2(Scr2.DesignContaminant.Effluent.Value, Scr2.AirToWaterRatio.Value, Scr2.DesignContaminant.HenrysConstant.Value, Scr2.WaterFlowRate.Value, Scr2.TowerArea.Value, Scr2.SpecifiedTowerHeight.Value, Scr2.DesignMassTransferCoefficient.Value, Scr2.DesignContaminant.Influent.Value)
    frmPTADScreen2!lblDesignConcentrationValue(5).Caption = Format$(Scr2.DesignContaminant.Effluent.Value, GetTheFormat(Scr2.DesignContaminant.Effluent.Value))

    Call REMOVPT(PercentRemoval, Scr2.DesignContaminant.Influent.Value, Scr2.DesignContaminant.Effluent.Value)
    frmPTADScreen2!lblDesignConcentrationValue(6).Caption = Format$(PercentRemoval, "0.0")

    'Determine Pressure Drop
    Scr2.AirPressureDrop.Value = -1#
    InitialPressureDrop = 1#
    FinalPressureDrop = 1200#
    PressureDropStep = 1#

PressureDrop:
    Call PDROP(Scr2.AirPressureDrop.Value, Scr2.AirToWaterRatio.Value, Scr2.AirLoadingRate.Value, Scr2.Packing.PackingFactor, Scr2.WaterViscosity.Value, Scr2.AirDensity.Value, Scr2.WaterDensity.Value, InitialPressureDrop, FinalPressureDrop, PressureDropStep)
    If Scr2.AirPressureDrop.Value < 0 Then
       msg = "Failure to get within one percent of the "
       msg = msg + "y-axis value on the Eckert curve "
       msg = msg + "in the pressure drop range of "
       msg = msg + Format$(InitialPressureDrop, "0.0") + " N/m2/m and " + Format$(FinalPressureDrop, "0.0")
       msg = msg + " N/m2/m using a pressure drop step of " + Format$(PressureDropStep, "0.0000") + " N/m2/m."
       msg = msg & Chr$(13) & Chr$(13)
       msg = msg + "Would you like to specify a smaller value for pressure drop step "
       msg = msg + "and attempt to achieve convergence again?"
       response = MsgBox(msg, MB_ICONquestion + MB_YESNO, "Pressure Drop Convergence Error")
       If response = IDYES Then
          If PressureDropStep <= 0.01 Then
             msg = "You can not specify a pressure drop "
             msg = msg + "step smaller than 0.01. "
             msg = msg + "Convergence not possible in this "
             msg = msg + "case."
             MsgBox msg, MB_ICONEXCLAMATION, "Pressure Drop Convergence Error"
             frmPTADScreen2!lblDesignConcentrationValue(7).Caption = "N/A"
          Else
NewPressureDrop:
             If PressureDropStep / 10 < 0.01 Then
                Answer$ = InputBox$("Enter new value for pressure drop step.", "Pressure Drop Step", Format$(0.01, "0.000"))
             Else
                Answer$ = InputBox$("Enter new value for pressure drop step.", "Pressure Drop Step", Format$(PressureDropStep / 10, "0.000"))
             End If
             On Error GoTo NewPressureDrop:
                NewStep = CDbl(Answer$)
                If NewStep < 0.01 Then
                   MsgBox "Pressure Drop step must exceed 0.01", MB_ICONEXCLAMATION, "Error"
                   GoTo NewPressureDrop
                Else
                   PressureDropStep = NewStep
                   GoTo PressureDrop:
                End If
          End If
       Else
          frmPTADScreen2!lblDesignConcentrationValue(7).Caption = "N/A"
       End If
    Else
       frmPTADScreen2!lblDesignConcentrationValue(7).Caption = Format$(Scr2.AirPressureDrop.Value, "0.0")
    End If

End Sub

Attribute VB_Name = "BubbleMod"
Option Explicit

Global Const KLA_METHOD_CWO2_TRANSFER_TEST = 1
Global Const KLA_METHOD_USER_INPUT = 2
Global Const BUBBLE_FILEID = "Properties_Bubble_Aeration"
Global Const CONTAMINANTS_BUBBLE_FILEID = "Contaminants_Bubble_Aeration"
Global Const MAXIMUM_TANKS = 15   'Maximum number of tanks for design
Global Const DESIGN_MODE = 1
Global Const RATING_MODE = 2

Global BubbleAerationMode As Integer

Type BubbleInformationType
     Value As Double
     UserInput As Integer
     ValChanged As Integer
End Type

Type BubbleInformationType2
     Value As Long
     UserInput As Integer
     ValChanged As Integer
End Type

Type CleanWaterOxygenTransferTestDataType
     SOTR As BubbleInformationType
     SOTE As BubbleInformationType
     AirFlowRate_QAIR As BubbleInformationType
     BarometricPressure_PB As BubbleInformationType
     WaterDepth_DEPTHW As BubbleInformationType
     WaterVolumePerTank_VM3 As BubbleInformationType
     DOSaturationConc_CSTR20 As Double
     WeightDensityOfWater_GAMMAW As Double
     EffectiveSaturationDepth_DEFF As Double
     ApparentOxygenMTCoeff_KLA20 As Double
     WaterVolumePerTankLiters_V As Double
     TrueKLaAt20DegC_KLAT20 As Double
     Phi As Double
     TrueOxygenMTCoeffOperatingT_KLAO2 As Double
End Type

Type OxygenInformationType
     LiquidDiffusivity As BubbleInformationType
     MassTransferCoefficient As BubbleInformationType
     KLaMethod As Integer
     CWO2TestData As CleanWaterOxygenTransferTestDataType
End Type

Type BubbleContaminantPropertyType
     Name As String
     Pressure As Double
     Temperature As Double
     Effluent(0 To MAXIMUM_TANKS) As Double
     GasEffluent(1 To MAXIMUM_TANKS) As Double
     MolecularWeight As BubbleInformationType
     HenrysConstant As BubbleInformationType
     MolarVolume As BubbleInformationType
'     NormalBoilingPoint As BubbleInformationType
     LiquidDiffusivity As BubbleInformationType
'     GasDiffusivity As BubbleInformationType
     Influent As BubbleInformationType
     TreatmentObjective As BubbleInformationType
End Type

Type PowerTypeBubble
     BlowerBrakePower As Double
     TotalBrakePower As Double
     InletAirTemperature As Double
     BlowerEfficiency As Double
     TankWaterDepth As Double
     NumberOfBlowersinEachTank As Long
End Type

Type BubbleType
     OperatingPressure As BubbleInformationType
     operatingtemperature As BubbleInformationType
     WaterDensity As BubbleInformationType
     WaterViscosity As BubbleInformationType
     N_for_Finding_KLa As BubbleInformationType
     kgOVERkl_for_Finding_KLa As BubbleInformationType
     ContaminantMassTransferCoefficient As BubbleInformationType
     WaterFlowRate As BubbleInformationType
     MinimumAirToWaterRatio As BubbleInformationType
     AirToWaterRatio As BubbleInformationType
     AirFlowRate As BubbleInformationType
     TankHydraulicRetentionTime As BubbleInformationType
     TotalHydraulicRetentionTime As BubbleInformationType
     TankVolume As BubbleInformationType
     TotalTankVolume As BubbleInformationType
     StantonNumber As BubbleInformationType
     
     NumberOfTanks As BubbleInformationType2
     
     CodeForTausAndTankVolumes As Long
     DesiredPercentRemoval As Double
     AchievedPercentRemoval As Double
     ID_OptimalDesignContaminant As Integer
     
     Power As PowerTypeBubble
     
     Chemical As Integer
     NumChemical As Integer
     Contaminant(1 To MAXCHEMICAL) As BubbleContaminantPropertyType
     DesignContaminant As BubbleContaminantPropertyType
     
     Oxygen As OxygenInformationType
End Type

Global bub As BubbleType

Global ErrorFlagBub As Long   'Error Flag passed to Sub VOLBUB


'Constants for Printing

Global Const VALUE_TAB = 60
Global Const LIQUID_EFFLUENT_TAB = 45
Global Const GAS_EFFLUENT_TAB = 65
Global Const MWT_TAB = 10
Global Const HC_TAB = 21
Global Const VB_TAB = 32
Global Const DIFL_TAB = 43
Global Const MTCOEFF_TAB = 54
Global Const STANTON_TAB = 65

Sub CalculateAirToWaterRatio()

  Call VQBUB(bub.AirToWaterRatio.Value, bub.AirFlowRate.Value, bub.WaterFlowRate.Value)
  frmBubble!txtFlowParameters(2).Text = Format$(bub.AirToWaterRatio.Value, GetTheFormat(bub.AirToWaterRatio.Value))
  bub.AirToWaterRatio.UserInput = False

End Sub

Sub CalculateApparentKLa()

  Call KLA20A(bub.Oxygen.CWO2TestData.ApparentOxygenMTCoeff_KLA20, bub.Oxygen.CWO2TestData.WaterVolumePerTankLiters_V, bub.Oxygen.CWO2TestData.WaterVolumePerTank_VM3.Value, bub.Oxygen.CWO2TestData.DOSaturationConc_CSTR20, bub.Oxygen.CWO2TestData.SOTR.Value)
  frmOxygenMassTransferCoeff!lblDataParameters(7).Caption = Format$(bub.Oxygen.CWO2TestData.ApparentOxygenMTCoeff_KLA20, GetTheFormat(bub.Oxygen.CWO2TestData.ApparentOxygenMTCoeff_KLA20))

End Sub

Sub CalculateContaminantMTCoeff()

  Call KLABUB(bub.ContaminantMassTransferCoefficient.Value, bub.Oxygen.MassTransferCoefficient.Value, bub.DesignContaminant.LiquidDiffusivity.Value, bub.Oxygen.LiquidDiffusivity.Value, bub.N_for_Finding_KLa.Value, bub.kgOVERkl_for_Finding_KLa.Value, bub.DesignContaminant.HenrysConstant.Value)
   
  'UPDATED_UNITS.
  'frmBubble!txtDesignConcentrationValue(3).Text = Format$(bub.ContaminantMassTransferCoefficient.Value, GetTheFormat(bub.ContaminantMassTransferCoefficient.Value))
  Call Unitted_NumberUpdate(frmBubble!UnitsDesignContam(3))
   
  bub.ContaminantMassTransferCoefficient.UserInput = False

End Sub

Sub CalculateDOSaturationConc()

  Call GETCSTAR(bub.Oxygen.CWO2TestData.DOSaturationConc_CSTR20, bub.Oxygen.CWO2TestData.WeightDensityOfWater_GAMMAW, bub.Oxygen.CWO2TestData.EffectiveSaturationDepth_DEFF, bub.Oxygen.CWO2TestData.BarometricPressure_PB.Value, bub.Oxygen.CWO2TestData.WaterDepth_DEPTHW.Value)
  frmOxygenMassTransferCoeff!lblDataParameters(6).Caption = Format$(bub.Oxygen.CWO2TestData.DOSaturationConc_CSTR20, GetTheFormat(bub.Oxygen.CWO2TestData.DOSaturationConc_CSTR20))
   
End Sub

Sub CalculateEffluentConcentrationsBubble()
ReDim Effluent(0 To MAXIMUM_TANKS) As Double
ReDim GasEffluent(1 To MAXIMUM_TANKS) As Double
Dim i As Integer
Dim Dummy As Double

  Call EFFLBUB(Effluent(0), GasEffluent(1), bub.DesignContaminant.HenrysConstant.Value, bub.DesignContaminant.Influent.Value, bub.AirToWaterRatio.Value, bub.NumberOfTanks.Value, bub.StantonNumber.Value)
  For i = 1 To bub.NumberOfTanks.Value
    bub.DesignContaminant.Effluent(i) = Effluent(i)
    bub.DesignContaminant.GasEffluent(i) = GasEffluent(i)
  Next i

  'UPDATED_UNITS.
  'frmBubble!lblConcentrationResults(3).Caption = Format$(bub.DesignContaminant.Effluent(bub.NumberOfTanks.Value), GetTheFormat(bub.DesignContaminant.Effluent(bub.NumberOfTanks.Value)))
  Dummy = bub.DesignContaminant.Effluent(bub.NumberOfTanks.Value)
  Call Unitted_NumberUpdate(frmBubble!UnitsConcResults(3))
  
  For i = 1 To bub.NumberOfTanks.Value
    frmBubbleEffluentConcentrations!lblTankNumber(i).Visible = True
    frmBubbleEffluentConcentrations!lblLiquidEffluent(i).Visible = True
    frmBubbleEffluentConcentrations!lblGasEffluent(i).Visible = True
    frmBubbleEffluentConcentrations!lblTankNumber(i).Caption = Trim$(Str$(i))
    frmBubbleEffluentConcentrations.lblLiquidEffluent(i).Caption = Format$(bub.DesignContaminant.Effluent(i), GetTheFormat(bub.DesignContaminant.Effluent(i)))
    frmBubbleEffluentConcentrations.lblGasEffluent(i).Caption = Format$(bub.DesignContaminant.GasEffluent(i), GetTheFormat(bub.DesignContaminant.GasEffluent(i)))
  Next i

  For i = (bub.NumberOfTanks.Value + 1) To MAXIMUM_TANKS
    frmBubbleEffluentConcentrations!lblTankNumber(i).Visible = False
    frmBubbleEffluentConcentrations!lblLiquidEffluent(i).Visible = False
    frmBubbleEffluentConcentrations!lblGasEffluent(i).Visible = False
  Next i

  i = bub.NumberOfTanks.Value
  frmBubbleEffluentConcentrations!cmdOK.Top = frmBubbleEffluentConcentrations!lblTankNumber(i).Top + frmBubbleEffluentConcentrations!lblTankNumber(i).Height + 300
  frmBubbleEffluentConcentrations.Height = frmBubbleEffluentConcentrations!cmdOK.Top + frmBubbleEffluentConcentrations!cmdOK.Height + 500
  frmBubbleEffluentConcentrations!cmdOK.Left = frmBubbleEffluentConcentrations.Width / 2 - frmBubbleEffluentConcentrations!cmdOK.Width / 2
       
  Call CalculateAchievedPercentRemovalBubble

End Sub

Sub CalculateMinAirToWaterRatio()

  If BubbleAerationMode = DESIGN_MODE Then
    frmBubble!lblFlowParameters(1).Enabled = True
    Call VQMINBUB(bub.MinimumAirToWaterRatio.Value, bub.DesignContaminant.Influent.Value, bub.DesignContaminant.TreatmentObjective.Value, bub.DesignContaminant.HenrysConstant.Value, bub.NumberOfTanks.Value)
    frmBubble!lblFlowParameters(1).Caption = Format$(bub.MinimumAirToWaterRatio.Value, GetTheFormat(bub.MinimumAirToWaterRatio.Value))
  Else
    frmBubble!lblFlowParameters(1).Caption = "N/A"
    frmBubble!lblFlowParameters(1).Enabled = False
  End If

End Sub

Sub CalculateOxygenLiquidDiffusivity()

  Call DIFO2(bub.Oxygen.LiquidDiffusivity.Value, bub.operatingtemperature.Value)
  'frmBubble!txtOxygen(1).Text = Format$(bub.Oxygen.LiquidDiffusivity.Value, GetTheFormat(bub.Oxygen.LiquidDiffusivity.Value))
  Call Unitted_NumberUpdate(frmBubble!UnitsOxygenRef(1))
  bub.Oxygen.LiquidDiffusivity.UserInput = False

End Sub

Sub CalculatePowerBubble()

  Call PCALCBUB(bub.Power.TotalBrakePower, bub.Power.BlowerBrakePower, bub.OperatingPressure.Value, bub.Power.InletAirTemperature, bub.AirFlowRate.Value, bub.Power.BlowerEfficiency, bub.WaterDensity.Value, bub.Power.TankWaterDepth, bub.NumberOfTanks.Value, bub.Power.NumberOfBlowersinEachTank)

End Sub

Sub CalculateRetentionTimesAndTankVolumes()
Dim Dummy As Double

  Call TAUSVOLS(bub.TotalHydraulicRetentionTime.Value, bub.NumberOfTanks.Value, bub.TankHydraulicRetentionTime.Value, bub.TankVolume.Value, bub.TotalTankVolume.Value, bub.WaterFlowRate.Value, bub.CodeForTausAndTankVolumes)

  Select Case bub.CodeForTausAndTankVolumes
    Case 1   'Input Fluid Residence Time of Each Tank
      frmBubble!txtTankParameters(2).Text = Format$(bub.TotalHydraulicRetentionTime.Value, GetTheFormat(bub.TotalHydraulicRetentionTime.Value))
      frmBubble!txtTankParameters(3).Text = Format$(bub.TankVolume.Value, GetTheFormat(bub.TankVolume.Value))
      frmBubble!txtTankParameters(4).Text = Format$(bub.TotalTankVolume.Value, GetTheFormat(bub.TotalTankVolume.Value))
      bub.TotalHydraulicRetentionTime.UserInput = False
      bub.TankVolume.UserInput = False
      bub.TotalTankVolume.UserInput = False
    Case 2   'Input Total Fluid Residence Time
      frmBubble!txtTankParameters(1).Text = Format$(bub.TankHydraulicRetentionTime.Value, GetTheFormat(bub.TankHydraulicRetentionTime.Value))
      frmBubble!txtTankParameters(3).Text = Format$(bub.TankVolume.Value, GetTheFormat(bub.TankVolume.Value))
      frmBubble!txtTankParameters(4).Text = Format$(bub.TotalTankVolume.Value, GetTheFormat(bub.TotalTankVolume.Value))
      bub.TankHydraulicRetentionTime.UserInput = False
      bub.TankVolume.UserInput = False
      bub.TotalTankVolume.UserInput = False
    Case 3   'Input Volume of Each Tank
      frmBubble!txtTankParameters(1).Text = Format$(bub.TankHydraulicRetentionTime.Value, GetTheFormat(bub.TankHydraulicRetentionTime.Value))
      frmBubble!txtTankParameters(2).Text = Format$(bub.TotalHydraulicRetentionTime.Value, GetTheFormat(bub.TotalHydraulicRetentionTime.Value))
      frmBubble!txtTankParameters(4).Text = Format$(bub.TotalTankVolume.Value, GetTheFormat(bub.TotalTankVolume.Value))
      bub.TankHydraulicRetentionTime.UserInput = False
      bub.TotalHydraulicRetentionTime.UserInput = False
      bub.TotalTankVolume.UserInput = False
    Case 4   'Input Total Volume of All Tanks
      frmBubble!txtTankParameters(1).Text = Format$(bub.TankHydraulicRetentionTime.Value, GetTheFormat(bub.TankHydraulicRetentionTime.Value))
      frmBubble!txtTankParameters(2).Text = Format$(bub.TotalHydraulicRetentionTime.Value, GetTheFormat(bub.TotalHydraulicRetentionTime.Value))
      frmBubble!txtTankParameters(3).Text = Format$(bub.TankVolume.Value, GetTheFormat(bub.TankVolume.Value))
      bub.TankHydraulicRetentionTime.UserInput = False
      bub.TotalHydraulicRetentionTime.UserInput = False
      bub.TankVolume.UserInput = False
  End Select

  Call Unitted_NumberUpdate(frmBubble!UnitsTankParam(1))
  Call Unitted_NumberUpdate(frmBubble!UnitsTankParam(2))
  Call Unitted_NumberUpdate(frmBubble!UnitsTankParam(3))
  Call Unitted_NumberUpdate(frmBubble!UnitsTankParam(4))

End Sub

Sub CalculateSOTE()

  Call GETSOTE(bub.Oxygen.CWO2TestData.SOTE.Value, bub.Oxygen.CWO2TestData.SOTR.Value, bub.Oxygen.CWO2TestData.AirFlowRate_QAIR.Value)
  frmOxygenMassTransferCoeff!txtDataParameters(0).Text = Format$(bub.Oxygen.CWO2TestData.SOTE.Value, GetTheFormat(bub.Oxygen.CWO2TestData.SOTE.Value))
    
End Sub

Sub CalculateSOTR()

  Call GETSOTR(bub.Oxygen.CWO2TestData.SOTR.Value, bub.Oxygen.CWO2TestData.SOTE.Value, bub.Oxygen.CWO2TestData.AirFlowRate_QAIR.Value)
  frmOxygenMassTransferCoeff!txtDataParameters(1).Text = Format$(bub.Oxygen.CWO2TestData.SOTR.Value, GetTheFormat(bub.Oxygen.CWO2TestData.SOTR.Value))

End Sub

Sub CalculateStantonNo()

  Call GETPHIB(bub.StantonNumber.Value, bub.ContaminantMassTransferCoefficient.Value, bub.TankVolume.Value, bub.DesignContaminant.HenrysConstant.Value, bub.AirFlowRate.Value)
  frmBubble!lblStanton.Caption = Format$(bub.StantonNumber.Value, GetTheFormat(bub.StantonNumber.Value))
      
End Sub

Sub CalculateTankVolumeBubble()

CalculateVolume:
  Call VOLBUB(bub.TankVolume.Value, bub.DesignContaminant.HenrysConstant.Value, bub.AirFlowRate.Value, bub.ContaminantMassTransferCoefficient.Value, bub.DesignContaminant.Influent.Value, bub.DesignContaminant.TreatmentObjective.Value, bub.NumberOfTanks.Value, bub.WaterFlowRate.Value, ErrorFlagBub)
  If ErrorFlagBub <> -1 Then
    'frmBubble!txtTankParameters(3).Text = Format$(bub.TankVolume.Value, GetTheFormat(bub.TankVolume.Value))
    Call Unitted_NumberUpdate(frmBubble!UnitsTankParam(3))
    bub.TankVolume.UserInput = False
  Else
    If bub.AirToWaterRatio.Value < bub.MinimumAirToWaterRatio.Value Then
      frmBubbleAchievingRemovalEfficiency!lblAchieving(0).Caption = Format$(bub.MinimumAirToWaterRatio.Value, GetTheFormat(bub.MinimumAirToWaterRatio.Value))
      frmBubbleAchievingRemovalEfficiency!txtAchieving(1).Text = Format$(bub.AirToWaterRatio.Value, GetTheFormat(bub.AirToWaterRatio.Value))
      frmBubbleAchievingRemovalEfficiency!txtAchieving(2).Text = Format$(bub.NumberOfTanks.Value, "0")
      frmBubbleAchievingRemovalEfficiency.Show 1
      GoTo CalculateVolume
    End If
  End If

End Sub

Sub CalculateTrueKLa()

  Call TrueKLa(bub.Oxygen.CWO2TestData.TrueOxygenMTCoeffOperatingT_KLAO2, bub.Oxygen.CWO2TestData.TrueKLaAt20DegC_KLAT20, bub.Oxygen.CWO2TestData.Phi, bub.Oxygen.CWO2TestData.AirFlowRate_QAIR.Value, bub.Oxygen.CWO2TestData.WaterVolumePerTankLiters_V, bub.Oxygen.CWO2TestData.BarometricPressure_PB.Value, bub.Oxygen.CWO2TestData.WeightDensityOfWater_GAMMAW, bub.Oxygen.CWO2TestData.ApparentOxygenMTCoeff_KLA20, bub.Oxygen.CWO2TestData.EffectiveSaturationDepth_DEFF, bub.operatingtemperature.Value)
  frmOxygenMassTransferCoeff!lblDataParameters(8).Caption = Format$(bub.Oxygen.CWO2TestData.Phi, GetTheFormat(bub.Oxygen.CWO2TestData.Phi))
  frmOxygenMassTransferCoeff!lblDataParameters(9).Caption = Format$(bub.Oxygen.CWO2TestData.TrueKLaAt20DegC_KLAT20, GetTheFormat(bub.Oxygen.CWO2TestData.TrueKLaAt20DegC_KLAT20))
  frmOxygenMassTransferCoeff!lblDataParameters(10).Caption = "1.024"
  frmOxygenMassTransferCoeff!lblDataParameters(11).Caption = Format$(bub.Oxygen.CWO2TestData.TrueOxygenMTCoeffOperatingT_KLAO2, GetTheFormat(bub.Oxygen.CWO2TestData.TrueOxygenMTCoeffOperatingT_KLAO2))
   
End Sub

Sub CalculateWaterPropertiesBubble()
Dim Pressure As Double
Dim Temperature As Double
Dim WaterDensity As Double
Dim WaterViscosity As Double
Dim i As Integer
    
    
       Pressure = bub.OperatingPressure.Value
       Temperature = bub.operatingtemperature.Value

       For i = 0 To 1
           If frmWaterPropertiesBubble!chkUpdateValues(i).Value = True Then
              Select Case i
                 Case 0
                    If HaveValue(Temperature) Then
                       Call H2ODENS(WaterDensity, Temperature)
                       bub.WaterDensity.Value = WaterDensity
                       bub.WaterDensity.UserInput = False
                       bub.WaterDensity.ValChanged = True
                       frmWaterPropertiesBubble.txtAirWaterProperties(0).Text = Format$(WaterDensity, "###0.00")
                       frmWaterPropertiesBubble.lblValueSource(0).Caption = "Correlation"
                    End If
                 Case 1
                    If HaveValue(Temperature) Then
                       Call H2OVISC(WaterViscosity, Temperature)
                       bub.WaterViscosity.Value = WaterViscosity
                       bub.WaterViscosity.UserInput = False
                       bub.WaterViscosity.ValChanged = True
                       frmWaterPropertiesBubble.txtAirWaterProperties(1).Text = Format$(WaterViscosity, "0.000E+##")
                       frmWaterPropertiesBubble.lblValueSource(1).Caption = "Correlation"
                    End If
              End Select
          End If
       Next i
    

End Sub

Sub InitializeCWO2TestData()

  bub.Oxygen.CWO2TestData.SOTR.Value = 1469.6
  bub.Oxygen.CWO2TestData.SOTE.Value = 12.974691
  bub.Oxygen.CWO2TestData.AirFlowRate_QAIR.Value = 1699#
  bub.Oxygen.CWO2TestData.BarometricPressure_PB.Value = 1#
  bub.Oxygen.CWO2TestData.WaterDepth_DEPTHW.Value = 4#
  bub.Oxygen.CWO2TestData.WaterVolumePerTank_VM3.Value = 485.63655

  frmOxygenMassTransferCoeff!txtDataParameters(1).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.SOTR.Value))
  frmOxygenMassTransferCoeff!txtDataParameters(0).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.SOTE.Value))
  frmOxygenMassTransferCoeff!txtDataParameters(2).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.AirFlowRate_QAIR.Value))
  frmOxygenMassTransferCoeff!txtDataParameters(3).Text = Trim$(Format$(bub.Oxygen.CWO2TestData.BarometricPressure_PB.Value * 101325# / 1#))
  frmOxygenMassTransferCoeff!txtDataParameters(4).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.WaterDepth_DEPTHW.Value))
  frmOxygenMassTransferCoeff!txtDataParameters(5).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.WaterVolumePerTank_VM3.Value))

  frmOxygenMassTransferCoeff!optDataAvailable(0).Value = True
  frmOxygenMassTransferCoeff!txtDataParameters(0).Enabled = False
  frmOxygenMassTransferCoeff!txtDataParameters(1).Enabled = True

  Call CalculateDOSaturationConc
  Call CalculateApparentKLa
  Call CalculateTrueKLa

End Sub

Sub InitializeOxygenMTCoeff()

  frmBubble!cboOxygen.ListIndex = 1   'User input
  bub.Oxygen.KLaMethod = KLA_METHOD_USER_INPUT
  bub.Oxygen.MassTransferCoefficient.Value = 0.0046
  frmBubble!txtOxygen(2).Text = "0.0046"
  'frmBubble!UnitsOxygenRef(2).ListIndex = 0

End Sub

Sub InitializePressureTemperatureBubble()
    
  '*****************************************************
  '*                                                   *
  '* Initialize Pressure and Temperature to defaults:  *
  '*                                                   *
  '*  Operating Pressure = 1 atm                       *
  '*  Operating Temperature = 10.0 C                   *
  '*                                                   *
  '*****************************************************

  bub.OperatingPressure.Value = 1#
  bub.OperatingPressure.ValChanged = True
  bub.operatingtemperature.Value = 293.15
  bub.operatingtemperature.ValChanged = True

  frmBubble.txtOperatingPressure.Text = "101325.0"
  frmBubble.txtOperatingTemperature.Text = "20.00"

  Call CalculateWaterPropertiesBubble
  Call CalculateOxygenLiquidDiffusivity

End Sub

Sub loadbubble(OverrideFilename As String)
Dim FileID As String, msg As String
Dim i As Integer
Dim TransferTestDummy As Integer
Dim CommentDummy As String
Dim SelectedContaminant As Integer
ReDim u(10) As String
Dim xu As rec_Units_frmContaminantPropertyEdit

    If (OverrideFilename <> "") Then
      Filename = OverrideFilename
    Else
      If Filename = "TheDefaultCaseBubble" Then
        If BubbleAerationMode = DESIGN_MODE Then
          Filename = App.Path & "\dbase\defltdes.bub"
        Else
          Filename = App.Path & "\dbase\defltrat.bub"
        End If
      Else
        Call LoadFileBubble(Filename)
      End If
    End If
    
    If Filename$ <> "" Then
       FileID = ""
       Open Filename$ For Input As #1
       On Error Resume Next
       Input #1, FileID
       If FileID <> BUBBLE_FILEID Then
          msg = "Invalid Design File"
          MsgBox msg, 48, "Error"
          Close #1
          Exit Sub
       End If

       'frmListContaminantBubble.ListContaminants.Clear
       frmBubble!cboDesignContaminant.Clear

       Input #1, BubbleAerationMode, CommentDummy
       If BubbleAerationMode = DESIGN_MODE Then
          frmBubble.Caption = "Bubble Aeration - Design Mode"
          frmBubble!mnuFile(0).Caption = "Switch to &Rating Mode"
       ElseIf BubbleAerationMode = RATING_MODE Then
          frmBubble.Caption = "Bubble Aeration - Rating Mode"
          frmBubble!mnuFile(0).Caption = "Switch to &Design Mode"
       End If

       Input #1, bub.OperatingPressure.Value, CommentDummy
       frmBubble!txtOperatingPressure.Text = Format$(bub.OperatingPressure.Value * 101325# / 1#, "0.00")

       Input #1, bub.operatingtemperature.Value, CommentDummy
       frmBubble!txtOperatingTemperature.Text = Format$(bub.operatingtemperature.Value - 273.15, "0.0")

       Call CalculateWaterPropertiesBubble
       Call CalculateOxygenLiquidDiffusivity

       Input #1, bub.Oxygen.KLaMethod, CommentDummy
       If bub.Oxygen.KLaMethod = KLA_METHOD_USER_INPUT Then
          Input #1, bub.Oxygen.MassTransferCoefficient.Value, CommentDummy
          frmBubble!cboOxygen.ListIndex = 1
          frmBubble!txtOxygen(2).Text = Trim$(Str$(bub.Oxygen.MassTransferCoefficient.Value))
          Call CalculateTrueKLa  'Initialize Oxygen Mass Transfer Coefficient to Correct

       ElseIf bub.Oxygen.KLaMethod = KLA_METHOD_CWO2_TRANSFER_TEST Then
          Input #1, TransferTestDummy, CommentDummy
          If TransferTestDummy = 1 Then       'SOTR vs. QAIR data available
             Input #1, bub.Oxygen.CWO2TestData.SOTR.Value, CommentDummy
             Input #1, bub.Oxygen.CWO2TestData.AirFlowRate_QAIR.Value, CommentDummy
             Input #1, bub.Oxygen.CWO2TestData.BarometricPressure_PB.Value, CommentDummy
             Input #1, bub.Oxygen.CWO2TestData.WaterDepth_DEPTHW.Value, CommentDummy
             Input #1, bub.Oxygen.CWO2TestData.WaterVolumePerTank_VM3.Value, CommentDummy

             frmOxygenMassTransferCoeff!txtDataParameters(1).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.SOTR.Value))
             frmOxygenMassTransferCoeff!txtDataParameters(2).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.AirFlowRate_QAIR.Value))
             frmOxygenMassTransferCoeff!txtDataParameters(3).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.BarometricPressure_PB.Value * 101325# / 1#))
             frmOxygenMassTransferCoeff!txtDataParameters(4).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.WaterDepth_DEPTHW.Value))
             frmOxygenMassTransferCoeff!txtDataParameters(5).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.WaterVolumePerTank_VM3.Value))

             frmOxygenMassTransferCoeff!optDataAvailable(0).Value = True
             frmOxygenMassTransferCoeff!txtDataParameters(0).Enabled = False
             frmOxygenMassTransferCoeff!txtDataParameters(1).Enabled = True

             Call CalculateSOTE
             Call CalculateDOSaturationConc
             Call CalculateApparentKLa
             Call CalculateTrueKLa
             frmBubble!cboOxygen.ListIndex = 0
             frmOxygenMassTransferCoeff.Hide
             frmBubble!txtOxygen(2).Text = frmOxygenMassTransferCoeff!lblDataParameters(11).Caption
             bub.Oxygen.MassTransferCoefficient.Value = bub.Oxygen.CWO2TestData.TrueOxygenMTCoeffOperatingT_KLAO2
             
          ElseIf TransferTestDummy = 2 Then   'SOTE vs. QAIR data available
   
             Input #1, bub.Oxygen.CWO2TestData.SOTE.Value, CommentDummy
             Input #1, bub.Oxygen.CWO2TestData.AirFlowRate_QAIR.Value, CommentDummy
             Input #1, bub.Oxygen.CWO2TestData.BarometricPressure_PB.Value, CommentDummy
             Input #1, bub.Oxygen.CWO2TestData.WaterDepth_DEPTHW.Value, CommentDummy
             Input #1, bub.Oxygen.CWO2TestData.WaterVolumePerTank_VM3.Value, CommentDummy
                       
             frmOxygenMassTransferCoeff!txtDataParameters(0).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.SOTE.Value))
             frmOxygenMassTransferCoeff!txtDataParameters(2).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.AirFlowRate_QAIR.Value))
             frmOxygenMassTransferCoeff!txtDataParameters(3).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.BarometricPressure_PB.Value * 101325# / 1#))
             frmOxygenMassTransferCoeff!txtDataParameters(4).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.WaterDepth_DEPTHW.Value))
             frmOxygenMassTransferCoeff!txtDataParameters(5).Text = Trim$(Str$(bub.Oxygen.CWO2TestData.WaterVolumePerTank_VM3.Value))

             frmOxygenMassTransferCoeff!optDataAvailable(1).Value = True
             frmOxygenMassTransferCoeff!txtDataParameters(1).Enabled = False
             frmOxygenMassTransferCoeff!txtDataParameters(0).Enabled = True

             Call CalculateSOTR
             Call CalculateDOSaturationConc
             Call CalculateApparentKLa
             Call CalculateTrueKLa
             
             frmBubble!cboOxygen.ListIndex = 0
             frmOxygenMassTransferCoeff.Hide
             frmBubble!txtOxygen(2).Text = frmOxygenMassTransferCoeff!lblDataParameters(11).Caption
             bub.Oxygen.MassTransferCoefficient.Value = bub.Oxygen.CWO2TestData.TrueOxygenMTCoeffOperatingT_KLAO2

          End If
       End If

       Input #1, bub.NumChemical, CommentDummy
       For i = 1 To bub.NumChemical
           Input #1, bub.Contaminant(i).Pressure, bub.Contaminant(i).Temperature, bub.Contaminant(i).Name, bub.Contaminant(i).MolecularWeight.Value, bub.Contaminant(i).HenrysConstant.Value, bub.Contaminant(i).MolarVolume.Value, bub.Contaminant(i).LiquidDiffusivity.Value, bub.Contaminant(i).Influent.Value, bub.Contaminant(i).TreatmentObjective.Value
           'frmListContaminantBubble.ListContaminants.AddItem bub.Contaminant(i).Name
           frmBubble!cboDesignContaminant.AddItem bub.Contaminant(i).Name
       Next i

       Input #1, bub.DesignContaminant.Name, CommentDummy

       Call SetDesignContaminantEnabledBubble(CInt(frmBubble!cboDesignContaminant.ListCount))

       For i = 1 To bub.NumChemical
           If bub.DesignContaminant.Name = bub.Contaminant(i).Name Then
              bub.DesignContaminant = bub.Contaminant(i)
              'frmListContaminantBubble!ListContaminants.Selected(i - 1) = True
              SelectedContaminant = i - 1
              Exit For
           End If
       Next i

       'If frmListContaminantBubble.mnuOptionsManipulateContaminant(1).Enabled = False Then
       '   frmListContaminantBubble.mnuOptionsManipulateContaminant(1).Enabled = True
       '   frmListContaminantBubble.mnuOptionsManipulateContaminant(3).Enabled = True
       '   frmListContaminantBubble.mnuOptionsManipulateContaminant(4).Enabled = True
       '   frmListContaminantBubble.mnuOptionsSave.Enabled = True
       '   frmListContaminantBubble.mnuOptionsView.Enabled = True
       '
       '   frmBubble!mnuFile(4).Enabled = True
       '   frmBubble!mnuFile(5).Enabled = True
       '   frmBubble!mnuOptions(0).Enabled = True
       'End If

       Call CalculateContaminantMTCoeff

       Input #1, bub.WaterFlowRate.Value, CommentDummy
       frmBubble!txtFlowParameters(0).Text = Format$(bub.WaterFlowRate.Value, GetTheFormat(bub.WaterFlowRate.Value))

       Input #1, bub.AirToWaterRatio.Value, bub.AirToWaterRatio.UserInput, CommentDummy
       frmBubble!txtFlowParameters(2).Text = Format$(bub.AirToWaterRatio.Value, GetTheFormat(bub.AirToWaterRatio.Value))

       Input #1, bub.AirFlowRate.Value, bub.AirFlowRate.UserInput, CommentDummy
       frmBubble!txtFlowParameters(3).Text = Format$(bub.AirFlowRate.Value, GetTheFormat(bub.AirFlowRate.Value))

       If bub.AirToWaterRatio.UserInput = True Then
          Call CalculateAirFlowRate
       Else
          Call CalculateAirToWaterRatio
       End If

       Input #1, bub.NumberOfTanks.Value, CommentDummy
       frmBubble!txtTankParameters(0).Text = Format$(bub.NumberOfTanks.Value, "0")

       Input #1, bub.CodeForTausAndTankVolumes, CommentDummy

          Select Case bub.CodeForTausAndTankVolumes
             Case 1   'Input Hydraulic Retention Time for 1 Tank
                Input #1, bub.TankHydraulicRetentionTime.Value, CommentDummy
                frmBubble!txtTankParameters(1).Text = Format$(bub.TankHydraulicRetentionTime.Value, GetTheFormat(bub.TankHydraulicRetentionTime.Value))
                bub.TankHydraulicRetentionTime.UserInput = True
             Case 2   'Input Hydraulic Retention Time for All Tanks
                Input #1, bub.TotalHydraulicRetentionTime.Value, CommentDummy
                frmBubble!txtTankParameters(2).Text = Format$(bub.TotalHydraulicRetentionTime.Value, GetTheFormat(bub.TotalHydraulicRetentionTime.Value))
                bub.TotalHydraulicRetentionTime.UserInput = True
             Case 3   'Input Volume of Each Tank
                Input #1, bub.TankVolume.Value, CommentDummy
                frmBubble!txtTankParameters(3).Text = Format$(bub.TankVolume.Value, GetTheFormat(bub.TankVolume.Value))
                bub.TankVolume.UserInput = True
             Case 4   'Input Volume of All Tanks
                Input #1, bub.TotalTankVolume.Value, CommentDummy
                frmBubble!txtTankParameters(4).Text = Format$(bub.TotalTankVolume.Value, GetTheFormat(bub.TotalTankVolume.Value))
                bub.TotalTankVolume.UserInput = True
          End Select

       Input #1, bub.Power.BlowerEfficiency, CommentDummy
       Input #1, bub.Power.TankWaterDepth, CommentDummy
       Input #1, bub.Power.NumberOfBlowersinEachTank, CommentDummy
    

       If BubbleAerationMode = DESIGN_MODE Then
          bub.CodeForTausAndTankVolumes = 3
          Call CalculateTankVolumeBubble
          For i = 1 To 4
              frmBubble!txtTankParameters(i).Enabled = False
          Next i
       Else
          For i = 1 To 4
              frmBubble!txtTankParameters(i).Enabled = True
          Next i
       End If

       Call CalculateRetentionTimesAndTankVolumes
       frmBubble.cboDesignContaminant.ListIndex = SelectedContaminant

       'Input the units of this screen.
       Input #1, u(1), u(2)
       Call SetUnits(frmBubble!UnitsOpCond(0), u(1))
       Call SetUnits(frmBubble!UnitsOpCond(1), u(2))
      
       Input #1, u(1), u(2)
       Call SetUnits(frmBubble!UnitsOxygenRef(1), u(1))
       Call SetUnits(frmBubble!UnitsOxygenRef(2), u(2))
      
       Input #1, u(1), u(2), u(3)
       Call SetUnits(frmBubble!UnitsDesignContam(0), u(1))
       Call SetUnits(frmBubble!UnitsDesignContam(1), u(2))
       Call SetUnits(frmBubble!UnitsDesignContam(3), u(3))
      
       Input #1, u(1), u(2)
       Call SetUnits(frmBubble!UnitsFlowParam(0), u(1))
       Call SetUnits(frmBubble!UnitsFlowParam(3), u(2))
      
       Input #1, u(1), u(2), u(3), u(4)
       Call SetUnits(frmBubble!UnitsTankParam(1), u(1))
       Call SetUnits(frmBubble!UnitsTankParam(2), u(2))
       Call SetUnits(frmBubble!UnitsTankParam(3), u(3))
       Call SetUnits(frmBubble!UnitsTankParam(4), u(4))
      
       Input #1, u(1), u(2), u(3)
       Call SetUnits(frmBubble!UnitsConcResults(1), u(1))
       Call SetUnits(frmBubble!UnitsConcResults(2), u(2))
       Call SetUnits(frmBubble!UnitsConcResults(3), u(3))
      
       'Input the units of frmContaminantPropertyEdit.
       xu = Units_frmContaminantPropertyEdit
       Input #1, xu.UnitsProp(0), xu.UnitsProp(2), xu.UnitsProp(3), xu.UnitsProp(4), xu.UnitsProp(5)
       Input #1, xu.UnitsConc(0), xu.UnitsConc(1)
       Units_frmContaminantPropertyEdit = xu
      
       Close #1

       If Right$(Filename, 12) = "defltdes.bub" Or Right$(Filename, 12) = "defltrat.bub" Then
          frmBubble.Caption = frmBubble.Caption & " (" & "untitled.bub" & ")"
       Else
          frmBubble.Caption = frmBubble.Caption & " (" & Filename & ")"
       End If

    End If

End Sub

Sub bubble_results()
    Dim i As Integer, j As Integer
    ReDim ContaminantMTCoeff(1 To MAXCHEMICAL) As Double
    ReDim StantonNumber(1 To MAXCHEMICAL) As Double
    ReDim DesiredPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim AchievedPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim Effluent(0 To MAXIMUM_TANKS) As Double
    ReDim GasEffluent(1 To MAXIMUM_TANKS) As Double
    Dim ContaminantGlossaryBottom As Integer, GlossaryBottom As Integer

          For i = 1 To bub.NumChemical
              If bub.DesignContaminant.Name = bub.Contaminant(i).Name Then
                 DesiredPercentRemoval(i) = bub.DesiredPercentRemoval
                 ContaminantMTCoeff(i) = bub.ContaminantMassTransferCoefficient.Value
                 StantonNumber(i) = bub.StantonNumber.Value
                 bub.Contaminant(i).Effluent(0) = bub.DesignContaminant.Effluent(0)
                 For j = 1 To bub.NumberOfTanks.Value
                     bub.Contaminant(i).Effluent(j) = bub.DesignContaminant.Effluent(j)
                     bub.Contaminant(i).GasEffluent(j) = bub.DesignContaminant.GasEffluent(j)
                 Next j
                 AchievedPercentRemoval(i) = bub.AchievedPercentRemoval
              Else
                 Call REMOVBUB(DesiredPercentRemoval(i), bub.Contaminant(i).Influent.Value, bub.Contaminant(i).TreatmentObjective.Value)
                 Call KLABUB(ContaminantMTCoeff(i), bub.Oxygen.MassTransferCoefficient.Value, bub.Contaminant(i).LiquidDiffusivity.Value, bub.Oxygen.LiquidDiffusivity.Value, bub.N_for_Finding_KLa.Value, bub.kgOVERkl_for_Finding_KLa.Value, bub.Contaminant(i).HenrysConstant.Value)
                 Call GETPHIB(StantonNumber(i), ContaminantMTCoeff(i), bub.TankVolume.Value, bub.Contaminant(i).HenrysConstant.Value, bub.AirFlowRate.Value)
                 Call EFFLBUB(Effluent(0), GasEffluent(1), bub.Contaminant(i).HenrysConstant.Value, bub.Contaminant(i).Influent.Value, bub.AirToWaterRatio.Value, bub.NumberOfTanks.Value, StantonNumber(i))
                 bub.Contaminant(i).Effluent(0) = Effluent(0)
                 For j = 1 To bub.NumberOfTanks.Value
                     bub.Contaminant(i).Effluent(j) = Effluent(j)
                     bub.Contaminant(i).GasEffluent(j) = GasEffluent(j)
                 Next j
                 Call REMOVBUB(AchievedPercentRemoval(i), bub.Contaminant(i).Influent.Value, bub.Contaminant(i).Effluent(bub.NumberOfTanks.Value))
              End If
          Next i

    For i = 0 To MAXCHEMICAL - 1
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i + 10).Visible = False
        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblContaminantName(i).Visible = False

    Next i

    For i = 1 To bub.NumChemical
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i + 10 - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblContaminantName(i - 1).Visible = True

        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i - 1).Caption = Format$(bub.Contaminant(i).Influent.Value, GetTheFormat(bub.Contaminant(i).Influent.Value))
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i - 1).Caption = Format$(bub.Contaminant(i).TreatmentObjective.Value, GetTheFormat(bub.Contaminant(i).TreatmentObjective.Value))
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i - 1).Caption = Format$(DesiredPercentRemoval(i), "0.0")
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i - 1).Caption = Format$(bub.Contaminant(i).Effluent(bub.NumberOfTanks.Value), GetTheFormat(bub.Contaminant(i).Effluent(bub.NumberOfTanks.Value)))
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i - 1).Caption = Format$(AchievedPercentRemoval(i), "0.0")
        frmViewEffluentConcentrationsASAP!lblContaminantName(i - 1).Caption = Trim$(LCase$(bub.Contaminant(i).Name))

    Next i

    frmViewEffluentConcentrationsASAP!fraConcentrationResults.Height = frmViewEffluentConcentrationsASAP!lblContaminantNumber(bub.NumChemical - 1).Top + frmViewEffluentConcentrationsASAP!lblContaminantNumber(bub.NumChemical - 1).Height + 120
    frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Height = frmViewEffluentConcentrationsASAP!lblContaminantNumber(bub.NumChemical + 10 - 1).Top + frmViewEffluentConcentrationsASAP!lblContaminantNumber(bub.NumChemical + 10 - 1).Height + 120
    frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top = frmViewEffluentConcentrationsASAP!fraConcentrationResults.Top + frmViewEffluentConcentrationsASAP!fraConcentrationResults.Height + 120
    frmViewEffluentConcentrationsASAP!fraGlossary.Top = frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top
    ContaminantGlossaryBottom = frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top + frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Height
    GlossaryBottom = frmViewEffluentConcentrationsASAP!fraGlossary.Top + frmViewEffluentConcentrationsASAP!fraGlossary.Height
    If GlossaryBottom > ContaminantGlossaryBottom Then
       frmViewEffluentConcentrationsASAP!cmdOK.Top = GlossaryBottom + 360
    Else
       frmViewEffluentConcentrationsASAP!cmdOK.Top = ContaminantGlossaryBottom + 360
    End If
    frmViewEffluentConcentrationsASAP.Height = frmViewEffluentConcentrationsASAP!cmdOK.Top + frmViewEffluentConcentrationsASAP!cmdOK.Height + 500 '420

    frmViewEffluentConcentrationsASAP.Show 1

End Sub

   Sub bubble_save()

End Sub

Function bubble_savechanges() As Integer
Dim i As Integer
Dim msg As String, response As Integer

  msg = "Would you like to save the parameters "
  msg = msg + "for this bubble aeration design case to a file?" & Chr$(13) & Chr$(13)
  msg = msg + "Note:  Any information not saved will be permanently lost."
  response = MsgBox(msg, MB_ICONquestion + MB_YESNOCANCEL, "Save Current Design")
                
  If response = IDCANCEL Then
   Screen.MousePointer = 0
   bubble_savechanges = 1
   Exit Function
  End If

  If response = IDYES Then
   Call savebubble
    If StrComp(Filename, "") = 0 Then response = 5
                      
     Do While response = 5
     msg = "Would you like to save the parameters "
     msg = msg + "for this bubble aeration design case to a file?" & Chr$(13) & Chr$(13)
     msg = msg + "Note:  Any information not saved will be permanently lost."
     response = MsgBox(msg, MB_ICONquestion + MB_YESNOCANCEL, "Save Current Design")
                         
     If response = IDCANCEL Then
        Screen.MousePointer = 0
        bubble_savechanges = 1
        Exit Function
     End If
                           
     If response = IDYES Then Call savebubble
     If StrComp(Filename, "") = 0 And response <> IDNO Then response = 5
                    
     Loop
                 
  End If

bubble_savechanges = 0
End Function

Sub CalculateAchievedPercentRemovalBubble()

  Call REMOVBUB(bub.AchievedPercentRemoval, bub.DesignContaminant.Influent.Value, bub.DesignContaminant.Effluent(bub.NumberOfTanks.Value))
  frmBubble!lblConcentrationResults(4).Caption = Format$(bub.AchievedPercentRemoval, GetTheFormat(bub.AchievedPercentRemoval))

End Sub

Sub CalculateAirFlowRate()

  Call AIRFLO(bub.AirFlowRate.Value, bub.AirToWaterRatio.Value, bub.WaterFlowRate.Value)
  'frmBubble!txtFlowParameters(3).Text = Format$(bub.AirFlowRate.Value, GetTheFormat(bub.AirFlowRate.Value))
  Call Unitted_NumberUpdate(frmBubble!UnitsFlowParam(3))
  bub.AirFlowRate.UserInput = False

End Sub

Sub LoadContaminantListBubble()
    Dim FileID As String, msg As String
    Dim Pressure As Double, Temperature As Double
    Dim NormalBoilingPoint As Double, GasDiffusivity As Double
    Dim i As Integer
    Dim NotSpecifiedAtOperatingTemperature As Integer
    Dim NotSpecifiedAtOperatingPressure As Integer

    Call LoadFile(Filename)
    
    If Filename$ <> "" Then
       FileID = ""
       Open Filename$ For Input As #1
       On Error Resume Next
       Input #1, FileID
       If FileID <> CONTAMINANTS_BUBBLE_FILEID And FileID <> CONTAMINANTS_SURFACE_FILEID And FileID <> CONTAMINANTS_PTAD_FILEID Then
          msg = "Invalid Contaminant File"
          MsgBox msg, 48, "Error"
          Close #1
          Exit Sub
       End If

       'frmListContaminantBubble.ListContaminants.Clear
       frmBubble!cboDesignContaminant.Clear

       i = 0
       NotSpecifiedAtOperatingTemperature = False
       NotSpecifiedAtOperatingPressure = False
       Do Until EOF(1)
          i = i + 1
          If FileID = CONTAMINANTS_BUBBLE_FILEID Or FileID = CONTAMINANTS_SURFACE_FILEID Then
             Input #1, bub.Contaminant(i).Pressure, bub.Contaminant(i).Temperature, bub.Contaminant(i).Name, bub.Contaminant(i).MolecularWeight.Value, bub.Contaminant(i).HenrysConstant.Value, bub.Contaminant(i).MolarVolume.Value, bub.Contaminant(i).LiquidDiffusivity.Value, bub.Contaminant(i).Influent.Value, bub.Contaminant(i).TreatmentObjective.Value
          Else
             Input #1, bub.Contaminant(i).Pressure, bub.Contaminant(i).Temperature, bub.Contaminant(i).Name, bub.Contaminant(i).MolecularWeight.Value, bub.Contaminant(i).HenrysConstant.Value, bub.Contaminant(i).MolarVolume.Value, NormalBoilingPoint, bub.Contaminant(i).LiquidDiffusivity.Value, GasDiffusivity, bub.Contaminant(i).Influent.Value, bub.Contaminant(i).TreatmentObjective.Value
          End If
          'frmListContaminantBubble.ListContaminants.AddItem bub.Contaminant(i).Name
          frmBubble!cboDesignContaminant.AddItem bub.Contaminant(i).Name
          If Not NotSpecifiedAtOperatingTemperature Then
             If Abs(bub.Contaminant(i).Temperature - bub.operatingtemperature.Value) > TOLERANCE Then
                NotSpecifiedAtOperatingTemperature = True
             End If
          End If
          If Not NotSpecifiedAtOperatingPressure Then
             If Abs(bub.Contaminant(i).Pressure - bub.OperatingPressure.Value) > TOLERANCE Then
                NotSpecifiedAtOperatingPressure = True
             End If
          End If

       Loop
       bub.NumChemical = i
          
       Close #1

       'If frmListContaminantBubble.mnuOptionsManipulateContaminant(1).Enabled = False Then
       '   frmListContaminantBubble.mnuOptionsManipulateContaminant(1).Enabled = True
       '   frmListContaminantBubble.mnuOptionsManipulateContaminant(3).Enabled = True
       '   frmListContaminantBubble.mnuOptionsManipulateContaminant(4).Enabled = True
       '   frmListContaminantBubble.mnuOptionsSave.Enabled = True
       '   frmListContaminantBubble.mnuOptionsView.Enabled = True
       'End If

       'frmListContaminantBubble.ListContaminants.Selected(0) = True

       If NotSpecifiedAtOperatingPressure And NotSpecifiedAtOperatingTemperature Then
          MsgBox "For one or more contaminants, the temperature and pressure at which the contaminant properties are specified differs from the operating temperature and pressure.", MB_ICONINFORMATION, "Warning"
       ElseIf NotSpecifiedAtOperatingTemperature Then
          MsgBox "For one or more contaminants, the temperature at which the contaminant properties are specified differs from the operating temperature.", MB_ICONINFORMATION, "Warning"
       ElseIf NotSpecifiedAtOperatingPressure Then
          MsgBox "For one or more contaminants, the pressure at which the contaminant properties are specified differs from the operating pressure.", MB_ICONINFORMATION, "Warning"
       End If

    End If

End Sub

Sub LoadFileBubble(Filename As String)
Dim Ctl As Control
Set Ctl = frmBubble.CommonDialog1

    On Error Resume Next
    'frmBubble!CMDialog1.DefaultExt = "bub"
    'frmBubble!CMDialog1.Filter = "Bubble Aeration Files (*.bub)|*.bub"
    'frmBubble!CMDialog1.DialogTitle = "Load Bubble Aeration File"
    'frmBubble!CMDialog1.flags = OFN_FILEMUSTEXIST Or OFN_PATHMUSTEXIST
    'frmBubble!CMDialog1.Action = 1
    'Filename$ = frmBubble!CMDialog1.Filename
    Ctl.DefaultExt = "bub"
    Ctl.Filter = "Bubble Aeration Files (*.bub)|*.bub"
    Ctl.DialogTitle = "Load Bubble Aeration File"
    Ctl.flags = OFN_FILEMUSTEXIST Or OFN_PATHMUSTEXIST
    Ctl.Action = 1
    Filename$ = Ctl.Filename
    If Err = 32755 Then   'Cancel selected by user
       Filename$ = ""
    End If

End Sub

Sub NewPageBubble()

          Printer.NewPage
          Printer.FontSize = 12
          Printer.FontBold = True
          If BubbleAerationMode = DESIGN_MODE Then
             Printer.Print "Bubble Aeration - Design Mode (continued)"
          Else
             Printer.Print "Bubble Aeration - Rating Mode (continued)"
          End If
          Printer.Print
          Printer.Print
          Printer.FontSize = 10
          Printer.FontBold = False

End Sub

Sub PrintBubble()
    Dim i As Integer, j As Integer
    ReDim ContaminantMTCoeff(1 To MAXCHEMICAL) As Double
    ReDim StantonNumber(1 To MAXCHEMICAL) As Double
    ReDim DesiredPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim AchievedPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim Effluent(0 To MAXIMUM_TANKS) As Double
    ReDim GasEffluent(1 To MAXIMUM_TANKS) As Double

    On Error GoTo PrinterError

    Select Case BubbleAerationMode
       Case DESIGN_MODE

          Printer.ScaleLeft = -1440
          Printer.ScaleTop = -1440
          Printer.CurrentX = 0
          Printer.CurrentY = 0
          Printer.FontSize = 12
          Printer.FontBold = True
          Printer.Print "Bubble Aeration - Design Mode"
          Printer.Print
          Printer.Print
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          Printer.Print "Operating Pressure (" & frmBubble!UnitsOpCond(0) & ")"; Tab(VALUE_TAB); frmBubble!txtOperatingPressure.Text
          Printer.Print "Operating Temperature (" & frmBubble!UnitsOpCond(1) & ")"; Tab(VALUE_TAB); frmBubble!txtOperatingTemperature.Text
          Printer.Print frmWaterPropertiesBubble!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmWaterPropertiesBubble!txtAirWaterProperties(0).Text
          Printer.Print frmWaterPropertiesBubble!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmWaterPropertiesBubble!txtAirWaterProperties(1).Text
          Printer.Print
          Printer.Print "Oxygen " & frmBubble!lblOxygenLabel(1).Caption & " (" & frmBubble!UnitsOxygenRef(1) & ")"; Tab(VALUE_TAB); frmBubble!txtOxygen(1).Text
          Printer.Print "Method to Find Oxygen KLa"; Tab(VALUE_TAB); frmBubble!cboOxygen.Text
          If frmBubble!cboOxygen.ListIndex = 0 Then   'Method to Find Oxygen KLa is Clean Water Oxygen Transfer Test Data
             Printer.Print "Standardized Oxygen Transfer Efficiency, SOTE (%)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(0).Text; ""
             Printer.Print "Standardized Oxygen Transfer Rate (kg O2/d)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(1).Text
             Printer.Print "Air Flow Rate (standard m" & Chr$(179) & "/hr)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(2).Text
             Printer.Print "Barometric Pressure (Pa)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(3).Text
             Printer.Print "Tank Water Depth (m" & Chr$(179) & ")"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(4).Text
             Printer.Print "Tank Water Volume (m" & Chr$(179) & ")"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(5).Text
             Printer.Print "D.O. Saturation Concentration at Infinite Time (mg/L)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(6).Caption; ""
             Printer.Print frmOxygenMassTransferCoeff!lblDataParametersLabel(7).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(7).Caption
             Printer.Print frmOxygenMassTransferCoeff!lblDataParametersLabel(8).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(8).Caption
             Printer.Print frmOxygenMassTransferCoeff!lblDataParametersLabel(9).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(9).Caption
             Printer.Print frmOxygenMassTransferCoeff!lblDataParametersLabel(10).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(10).Caption
             Printer.Print frmOxygenMassTransferCoeff!lblDataParametersLabel(11).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(11).Caption
          End If
          Printer.Print "Oxygen " & frmBubble!lblOxygenLabel(2).Caption & " (" & frmBubble!UnitsOxygenRef(2) & ")"; Tab(VALUE_TAB); frmBubble!txtOxygen(2).Text
          Printer.Print
          Printer.Print "Design Contaminant:  "; frmBubble!cboDesignContaminant.Text
          Printer.Print "Molecular Weight (kg/kmol)"; Tab(VALUE_TAB); Format$(bub.DesignContaminant.MolecularWeight.Value, "0.00")
          Printer.Print "Henry's Constant (-)"; Tab(VALUE_TAB); Format$(bub.DesignContaminant.HenrysConstant.Value, GetTheFormat(bub.DesignContaminant.HenrysConstant.Value))
          Printer.Print "Molar Volume (m" & Chr$(179) & "/kmol)"; Tab(VALUE_TAB); Format$(bub.DesignContaminant.MolarVolume.Value, GetTheFormat(bub.DesignContaminant.MolarVolume.Value))
          Printer.Print "Liquid Diffusivity (m" & Chr$(178) & "/sec)"; Tab(VALUE_TAB); Format$(bub.DesignContaminant.LiquidDiffusivity.Value, GetTheFormat(bub.DesignContaminant.LiquidDiffusivity.Value))
          Printer.Print frmBubble!lblDesignConcentration(0).Caption & " (" & frmBubble!UnitsDesignContam(0) & ")"; Tab(VALUE_TAB); frmBubble!lblDesignConcentrationValue(0).Caption
          Printer.Print frmBubble!lblDesignConcentration(1).Caption & " (" & frmBubble!UnitsDesignContam(1) & ")"; Tab(VALUE_TAB); frmBubble!lblDesignConcentrationValue(1).Caption
          Printer.Print frmBubble!lblDesignConcentration(2).Caption; Tab(VALUE_TAB); frmBubble!lblDesignConcentrationValue(2).Caption
          Printer.Print frmBubble!lblDesignConcentration(3).Caption & " (" & frmBubble!UnitsDesignContam(3) & ")"; Tab(VALUE_TAB); frmBubble!txtDesignConcentrationValue(3).Text
          Printer.Print
          Printer.Print frmBubble!lblFlowParametersLabel(0).Caption & " (" & frmBubble!UnitsFlowParam(0) & ")"; Tab(VALUE_TAB); frmBubble!txtFlowParameters(0).Text
          Printer.Print frmBubble!lblFlowParametersLabel(1).Caption; Tab(VALUE_TAB); frmBubble!lblFlowParameters(1).Caption
          Printer.Print frmBubble!lblFlowParametersLabel(2).Caption; Tab(VALUE_TAB); frmBubble!txtFlowParameters(2).Text
          Printer.Print frmBubble!lblFlowParametersLabel(3).Caption & " (" & frmBubble!UnitsFlowParam(3) & ")"; Tab(VALUE_TAB); frmBubble!txtFlowParameters(3).Text
          Printer.Print
          Printer.Print frmBubble!lblTankParametersLabel(0).Caption; Tab(VALUE_TAB); frmBubble!txtTankParameters(0).Text
          Printer.Print frmBubble!lblTankParametersLabel(1).Caption & " (" & frmBubble!UnitsTankParam(1) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(1).Text
          Printer.Print frmBubble!lblTankParametersLabel(2).Caption & " (" & frmBubble!UnitsTankParam(2) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(2).Text
          Printer.Print frmBubble!lblTankParametersLabel(3).Caption & " (" & frmBubble!UnitsTankParam(3) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(3).Text
          Printer.Print frmBubble!lblTankParametersLabel(4).Caption & " (" & frmBubble!UnitsTankParam(4) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(4).Text
          Printer.Print
          Printer.Print frmBubble!lblStantonLabel.Caption; Tab(VALUE_TAB); frmBubble!lblStanton.Caption
          Call NewPageBubble
          Printer.Print "Design Contaminant:"; Tab(VALUE_TAB); frmBubble!lblConcentrationResults(0).Caption
          Printer.Print "Liquid Phase Influent Concentration to Tank 1" & " (" & frmBubble!UnitsConcResults(1) & ")"; Tab(VALUE_TAB); frmBubble!lblConcentrationResults(1).Caption
          Printer.Print "Gas Phase Influent Concentration All Tanks" & " (" & frmBubble!UnitsConcResults(2) & ")"; Tab(VALUE_TAB); frmBubble!lblConcentrationResults(2).Caption
          Printer.Print "Liquid Phase Effluent from Last Tank" & " (" & frmBubble!UnitsConcResults(3) & ")"; Tab(VALUE_TAB); frmBubble!lblConcentrationResults(3).Caption
          Printer.Print "Achieved Percent Removal (%)"; Tab(VALUE_TAB); frmBubble!lblConcentrationResults(4).Caption
          Printer.Print
          Printer.Print
          Printer.Print
          Printer.FontBold = True
          Printer.Print "Effluent Concentrations from Each Tank in " & Chr$(181) & "g/L:"
          Printer.Print
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Tank:"; Tab(LIQUID_EFFLUENT_TAB); "Liquid Phase"; Tab(GAS_EFFLUENT_TAB); "Gas Phase"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = False
          For i = 1 To bub.NumberOfTanks.Value
              Printer.Print Format$(i, "0"); Tab(LIQUID_EFFLUENT_TAB); Format$(bub.DesignContaminant.Effluent(i), GetTheFormat(bub.DesignContaminant.Effluent(i))); Tab(GAS_EFFLUENT_TAB); Format$(bub.DesignContaminant.GasEffluent(i), GetTheFormat(bub.DesignContaminant.GasEffluent(i)))
          Next i
          Printer.Print
          Printer.Print
          Printer.Print
          Printer.Print
          Printer.FontBold = True
          Call SetPowerBubble
          Printer.Print "Power Calculation:"
          Printer.FontUnderline = True
          Printer.Print
          Printer.Print
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.FontBold = False
          Printer.FontUnderline = False
          Printer.Print
          Printer.Print frmBubblePower!lblPowerLabel(0).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(0).Text
          Printer.Print frmBubblePower!lblPowerLabel(1).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(1).Text
          Printer.Print frmBubblePower!lblPowerLabel(2).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(2).Text
          Printer.Print "Blower " & frmBubblePower!lblPowerLabel(3).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(3).Caption
          Printer.Print frmBubblePower!lblPowerLabel(4).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(4).Caption
          Printer.Print frmBubblePower!lblPowerLabel(5).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(5).Text
          Printer.Print frmBubblePower!lblPowerLabel(6).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(6).Caption

       Case RATING_MODE
          Printer.ScaleLeft = -1440
          Printer.ScaleTop = -1440
          Printer.CurrentX = 0
          Printer.CurrentY = 0
          Printer.FontSize = 12
          Printer.FontBold = True
          Printer.Print "Bubble Aeration - Rating Mode"
          Printer.Print
          Printer.Print
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          Printer.Print "Operating Pressure (" & frmBubble!UnitsOpCond(0) & ")"; Tab(VALUE_TAB); frmBubble!txtOperatingPressure.Text
          Printer.Print "Operating Temperature (" & frmBubble!UnitsOpCond(1) & ")"; Tab(VALUE_TAB); frmBubble!txtOperatingTemperature.Text
          Printer.Print frmWaterPropertiesBubble!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmWaterPropertiesBubble!txtAirWaterProperties(0).Text
          Printer.Print frmWaterPropertiesBubble!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmWaterPropertiesBubble!txtAirWaterProperties(1).Text
          Printer.Print
          Printer.Print "Oxygen " & frmBubble!lblOxygenLabel(1).Caption & " (" & frmBubble!UnitsOxygenRef(1) & ")"; Tab(VALUE_TAB); frmBubble!txtOxygen(1).Text
          Printer.Print "Method to Find Oxygen KLa"; Tab(VALUE_TAB); frmBubble!cboOxygen.Text
          If frmBubble!cboOxygen.ListIndex = 0 Then   'Method to Find Oxygen KLa is Clean Water Oxygen Transfer Test Data
             Printer.Print "Standardized Oxygen Transfer Efficiency, SOTE (%)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(0).Text; ""
             Printer.Print "Standardized Oxygen Transfer Rate (kg O2/d)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(1).Text
             Printer.Print "Air Flow Rate (standard m" & Chr$(179) & "/hr)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(2).Text
             Printer.Print "Barometric Pressure (Pa)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(3).Text
             Printer.Print "Tank Water Depth (m" & Chr$(179) & ")"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(4).Text
             Printer.Print "Tank Water Volume (m" & Chr$(179) & ")"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(5).Text
             Printer.Print "D.O. Saturation Concentration at Infinite Time (mg/L)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(6).Caption; ""
             Printer.Print frmOxygenMassTransferCoeff!lblDataParametersLabel(7).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(7).Caption
             Printer.Print frmOxygenMassTransferCoeff!lblDataParametersLabel(8).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(8).Caption
             Printer.Print frmOxygenMassTransferCoeff!lblDataParametersLabel(9).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(9).Caption
             Printer.Print frmOxygenMassTransferCoeff!lblDataParametersLabel(10).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(10).Caption
             Printer.Print frmOxygenMassTransferCoeff!lblDataParametersLabel(11).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(11).Caption
          End If
          Printer.Print "Oxygen " & frmBubble!lblOxygenLabel(2).Caption; Tab(VALUE_TAB); frmBubble!txtOxygen(2).Text
          Printer.Print
          Printer.Print frmBubble!lblFlowParametersLabel(0).Caption & " (" & frmBubble!UnitsFlowParam(0) & ")"; Tab(VALUE_TAB); frmBubble!txtFlowParameters(0).Text
          Printer.Print frmBubble!lblFlowParametersLabel(2).Caption; Tab(VALUE_TAB); frmBubble!txtFlowParameters(2).Text
          Printer.Print frmBubble!lblFlowParametersLabel(3).Caption & " (" & frmBubble!UnitsFlowParam(3) & ")"; Tab(VALUE_TAB); frmBubble!txtFlowParameters(3).Text
          Printer.Print
          Printer.Print frmBubble!lblTankParametersLabel(0).Caption; Tab(VALUE_TAB); frmBubble!txtTankParameters(0).Text
          Printer.Print frmBubble!lblTankParametersLabel(1).Caption & " (" & frmBubble!UnitsTankParam(1) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(1).Text
          Printer.Print frmBubble!lblTankParametersLabel(2).Caption & " (" & frmBubble!UnitsTankParam(2) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(2).Text
          Printer.Print frmBubble!lblTankParametersLabel(3).Caption & " (" & frmBubble!UnitsTankParam(3) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(3).Text
          Printer.Print frmBubble!lblTankParametersLabel(4).Caption & " (" & frmBubble!UnitsTankParam(4) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(4).Text
          Printer.Print
          Printer.Print
          Printer.FontBold = True
          Call SetPowerBubble
          Printer.Print "Power Calculation:"
          Printer.FontUnderline = True
          Printer.Print
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.FontBold = False
          Printer.FontUnderline = False
          Printer.Print
          Printer.Print frmBubblePower!lblPowerLabel(0).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(0).Text
          Printer.Print frmBubblePower!lblPowerLabel(1).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(1).Text
          Printer.Print frmBubblePower!lblPowerLabel(2).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(2).Text
          Printer.Print "Blower " & frmBubblePower!lblPowerLabel(3).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(3).Caption
          Printer.Print frmBubblePower!lblPowerLabel(4).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(4).Caption
          Printer.Print frmBubblePower!lblPowerLabel(5).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(5).Text
          Printer.Print frmBubblePower!lblPowerLabel(6).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(6).Caption
          Printer.Print
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Contaminant Glossary:"
          Printer.FontUnderline = False
          For i = 1 To bub.NumChemical
              Printer.Print Format$(i, "0"); " = "; Trim$(bub.Contaminant(i).Name)
          Next i

          Call NewPageBubble
          Printer.FontBold = True
          Printer.Print "Contaminant Properties:"
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Con.:"; Tab(MWT_TAB); "MWT"; Tab(HC_TAB); "HC"; Tab(VB_TAB); "Vb"; Tab(DIFL_TAB); "DIFL"; Tab(MTCOEFF_TAB); "MT Coeff."; Tab(STANTON_TAB); "St."
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          For i = 1 To bub.NumChemical
              If bub.DesignContaminant.Name = bub.Contaminant(i).Name Then
                 ContaminantMTCoeff(i) = bub.ContaminantMassTransferCoefficient.Value
                 StantonNumber(i) = bub.StantonNumber.Value
              Else
                 Call KLABUB(ContaminantMTCoeff(i), bub.Oxygen.MassTransferCoefficient.Value, bub.Contaminant(i).LiquidDiffusivity.Value, bub.Oxygen.LiquidDiffusivity.Value, bub.N_for_Finding_KLa.Value, bub.kgOVERkl_for_Finding_KLa.Value, bub.Contaminant(i).HenrysConstant.Value)
                 Call GETPHIB(StantonNumber(i), ContaminantMTCoeff(i), bub.TankVolume.Value, bub.Contaminant(i).HenrysConstant.Value, bub.AirFlowRate.Value)
              End If
              Printer.Print Format$(i, "0"); Tab(MWT_TAB); Format$(bub.Contaminant(i).MolecularWeight.Value, "0.00"); Tab(HC_TAB); Format$(bub.Contaminant(i).HenrysConstant.Value, GetTheFormat(bub.Contaminant(i).HenrysConstant.Value)); Tab(VB_TAB); Format$(bub.Contaminant(i).MolarVolume.Value, GetTheFormat(bub.Contaminant(i).MolarVolume.Value)); Tab(DIFL_TAB); Format$(bub.Contaminant(i).LiquidDiffusivity.Value, GetTheFormat(bub.Contaminant(i).LiquidDiffusivity.Value)); Tab(MTCOEFF_TAB); Format$(ContaminantMTCoeff(i), GetTheFormat(ContaminantMTCoeff(i))); Tab(STANTON_TAB); Format$(StantonNumber(i), GetTheFormat(StantonNumber(i)))
          Next i
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Glossary:"
          Printer.FontUnderline = False
          Printer.Print "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Printer.Print "MWT = Molecular Weight (kg/kmol)"
          Printer.Print "HC = Henry's Constant (-)"
          Printer.Print "Vb = Molar Volume (m" & Chr$(179) & "/kmol)"
          Printer.Print "DIFL = Liquid Diffusivity (m" & Chr$(178) & "/sec)"
          Printer.Print "MT Coeff. = Mass Transfer Coeff. (1/sec)"
          Printer.Print "St. = Stanton Number (-)"
          Printer.Print
          Printer.Print
          Printer.Print
          Printer.FontBold = True
          Printer.Print "Contaminant Concentration Results:"
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Con.:"; Tab(MWT_TAB); "Cinf"; Tab(HC_TAB); "Cto"; Tab(VB_TAB); "De. % Rem."; Tab(DIFL_TAB); "Ceff"; Tab(MTCOEFF_TAB); "Ach. % Rem."
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          For i = 1 To bub.NumChemical
              If bub.DesignContaminant.Name = bub.Contaminant(i).Name Then
                 DesiredPercentRemoval(i) = bub.DesiredPercentRemoval
                 bub.Contaminant(i).Effluent(0) = bub.DesignContaminant.Effluent(0)
                 For j = 1 To bub.NumberOfTanks.Value
                     bub.Contaminant(i).Effluent(j) = bub.DesignContaminant.Effluent(j)
                     bub.Contaminant(i).GasEffluent(j) = bub.DesignContaminant.GasEffluent(j)
                 Next j
                 AchievedPercentRemoval(i) = bub.AchievedPercentRemoval
              Else
                 Call REMOVBUB(DesiredPercentRemoval(i), bub.Contaminant(i).Influent.Value, bub.Contaminant(i).TreatmentObjective.Value)
                 Call EFFLBUB(Effluent(0), GasEffluent(1), bub.Contaminant(i).HenrysConstant.Value, bub.Contaminant(i).Influent.Value, bub.AirToWaterRatio.Value, bub.NumberOfTanks.Value, StantonNumber(i))
                 bub.Contaminant(i).Effluent(0) = Effluent(0)
                 For j = 1 To bub.NumberOfTanks.Value
                     bub.Contaminant(i).Effluent(j) = Effluent(j)
                     bub.Contaminant(i).GasEffluent(j) = GasEffluent(j)
                 Next j
                 Call REMOVBUB(AchievedPercentRemoval(i), bub.Contaminant(i).Influent.Value, bub.Contaminant(i).Effluent(bub.NumberOfTanks.Value))
              End If
              Printer.Print Format$(i, "0"); Tab(MWT_TAB); Format$(bub.Contaminant(i).Influent.Value, GetTheFormat(bub.Contaminant(i).Influent.Value)); Tab(HC_TAB); Format$(bub.Contaminant(i).TreatmentObjective.Value, GetTheFormat(bub.Contaminant(i).TreatmentObjective.Value)); Tab(VB_TAB); Format$(DesiredPercentRemoval(i), GetTheFormat(DesiredPercentRemoval(i))); Tab(DIFL_TAB); Format$(bub.Contaminant(i).Effluent(bub.NumberOfTanks.Value), GetTheFormat(bub.Contaminant(i).Effluent(bub.NumberOfTanks.Value))); Tab(MTCOEFF_TAB); Format$(AchievedPercentRemoval(i), GetTheFormat(AchievedPercentRemoval(i)))
          Next i
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Glossary:"
          Printer.FontUnderline = False
          Printer.Print "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Printer.Print "Cinf = "; "Liquid Phase " & frmBubble!lblDesignConcentration(0).Caption
          Printer.Print "Cto = "; frmBubble!lblDesignConcentration(1).Caption
          Printer.Print "De. % Rem. = "; frmBubble!lblDesignConcentration(2).Caption
          Printer.Print "Ceff = "; "Liquid Phase Effluent from Last Tank (" & Chr$(181) & "g/L)"
          Printer.Print "Ach. % Rem. = "; frmBubble!lblConcentrationResultsLabel(4).Caption
          Call NewPageBubble
          Printer.FontBold = True
          Printer.Print "Liquid Phase Effluent Concentrations from Each Tank in " & Chr$(181) & "g/L:"
          Printer.Print
          Printer.Print
          Printer.Print Tab(MWT_TAB); "Contaminant Number:"
          Printer.Print
          Printer.FontUnderline = True
          Select Case bub.NumChemical
             Case 1
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"
             Case 2
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"
             Case 3
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"
             Case 4
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"
             Case 5
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"
             Case Else
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"; Tab(STANTON_TAB); "6:"
          End Select
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = False

          'Print Liquid Phase Influent Concentrations of Each Contaminant
          Printer.Print "Cinf";
          For j = 1 To 6
              If bub.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 1
                    Printer.Print Tab(MWT_TAB);
                 Case 2
                    Printer.Print Tab(HC_TAB);
                 Case 3
                    Printer.Print Tab(VB_TAB);
                 Case 4
                    Printer.Print Tab(DIFL_TAB);
                 Case 5
                    Printer.Print Tab(MTCOEFF_TAB);
                 Case 6
                    Printer.Print Tab(STANTON_TAB);
              End Select
              Printer.Print Format$(bub.Contaminant(j).Influent.Value, GetTheFormat(bub.Contaminant(j).Influent.Value));
          Next j
          Printer.Print

          'Print Liquid Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To bub.NumberOfTanks.Value
              Printer.Print Format$(i, "0");
              For j = 1 To 6
                  If bub.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 1
                        Printer.Print Tab(MWT_TAB);
                     Case 2
                        Printer.Print Tab(HC_TAB);
                     Case 3
                        Printer.Print Tab(VB_TAB);
                     Case 4
                        Printer.Print Tab(DIFL_TAB);
                     Case 5
                        Printer.Print Tab(MTCOEFF_TAB);
                     Case 6
                        Printer.Print Tab(STANTON_TAB);
                  End Select
                  Printer.Print Format$(bub.Contaminant(j).Effluent(i), GetTheFormat(bub.Contaminant(j).Effluent(i)));
             Next j
             Printer.Print
          Next i
          
          If bub.NumChemical < 7 Then
             Printer.Print
             Printer.FontUnderline = True
             Printer.Print "Glossary:"
             Printer.FontUnderline = False
             Printer.Print "Cinf = Liquid Phase Influent Concentration to Tank 1 (" & Chr$(181) & "g/L)"
             GoTo AfterLiquidEffluents
          End If
          Printer.Print
          Printer.Print
          Printer.FontBold = True
          Printer.Print Tab(MWT_TAB); "Contaminant Number:"
          Printer.Print
          Printer.FontUnderline = True
          Select Case bub.NumChemical
             Case 7
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"
             Case 8
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"
             Case 9
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"
             Case 10
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"; Tab(DIFL_TAB); "10:"
          End Select
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = False

          'Print Liquid Phase Influent Concentrations of Each Contaminant
          Printer.Print "Cinf";
          For j = 7 To 10
              If bub.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 7
                    Printer.Print Tab(MWT_TAB);
                 Case 8
                    Printer.Print Tab(HC_TAB);
                 Case 9
                    Printer.Print Tab(VB_TAB);
                 Case 10
                    Printer.Print Tab(DIFL_TAB);
              End Select
              Printer.Print Format$(bub.Contaminant(j).Influent.Value, GetTheFormat(bub.Contaminant(j).Influent.Value));
          Next j
          Printer.Print

          'Print Liquid Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To bub.NumberOfTanks.Value
              Printer.Print Format$(i, "0");
              For j = 7 To 10
                  If bub.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 7
                        Printer.Print Tab(MWT_TAB);
                     Case 8
                        Printer.Print Tab(HC_TAB);
                     Case 9
                        Printer.Print Tab(VB_TAB);
                     Case 10
                        Printer.Print Tab(DIFL_TAB);
                  End Select
                  Printer.Print Format$(bub.Contaminant(j).Effluent(i), GetTheFormat(bub.Contaminant(j).Effluent(i)));
             Next j
             Printer.Print
          Next i
          
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Glossary:"
          Printer.FontUnderline = False
          Printer.Print "Cinf = Liquid Phase Influent Concentration to Tank 1 (" & Chr$(181) & "g/L)"

AfterLiquidEffluents:

          If bub.NumChemical > 6 Then
             If bub.NumberOfTanks.Value > 5 Then
                Call NewPageBubble
             Else
                Printer.Print
                Printer.Print
                Printer.Print
                Printer.Print
             End If
          Else
             Printer.Print
             Printer.Print
             Printer.Print
             Printer.Print
          End If
          
          Printer.FontBold = True
          Printer.Print "Gas Phase Effluent Concentrations from Each Tank in " & Chr$(181) & "g/L:"
          Printer.Print
          Printer.Print
          Printer.Print Tab(MWT_TAB); "Contaminant Number:"
          Printer.Print
          Printer.FontUnderline = True
          Select Case bub.NumChemical
             Case 1
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"
             Case 2
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"
             Case 3
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"
             Case 4
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"
             Case 5
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"
             Case Else
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"; Tab(STANTON_TAB); "6:"
          End Select
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = False

          'Print Gas Phase Influent Concentrations of Each Contaminant
          Printer.Print "Yinf";
          For j = 1 To 6
              If bub.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 1
                    Printer.Print Tab(MWT_TAB);
                 Case 2
                    Printer.Print Tab(HC_TAB);
                 Case 3
                    Printer.Print Tab(VB_TAB);
                 Case 4
                    Printer.Print Tab(DIFL_TAB);
                 Case 5
                    Printer.Print Tab(MTCOEFF_TAB);
                 Case 6
                    Printer.Print Tab(STANTON_TAB);
              End Select
              Printer.Print "0";
          Next j
          Printer.Print

          'Print Gas Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To bub.NumberOfTanks.Value
              Printer.Print Format$(i, "0");
              For j = 1 To 6
                  If bub.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 1
                        Printer.Print Tab(MWT_TAB);
                     Case 2
                        Printer.Print Tab(HC_TAB);
                     Case 3
                        Printer.Print Tab(VB_TAB);
                     Case 4
                        Printer.Print Tab(DIFL_TAB);
                     Case 5
                        Printer.Print Tab(MTCOEFF_TAB);
                     Case 6
                        Printer.Print Tab(STANTON_TAB);
                  End Select
                  Printer.Print Format$(bub.Contaminant(j).GasEffluent(i), GetTheFormat(bub.Contaminant(j).GasEffluent(i)));
             Next j
             Printer.Print
          Next i
          
          If bub.NumChemical < 7 Then
             Printer.Print
             Printer.FontUnderline = True
             Printer.Print "Glossary:"
             Printer.FontUnderline = False
             Printer.Print "Yinf = Gas Phase Influent Concentration to All Tanks (" & Chr$(181) & "g/L)"
             GoTo AfterGasEffluents
          End If
          Printer.Print
          Printer.Print
          Printer.FontBold = True
          Printer.Print Tab(MWT_TAB); "Contaminant Number:"
          Printer.Print
          Printer.FontUnderline = True
          Select Case bub.NumChemical
             Case 7
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"
             Case 8
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"
             Case 9
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"
             Case 10
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"; Tab(DIFL_TAB); "10:"
          End Select
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = False

          'Print Gas Phase Influent Concentrations of Each Contaminant
          Printer.Print "Yinf";
          For j = 7 To 10
              If bub.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 7
                    Printer.Print Tab(MWT_TAB);
                 Case 8
                    Printer.Print Tab(HC_TAB);
                 Case 9
                    Printer.Print Tab(VB_TAB);
                 Case 10
                    Printer.Print Tab(DIFL_TAB);
              End Select
              Printer.Print "0";
          Next j
          Printer.Print

          'Print Gas Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To bub.NumberOfTanks.Value
              Printer.Print Format$(i, "0");
              For j = 7 To 10
                  If bub.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 7
                        Printer.Print Tab(MWT_TAB);
                     Case 8
                        Printer.Print Tab(HC_TAB);
                     Case 9
                        Printer.Print Tab(VB_TAB);
                     Case 10
                        Printer.Print Tab(DIFL_TAB);
                  End Select
                  Printer.Print Format$(bub.Contaminant(j).GasEffluent(i), GetTheFormat(bub.Contaminant(j).GasEffluent(i)));
             Next j
             Printer.Print
          Next i

          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Glossary:"
          Printer.FontUnderline = False
          Printer.Print "Yinf = Gas Phase Influent Concentration to All Tanks (" & Chr$(181) & "g/L)"
          

AfterGasEffluents:

    End Select

    Printer.EndDoc

    Exit Sub

PrinterError:
    MsgBox error$(Err)
    Resume ExitPrint:

ExitPrint:

End Sub

Sub PrintBubbleToFile()
    Dim i As Integer, j As Integer
    ReDim ContaminantMTCoeff(1 To MAXCHEMICAL) As Double
    ReDim StantonNumber(1 To MAXCHEMICAL) As Double
    ReDim DesiredPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim AchievedPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim Effluent(0 To MAXIMUM_TANKS) As Double
    ReDim GasEffluent(1 To MAXIMUM_TANKS) As Double

        Call GetPrintFileName(PrintFileName)
        If PrintFileName$ = "" Then Exit Sub

        Open PrintFileName$ For Output As #1

    Select Case BubbleAerationMode
       Case DESIGN_MODE

          Print #1, "Bubble Aeration - Design Mode"
          Print #1,
          Print #1,
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          Print #1,
          Print #1, "Operating Pressure (" & frmBubble!UnitsOpCond(0) & ")"; Tab(VALUE_TAB); frmBubble!txtOperatingPressure.Text
          Print #1, "Operating Temperature (" & frmBubble!UnitsOpCond(1) & ")"; Tab(VALUE_TAB); frmBubble!txtOperatingTemperature.Text
          Print #1, frmWaterPropertiesBubble!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmWaterPropertiesBubble!txtAirWaterProperties(0).Text
          Print #1, frmWaterPropertiesBubble!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmWaterPropertiesBubble!txtAirWaterProperties(1).Text
          Print #1,
          Print #1, "Oxygen " & frmBubble!lblOxygenLabel(1).Caption & " (" & frmBubble!UnitsOxygenRef(1) & ")"; Tab(VALUE_TAB); frmBubble!txtOxygen(1).Text
          Print #1, "Method to Find Oxygen KLa"; Tab(VALUE_TAB); frmBubble!cboOxygen.Text
          If frmBubble!cboOxygen.ListIndex = 0 Then   'Method to Find Oxygen KLa is Clean Water Oxygen Transfer Test Data
             Print #1, "Standardized Oxygen Transfer Efficiency, SOTE (%)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(0).Text; ""
             Print #1, "Standardized Oxygen Transfer Rate (kg O2/d)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(1).Text
             Print #1, "Air Flow Rate (standard m" & Chr$(179) & "/hr)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(2).Text
             Print #1, "Barometric Pressure (Pa)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(3).Text
             Print #1, "Tank Water Depth (m" & Chr$(179) & ")"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(4).Text
             Print #1, "Tank Water Volume (m" & Chr$(179) & ")"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(5).Text
             Print #1, "D.O. Saturation Concentration at Infinite Time (mg/L)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(6).Caption; ""
             Print #1, frmOxygenMassTransferCoeff!lblDataParametersLabel(7).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(7).Caption
             Print #1, frmOxygenMassTransferCoeff!lblDataParametersLabel(8).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(8).Caption
             Print #1, frmOxygenMassTransferCoeff!lblDataParametersLabel(9).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(9).Caption
             Print #1, frmOxygenMassTransferCoeff!lblDataParametersLabel(10).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(10).Caption
             Print #1, frmOxygenMassTransferCoeff!lblDataParametersLabel(11).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(11).Caption
          End If
          Print #1, "Oxygen " & frmBubble!lblOxygenLabel(2).Caption & " (" & frmBubble!UnitsOxygenRef(2) & ")"; Tab(VALUE_TAB); frmBubble!txtOxygen(2).Text
          Print #1,
          Print #1, "Design Contaminant:  "; frmBubble!cboDesignContaminant.Text
          Print #1, "Molecular Weight (kg/kmol)"; Tab(VALUE_TAB); Format$(bub.DesignContaminant.MolecularWeight.Value, "0.00")
          Print #1, "Henry's Constant (-)"; Tab(VALUE_TAB); Format$(bub.DesignContaminant.HenrysConstant.Value, GetTheFormat(bub.DesignContaminant.HenrysConstant.Value))
          Print #1, "Molar Volume (m" & Chr$(179) & "/kmol)"; Tab(VALUE_TAB); Format$(bub.DesignContaminant.MolarVolume.Value, GetTheFormat(bub.DesignContaminant.MolarVolume.Value))
          Print #1, "Liquid Diffusivity (m" & Chr$(178) & "/sec)"; Tab(VALUE_TAB); Format$(bub.DesignContaminant.LiquidDiffusivity.Value, GetTheFormat(bub.DesignContaminant.LiquidDiffusivity.Value))
          Print #1, frmBubble!lblDesignConcentration(0).Caption & " (" & frmBubble!UnitsDesignContam(0) & ")"; Tab(VALUE_TAB); frmBubble!lblDesignConcentrationValue(0).Caption
          Print #1, frmBubble!lblDesignConcentration(1).Caption & " (" & frmBubble!UnitsDesignContam(1) & ")"; Tab(VALUE_TAB); frmBubble!lblDesignConcentrationValue(1).Caption
          Print #1, frmBubble!lblDesignConcentration(2).Caption; Tab(VALUE_TAB); frmBubble!lblDesignConcentrationValue(2).Caption
          Print #1, frmBubble!lblDesignConcentration(3).Caption & " (" & frmBubble!UnitsDesignContam(3) & ")"; Tab(VALUE_TAB); frmBubble!txtDesignConcentrationValue(3).Text
          Print #1,
          Print #1, frmBubble!lblFlowParametersLabel(0).Caption & " (" & frmBubble!UnitsFlowParam(0) & ")"; Tab(VALUE_TAB); frmBubble!txtFlowParameters(0).Text
          Print #1, frmBubble!lblFlowParametersLabel(1).Caption; Tab(VALUE_TAB); frmBubble!lblFlowParameters(1).Caption
          Print #1, frmBubble!lblFlowParametersLabel(2).Caption; Tab(VALUE_TAB); frmBubble!txtFlowParameters(2).Text
          Print #1, frmBubble!lblFlowParametersLabel(3).Caption & " (" & frmBubble!UnitsFlowParam(3) & ")"; Tab(VALUE_TAB); frmBubble!txtFlowParameters(3).Text
          Print #1,
          Print #1, frmBubble!lblTankParametersLabel(0).Caption; Tab(VALUE_TAB); frmBubble!txtTankParameters(0).Text
          Print #1, frmBubble!lblTankParametersLabel(1).Caption & " (" & frmBubble!UnitsTankParam(1) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(1).Text
          Print #1, frmBubble!lblTankParametersLabel(2).Caption & " (" & frmBubble!UnitsTankParam(2) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(2).Text
          Print #1, frmBubble!lblTankParametersLabel(3).Caption & " (" & frmBubble!UnitsTankParam(3) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(3).Text
          Print #1, frmBubble!lblTankParametersLabel(4).Caption & " (" & frmBubble!UnitsTankParam(4) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(4).Text
          Print #1,
          Print #1, frmBubble!lblStantonLabel.Caption; Tab(VALUE_TAB); frmBubble!lblStanton.Caption
          Print #1,
          Print #1,
          Print #1, "Design Contaminant:"; Tab(VALUE_TAB); frmBubble!lblConcentrationResults(0).Caption
          Print #1, "Liquid Phase Influent Concentration to Tank 1 (" & Chr$(181) & "g/L)"; Tab(VALUE_TAB); frmBubble!lblConcentrationResults(1).Caption
          Print #1, "Gas Phase Influent Concentration All Tanks (" & Chr$(181) & "g/L)"; Tab(VALUE_TAB); frmBubble!lblConcentrationResults(2).Caption
          Print #1, "Liquid Phase Effluent from Last Tank (" & Chr$(181) & "g/L)"; Tab(VALUE_TAB); frmBubble!lblConcentrationResults(3).Caption
          Print #1, "Achieved Percent Removal (%)"; Tab(VALUE_TAB); frmBubble!lblConcentrationResults(4).Caption
          Print #1,
          Print #1,
          Print #1,
          Print #1, "Effluent Concentrations from Each Tank in " & Chr$(181) & "g/L:"
          Print #1,
          Print #1,
          Print #1, "Tank:"; Tab(LIQUID_EFFLUENT_TAB); "Liquid Phase"; Tab(GAS_EFFLUENT_TAB); "Gas Phase"
          Print #1,
          For i = 1 To bub.NumberOfTanks.Value
              Print #1, Format$(i, "0"); Tab(LIQUID_EFFLUENT_TAB); Format$(bub.DesignContaminant.Effluent(i), GetTheFormat(bub.DesignContaminant.Effluent(i))); Tab(GAS_EFFLUENT_TAB); Format$(bub.DesignContaminant.GasEffluent(i), GetTheFormat(bub.DesignContaminant.GasEffluent(i)))
          Next i
          Print #1,
          Print #1,
          Print #1,
          Print #1,
          Print #1,
          Print #1,
          Print #1,
          Call SetPowerBubble
          Print #1, "Power Calculation:"
          Print #1,
          Print #1,
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          Print #1,
          Print #1, frmBubblePower!lblPowerLabel(0).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(0).Text
          Print #1, frmBubblePower!lblPowerLabel(1).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(1).Text
          Print #1, frmBubblePower!lblPowerLabel(2).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(2).Text
          Print #1, "Blower " & frmBubblePower!lblPowerLabel(3).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(3).Caption
          Print #1, frmBubblePower!lblPowerLabel(4).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(4).Caption
          Print #1, frmBubblePower!lblPowerLabel(5).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(5).Text
          Print #1, frmBubblePower!lblPowerLabel(6).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(6).Caption

       Case RATING_MODE
          Print #1, "Bubble Aeration - Rating Mode"
          Print #1,
          Print #1,
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          Print #1,
          Print #1, "Operating Pressure (" & frmBubble!UnitsOpCond(0) & ")"; Tab(VALUE_TAB); frmBubble!txtOperatingPressure.Text
          Print #1, "Operating Temperature (" & frmBubble!UnitsOpCond(1) & ")"; Tab(VALUE_TAB); frmBubble!txtOperatingTemperature.Text
          Print #1, frmWaterPropertiesBubble!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmWaterPropertiesBubble!txtAirWaterProperties(0).Text
          Print #1, frmWaterPropertiesBubble!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmWaterPropertiesBubble!txtAirWaterProperties(1).Text
          Print #1,
          Print #1, "Oxygen " & frmBubble!lblOxygenLabel(1).Caption & " (" & frmBubble!UnitsOxygenRef(1) & ")"; Tab(VALUE_TAB); frmBubble!txtOxygen(1).Text
          Print #1, "Method to Find Oxygen KLa"; Tab(VALUE_TAB); frmBubble!cboOxygen.Text
          If frmBubble!cboOxygen.ListIndex = 0 Then   'Method to Find Oxygen KLa is Clean Water Oxygen Transfer Test Data
             Print #1, "Standardized Oxygen Transfer Efficiency, SOTE (%)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(0).Text; ""
             Print #1, "Standardized Oxygen Transfer Rate (kg O2/d)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(1).Text
             Print #1, "Air Flow Rate (standard m" & Chr$(179) & "/hr)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(2).Text
             Print #1, "Barometric Pressure (Pa)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(3).Text
             Print #1, "Tank Water Depth (m" & Chr$(179) & ")"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(4).Text
             Print #1, "Tank Water Volume (m" & Chr$(179) & ")"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!txtDataParameters(5).Text
             Print #1, "D.O. Saturation Concentration at Infinite Time (mg/L)"; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(6).Caption; ""
             Print #1, frmOxygenMassTransferCoeff!lblDataParametersLabel(7).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(7).Caption
             Print #1, frmOxygenMassTransferCoeff!lblDataParametersLabel(8).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(8).Caption
             Print #1, frmOxygenMassTransferCoeff!lblDataParametersLabel(9).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(9).Caption
             Print #1, frmOxygenMassTransferCoeff!lblDataParametersLabel(10).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(10).Caption
             Print #1, frmOxygenMassTransferCoeff!lblDataParametersLabel(11).Caption; Tab(VALUE_TAB); frmOxygenMassTransferCoeff!lblDataParameters(11).Caption
          End If
          Print #1, "Oxygen " & frmBubble!lblOxygenLabel(2).Caption & " (" & frmBubble!UnitsOxygenRef(2) & ")"; Tab(VALUE_TAB); frmBubble!txtOxygen(2).Text
          Print #1,
          Print #1, frmBubble!lblFlowParametersLabel(0).Caption & " (" & frmBubble!UnitsFlowParam(0) & ")"; Tab(VALUE_TAB); frmBubble!txtFlowParameters(0).Text
          Print #1, frmBubble!lblFlowParametersLabel(2).Caption; Tab(VALUE_TAB); frmBubble!txtFlowParameters(2).Text
          Print #1, frmBubble!lblFlowParametersLabel(3).Caption & " (" & frmBubble!UnitsFlowParam(3) & ")"; Tab(VALUE_TAB); frmBubble!txtFlowParameters(3).Text
          Print #1,
          Print #1, frmBubble!lblTankParametersLabel(0).Caption; Tab(VALUE_TAB); frmBubble!txtTankParameters(0).Text
          Print #1, frmBubble!lblTankParametersLabel(1).Caption & " (" & frmBubble!UnitsTankParam(1) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(1).Text
          Print #1, frmBubble!lblTankParametersLabel(2).Caption & " (" & frmBubble!UnitsTankParam(2) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(2).Text
          Print #1, frmBubble!lblTankParametersLabel(3).Caption & " (" & frmBubble!UnitsTankParam(3) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(3).Text
          Print #1, frmBubble!lblTankParametersLabel(4).Caption & " (" & frmBubble!UnitsTankParam(4) & ")"; Tab(VALUE_TAB); frmBubble!txtTankParameters(4).Text
          Print #1,
          Print #1,
          Call SetPowerBubble
          Print #1, "Power Calculation:"
          Print #1,
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          Print #1,
          Print #1, frmBubblePower!lblPowerLabel(0).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(0).Text
          Print #1, frmBubblePower!lblPowerLabel(1).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(1).Text
          Print #1, frmBubblePower!lblPowerLabel(2).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(2).Text
          Print #1, "Blower " & frmBubblePower!lblPowerLabel(3).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(3).Caption
          Print #1, frmBubblePower!lblPowerLabel(4).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(4).Caption
          Print #1, frmBubblePower!lblPowerLabel(5).Caption; Tab(VALUE_TAB); frmBubblePower!txtPower(5).Text
          Print #1, frmBubblePower!lblPowerLabel(6).Caption; Tab(VALUE_TAB); frmBubblePower!lblPower(6).Caption
          Print #1,
          Print #1,
          Print #1, "Contaminant Glossary:"
          Print #1,
          For i = 1 To bub.NumChemical
              Print #1, Format$(i, "0"); " = "; Trim$(bub.Contaminant(i).Name)
          Next i

          Print #1,
          Print #1,
          Print #1,
          Print #1, "Contaminant Properties:"
          Print #1,
          Print #1, "Con.:"; Tab(MWT_TAB); "MWT"; Tab(HC_TAB); "HC"; Tab(VB_TAB); "Vb"; Tab(DIFL_TAB); "DIFL"; Tab(MTCOEFF_TAB); "MT Coeff."; Tab(STANTON_TAB); "St."
          Print #1,
          For i = 1 To bub.NumChemical
              If bub.DesignContaminant.Name = bub.Contaminant(i).Name Then
                 ContaminantMTCoeff(i) = bub.ContaminantMassTransferCoefficient.Value
                 StantonNumber(i) = bub.StantonNumber.Value
              Else
                 Call KLABUB(ContaminantMTCoeff(i), bub.Oxygen.MassTransferCoefficient.Value, bub.Contaminant(i).LiquidDiffusivity.Value, bub.Oxygen.LiquidDiffusivity.Value, bub.N_for_Finding_KLa.Value, bub.kgOVERkl_for_Finding_KLa.Value, bub.Contaminant(i).HenrysConstant.Value)
                 Call GETPHIB(StantonNumber(i), ContaminantMTCoeff(i), bub.TankVolume.Value, bub.Contaminant(i).HenrysConstant.Value, bub.AirFlowRate.Value)
              End If
              Print #1, Format$(i, "0"); Tab(MWT_TAB); Format$(bub.Contaminant(i).MolecularWeight.Value, "0.00"); Tab(HC_TAB); Format$(bub.Contaminant(i).HenrysConstant.Value, GetTheFormat(bub.Contaminant(i).HenrysConstant.Value)); Tab(VB_TAB); Format$(bub.Contaminant(i).MolarVolume.Value, GetTheFormat(bub.Contaminant(i).MolarVolume.Value)); Tab(DIFL_TAB); Format$(bub.Contaminant(i).LiquidDiffusivity.Value, GetTheFormat(bub.Contaminant(i).LiquidDiffusivity.Value)); Tab(MTCOEFF_TAB); Format$(ContaminantMTCoeff(i), GetTheFormat(ContaminantMTCoeff(i))); Tab(STANTON_TAB); Format$(StantonNumber(i), GetTheFormat(StantonNumber(i)))
          Next i
          Print #1,
          Print #1, "Glossary:"
          Print #1, "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Print #1, "MWT = Molecular Weight (kg/kmol)"
          Print #1, "HC = Henry's Constant (-)"
          Print #1, "Vb = Molar Volume (m" & Chr$(179) & "/kmol)"
          Print #1, "DIFL = Liquid Diffusivity (m" & Chr$(178) & "/sec)"
          Print #1, "MT Coeff. = Mass Transfer Coeff. (1/sec)"
          Print #1, "St. = Stanton Number (-)"
          Print #1,
          Print #1,
          Print #1,
          Print #1, "Contaminant Concentration Results:"
          Print #1,
          Print #1, "Con.:"; Tab(MWT_TAB); "Cinf"; Tab(HC_TAB); "Cto"; Tab(VB_TAB); "De. % Rem."; Tab(DIFL_TAB); "Ceff"; Tab(MTCOEFF_TAB); "Ach. % Rem."
          Print #1,
          For i = 1 To bub.NumChemical
              If bub.DesignContaminant.Name = bub.Contaminant(i).Name Then
                 DesiredPercentRemoval(i) = bub.DesiredPercentRemoval
                 bub.Contaminant(i).Effluent(0) = bub.DesignContaminant.Effluent(0)
                 For j = 1 To bub.NumberOfTanks.Value
                     bub.Contaminant(i).Effluent(j) = bub.DesignContaminant.Effluent(j)
                     bub.Contaminant(i).GasEffluent(j) = bub.DesignContaminant.GasEffluent(j)
                 Next j
                 AchievedPercentRemoval(i) = bub.AchievedPercentRemoval
              Else
                 Call REMOVBUB(DesiredPercentRemoval(i), bub.Contaminant(i).Influent.Value, bub.Contaminant(i).TreatmentObjective.Value)
                 Call EFFLBUB(Effluent(0), GasEffluent(1), bub.Contaminant(i).HenrysConstant.Value, bub.Contaminant(i).Influent.Value, bub.AirToWaterRatio.Value, bub.NumberOfTanks.Value, StantonNumber(i))
                 bub.Contaminant(i).Effluent(0) = Effluent(0)
                 For j = 1 To bub.NumberOfTanks.Value
                     bub.Contaminant(i).Effluent(j) = Effluent(j)
                     bub.Contaminant(i).GasEffluent(j) = GasEffluent(j)
                 Next j
                 Call REMOVBUB(AchievedPercentRemoval(i), bub.Contaminant(i).Influent.Value, bub.Contaminant(i).Effluent(bub.NumberOfTanks.Value))
              End If
              Print #1, Format$(i, "0"); Tab(MWT_TAB); Format$(bub.Contaminant(i).Influent.Value, GetTheFormat(bub.Contaminant(i).Influent.Value)); Tab(HC_TAB); Format$(bub.Contaminant(i).TreatmentObjective.Value, GetTheFormat(bub.Contaminant(i).TreatmentObjective.Value)); Tab(VB_TAB); Format$(DesiredPercentRemoval(i), GetTheFormat(DesiredPercentRemoval(i))); Tab(DIFL_TAB); Format$(bub.Contaminant(i).Effluent(bub.NumberOfTanks.Value), GetTheFormat(bub.Contaminant(i).Effluent(bub.NumberOfTanks.Value))); Tab(MTCOEFF_TAB); Format$(AchievedPercentRemoval(i), GetTheFormat(AchievedPercentRemoval(i)))
          Next i
          Print #1,
          Print #1, "Glossary:"
          Print #1, "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Print #1, "Cinf = "; "Liquid Phase " & frmBubble!lblDesignConcentration(0).Caption
          Print #1, "Cto = "; frmBubble!lblDesignConcentration(1).Caption
          Print #1, "De. % Rem. = "; frmBubble!lblDesignConcentration(2).Caption
          Print #1, "Ceff = "; "Liquid Phase Effluent from Last Tank (" & Chr$(181) & "g/L)"
          Print #1, "Ach. % Rem. = "; frmBubble!lblConcentrationResultsLabel(4).Caption
          Print #1,
          Print #1,
          Print #1,
          Print #1, "Liquid Phase Effluent Concentrations from Each Tank in " & Chr$(181) & "g/L:"
          Print #1,
          Print #1,
          Print #1, Tab(MWT_TAB); "Contaminant Number:"
          Print #1,
          Select Case bub.NumChemical
             Case 1
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"
             Case 2
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"
             Case 3
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"
             Case 4
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"
             Case 5
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"
             Case Else
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"; Tab(STANTON_TAB); "6:"
          End Select
          Print #1,

          'Print Liquid Phase Influent Concentrations of Each Contaminant
          Print #1, "Cinf";
          For j = 1 To 6
              If bub.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 1
                    Print #1, Tab(MWT_TAB);
                 Case 2
                    Print #1, Tab(HC_TAB);
                 Case 3
                    Print #1, Tab(VB_TAB);
                 Case 4
                    Print #1, Tab(DIFL_TAB);
                 Case 5
                    Print #1, Tab(MTCOEFF_TAB);
                 Case 6
                    Print #1, Tab(STANTON_TAB);
              End Select
              Print #1, Format$(bub.Contaminant(j).Influent.Value, GetTheFormat(bub.Contaminant(j).Influent.Value));
          Next j
          Print #1,

          'Print Liquid Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To bub.NumberOfTanks.Value
              Print #1, Format$(i, "0");
              For j = 1 To 6
                  If bub.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 1
                        Print #1, Tab(MWT_TAB);
                     Case 2
                        Print #1, Tab(HC_TAB);
                     Case 3
                        Print #1, Tab(VB_TAB);
                     Case 4
                        Print #1, Tab(DIFL_TAB);
                     Case 5
                        Print #1, Tab(MTCOEFF_TAB);
                     Case 6
                        Print #1, Tab(STANTON_TAB);
                  End Select
                  Print #1, Format$(bub.Contaminant(j).Effluent(i), GetTheFormat(bub.Contaminant(j).Effluent(i)));
             Next j
             Print #1,
          Next i
          
          If bub.NumChemical < 7 Then
             Print #1,
             Print #1, "Glossary:"
             Print #1, "Cinf = Liquid Phase Influent Concentration to Tank 1 (" & Chr$(181) & "g/L)"
             GoTo AfterLiquidEffluentsFile
          End If
          Print #1,
          Print #1,
          Print #1, Tab(MWT_TAB); "Contaminant Number:"
          Print #1,
          Select Case bub.NumChemical
             Case 7
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"
             Case 8
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"
             Case 9
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"
             Case 10
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"; Tab(DIFL_TAB); "10:"
          End Select
          Print #1,

          'Print Liquid Phase Influent Concentrations of Each Contaminant
          Print #1, "Cinf";
          For j = 7 To 10
              If bub.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 7
                    Print #1, Tab(MWT_TAB);
                 Case 8
                    Print #1, Tab(HC_TAB);
                 Case 9
                    Print #1, Tab(VB_TAB);
                 Case 10
                    Print #1, Tab(DIFL_TAB);
              End Select
              Print #1, Format$(bub.Contaminant(j).Influent.Value, GetTheFormat(bub.Contaminant(j).Influent.Value));
          Next j
          Print #1,

          'Print Liquid Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To bub.NumberOfTanks.Value
              Print #1, Format$(i, "0");
              For j = 7 To 10
                  If bub.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 7
                        Print #1, Tab(MWT_TAB);
                     Case 8
                        Print #1, Tab(HC_TAB);
                     Case 9
                        Print #1, Tab(VB_TAB);
                     Case 10
                        Print #1, Tab(DIFL_TAB);
                  End Select
                  Print #1, Format$(bub.Contaminant(j).Effluent(i), GetTheFormat(bub.Contaminant(j).Effluent(i)));
             Next j
             Print #1,
          Next i
          
          Print #1,
          Print #1, "Glossary:"
          Print #1, "Cinf = Liquid Phase Influent Concentration to Tank 1 (" & Chr$(181) & "g/L)"

AfterLiquidEffluentsFile:

             Print #1,
             Print #1,
             Print #1,
             Print #1,
          Print #1, "Gas Phase Effluent Concentrations from Each Tank in " & Chr$(181) & "g/L:"
          Print #1,
          Print #1,
          Print #1, Tab(MWT_TAB); "Contaminant Number:"
          Print #1,
          
          Select Case bub.NumChemical
             Case 1
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"
             Case 2
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"
             Case 3
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"
             Case 4
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"
             Case 5
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"
             Case Else
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"; Tab(STANTON_TAB); "6:"
          End Select
          Print #1,

          'Print Gas Phase Influent Concentrations of Each Contaminant
          Print #1, "Yinf";
          For j = 1 To 6
              If bub.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 1
                    Print #1, Tab(MWT_TAB);
                 Case 2
                    Print #1, Tab(HC_TAB);
                 Case 3
                    Print #1, Tab(VB_TAB);
                 Case 4
                    Print #1, Tab(DIFL_TAB);
                 Case 5
                    Print #1, Tab(MTCOEFF_TAB);
                 Case 6
                    Print #1, Tab(STANTON_TAB);
              End Select
              Print #1, "0";
          Next j
          Print #1,

          'Print Gas Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To bub.NumberOfTanks.Value
              Print #1, Format$(i, "0");
              For j = 1 To 6
                  If bub.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 1
                        Print #1, Tab(MWT_TAB);
                     Case 2
                        Print #1, Tab(HC_TAB);
                     Case 3
                        Print #1, Tab(VB_TAB);
                     Case 4
                        Print #1, Tab(DIFL_TAB);
                     Case 5
                        Print #1, Tab(MTCOEFF_TAB);
                     Case 6
                        Print #1, Tab(STANTON_TAB);
                  End Select
                  Print #1, Format$(bub.Contaminant(j).GasEffluent(i), GetTheFormat(bub.Contaminant(j).GasEffluent(i)));
             Next j
             Print #1,
          Next i
          
          If bub.NumChemical < 7 Then
             Print #1,
             Print #1, "Glossary:"
             Print #1, "Yinf = Gas Phase Influent Concentration to All Tanks (" & Chr$(181) & "g/L)"
             GoTo AfterGasEffluentsFile
          End If
          Print #1,
          Print #1,
          Print #1, Tab(MWT_TAB); "Contaminant Number:"
          Print #1,
       
          Select Case bub.NumChemical
             Case 7
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"
             Case 8
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"
             Case 9
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"
             Case 10
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"; Tab(DIFL_TAB); "10:"
          End Select
          Print #1,

          'Print Gas Phase Influent Concentrations of Each Contaminant
          Print #1, "Yinf";
          For j = 7 To 10
              If bub.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 7
                    Print #1, Tab(MWT_TAB);
                 Case 8
                    Print #1, Tab(HC_TAB);
                 Case 9
                    Print #1, Tab(VB_TAB);
                 Case 10
                    Print #1, Tab(DIFL_TAB);
              End Select
              Print #1, "0";
          Next j
          Print #1,

          'Print Gas Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To bub.NumberOfTanks.Value
              Print #1, Format$(i, "0");
              For j = 7 To 10
                  If bub.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 7
                        Print #1, Tab(MWT_TAB);
                     Case 8
                        Print #1, Tab(HC_TAB);
                     Case 9
                        Print #1, Tab(VB_TAB);
                     Case 10
                        Print #1, Tab(DIFL_TAB);
                  End Select
                  Print #1, Format$(bub.Contaminant(j).GasEffluent(i), GetTheFormat(bub.Contaminant(j).GasEffluent(i)));
             Next j
             Print #1,
          Next i

          Print #1,
          Print #1, "Glossary:"
          Print #1, "Yinf = Gas Phase Influent Concentration to All Tanks (" & Chr$(181) & "g/L)"
          

AfterGasEffluentsFile:

    End Select

    Close #1

End Sub

Sub savebubble()
Dim FileID As String
Dim i As Integer
Dim xu As rec_Units_frmContaminantPropertyEdit
Dim TransferTestDummy As Integer

    If Right$(frmBubble.Caption, 14) = "(untitled.bub)" Then
       Call savefilebubble(Filename)
    End If

    If Filename$ <> "" Then
       FileID = BUBBLE_FILEID
       Open Filename$ For Output As #1
       
       Write #1, FileID
      
       Write #1, BubbleAerationMode, ""

       Write #1, bub.OperatingPressure.Value, ""
       Write #1, bub.operatingtemperature.Value, ""

       
       If bub.Oxygen.KLaMethod = KLA_METHOD_USER_INPUT Then
          Write #1, bub.Oxygen.KLaMethod, ""
          Write #1, bub.Oxygen.MassTransferCoefficient.Value, ""

       ElseIf bub.Oxygen.KLaMethod = KLA_METHOD_CWO2_TRANSFER_TEST Then
          Write #1, bub.Oxygen.KLaMethod, ""
          If frmOxygenMassTransferCoeff!optDataAvailable(0).Value = True Then
             TransferTestDummy = 1
          Else
             TransferTestDummy = 2
          End If
          
          If TransferTestDummy = 1 Then       'SOTR vs. QAIR data available
             Write #1, TransferTestDummy, ""
             Write #1, bub.Oxygen.CWO2TestData.SOTR.Value, ""
             Write #1, bub.Oxygen.CWO2TestData.AirFlowRate_QAIR.Value, ""
             Write #1, bub.Oxygen.CWO2TestData.BarometricPressure_PB.Value, ""
             Write #1, bub.Oxygen.CWO2TestData.WaterDepth_DEPTHW.Value, ""
             Write #1, bub.Oxygen.CWO2TestData.WaterVolumePerTank_VM3.Value, ""

          ElseIf TransferTestDummy = 2 Then   'SOTE vs. QAIR data available
             Write #1, TransferTestDummy, ""
             Write #1, bub.Oxygen.CWO2TestData.SOTE.Value, ""
             Write #1, bub.Oxygen.CWO2TestData.AirFlowRate_QAIR.Value, ""
             Write #1, bub.Oxygen.CWO2TestData.BarometricPressure_PB.Value, ""
             Write #1, bub.Oxygen.CWO2TestData.WaterDepth_DEPTHW.Value, ""
             Write #1, bub.Oxygen.CWO2TestData.WaterVolumePerTank_VM3.Value, ""
                       
          End If
       End If

       Write #1, bub.NumChemical, ""
       For i = 1 To bub.NumChemical
           Write #1, bub.Contaminant(i).Pressure, bub.Contaminant(i).Temperature, bub.Contaminant(i).Name, bub.Contaminant(i).MolecularWeight.Value, bub.Contaminant(i).HenrysConstant.Value, bub.Contaminant(i).MolarVolume.Value, bub.Contaminant(i).LiquidDiffusivity.Value, bub.Contaminant(i).Influent.Value, bub.Contaminant(i).TreatmentObjective.Value
       Next i
       Write #1, bub.DesignContaminant.Name, ""

       Write #1, bub.WaterFlowRate.Value, ""
       Write #1, bub.AirToWaterRatio.Value, bub.AirToWaterRatio.UserInput, ""
       Write #1, bub.AirFlowRate.Value, bub.AirFlowRate.UserInput, ""
       Write #1, bub.NumberOfTanks.Value, ""

       Write #1, bub.CodeForTausAndTankVolumes, ""
       Select Case bub.CodeForTausAndTankVolumes
          Case 1   'Write Hydraulic Retention Time for 1 Tank
             Write #1, bub.TankHydraulicRetentionTime.Value, ""
          Case 2   'Write Hydraulic Retention Time for All Tanks
             Write #1, bub.TotalHydraulicRetentionTime.Value, ""
          Case 3   'Write Volume of Each Tank
             Write #1, bub.TankVolume.Value, ""
          Case 4   'Write Volume of All Tanks
             Write #1, bub.TotalTankVolume.Value, ""
       End Select

       Write #1, bub.Power.BlowerEfficiency, ""
       Write #1, bub.Power.TankWaterDepth, ""
       Write #1, bub.Power.NumberOfBlowersinEachTank, ""
       
       'Output the units of this screen.
       Write #1, GetUnits(frmBubble!UnitsOpCond(0)), GetUnits(frmBubble!UnitsOpCond(1))
       Write #1, GetUnits(frmBubble!UnitsOxygenRef(1)), GetUnits(frmBubble!UnitsOxygenRef(2))
       Write #1, GetUnits(frmBubble!UnitsDesignContam(0)), GetUnits(frmBubble!UnitsDesignContam(1)), GetUnits(frmBubble!UnitsDesignContam(3))
       Write #1, GetUnits(frmBubble!UnitsFlowParam(0)), GetUnits(frmBubble!UnitsFlowParam(3))
       Write #1, GetUnits(frmBubble!UnitsTankParam(1)), GetUnits(frmBubble!UnitsTankParam(2)), GetUnits(frmBubble!UnitsTankParam(3)), GetUnits(frmBubble!UnitsTankParam(4))
       Write #1, GetUnits(frmBubble!UnitsConcResults(1)), GetUnits(frmBubble!UnitsConcResults(2)), GetUnits(frmBubble!UnitsConcResults(3))

       'Output the units of frmContaminantPropertyEdit.
       xu = Units_frmContaminantPropertyEdit
       Write #1, xu.UnitsProp(0), xu.UnitsProp(2), xu.UnitsProp(3), xu.UnitsProp(4), xu.UnitsProp(5)
       Write #1, xu.UnitsConc(0), xu.UnitsConc(1)

       Close #1

       If BubbleAerationMode = DESIGN_MODE Then
          frmBubble.Caption = "Bubble Aeration - Design Mode"
       Else
          frmBubble.Caption = "Bubble Aeration - Rating Mode"
       End If

       frmBubble.Caption = frmBubble.Caption & " (" & Filename & ")"

    End If

End Sub

Sub SaveContaminantListBubble()
    Dim FileID As String
    Dim i As Integer

    Call SaveFile(Filename)

    If Filename$ <> "" Then
       FileID = CONTAMINANTS_BUBBLE_FILEID
       Open Filename$ For Output As #1
       
       Write #1, FileID
      
       For i = 1 To bub.NumChemical
           Write #1, bub.Contaminant(i).Pressure, bub.Contaminant(i).Temperature, bub.Contaminant(i).Name, bub.Contaminant(i).MolecularWeight.Value, bub.Contaminant(i).HenrysConstant.Value, bub.Contaminant(i).MolarVolume.Value, bub.Contaminant(i).LiquidDiffusivity.Value, bub.Contaminant(i).Influent.Value, bub.Contaminant(i).TreatmentObjective.Value
       Next i

       Close #1

    End If

End Sub

Sub savefilebubble(Filename As String)
Dim Ctl As Control
Set Ctl = frmBubble.CommonDialog1

    On Error Resume Next
    'frmBubble!CMDialog1.DefaultExt = "bub"
    'frmBubble!CMDialog1.Filter = "Bubble Aeration Files (*.bub)|*.bub"
    'frmBubble!CMDialog1.DialogTitle = "Save Bubble Aeration File"
    'frmBubble!CMDialog1.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
    'frmBubble!CMDialog1.Action = 2
    'Filename$ = frmBubble!CMDialog1.Filename
    Ctl.DefaultExt = "bub"
    Ctl.Filter = "Bubble Aeration Files (*.bub)|*.bub"
    Ctl.DialogTitle = "Save Bubble Aeration File"
    Ctl.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
    Ctl.Action = 2
    Filename$ = Ctl.Filename
    If Err = 32755 Then   'Cancel selected by user
       Filename$ = ""
    End If

End Sub

Sub SetDesignContaminantEnabledBubble(NumInList As Integer)
    Dim i As Integer

    If NumInList = 0 Then
       frmBubble!mnuFile(4).Enabled = False
       frmBubble!mnuFile(5).Enabled = False
       frmBubble!mnuOptions(0).Enabled = False
       'frmBubble!fraDesignContaminant.Enabled = False
       frmBubble!cboDesignContaminant.Enabled = False
       frmBubble!fraFlowParameters.Enabled = False
       frmBubble!fraTankParameters.Enabled = False
       frmBubble!fraConcentrationResults.Enabled = False
       frmBubble!mnuPower(0).Enabled = False
       For i = 0 To 2
           frmBubble!lblDesignConcentrationValue(i).Caption = ""
       Next i
       frmBubble!txtDesignConcentrationValue(3).Text = ""
       frmBubble!lblFlowParameters(1).Caption = ""
       frmBubble!lblStanton.Caption = ""
       If BubbleAerationMode = DESIGN_MODE Then
          frmBubble.txtTankParameters(1).Text = ""
          frmBubble.txtTankParameters(2).Text = ""
          frmBubble.txtTankParameters(3).Text = ""
          frmBubble.txtTankParameters(4).Text = ""
       End If

       frmBubble!lblConcentrationResults(0).Caption = ""
       frmBubble!lblConcentrationResults(1).Caption = ""
       frmBubble!lblConcentrationResults(3).Caption = ""
       frmBubble!lblConcentrationResults(4).Caption = ""

    Else
     
       frmBubble!mnuFile(4).Enabled = True
       frmBubble!mnuFile(5).Enabled = True
     
       frmBubble!mnuOptions(0).Enabled = True
       frmBubble!mnuPower(0).Enabled = True

       'frmBubble!fraDesignContaminant.Enabled = True
       frmBubble!cboDesignContaminant.Enabled = True
       frmBubble!fraTankParameters.Enabled = True
       frmBubble!fraFlowParameters.Enabled = True
       frmBubble!fraConcentrationResults.Enabled = True

    End If

End Sub

Sub SetPowerBubble()
          bub.Power.InletAirTemperature = bub.operatingtemperature.Value - 273.15
          Call CalculatePowerBubble
          
             frmBubblePower!txtPower(0).Text = Format$(bub.Power.InletAirTemperature, GetTheFormat(bub.Power.InletAirTemperature))
             frmBubblePower!txtPower(1).Text = Format$(bub.Power.BlowerEfficiency, GetTheFormat(bub.Power.BlowerEfficiency))
             frmBubblePower!txtPower(2).Text = Format$(bub.Power.TankWaterDepth, GetTheFormat(bub.Power.TankWaterDepth))
             frmBubblePower!lblPower(3).Caption = Format$(bub.Power.BlowerBrakePower, GetTheFormat(bub.Power.BlowerBrakePower))
             frmBubblePower!lblPower(4).Caption = Format$(bub.NumberOfTanks.Value, "0")
             frmBubblePower!txtPower(5).Text = Format$(bub.Power.NumberOfBlowersinEachTank, "0")
             frmBubblePower!lblPower(6).Caption = Format$(bub.Power.TotalBrakePower, GetTheFormat(bub.Power.TotalBrakePower))

End Sub

Sub StartBubbleDefaultCase()

    Filename = "TheDefaultCaseBubble"
    Call loadbubble("")

End Sub

Attribute VB_Name = "C_PropMod"
Option Explicit

'Capabilities of frmContaminantPropertyEdit:
'- Start editing all components at component #X.
'- Add one component.
'- Both of these were cancelled to perform a StEPP-Import.

Type rec_frmContaminantPropertyEdit
  'Inputs.
  ModelName As String         'Used only for caption
  ModelType As Integer        'Used to determine which properties are edited/displayed
  DoEditNumber As Integer     'Start editing on this component
  DoAdd As Integer            'Add one component
  OldNumCompo As Integer      'Old number of components

  'Input and Output.
  Contaminants(MAXCHEMICAL) As ContaminantPropertyType
  
  'Outputs.
  StEPPImportedNum As Integer 'Imported X components
  CancelledEdit As Integer    'User cancelled edit
  CancelledAdd As Integer     'User cancelled addition
  NewNumCompo As Integer      'New number of components
End Type

Type rec_Units_frmContaminantPropertyEdit
  'Units on frmContaminantPropertyEdit.
  UnitsProp(0 To 5) As String
  UnitsConc(0 To 1) As String
End Type

Global Data_frmContaminantPropertyEdit As rec_frmContaminantPropertyEdit
Global Units_frmContaminantPropertyEdit As rec_Units_frmContaminantPropertyEdit

Global Const MODELTYPE_PACKEDTOWER = 1
Global Const MODELTYPE_BUBBLE = 2
Global Const MODELTYPE_SURFACE = 3

Attribute VB_Name = "DemoModeMod"
Option Explicit

' DEMO MODE GLOBAL VARIABLE

'For Distribution on CD
    Global Const Mode_Distribution_on_CD = True

'For Demo Mode use this setting
'   Global Const DemoMode% = false

'For Complete Version (non-Demo) use this setting
   Global Const DemoMode% = False
   Global Const StudentMode% = False

Sub check_area()

If 0 <> StrComp(App.Path, "w:\winapps\asap", 1) Then
    MsgBox "This Program is not being run on the correct System!" + Chr$(13) + "Therefore it will not work."
    End
End If

End Sub

Function decrypt_string(password As String) As String
Dim newpass$
Dim keyval%, i%, length%
ReDim Key(100) As Integer

For i% = 32 To 122
    keyval% = ((i% * 3) Mod 91)
    Key(keyval%) = i%
Next i%

length% = Len(password)
newpass$ = ""
For i% = 1 To length%
    newpass$ = newpass$ + Chr$(Key(Asc(Mid$(password, i%, 1)) - 32))
Next i%

decrypt_string = newpass$
End Function

Function demomode_check_packing(packingname As String) As Integer
    Dim packing_found%
    Dim msg$

If (Not DemoMode%) Then
    demomode_check_packing = 0
    Exit Function
End If

packing_found% = 0
If packingname = "Tri-Packs_No.1" Then packing_found% = 1
If packingname = "Tri-Packs_No.2" Then packing_found% = 1


If packing_found% Then
    demomode_check_packing = 0
Else
    demomode_check_packing = 1
    msg$ = "This Program is in Demo Mode." + Chr$(13) + Chr$(13)
    msg$ = msg$ + "You may on choose from the following Packing Materials:" + Chr$(13) + Chr$(13)
    msg$ = msg$ + Chr$(9) + "Tri-Packs_No.1" + Chr$(13)
    msg$ = msg$ + Chr$(9) + "Tri-Packs_No.2" + Chr$(13)
    MsgBox msg$
End If

End Function

Function fileexists(Filename As String) As Integer
    Dim test%

On Error GoTo ErrorIndexOpen

test% = GetAttr(Filename)

fileexists = True

Exit Function

ErrorIndexOpen:
    fileexists = False
    Exit Function
Resume Next

End Function

Attribute VB_Name = "DLL_Decl_Mod"
Option Explicit

'
' DLL DECLARATIONS FOR PACKED TOWER AERATION (DLLS\ASAPPTAD.DLL).
' NOTE: (*) INDICATES THIS ROUTINE IS PRESENT IN THE DLL BUT IS NOT CALLED BY THE ASAP VISUAL BASIC CODE.
'
' .......... NON-ALIASED DLL ROUTINES:
Declare Sub Fortran_AIRDENS Lib "dlls\asapptad.dll" Alias "AIRDENS" (AirDensity As Double, Temperature As Double, Pressure As Double)
Declare Sub Fortran_AIRVISC Lib "dlls\asapptad.dll" Alias "AIRVISC" (AirViscosity As Double, Temperature As Double)
Declare Sub Fortran_AREAPT2 Lib "dlls\asapptad.dll" Alias "AREAPT2" (TowerArea As Double, TowerDiameter As Double)
'DIFFL -- (*)
'DIFGWL -- (*)
Declare Sub Fortran_GETSAF Lib "dlls\asapptad.dll" Alias "GETSAF" (KLaSafetyFactor As Double, OndaMassTransferCoefficient As Double, DesignMassTransferCoefficient As Double)
Declare Sub Fortran_H2ODENS Lib "dlls\asapptad.dll" Alias "H2ODENS" (LiquidDensity As Double, Temperature As Double)
Declare Sub Fortran_H2OST Lib "dlls\asapptad.dll" Alias "H2OST" (LiquidSurfaceTension As Double, Temperature As Double)
Declare Sub Fortran_H2OVISC Lib "dlls\asapptad.dll" Alias "H2OVISC" (LiquidViscosity As Double, Temperature As Double)
Declare Sub Fortran_LDAIRPT2 Lib "dlls\asapptad.dll" Alias "LDAIRPT2" (AirLoadingRate As Double, AirFlowRate As Double, AirDensity As Double, TowerArea As Double)
Declare Sub Fortran_LDH2OPT2 Lib "dlls\asapptad.dll" Alias "LDH2OPT2" (WaterLoadingRate As Double, WaterFlowRate As Double, WaterDensity As Double, TowerArea As Double)
Declare Sub Fortran_OPTMAL Lib "dlls\asapptad.dll" Alias "OPTMAL" (WaterDensity As Double, WaterViscosity As Double, WaterSurfaceTension As Double, AirDensity As Double, AirViscosity As Double, WaterFlowRate As Double, PackingNominalSize As Double, PackingFactor As Double, PackingCriticalSurfaceTension As Double, PackingSpecificSurfaceArea As Double, InfluentConcentrations As Double, TreatmentObjectives As Double, HenrysConstants As Double, NumberOfContaminants As Long, PressureDrop As Double, LiquidDiffusivities As Double, GasDiffusivities As Double, KLaSafetyFactor As Double, ID_OptimalDesignContaminant As Long, MultipleOfMinimumAirToWaterRatio As Double, EffluentConcentrations As Double, ErrorFlag As Long)
Declare Sub Fortran_PBLOWPT Lib "dlls\asapptad.dll" Alias "PBLOWPT" (BlowerBrakePower As Double, AirFlowRate As Double, TowerArea As Double, OperatingPressure As Double, PressureDrop As Double, TowerHeight As Double, AirDensity As Double, InletAirTemperature As Double, BlowerEfficiency As Double)
Declare Sub Fortran_PDROP Lib "dlls\asapptad.dll" Alias "PDROP" (AirPressureDrop As Double, AirToWaterRatio As Double, AirLoadingRate As Double, PackingFactor As Double, WaterViscosity As Double, AirDensity As Double, WaterDensity As Double, InitialPressureDrop As Double, MaximumPressureDrop As Double, PressureDropStep As Double)
Declare Sub Fortran_PPUMPPT Lib "dlls\asapptad.dll" Alias "PPUMPPT" (PumpBrakePower As Double, PumpEfficiency As Double, WaterDensity As Double, WaterFlowRate As Double, TowerHeight As Double)
Declare Sub Fortran_PTOTALPT Lib "dlls\asapptad.dll" Alias "PTOTALPT" (TotalBrakePower As Double, BlowerBrakePower As Double, PumpBrakePower As Double)
Declare Sub Fortran_QAIRPT2 Lib "dlls\asapptad.dll" Alias "QAIRPT2" (AirFlowRate As Double, AirLoadingRate As Double, AirDensity As Double, TowerArea As Double)
Declare Sub Fortran_QH2OPT2 Lib "dlls\asapptad.dll" Alias "QH2OPT2" (WaterFlowRate As Double, WaterLoadingRate As Double, WaterDensity As Double, TowerArea As Double)
Declare Sub Fortran_REMOVPT Lib "dlls\asapptad.dll" Alias "REMOVPT" (RemovalEfficiency As Double, InfluentConcentration As Double, Effluent As Double)
Declare Sub Fortran_TVOLPT2 Lib "dlls\asapptad.dll" Alias "TVOLPT2" (TowerVolume As Double, TowerArea As Double, TowerLength As Double)
Declare Sub Fortran_VQCALC Lib "dlls\asapptad.dll" Alias "VQCALC" (AirToWaterRatio As Double, AirFlowRate As Double, WaterFlowRate As Double)
' .......... ALIASED DLL ROUTINES:
Declare Sub Fortran_AIRFLO Lib "dlls\asapptad.dll" Alias "_AIRFLO@12" (AirFlowRate As Double, AirToWaterRatio As Double, WaterFlowRate As Double)
Declare Sub Fortran_AWCALC Lib "dlls\asapptad.dll" Alias "_AWCALC@40" (PackingWettedSurfaceArea As Double, PackingCriticalSurfaceTension As Double, WaterSurfaceTension As Double, WaterLoadingRate As Double, PackingSpecificSurfaceArea As Double, WaterViscosity As Double, WaterDensity As Double, ReynoldsNumber As Double, FroudeNumber As Double, WeberNumber As Double)
'DIFLHL -- (*)
'DIFLPOL -- (*)
Declare Sub Fortran_EFFLPT2 Lib "dlls\asapptad.dll" Alias "_EFFLPT2@32" (EffluentConcentration As Double, AirToWaterRatio As Double, HenrysConstant As Double, WaterFlowRate As Double, TowerArea As Double, TowerLength As Double, DesignMassTransferCoefficient As Double, InfluentConcentration As Double)
'FINDKLA -- (*)
Declare Sub Fortran_GETCSPT Lib "dlls\asapptad.dll" Alias "_GETCSPT@20" (DesignContaminantAirWaterInterfaceConc As Double, AirToWaterRatio As Double, DesignContaminantHenrysConstant As Double, DesignContaminantInfluentConcentration As Double, DesignContaminantTreatmentObjective As Double)
'GETHIVQ -- (*)
Declare Sub Fortran_GETHTUPT Lib "dlls\asapptad.dll" Alias "_GETHTUPT@16" (TransferUnitHeight As Double, WaterFlowRate As Double, TowerArea As Double, DesignMassTransferCoefficient As Double)
Declare Sub Fortran_GETMULT Lib "dlls\asapptad.dll" Alias "_GETMULT@12" (MultipleOfMinimumAirToWaterRatio As Double, AirToWaterRatio As Double, MinimumAirToWaterRatio As Double)
Declare Sub Fortran_GETNTUPT Lib "dlls\asapptad.dll" Alias "_GETNTUPT@16" (NumberOfTransferUnits As Double, DesignContaminantInfluentConcentration As Double, DesignContaminantTreatmentObjective As Double, DesignContaminantAirToWaterInterfaceConc As Double)
Declare Sub Fortran_KLACOR Lib "dlls\asapptad.dll" Alias "_KLACOR@12" (DesignMassTransferCoefficient As Double, OndaMassTransferCoefficient As Double, KLaSafetyFactor As Double)
Declare Sub Fortran_ONDAKGPT Lib "dlls\asapptad.dll" Alias "_ONDAKGPT@28" (OndaGasPhaseMassTransferCoefficient As Double, AirLoadingRate As Double, PackingSpecificSurfaceArea As Double, AirViscosity As Double, AirDensity As Double, GasDiffusivity As Double, PackingNominalSize As Double)
Declare Sub Fortran_ONDAKLPT Lib "dlls\asapptad.dll" Alias "_ONDAKLPT@32" (OndaLiquidPhaseMassTransferCoefficient As Double, WaterLoadingRate As Double, PackingWettedSurfaceArea As Double, WaterViscosity As Double, WaterDensity As Double, LiquidDiffusivity As Double, PackingSpecificSurfaceArea As Double, PackingNominalSize As Double)
Declare Sub Fortran_ONDKLAPT Lib "dlls\asapptad.dll" Alias "_ONDKLAPT@32" (OndaOverallMassTransferCoefficient As Double, OndaLiquidPhaseResistance As Double, OndaGasPhaseResistance As Double, OndaTotalResistance As Double, OndaLiquidPhaseMassTransferCoefficient As Double, PackingWettedSurfaceArea As Double, OndaGasPhaseMassTransferCoefficient As Double, DesignContaminantHenrysConstant As Double)
Declare Sub Fortran_PT1AREA Lib "dlls\asapptad.dll" Alias "_PT1AREA@16" (TowerArea As Double, WaterFlowRate As Double, WaterDensity As Double, WaterMassLoadingRate As Double)
Declare Sub Fortran_PT1DTOW Lib "dlls\asapptad.dll" Alias "_PT1DTOW@8" (TowerDiameter As Double, TowerArea As Double)
Declare Sub Fortran_PT1HTOW Lib "dlls\asapptad.dll" Alias "_PT1HTOW@12" (TowerHeight As Double, TransferUnitHeight As Double, NumberOfTransferUnits As Double)
Declare Sub Fortran_PT1LDAIR Lib "dlls\asapptad.dll" Alias "_PT1LDAIR@28" (AirMassLoadingRate As Double, AirPressureDrop As Double, AirToWaterRatio As Double, AirDensity As Double, WaterDensity As Double, PackingFactor As Double, WaterViscosity As Double)
Declare Sub Fortran_PT1LDH2O Lib "dlls\asapptad.dll" Alias "_PT1LDH2O@20" (WaterMassLoadingRate As Double, AirToWaterRatio As Double, AirDensity As Double, WaterDensity As Double, AirMassLoadingRate As Double)
Declare Sub Fortran_PT1TVOL Lib "dlls\asapptad.dll" Alias "_PT1TVOL@12" (TowerVolume As Double, TowerArea As Double, TowerHeight As Double)
Declare Sub Fortran_PT1VQMIN Lib "dlls\asapptad.dll" Alias "_PT1VQMIN@16" (MinimumAirToWaterRatio As Double, InfluentConcentration As Double, TreatmentObjective As Double, HenrysConstant As Double)
Declare Sub Fortran_VQMLTPT1 Lib "dlls\asapptad.dll" Alias "_VQMLTPT1@12" (AirToWaterRatio As Double, MinimumAirToWaterRatio As Double, MultipleOfMinimumAirToWaterRatio As Double)


'
' DLL DECLARATIONS FOR BUBBLE AERATION (DLLS\ASAPBUB.DLL).
' NOTE: (*) INDICATES THIS ROUTINE IS PRESENT IN THE DLL BUT IS NOT CALLED BY THE ASAP VISUAL BASIC CODE.
'
' .......... NON-ALIASED DLL ROUTINES:
'Declare Sub airflo Lib "dlls\asapbub.dll" (AirFlowRate As Double, AirToWaterRatio As Double, WaterFlowRate As Double)
'AIRFLO -- (*)
Declare Sub Fortran_DIFO2 Lib "dlls\asapbub.dll" Alias "DIFO2" (DiffusivityOxygen As Double, Temperature As Double)
Declare Sub Fortran_EFFLBUB Lib "dlls\asapbub.dll" Alias "EFFLBUB" (ArrayLiqPhaseEffluentConc As Double, ArrayGasPhaseEffluentConc As Double, HenrysConstOfCompound As Double, LiqPhaseInfluentConc As Double, AirToWaterRatio As Double, NoOfTanks As Long, StantonNo As Double)
Declare Sub Fortran_GETCSTAR Lib "dlls\asapbub.dll" Alias "GETCSTAR" (DOSaturationConc As Double, WeightDensityWater As Double, EffectiveSaturationDepth As Double, BarometricPressure As Double, WaterDepth As Double)
Declare Sub Fortran_GETPHIB Lib "dlls\asapbub.dll" Alias "GETPHIB" (StantonNo As Double, CompoundMassTransCoeff As Double, VolumeOfEaTank As Double, HenrysConstOfCompound As Double, AirFlowRateToEaTank As Double)
Declare Sub Fortran_GETSOTE Lib "dlls\asapbub.dll" Alias "GETSOTE" (StandardOxygenTransferEff As Double, StandardOxygenTransferRate As Double, AirFlowRate As Double)
Declare Sub Fortran_GETSOTR Lib "dlls\asapbub.dll" Alias "GETSOTR" (StandardOxygenTransferRate As Double, StandardOxygenTransferEff As Double, AirFlowRate As Double)
Declare Sub Fortran_KLA20A Lib "dlls\asapbub.dll" Alias "KLA20A" (AppOxygenMassTransCoeff As Double, WaterVolumePerTankL As Double, WaterVolumePerTankm3 As Double, DOSaturationConcentration As Double, StandOxygenMassTransRate As Double)
Declare Sub Fortran_KLABUB Lib "dlls\asapbub.dll" Alias "KLABUB" (CompoundMassTransferCoeff As Double, OxygenMassTransferCoeff As Double, DiffusivityLiquidWater As Double, DiffusivityOfOxygen As Double, ExponentInCorrelation As Double, RatioGasLiquidTransfer As Double, HenrysConstant As Double)
Declare Sub Fortran_PCALCBUB Lib "dlls\asapbub.dll" Alias "PCALCBUB" (TotalBrakePowerAllTanks As Double, BlowerBrakePowerForEaTank As Double, OperatingPressure As Double, InletAirTempC As Double, AirFlowRate As Double, BlowerEfficiencyPercent As Double, LiquidDensity As Double, WaterDepth As Double, NoOfTanks As Long, NumberOfBlowersinEachTank As Long)
Declare Sub Fortran_REMOVBUB Lib "dlls\asapbub.dll" Alias "REMOVBUB" (ActualLiqPhaseRemovalEfficiency As Double, LiqPhaseInfluentConc As Double, LiqPhaseEffluentConcLastTank As Double)
Declare Sub Fortran_TAUSVOLS Lib "dlls\asapbub.dll" Alias "TAUSVOLS" (TotalFluidResidenceTime As Double, NoOfTanksInSeries As Long, HydraulicRetentTimeOfEaTank As Double, VolumeOfEachTank As Double, TotalVolumeOfAllTanks As Double, WaterFlowRate As Double, TankParametersCode As Long)
Declare Sub Fortran_TrueKLa Lib "dlls\asapbub.dll" Alias "TrueKLa" (OxygenMassTransferCoeffOperatTemp As Double, AppOxygenMassTransferCoeff20Deg As Double, ParameterUsedInKla As Double, AirFlowRate As Double, WaterVolPerTankL As Double, BarometricPressure As Double, WeightDensityWater As Double, TrueOxygenMassTransferCoef20 As Double, EffectiveSaturatonDepth As Double, OperatingTemp As Double)
Declare Sub Fortran_VOLBUB Lib "dlls\asapbub.dll" Alias "VOLBUB" (TankVolume As Double, HenrysConstant As Double, AirFlowRate As Double, ContaminantMassTransferCoeff As Double, Influent As Double, TreatmentObjective As Double, NumberOfTanks As Long, WaterFlowRate As Double, ErrorFlag As Long)
Declare Sub Fortran_VQBUB Lib "dlls\asapbub.dll" Alias "VQBUB" (AirToWaterRatio As Double, AirFlowRateToEachTank As Double, WaterFlowRate As Double)
Declare Sub Fortran_VQMINBUB Lib "dlls\asapbub.dll" Alias "VQMINBUB" (MinAirToWaterRatio As Double, Influent As Double, TreatmentObjective As Double, HenrysConstant As Double, NumberOfTanks As Long)
' .......... ALIASED DLL ROUTINES:
'
' (THERE ARE NO ALIASED DLL ROUTINES IN THE DLLS\ASAPBUB.DLL FILE.)


'
' DLL DECLARATIONS FOR SURFACE AERATION (DLLS\ASAPSURF.DLL).
' NOTE: (*) INDICATES THIS ROUTINE IS PRESENT IN THE DLL BUT IS NOT CALLED BY THE ASAP VISUAL BASIC CODE.
'
' .......... NON-ALIASED DLL ROUTINES:
'DIFO2 -- (*)
Declare Sub Fortran_KLAO2SUR Lib "dlls\asapsurf.dll" Alias "KLAO2SUR" (OxygenMTCoeff As Double, PowerInput_PoverV As Double)
Declare Sub Fortran_KLASURF Lib "dlls\asapsurf.dll" Alias "KLASURF" (ContaminantMassTransferCoeff As Double, OxygenMassTransferCoeff As Double, ContaminantLiquidDiffusivity As Double, OxygenLiquidDiffusivity As Double, N_forFindingKLa As Double, kgOVERkl_forFindingKLa As Double, HenrysConstant As Double)
Declare Sub Fortran_PCALCSUR Lib "dlls\asapsurf.dll" Alias "PCALCSUR" (TotalPower As Double, PowerPerTank As Double, PowerInput_PoverV As Double, TotalVolumeAllTanks As Double, NumberOfTanks As Long, AeratorMotorEfficiency As Double)
Declare Sub Fortran_SEFFL Lib "dlls\asapsurf.dll" Alias "SEFFL" (EffluentConcentrations As Double, AchievedRemovalEfficiency As Double, Influent As Double, ContaminantMassTransferCoeff As Double, TankResidenceTime As Double, NumberOfTanks As Long)
Declare Sub Fortran_SURFEFF Lib "dlls\asapsurf.dll" Alias "SURFEFF" (RemovalEfficiency As Double, Influent As Double, EffluentOrTreatmentObjective As Double)
Declare Sub Fortran_TAUISURF Lib "dlls\asapsurf.dll" Alias "TAUISURF" (TankResidenceTime As Double, Influent As Double, TreatmentObjective As Double, NumberOfTanks As Long, ContaminantMassTransferCoeff As Double)
' .......... ALIASED DLL ROUTINES:
'
' (THERE ARE NO ALIASED DLL ROUTINES IN THE DLLS\ASAPBUB.DLL FILE.)



Attribute VB_Name = "ForDebugMod"
Option Explicit


Sub AIRDENS(AirDensity As Double, Temperature As Double, Pressure As Double)
  'Call system_log("AIRDENS Entry")
  'Call system_log("AirDensity =" & Str$(AirDensity))
  'Call system_log("Temperature =" & Str$(Temperature))
  'Call system_log("Pressure =" & Str$(Pressure))
  Call Fortran_AIRDENS(AirDensity, Temperature, Pressure)
  'Call system_log("AIRDENS Exit")
End Sub

Sub AIRFLO(AirFlowRate As Double, AirToWaterRatio As Double, WaterFlowRate As Double)
  'Call system_log("AIRFLO Entry")
  'Call system_log("AirFlowRate =" & Str$(AirFlowRate))
  'Call system_log("AirToWaterRatio =" & Str$(AirToWaterRatio))
  'Call system_log("WaterFlowRate =" & Str$(WaterFlowRate))
  Call Fortran_AIRFLO(AirFlowRate, AirToWaterRatio, WaterFlowRate)
  'Call system_log("AIRFLO Exit")
End Sub

Sub AIRVISC(AirViscosity As Double, Temperature As Double)
  'Call system_log("AIRVISC Entry")
  'Call system_log("AirViscosity =" & Str$(AirViscosity))
  'Call system_log("Temperature =" & Str$(Temperature))
  Call Fortran_AIRVISC(AirViscosity, Temperature)
  'Call system_log("AIRVISC Exit")
End Sub

Sub AREAPT2(TowerArea As Double, TowerDiameter As Double)
  'Call system_log("AREAPT2 Entry")
  'Call system_log("TowerArea =" & Str$(TowerArea))
  'Call system_log("TowerDiameter =" & Str$(TowerDiameter))
  Call Fortran_AREAPT2(TowerArea, TowerDiameter)
  'Call system_log("AREAPT2 Exit")
End Sub

Sub AWCALC(PackingWettedSurfaceArea As Double, PackingCriticalSurfaceTension As Double, WaterSurfaceTension As Double, WaterLoadingRate As Double, PackingSpecificSurfaceArea As Double, WaterViscosity As Double, WaterDensity As Double, ReynoldsNumber As Double, FroudeNumber As Double, WeberNumber As Double)
  'Call system_log("AWCALC Entry")
  'Call system_log("PackingWettedSurfaceArea =" & Str$(PackingWettedSurfaceArea))
  'Call system_log("PackingCriticalSurfaceTension =" & Str$(PackingCriticalSurfaceTension))
  'Call system_log("WaterSurfaceTension =" & Str$(WaterSurfaceTension))
  'Call system_log("WaterLoadingRate =" & Str$(WaterLoadingRate))
  'Call system_log("PackingSpecificSurfaceArea =" & Str$(PackingSpecificSurfaceArea))
  'Call system_log("WaterViscosity =" & Str$(WaterViscosity))
  'Call system_log("WaterDensity =" & Str$(WaterDensity))
  'Call system_log("ReynoldsNumber =" & Str$(ReynoldsNumber))
  'Call system_log("FroudeNumber =" & Str$(FroudeNumber))
  'Call system_log("WeberNumber =" & Str$(WeberNumber))
  Call Fortran_AWCALC(PackingWettedSurfaceArea, PackingCriticalSurfaceTension, WaterSurfaceTension, WaterLoadingRate, PackingSpecificSurfaceArea, WaterViscosity, WaterDensity, ReynoldsNumber, FroudeNumber, WeberNumber)
  'Call system_log("AWCALC Exit")
End Sub

Sub DIFO2(DiffusivityOxygen As Double, Temperature As Double)
  'Call system_log("DIFO2 Entry")
  'Call system_log("DiffusivityOxygen =" & Str$(DiffusivityOxygen))
  'Call system_log("Temperature =" & Str$(Temperature))
  Call Fortran_DIFO2(DiffusivityOxygen, Temperature)
  'Call system_log("DIFO2 Exit")
End Sub

Sub EFFLBUB(ArrayLiqPhaseEffluentConc As Double, ArrayGasPhaseEffluentConc As Double, HenrysConstOfCompound As Double, LiqPhaseInfluentConc As Double, AirToWaterRatio As Double, NoOfTanks As Long, StantonNo As Double)
  'Call system_log("EFFLBUB Entry")
  'Call system_log("ArrayLiqPhaseEffluentConc =" & Str$(ArrayLiqPhaseEffluentConc))
  'Call system_log("ArrayGasPhaseEffluentConc =" & Str$(ArrayGasPhaseEffluentConc))
  'Call system_log("HenrysConstOfCompound =" & Str$(HenrysConstOfCompound))
  'Call system_log("LiqPhaseInfluentConc =" & Str$(LiqPhaseInfluentConc))
  'Call system_log("AirToWaterRatio =" & Str$(AirToWaterRatio))
  'Call system_log("NoOfTanks =" & Str$(NoOfTanks))
  'Call system_log("StantonNo =" & Str$(StantonNo))
  Call Fortran_EFFLBUB(ArrayLiqPhaseEffluentConc, ArrayGasPhaseEffluentConc, HenrysConstOfCompound, LiqPhaseInfluentConc, AirToWaterRatio, NoOfTanks, StantonNo)
  'Call system_log("EFFLBUB Exit")
End Sub

Sub EFFLPT2(EffluentConcentration As Double, AirToWaterRatio As Double, HenrysConstant As Double, WaterFlowRate As Double, TowerArea As Double, TowerLength As Double, DesignMassTransferCoefficient As Double, InfluentConcentration As Double)
  'Call system_log("EFFLPT2 Entry")
  'Call system_log("EffluentConcentration =" & Str$(EffluentConcentration))
  'Call system_log("AirToWaterRatio =" & Str$(AirToWaterRatio))
  'Call system_log("HenrysConstant =" & Str$(HenrysConstant))
  'Call system_log("WaterFlowRate =" & Str$(WaterFlowRate))
  'Call system_log("TowerArea =" & Str$(TowerArea))
  'Call system_log("TowerLength =" & Str$(TowerLength))
  'Call system_log("DesignMassTransferCoefficient =" & Str$(DesignMassTransferCoefficient))
  'Call system_log("InfluentConcentration =" & Str$(InfluentConcentration))
  Call Fortran_EFFLPT2(EffluentConcentration, AirToWaterRatio, HenrysConstant, WaterFlowRate, TowerArea, TowerLength, DesignMassTransferCoefficient, InfluentConcentration)
  'Call system_log("EFFLPT2 Exit")
End Sub

Sub GETCSPT(DesignContaminantAirWaterInterfaceConc As Double, AirToWaterRatio As Double, DesignContaminantHenrysConstant As Double, DesignContaminantInfluentConcentration As Double, DesignContaminantTreatmentObjective As Double)
  'Call system_log("GETCSPT Entry")
  'Call system_log("DesignContaminantAirWaterInterfaceConc =" & Str$(DesignContaminantAirWaterInterfaceConc))
  'Call system_log("AirToWaterRatio =" & Str$(AirToWaterRatio))
  'Call system_log("DesignContaminantHenrysConstant =" & Str$(DesignContaminantHenrysConstant))
  'Call system_log("DesignContaminantInfluentConcentration =" & Str$(DesignContaminantInfluentConcentration))
  'Call system_log("DesignContaminantTreatmentObjective =" & Str$(DesignContaminantTreatmentObjective))
  Call Fortran_GETCSPT(DesignContaminantAirWaterInterfaceConc, AirToWaterRatio, DesignContaminantHenrysConstant, DesignContaminantInfluentConcentration, DesignContaminantTreatmentObjective)
  'Call system_log("GETCSPT Exit")
End Sub

Sub GETCSTAR(DOSaturationConc As Double, WeightDensityWater As Double, EffectiveSaturationDepth As Double, BarometricPressure As Double, WaterDepth As Double)
  'Call system_log("GETCSTAR Entry")
  'Call system_log("DOSaturationConc =" & Str$(DOSaturationConc))
  'Call system_log("WeightDensityWater =" & Str$(WeightDensityWater))
  'Call system_log("EffectiveSaturationDepth =" & Str$(EffectiveSaturationDepth))
  'Call system_log("BarometricPressure =" & Str$(BarometricPressure))
  'Call system_log("WaterDepth =" & Str$(WaterDepth))
  Call Fortran_GETCSTAR(DOSaturationConc, WeightDensityWater, EffectiveSaturationDepth, BarometricPressure, WaterDepth)
  'Call system_log("GETCSTAR Exit")
End Sub

Sub GETHTUPT(TransferUnitHeight As Double, WaterFlowRate As Double, TowerArea As Double, DesignMassTransferCoefficient As Double)
  'Call system_log("GETHTUPT Entry")
  'Call system_log("TransferUnitHeight =" & Str$(TransferUnitHeight))
  'Call system_log("WaterFlowRate =" & Str$(WaterFlowRate))
  'Call system_log("TowerArea =" & Str$(TowerArea))
  'Call system_log("DesignMassTransferCoefficient =" & Str$(DesignMassTransferCoefficient))
  Call Fortran_GETHTUPT(TransferUnitHeight, WaterFlowRate, TowerArea, DesignMassTransferCoefficient)
  'Call system_log("GETHTUPT Exit")
End Sub

Sub GETMULT(MultipleOfMinimumAirToWaterRatio As Double, AirToWaterRatio As Double, MinimumAirToWaterRatio As Double)
  'Call system_log("GETMULT Entry")
  'Call system_log("MultipleOfMinimumAirToWaterRatio =" & Str$(MultipleOfMinimumAirToWaterRatio))
  'Call system_log("AirToWaterRatio =" & Str$(AirToWaterRatio))
  'Call system_log("MinimumAirToWaterRatio =" & Str$(MinimumAirToWaterRatio))
  Call Fortran_GETMULT(MultipleOfMinimumAirToWaterRatio, AirToWaterRatio, MinimumAirToWaterRatio)
  'Call system_log("GETMULT Exit")
End Sub

Sub GETNTUPT(NumberOfTransferUnits As Double, DesignContaminantInfluentConcentration As Double, DesignContaminantTreatmentObjective As Double, DesignContaminantAirToWaterInterfaceConc As Double)
  'Call system_log("GETNTUPT Entry")
  'Call system_log("NumberOfTransferUnits =" & Str$(NumberOfTransferUnits))
  'Call system_log("DesignContaminantInfluentConcentration =" & Str$(DesignContaminantInfluentConcentration))
  'Call system_log("DesignContaminantTreatmentObjective =" & Str$(DesignContaminantTreatmentObjective))
  'Call system_log("DesignContaminantAirToWaterInterfaceConc =" & Str$(DesignContaminantAirToWaterInterfaceConc))
  Call Fortran_GETNTUPT(NumberOfTransferUnits, DesignContaminantInfluentConcentration, DesignContaminantTreatmentObjective, DesignContaminantAirToWaterInterfaceConc)
  'Call system_log("GETNTUPT Exit")
End Sub

Sub GETPHIB(StantonNo As Double, CompoundMassTransCoeff As Double, VolumeOfEaTank As Double, HenrysConstOfCompound As Double, AirFlowRateToEaTank As Double)
  'Call system_log("GETPHIB Entry")
  'Call system_log("StantonNo =" & Str$(StantonNo))
  'Call system_log("CompoundMassTransCoeff =" & Str$(CompoundMassTransCoeff))
  'Call system_log("VolumeOfEaTank =" & Str$(VolumeOfEaTank))
  'Call system_log("HenrysConstOfCompound =" & Str$(HenrysConstOfCompound))
  'Call system_log("AirFlowRateToEaTank =" & Str$(AirFlowRateToEaTank))
  Call Fortran_GETPHIB(StantonNo, CompoundMassTransCoeff, VolumeOfEaTank, HenrysConstOfCompound, AirFlowRateToEaTank)
  'Call system_log("GETPHIB Exit")
End Sub

Sub GETSAF(KLaSafetyFactor As Double, OndaMassTransferCoefficient As Double, DesignMassTransferCoefficient As Double)
  'Call system_log("GETSAF Entry")
  'Call system_log("KLaSafetyFactor =" & Str$(KLaSafetyFactor))
  'Call system_log("OndaMassTransferCoefficient =" & Str$(OndaMassTransferCoefficient))
  'Call system_log("DesignMassTransferCoefficient =" & Str$(DesignMassTransferCoefficient))
  Call Fortran_GETSAF(KLaSafetyFactor, OndaMassTransferCoefficient, DesignMassTransferCoefficient)
  'Call system_log("GETSAF Exit")
End Sub

Sub GETSOTE(StandardOxygenTransferEff As Double, StandardOxygenTransferRate As Double, AirFlowRate As Double)
  'Call system_log("GETSOTE Entry")
  'Call system_log("StandardOxygenTransferEff =" & Str$(StandardOxygenTransferEff))
  'Call system_log("StandardOxygenTransferRate =" & Str$(StandardOxygenTransferRate))
  'Call system_log("AirFlowRate =" & Str$(AirFlowRate))
  Call Fortran_GETSOTE(StandardOxygenTransferEff, StandardOxygenTransferRate, AirFlowRate)
  'Call system_log("GETSOTE Exit")
End Sub

Sub GETSOTR(StandardOxygenTransferRate As Double, StandardOxygenTransferEff As Double, AirFlowRate As Double)
  'Call system_log("GETSOTR Entry")
  'Call system_log("StandardOxygenTransferRate =" & Str$(StandardOxygenTransferRate))
  'Call system_log("StandardOxygenTransferEff =" & Str$(StandardOxygenTransferEff))
  'Call system_log("AirFlowRate =" & Str$(AirFlowRate))
  Call Fortran_GETSOTR(StandardOxygenTransferRate, StandardOxygenTransferEff, AirFlowRate)
  'Call system_log("GETSOTR Exit")
End Sub

Sub H2ODENS(LiquidDensity As Double, Temperature As Double)
  'Call system_log("H2ODENS Entry")
  'Call system_log("LiquidDensity =" & Str$(LiquidDensity))
  'Call system_log("Temperature =" & Str$(Temperature))
  Call Fortran_H2ODENS(LiquidDensity, Temperature)
  'Call system_log("H2ODENS Exit")
End Sub

Sub H2OST(LiquidSurfaceTension As Double, Temperature As Double)
  'Call system_log("H2OST Entry")
  'Call system_log("LiquidSurfaceTension =" & Str$(LiquidSurfaceTension))
  'Call system_log("Temperature =" & Str$(Temperature))
  Call Fortran_H2OST(LiquidSurfaceTension, Temperature)
  'Call system_log("H2OST Exit")
End Sub

Sub H2OVISC(LiquidViscosity As Double, Temperature As Double)
  'Call system_log("H2OVISC Entry")
  'Call system_log("LiquidViscosity =" & Str$(LiquidViscosity))
  'Call system_log("Temperature =" & Str$(Temperature))
  Call Fortran_H2OVISC(LiquidViscosity, Temperature)
  'Call system_log("H2OVISC Exit")
End Sub

Sub KLA20A(AppOxygenMassTransCoeff As Double, WaterVolumePerTankL As Double, WaterVolumePerTankm3 As Double, DOSaturationConcentration As Double, StandOxygenMassTransRate As Double)
  'Call system_log("KLA20A Entry")
  'Call system_log("AppOxygenMassTransCoeff =" & Str$(AppOxygenMassTransCoeff))
  'Call system_log("WaterVolumePerTankL =" & Str$(WaterVolumePerTankL))
  'Call system_log("WaterVolumePerTankm3 =" & Str$(WaterVolumePerTankm3))
  'Call system_log("DOSaturationConcentration =" & Str$(DOSaturationConcentration))
  'Call system_log("StandOxygenMassTransRate =" & Str$(StandOxygenMassTransRate))
  Call Fortran_KLA20A(AppOxygenMassTransCoeff, WaterVolumePerTankL, WaterVolumePerTankm3, DOSaturationConcentration, StandOxygenMassTransRate)
  'Call system_log("KLA20A Exit")
End Sub

Sub KLABUB(CompoundMassTransferCoeff As Double, OxygenMassTransferCoeff As Double, DiffusivityLiquidWater As Double, DiffusivityOfOxygen As Double, ExponentInCorrelation As Double, RatioGasLiquidTransfer As Double, HenrysConstant As Double)
  'Call system_log("KLABUB Entry")
  'Call system_log("CompoundMassTransferCoeff =" & Str$(CompoundMassTransferCoeff))
  'Call system_log("OxygenMassTransferCoeff =" & Str$(OxygenMassTransferCoeff))
  'Call system_log("DiffusivityLiquidWater =" & Str$(DiffusivityLiquidWater))
  'Call system_log("DiffusivityOfOxygen =" & Str$(DiffusivityOfOxygen))
  'Call system_log("ExponentInCorrelation =" & Str$(ExponentInCorrelation))
  'Call system_log("RatioGasLiquidTransfer =" & Str$(RatioGasLiquidTransfer))
  'Call system_log("HenrysConstant =" & Str$(HenrysConstant))
  Call Fortran_KLABUB(CompoundMassTransferCoeff, OxygenMassTransferCoeff, DiffusivityLiquidWater, DiffusivityOfOxygen, ExponentInCorrelation, RatioGasLiquidTransfer, HenrysConstant)
  'Call system_log("KLABUB Exit")
End Sub

Sub KLACOR(DesignMassTransferCoefficient As Double, OndaMassTransferCoefficient As Double, KLaSafetyFactor As Double)
  'Call system_log("KLACOR Entry")
  'Call system_log("DesignMassTransferCoefficient =" & Str$(DesignMassTransferCoefficient))
  'Call system_log("OndaMassTransferCoefficient =" & Str$(OndaMassTransferCoefficient))
  'Call system_log("KLaSafetyFactor =" & Str$(KLaSafetyFactor))
  Call Fortran_KLACOR(DesignMassTransferCoefficient, OndaMassTransferCoefficient, KLaSafetyFactor)
  'Call system_log("KLACOR Exit")
End Sub

'DLL Declarations for Surface Aeration
Sub KLAO2SUR(OxygenMTCoeff As Double, PowerInput_PoverV As Double)
  'Call system_log("KLAO2SUR Entry")
  'Call system_log("OxygenMTCoeff =" & Str$(OxygenMTCoeff))
  'Call system_log("PowerInput_PoverV =" & Str$(PowerInput_PoverV))
  Call Fortran_KLAO2SUR(OxygenMTCoeff, PowerInput_PoverV)
  'Call system_log("KLAO2SUR Exit")
End Sub

Sub KLASURF(ContaminantMassTransferCoeff As Double, OxygenMassTransferCoeff As Double, ContaminantLiquidDiffusivity As Double, OxygenLiquidDiffusivity As Double, N_forFindingKLa As Double, kgOVERkl_forFindingKLa As Double, HenrysConstant As Double)
  'Call system_log("KLASURF Entry")
  'Call system_log("ContaminantMassTransferCoeff =" & Str$(ContaminantMassTransferCoeff))
  'Call system_log("OxygenMassTransferCoeff =" & Str$(OxygenMassTransferCoeff))
  'Call system_log("ContaminantLiquidDiffusivity =" & Str$(ContaminantLiquidDiffusivity))
  'Call system_log("OxygenLiquidDiffusivity =" & Str$(OxygenLiquidDiffusivity))
  'Call system_log("N_forFindingKLa =" & Str$(N_forFindingKLa))
  'Call system_log("kgOVERkl_forFindingKLa =" & Str$(kgOVERkl_forFindingKLa))
  'Call system_log("HenrysConstant =" & Str$(HenrysConstant))
  Call Fortran_KLASURF(ContaminantMassTransferCoeff, OxygenMassTransferCoeff, ContaminantLiquidDiffusivity, OxygenLiquidDiffusivity, N_forFindingKLa, kgOVERkl_forFindingKLa, HenrysConstant)
  'Call system_log("KLASURF Exit")
End Sub

Sub LDAIRPT2(AirLoadingRate As Double, AirFlowRate As Double, AirDensity As Double, TowerArea As Double)
  'Call system_log("LDAIRPT2 Entry")
  'Call system_log("AirLoadingRate =" & Str$(AirLoadingRate))
  'Call system_log("AirFlowRate =" & Str$(AirFlowRate))
  'Call system_log("AirDensity =" & Str$(AirDensity))
  'Call system_log("TowerArea =" & Str$(TowerArea))
  Call Fortran_LDAIRPT2(AirLoadingRate, AirFlowRate, AirDensity, TowerArea)
  'Call system_log("LDAIRPT2 Exit")
End Sub

Sub LDH2OPT2(WaterLoadingRate As Double, WaterFlowRate As Double, WaterDensity As Double, TowerArea As Double)
  'Call system_log("LDH2OPT2 Entry")
  'Call system_log("WaterLoadingRate =" & Str$(WaterLoadingRate))
  'Call system_log("WaterFlowRate =" & Str$(WaterFlowRate))
  'Call system_log("WaterDensity =" & Str$(WaterDensity))
  'Call system_log("TowerArea =" & Str$(TowerArea))
  Call Fortran_LDH2OPT2(WaterLoadingRate, WaterFlowRate, WaterDensity, TowerArea)
  'Call system_log("LDH2OPT2 Exit")
End Sub

Sub ONDAKGPT(OndaGasPhaseMassTransferCoefficient As Double, AirLoadingRate As Double, PackingSpecificSurfaceArea As Double, AirViscosity As Double, AirDensity As Double, GasDiffusivity As Double, PackingNominalSize As Double)
  'Call system_log("ONDAKGPT Entry")
  'Call system_log("OndaGasPhaseMassTransferCoefficient =" & Str$(OndaGasPhaseMassTransferCoefficient))
  'Call system_log("AirLoadingRate =" & Str$(AirLoadingRate))
  'Call system_log("PackingSpecificSurfaceArea =" & Str$(PackingSpecificSurfaceArea))
  'Call system_log("AirViscosity =" & Str$(AirViscosity))
  'Call system_log("AirDensity =" & Str$(AirDensity))
  'Call system_log("GasDiffusivity =" & Str$(GasDiffusivity))
  'Call system_log("PackingNominalSize =" & Str$(PackingNominalSize))
  Call Fortran_ONDAKGPT(OndaGasPhaseMassTransferCoefficient, AirLoadingRate, PackingSpecificSurfaceArea, AirViscosity, AirDensity, GasDiffusivity, PackingNominalSize)
  'Call system_log("ONDAKGPT Exit")
End Sub

Sub ONDAKLPT(OndaLiquidPhaseMassTransferCoefficient As Double, WaterLoadingRate As Double, PackingWettedSurfaceArea As Double, WaterViscosity As Double, WaterDensity As Double, LiquidDiffusivity As Double, PackingSpecificSurfaceArea As Double, PackingNominalSize As Double)
  'Call system_log("ONDAKLPT Entry")
  'Call system_log("OndaLiquidPhaseMassTransferCoefficient =" & Str$(OndaLiquidPhaseMassTransferCoefficient))
  'Call system_log("WaterLoadingRate =" & Str$(WaterLoadingRate))
  'Call system_log("PackingWettedSurfaceArea =" & Str$(PackingWettedSurfaceArea))
  'Call system_log("WaterViscosity =" & Str$(WaterViscosity))
  'Call system_log("WaterDensity =" & Str$(WaterDensity))
  'Call system_log("LiquidDiffusivity =" & Str$(LiquidDiffusivity))
  'Call system_log("PackingSpecificSurfaceArea =" & Str$(PackingSpecificSurfaceArea))
  'Call system_log("PackingNominalSize =" & Str$(PackingNominalSize))
  Call Fortran_ONDAKLPT(OndaLiquidPhaseMassTransferCoefficient, WaterLoadingRate, PackingWettedSurfaceArea, WaterViscosity, WaterDensity, LiquidDiffusivity, PackingSpecificSurfaceArea, PackingNominalSize)
  'Call system_log("ONDAKLPT Exit")
End Sub

Sub ONDKLAPT(OndaOverallMassTransferCoefficient As Double, OndaLiquidPhaseResistance As Double, OndaGasPhaseResistance As Double, OndaTotalResistance As Double, OndaLiquidPhaseMassTransferCoefficient As Double, PackingWettedSurfaceArea As Double, OndaGasPhaseMassTransferCoefficient As Double, DesignContaminantHenrysConstant As Double)
  'Call system_log("ONDKLAPT Entry")
  'Call system_log("OndaOverallMassTransferCoefficient =" & Str$(OndaOverallMassTransferCoefficient))
  'Call system_log("OndaLiquidPhaseResistance =" & Str$(OndaLiquidPhaseResistance))
  'Call system_log("OndaGasPhaseResistance =" & Str$(OndaGasPhaseResistance))
  'Call system_log("OndaTotalResistance =" & Str$(OndaTotalResistance))
  'Call system_log("OndaLiquidPhaseMassTransferCoefficient =" & Str$(OndaLiquidPhaseMassTransferCoefficient))
  'Call system_log("PackingWettedSurfaceArea =" & Str$(PackingWettedSurfaceArea))
  'Call system_log("OndaGasPhaseMassTransferCoefficient =" & Str$(OndaGasPhaseMassTransferCoefficient))
  'Call system_log("DesignContaminantHenrysConstant =" & Str$(DesignContaminantHenrysConstant))
  Call Fortran_ONDKLAPT(OndaOverallMassTransferCoefficient, OndaLiquidPhaseResistance, OndaGasPhaseResistance, OndaTotalResistance, OndaLiquidPhaseMassTransferCoefficient, PackingWettedSurfaceArea, OndaGasPhaseMassTransferCoefficient, DesignContaminantHenrysConstant)
  'Call system_log("ONDKLAPT Exit")
End Sub

Sub OPTMAL(WaterDensity As Double, WaterViscosity As Double, WaterSurfaceTension As Double, AirDensity As Double, AirViscosity As Double, WaterFlowRate As Double, PackingNominalSize As Double, PackingFactor As Double, PackingCriticalSurfaceTension As Double, PackingSpecificSurfaceArea As Double, InfluentConcentrations As Double, TreatmentObjectives As Double, HenrysConstants As Double, NumberOfContaminants As Long, PressureDrop As Double, LiquidDiffusivities As Double, GasDiffusivities As Double, KLaSafetyFactor As Double, ID_OptimalDesignContaminant As Long, MultipleOfMinimumAirToWaterRatio As Double, EffluentConcentrations As Double, ErrorFlag As Long)
  'Call system_log("OPTMAL Entry")
  'Call system_log("WaterDensity =" & Str$(WaterDensity))
  'Call system_log("WaterViscosity =" & Str$(WaterViscosity))
  'Call system_log("WaterSurfaceTension =" & Str$(WaterSurfaceTension))
  'Call system_log("AirDensity =" & Str$(AirDensity))
  'Call system_log("AirViscosity =" & Str$(AirViscosity))
  'Call system_log("WaterFlowRate =" & Str$(WaterFlowRate))
  'Call system_log("PackingNominalSize =" & Str$(PackingNominalSize))
  'Call system_log("PackingFactor =" & Str$(PackingFactor))
  'Call system_log("PackingCriticalSurfaceTension =" & Str$(PackingCriticalSurfaceTension))
  'Call system_log("PackingSpecificSurfaceArea =" & Str$(PackingSpecificSurfaceArea))
  'Call system_log("InfluentConcentrations =" & Str$(InfluentConcentrations))
  'Call system_log("TreatmentObjectives =" & Str$(TreatmentObjectives))
  'Call system_log("HenrysConstants =" & Str$(HenrysConstants))
  'Call system_log("NumberOfContaminants =" & Str$(NumberOfContaminants))
  'Call system_log("PressureDrop =" & Str$(PressureDrop))
  'Call system_log("LiquidDiffusivities =" & Str$(LiquidDiffusivities))
  'Call system_log("GasDiffusivities =" & Str$(GasDiffusivities))
  'Call system_log("KLaSafetyFactor =" & Str$(KLaSafetyFactor))
  'Call system_log("ID_OptimalDesignContaminant =" & Str$(ID_OptimalDesignContaminant))
  'Call system_log("MultipleOfMinimumAirToWaterRatio =" & Str$(MultipleOfMinimumAirToWaterRatio))
  'Call system_log("EffluentConcentrations =" & Str$(EffluentConcentrations))
  'Call system_log("ErrorFlag =" & Str$(ErrorFlag))

  Call Fortran_OPTMAL(WaterDensity, WaterViscosity, WaterSurfaceTension, AirDensity, AirViscosity, WaterFlowRate, PackingNominalSize, PackingFactor, PackingCriticalSurfaceTension, PackingSpecificSurfaceArea, InfluentConcentrations, TreatmentObjectives, HenrysConstants, NumberOfContaminants, PressureDrop, LiquidDiffusivities, GasDiffusivities, KLaSafetyFactor, ID_OptimalDesignContaminant, MultipleOfMinimumAirToWaterRatio, EffluentConcentrations, ErrorFlag)

  'Call system_log("OPTMAL Exit")
End Sub

Sub PBLOWPT(BlowerBrakePower As Double, AirFlowRate As Double, TowerArea As Double, OperatingPressure As Double, PressureDrop As Double, TowerHeight As Double, AirDensity As Double, InletAirTemperature As Double, BlowerEfficiency As Double)
  'Call system_log("PBLOWPT Entry")
  'Call system_log("BlowerBrakePower =" & Str$(BlowerBrakePower))
  'Call system_log("AirFlowRate =" & Str$(AirFlowRate))
  'Call system_log("TowerArea =" & Str$(TowerArea))
  'Call system_log("OperatingPressure =" & Str$(OperatingPressure))
  'Call system_log("PressureDrop =" & Str$(PressureDrop))
  'Call system_log("TowerHeight =" & Str$(TowerHeight))
  'Call system_log("AirDensity =" & Str$(AirDensity))
  'Call system_log("InletAirTemperature =" & Str$(InletAirTemperature))
  'Call system_log("BlowerEfficiency =" & Str$(BlowerEfficiency))
  Call Fortran_PBLOWPT(BlowerBrakePower, AirFlowRate, TowerArea, OperatingPressure, PressureDrop, TowerHeight, AirDensity, InletAirTemperature, BlowerEfficiency)
  'Call system_log("PBLOWPT Exit")
End Sub

Sub PCALCBUB(TotalBrakePowerAllTanks As Double, BlowerBrakePowerForEaTank As Double, OperatingPressure As Double, InletAirTempC As Double, AirFlowRate As Double, BlowerEfficiencyPercent As Double, LiquidDensity As Double, WaterDepth As Double, NoOfTanks As Long, NumberOfBlowersinEachTank As Long)
  'Call system_log("PCALCBUB Entry")
  'Call system_log("TotalBrakePowerAllTanks =" & Str$(TotalBrakePowerAllTanks))
  'Call system_log("BlowerBrakePowerForEaTank =" & Str$(BlowerBrakePowerForEaTank))
  'Call system_log("OperatingPressure =" & Str$(OperatingPressure))
  'Call system_log("InletAirTempC =" & Str$(InletAirTempC))
  'Call system_log("AirFlowRate =" & Str$(AirFlowRate))
  'Call system_log("BlowerEfficiencyPercent =" & Str$(BlowerEfficiencyPercent))
  'Call system_log("LiquidDensity =" & Str$(LiquidDensity))
  'Call system_log("WaterDepth =" & Str$(WaterDepth))
  'Call system_log("NoOfTanks =" & Str$(NoOfTanks))
  'Call system_log("NumberOfBlowersinEachTank =" & Str$(NumberOfBlowersinEachTank))
  Call Fortran_PCALCBUB(TotalBrakePowerAllTanks, BlowerBrakePowerForEaTank, OperatingPressure, InletAirTempC, AirFlowRate, BlowerEfficiencyPercent, LiquidDensity, WaterDepth, NoOfTanks, NumberOfBlowersinEachTank)
  'Call system_log("PCALCBUB Exit")
End Sub

Sub PCALCSUR(TotalPower As Double, PowerPerTank As Double, PowerInput_PoverV As Double, TotalVolumeAllTanks As Double, NumberOfTanks As Long, AeratorMotorEfficiency As Double)
  'Call system_log("PCALCSUR Entry")
  'Call system_log("TotalPower =" & Str$(TotalPower))
  'Call system_log("PowerPerTank =" & Str$(PowerPerTank))
  'Call system_log("PowerInput_PoverV =" & Str$(PowerInput_PoverV))
  'Call system_log("TotalVolumeAllTanks =" & Str$(TotalVolumeAllTanks))
  'Call system_log("NumberOfTanks =" & Str$(NumberOfTanks))
  'Call system_log("AeratorMotorEfficiency =" & Str$(AeratorMotorEfficiency))
  Call Fortran_PCALCSUR(TotalPower, PowerPerTank, PowerInput_PoverV, TotalVolumeAllTanks, NumberOfTanks, AeratorMotorEfficiency)
  'Call system_log("PCALCSUR Exit")
End Sub

Sub PDROP(AirPressureDrop As Double, AirToWaterRatio As Double, AirLoadingRate As Double, PackingFactor As Double, WaterViscosity As Double, AirDensity As Double, WaterDensity As Double, InitialPressureDrop As Double, MaximumPressureDrop As Double, PressureDropStep As Double)
  'Call system_log("PDROP Entry")
  'Call system_log("AirPressureDrop =" & Str$(AirPressureDrop))
  'Call system_log("AirToWaterRatio =" & Str$(AirToWaterRatio))
  'Call system_log("AirLoadingRate =" & Str$(AirLoadingRate))
  'Call system_log("PackingFactor =" & Str$(PackingFactor))
  'Call system_log("WaterViscosity =" & Str$(WaterViscosity))
  'Call system_log("AirDensity =" & Str$(AirDensity))
  'Call system_log("WaterDensity =" & Str$(WaterDensity))
  'Call system_log("InitialPressureDrop =" & Str$(InitialPressureDrop))
  'Call system_log("MaximumPressureDrop =" & Str$(MaximumPressureDrop))
  'Call system_log("PressureDropStep =" & Str$(PressureDropStep))
  Call Fortran_PDROP(AirPressureDrop, AirToWaterRatio, AirLoadingRate, PackingFactor, WaterViscosity, AirDensity, WaterDensity, InitialPressureDrop, MaximumPressureDrop, PressureDropStep)
  'Call system_log("PDROP Exit")
End Sub

Sub PPUMPPT(PumpBrakePower As Double, PumpEfficiency As Double, WaterDensity As Double, WaterFlowRate As Double, TowerHeight As Double)
  'Call system_log("PPUMPPT Entry")
  'Call system_log("PumpBrakePower =" & Str$(PumpBrakePower))
  'Call system_log("PumpEfficiency =" & Str$(PumpEfficiency))
  'Call system_log("WaterDensity =" & Str$(WaterDensity))
  'Call system_log("WaterFlowRate =" & Str$(WaterFlowRate))
  'Call system_log("TowerHeight =" & Str$(TowerHeight))
  Call Fortran_PPUMPPT(PumpBrakePower, PumpEfficiency, WaterDensity, WaterFlowRate, TowerHeight)
  'Call system_log("PPUMPPT Exit")
End Sub

Sub PT1AREA(TowerArea As Double, WaterFlowRate As Double, WaterDensity As Double, WaterMassLoadingRate As Double)
  'Call system_log("PT1AREA Entry")
  'Call system_log("TowerArea =" & Str$(TowerArea))
  'Call system_log("WaterFlowRate =" & Str$(WaterFlowRate))
  'Call system_log("WaterDensity =" & Str$(WaterDensity))
  'Call system_log("WaterMassLoadingRate =" & Str$(WaterMassLoadingRate))
  Call Fortran_PT1AREA(TowerArea, WaterFlowRate, WaterDensity, WaterMassLoadingRate)
  'Call system_log("PT1AREA Exit")
End Sub

Sub PT1DTOW(TowerDiameter As Double, TowerArea As Double)
  'Call system_log("PT1DTOW Entry")
  'Call system_log("TowerDiameter =" & Str$(TowerDiameter))
  'Call system_log("TowerArea =" & Str$(TowerArea))
  Call Fortran_PT1DTOW(TowerDiameter, TowerArea)
  'Call system_log("PT1DTOW Exit")
End Sub

Sub PT1HTOW(TowerHeight As Double, TransferUnitHeight As Double, NumberOfTransferUnits As Double)
  'Call system_log("PT1HTOW Entry")
  'Call system_log("TowerHeight =" & Str$(TowerHeight))
  'Call system_log("TransferUnitHeight =" & Str$(TransferUnitHeight))
  'Call system_log("NumberOfTransferUnits =" & Str$(NumberOfTransferUnits))
  Call Fortran_PT1HTOW(TowerHeight, TransferUnitHeight, NumberOfTransferUnits)
  'Call system_log("PT1HTOW Exit")
End Sub

Sub PT1LDAIR(AirMassLoadingRate As Double, AirPressureDrop As Double, AirToWaterRatio As Double, AirDensity As Double, WaterDensity As Double, PackingFactor As Double, WaterViscosity As Double)
  'Call system_log("PT1LDAIR Entry")
  'Call system_log("AirMassLoadingRate =" & Str$(AirMassLoadingRate))
  'Call system_log("AirPressureDrop =" & Str$(AirPressureDrop))
  'Call system_log("AirToWaterRatio =" & Str$(AirToWaterRatio))
  'Call system_log("AirDensity =" & Str$(AirDensity))
  'Call system_log("WaterDensity =" & Str$(WaterDensity))
  'Call system_log("PackingFactor =" & Str$(PackingFactor))
  'Call system_log("WaterViscosity =" & Str$(WaterViscosity))
  Call Fortran_PT1LDAIR(AirMassLoadingRate, AirPressureDrop, AirToWaterRatio, AirDensity, WaterDensity, PackingFactor, WaterViscosity)
  'Call system_log("PT1LDAIR Exit")
End Sub

Sub PT1LDH2O(WaterMassLoadingRate As Double, AirToWaterRatio As Double, AirDensity As Double, WaterDensity As Double, AirMassLoadingRate As Double)
  'Call system_log("PT1LDH2O Entry")
  'Call system_log("WaterMassLoadingRate =" & Str$(WaterMassLoadingRate))
  'Call system_log("AirToWaterRatio =" & Str$(AirToWaterRatio))
  'Call system_log("AirDensity =" & Str$(AirDensity))
  'Call system_log("WaterDensity =" & Str$(WaterDensity))
  'Call system_log("AirMassLoadingRate =" & Str$(AirMassLoadingRate))
  Call Fortran_PT1LDH2O(WaterMassLoadingRate, AirToWaterRatio, AirDensity, WaterDensity, AirMassLoadingRate)
  'Call system_log("PT1LDH2O Exit")
End Sub

Sub PT1TVOL(TowerVolume As Double, TowerArea As Double, TowerHeight As Double)
  'Call system_log("PT1TVOL Entry")
  'Call system_log("TowerVolume =" & Str$(TowerVolume))
  'Call system_log("TowerArea =" & Str$(TowerArea))
  'Call system_log("TowerHeight =" & Str$(TowerHeight))
  Call Fortran_PT1TVOL(TowerVolume, TowerArea, TowerHeight)
  'Call system_log("PT1TVOL Exit")
End Sub

Sub PT1VQMIN(MinimumAirToWaterRatio As Double, InfluentConcentration As Double, TreatmentObjective As Double, HenrysConstant As Double)
  'Call system_log("PT1VQMIN Entry")
  'Call system_log("MinimumAirToWaterRatio =" & Str$(MinimumAirToWaterRatio))
  'Call system_log("InfluentConcentration =" & Str$(InfluentConcentration))
  'Call system_log("TreatmentObjective =" & Str$(TreatmentObjective))
  'Call system_log("HenrysConstant =" & Str$(HenrysConstant))
  Call Fortran_PT1VQMIN(MinimumAirToWaterRatio, InfluentConcentration, TreatmentObjective, HenrysConstant)
  'Call system_log("PT1VQMIN Exit")
End Sub

Sub PTOTALPT(TotalBrakePower As Double, BlowerBrakePower As Double, PumpBrakePower As Double)
  'Call system_log("PTOTALPT Entry")
  'Call system_log("TotalBrakePower =" & Str$(TotalBrakePower))
  'Call system_log("BlowerBrakePower =" & Str$(BlowerBrakePower))
  'Call system_log("PumpBrakePower =" & Str$(PumpBrakePower))
  Call Fortran_PTOTALPT(TotalBrakePower, BlowerBrakePower, PumpBrakePower)
  'Call system_log("PTOTALPT Exit")
End Sub

Sub QAIRPT2(AirFlowRate As Double, AirLoadingRate As Double, AirDensity As Double, TowerArea As Double)
  'Call system_log("QAIRPT2 Entry")
  'Call system_log("AirFlowRate =" & Str$(AirFlowRate))
  'Call system_log("AirLoadingRate =" & Str$(AirLoadingRate))
  'Call system_log("AirDensity =" & Str$(AirDensity))
  'Call system_log("TowerArea =" & Str$(TowerArea))
  Call Fortran_QAIRPT2(AirFlowRate, AirLoadingRate, AirDensity, TowerArea)
  'Call system_log("QAIRPT2 Exit")
End Sub

Sub QH2OPT2(WaterFlowRate As Double, WaterLoadingRate As Double, WaterDensity As Double, TowerArea As Double)
  'Call system_log("QH2OPT2 Entry")
  'Call system_log("WaterFlowRate =" & Str$(WaterFlowRate))
  'Call system_log("WaterLoadingRate =" & Str$(WaterLoadingRate))
  'Call system_log("WaterDensity =" & Str$(WaterDensity))
  'Call system_log("TowerArea =" & Str$(TowerArea))
  Call Fortran_QH2OPT2(WaterFlowRate, WaterLoadingRate, WaterDensity, TowerArea)
  'Call system_log("QH2OPT2 Exit")
End Sub

Sub REMOVBUB(ActualLiqPhaseRemovalEfficiency As Double, LiqPhaseInfluentConc As Double, LiqPhaseEffluentConcLastTank As Double)
  'Call system_log("REMOVBUB Entry")
  'Call system_log("ActualLiqPhaseRemovalEfficiency =" & Str$(ActualLiqPhaseRemovalEfficiency))
  'Call system_log("LiqPhaseInfluentConc =" & Str$(LiqPhaseInfluentConc))
  'Call system_log("LiqPhaseEffluentConcLastTank =" & Str$(LiqPhaseEffluentConcLastTank))
  Call Fortran_REMOVBUB(ActualLiqPhaseRemovalEfficiency, LiqPhaseInfluentConc, LiqPhaseEffluentConcLastTank)
  'Call system_log("REMOVBUB Exit")
End Sub

Sub REMOVPT(RemovalEfficiency As Double, InfluentConcentration As Double, Effluent As Double)
  'Call system_log("REMOVPT Entry")
  'Call system_log("RemovalEfficiency =" & Str$(RemovalEfficiency))
  'Call system_log("InfluentConcentration =" & Str$(InfluentConcentration))
  'Call system_log("Effluent =" & Str$(Effluent))
  Call Fortran_REMOVPT(RemovalEfficiency, InfluentConcentration, Effluent)
  'Call system_log("REMOVPT Exit")
End Sub

Sub SEFFL(EffluentConcentrations As Double, AchievedRemovalEfficiency As Double, Influent As Double, ContaminantMassTransferCoeff As Double, TankResidenceTime As Double, NumberOfTanks As Long)
  'Call system_log("SEFFL Entry")
  'Call system_log("EffluentConcentrations =" & Str$(EffluentConcentrations))
  'Call system_log("AchievedRemovalEfficiency =" & Str$(AchievedRemovalEfficiency))
  'Call system_log("Influent =" & Str$(Influent))
  'Call system_log("ContaminantMassTransferCoeff =" & Str$(ContaminantMassTransferCoeff))
  'Call system_log("TankResidenceTime =" & Str$(TankResidenceTime))
  'Call system_log("NumberOfTanks =" & Str$(NumberOfTanks))
  Call Fortran_SEFFL(EffluentConcentrations, AchievedRemovalEfficiency, Influent, ContaminantMassTransferCoeff, TankResidenceTime, NumberOfTanks)
  'Call system_log("SEFFL Exit")
End Sub

Sub SURFEFF(RemovalEfficiency As Double, Influent As Double, EffluentOrTreatmentObjective As Double)
  'Call system_log("SURFEFF Entry")
  'Call system_log("RemovalEfficiency =" & Str$(RemovalEfficiency))
  'Call system_log("Influent =" & Str$(Influent))
  'Call system_log("EffluentOrTreatmentObjective =" & Str$(EffluentOrTreatmentObjective))
  Call Fortran_SURFEFF(RemovalEfficiency, Influent, EffluentOrTreatmentObjective)
  'Call system_log("SURFEFF Exit")
End Sub

Sub TAUISURF(TankResidenceTime As Double, Influent As Double, TreatmentObjective As Double, NumberOfTanks As Long, ContaminantMassTransferCoeff As Double)
  'Call system_log("TAUISURF Entry")
  'Call system_log("TankResidenceTime =" & Str$(TankResidenceTime))
  'Call system_log("Influent =" & Str$(Influent))
  'Call system_log("TreatmentObjective =" & Str$(TreatmentObjective))
  'Call system_log("NumberOfTanks =" & Str$(NumberOfTanks))
  'Call system_log("ContaminantMassTransferCoeff =" & Str$(ContaminantMassTransferCoeff))
  Call Fortran_TAUISURF(TankResidenceTime, Influent, TreatmentObjective, NumberOfTanks, ContaminantMassTransferCoeff)
  'Call system_log("TAUISURF Exit")
End Sub

Sub TAUSVOLS(TotalFluidResidenceTime As Double, NoOfTanksInSeries As Long, HydraulicRetentTimeOfEaTank As Double, VolumeOfEachTank As Double, TotalVolumeOfAllTanks As Double, WaterFlowRate As Double, TankParametersCode As Long)
  'Call system_log("TAUSVOLS Entry")
  'Call system_log("TotalFluidResidenceTime = " & TotalFluidResidenceTime)
  'Call system_log("NoOfTanksInSeries = " & NoOfTanksInSeries)
  'Call system_log("HydraulicRetentTimeOfEaTank = " & HydraulicRetentTimeOfEaTank)
  'Call system_log("VolumeOfEachTank = " & VolumeOfEachTank)
  'Call system_log("TotalVolumeOfAllTanks = " & TotalVolumeOfAllTanks)
  'Call system_log("WaterFlowRate = " & WaterFlowRate)
  'Call system_log("TankParametersCode = " & TankParametersCode)
  Call Fortran_TAUSVOLS(TotalFluidResidenceTime, NoOfTanksInSeries, HydraulicRetentTimeOfEaTank, VolumeOfEachTank, TotalVolumeOfAllTanks, WaterFlowRate, TankParametersCode)
  'Call system_log("TAUSVOLS Exit")
End Sub

Sub TrueKLa(OxygenMassTransferCoeffOperatTemp As Double, AppOxygenMassTransferCoeff20Deg As Double, ParameterUsedInKla As Double, AirFlowRate As Double, WaterVolPerTankL As Double, BarometricPressure As Double, WeightDensityWater As Double, TrueOxygenMassTransferCoef20 As Double, EffectiveSaturatonDepth As Double, OperatingTemp As Double)
  'Call system_log("TrueKLa Entry")
  'Call system_log("OxygenMassTransferCoeffOperatTemp =" & Str$(OxygenMassTransferCoeffOperatTemp))
  'Call system_log("AppOxygenMassTransferCoeff20Deg =" & Str$(AppOxygenMassTransferCoeff20Deg))
  'Call system_log("ParameterUsedInKla =" & Str$(ParameterUsedInKla))
  'Call system_log("AirFlowRate =" & Str$(AirFlowRate))
  'Call system_log("WaterVolPerTankL =" & Str$(WaterVolPerTankL))
  'Call system_log("BarometricPressure =" & Str$(BarometricPressure))
  'Call system_log("WeightDensityWater =" & Str$(WeightDensityWater))
  'Call system_log("TrueOxygenMassTransferCoef20 =" & Str$(TrueOxygenMassTransferCoef20))
  'Call system_log("EffectiveSaturatonDepth =" & Str$(EffectiveSaturatonDepth))
  'Call system_log("OperatingTemp =" & Str$(OperatingTemp))
  Call Fortran_TrueKLa(OxygenMassTransferCoeffOperatTemp, AppOxygenMassTransferCoeff20Deg, ParameterUsedInKla, AirFlowRate, WaterVolPerTankL, BarometricPressure, WeightDensityWater, TrueOxygenMassTransferCoef20, EffectiveSaturatonDepth, OperatingTemp)
  'Call system_log("TrueKLa Exit")
End Sub

Sub TVOLPT2(TowerVolume As Double, TowerArea As Double, TowerLength As Double)
  ''Call system_log("TVOLPT2 Entry")
  ''Call system_log("TowerVolume =" & Str$(TowerVolume))
  ''Call system_log("TowerAreaTowerLength =" & Str$(TowerAreaTowerLength))
  ''Call system_log("TowerLength =" & Str$(TowerLength))
  Call Fortran_TVOLPT2(TowerVolume, TowerArea, TowerLength)
  ''Call system_log("TVOLPT2 Exit")
End Sub

Sub VOLBUB(TankVolume As Double, HenrysConstant As Double, AirFlowRate As Double, ContaminantMassTransferCoeff As Double, Influent As Double, TreatmentObjective As Double, NumberOfTanks As Long, WaterFlowRate As Double, ErrorFlag As Long)
  'Call system_log("VOLBUB Entry")
  'Call system_log("TankVolume =" & Str$(TankVolume))
  'Call system_log("HenrysConstant =" & Str$(HenrysConstant))
  'Call system_log("AirFlowRate =" & Str$(AirFlowRate))
  'Call system_log("ContaminantMassTransferCoeff =" & Str$(ContaminantMassTransferCoeff))
  'Call system_log("Influent =" & Str$(Influent))
  'Call system_log("TreatmentObjective =" & Str$(TreatmentObjective))
  'Call system_log("NumberOfTanks =" & Str$(NumberOfTanks))
  'Call system_log("WaterFlowRate =" & Str$(WaterFlowRate))
  'Call system_log("ErrorFlag =" & Str$(ErrorFlag))
  Call Fortran_VOLBUB(TankVolume, HenrysConstant, AirFlowRate, ContaminantMassTransferCoeff, Influent, TreatmentObjective, NumberOfTanks, WaterFlowRate, ErrorFlag)
  'Call system_log("VOLBUB Exit")
End Sub

Sub VQBUB(AirToWaterRatio As Double, AirFlowRateToEachTank As Double, WaterFlowRate As Double)
  'Call system_log("VQBUB Entry")
  'Call system_log("AirToWaterRatio =" & Str$(AirToWaterRatio))
  'Call system_log("AirFlowRateToEachTank =" & Str$(AirFlowRateToEachTank))
  'Call system_log("WaterFlowRate =" & Str$(WaterFlowRate))
  Call Fortran_VQBUB(AirToWaterRatio, AirFlowRateToEachTank, WaterFlowRate)
  'Call system_log("VQBUB Exit")
End Sub

Sub VQCALC(AirToWaterRatio As Double, AirFlowRate As Double, WaterFlowRate As Double)
  'Call system_log("VQCALC Entry")
  'Call system_log("AirToWaterRatio =" & Str$(AirToWaterRatio))
  'Call system_log("AirFlowRate =" & Str$(AirFlowRate))
  'Call system_log("WaterFlowRate =" & Str$(WaterFlowRate))
  Call Fortran_VQCALC(AirToWaterRatio, AirFlowRate, WaterFlowRate)
  'Call system_log("VQCALC Exit")
End Sub

Sub VQMINBUB(MinAirToWaterRatio As Double, Influent As Double, TreatmentObjective As Double, HenrysConstant As Double, NumberOfTanks As Long)
  'Call system_log("VQMINBUB Entry")
  'Call system_log("MinAirToWaterRatio =" & Str$(MinAirToWaterRatio))
  'Call system_log("Influent =" & Str$(Influent))
  'Call system_log("TreatmentObjective =" & Str$(TreatmentObjective))
  'Call system_log("HenrysConstant =" & Str$(HenrysConstant))
  'Call system_log("NumberOfTanks =" & Str$(NumberOfTanks))
  Call Fortran_VQMINBUB(MinAirToWaterRatio, Influent, TreatmentObjective, HenrysConstant, NumberOfTanks)
  'Call system_log("VQMINBUB Exit")
End Sub

Sub vqmltpt1(AirToWaterRatio As Double, MinimumAirToWaterRatio As Double, MultipleOfMinimumAirToWaterRatio As Double)
  'Call system_log("vqmltpt1 Entry")
  'Call system_log("AirToWaterRatio =" & Str$(AirToWaterRatio))
  'Call system_log("MinimumAirToWaterRatio =" & Str$(MinimumAirToWaterRatio))
  'Call system_log("MultipleOfMinimumAirToWaterRatio =" & Str$(MultipleOfMinimumAirToWaterRatio))
  Call Fortran_vqmltpt1(AirToWaterRatio, MinimumAirToWaterRatio, MultipleOfMinimumAirToWaterRatio)
  'Call system_log("vqmltpt1 Exit")
End Sub

Attribute VB_Name = "HelpTipMod"
Option Explicit
'Declarations for HelpTips

Type PointType
  x As Integer
  Y As Integer
End Type

Declare Function GetActiveWindow Lib "User" () As Integer
Declare Sub GetCursorPos Lib "User" (PointStructure As PointType)
Declare Function ShowWindow Lib "User" (ByVal hWnd As Integer, ByVal nCmdShow As Integer) As Integer
Declare Function WindowFromPoint Lib "User" (ByVal PointStructY As Integer, ByVal PointStructX As Integer) As Integer
Global Const SW_SHOWNOACTIVE = 4


'Declarations for Displaying Menu Prompts

'
' Message sent by windows when a menu is selected
'
Global Const WM_MENUSELECT = &H11F
'
' Windows API Functions
'
Declare Function GetMenu Lib "User" (ByVal hWnd As Integer) As Integer
Declare Function GetMenuItemID Lib "User" (ByVal hMenu As Integer, ByVal nPos As Integer) As Integer
Declare Function GetSubMenu Lib "User" (ByVal hMenu As Integer, ByVal nPos As Integer) As Integer
'
' Used to locate prompt string for a menu
'
Type MenuPromptMap
    menuID  As Integer
    prompt  As String
End Type
'
' Room for 100 menu prompts
'
Global menuPrompts(100) As MenuPromptMap
'
' Contains index of last menu prompt string added to array
'
Global iMenuPrompts     As Integer

Sub ShowHelpTip(TipText$)
' Dim PointStruct As PointType
' Dim TopOffset As Integer
' Dim LeftOffset As Integer
' Dim r%
'
' If Len(TipText$) <> 0 Then
'   HelpTipForm.Hide
'   HelpTipForm.HelpTipLabel.Caption = TipText$
'   Call GetCursorPos(PointStruct)
'   TopOffset = 18
'   LeftOffset = -2
'
'   HelpTipForm.Width = HelpTipForm.HelpTipLabel.Width + 4 * Screen.TwipsPerPixelX
'   HelpTipForm.Height = HelpTipForm.HelpTipLabel.Height + 2 * Screen.TwipsPerPixelY
'
'
'   HelpTipForm.Top = (PointStruct.Y + TopOffset) * Screen.TwipsPerPixelY
'   HelpTipForm.Left = (PointStruct.x + LeftOffset) * Screen.TwipsPerPixelX
'
''   HelpTipForm.Width = HelpTipForm.HelpTipLabel.Width + 4 * Screen.TwipsPerPixelX
''   HelpTipForm.Height = HelpTipForm.HelpTipLabel.Height + 2 * Screen.TwipsPerPixelY
'
'   HelpTipForm.ZOrder
'   r% = ShowWindow(HelpTipForm.hWnd, SW_SHOWNOACTIVE)
' Else
'   HelpTipForm.Hide
' End If
End Sub

Attribute VB_Name = "INIFILES"
Option Explicit

Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
Declare Function GetPrivateProfileInt Lib "kernel32" Alias "GetPrivateProfileIntA" (ByVal lpApplicationName As String, ByVal lpKeyName As String, ByVal nDefault As Long, ByVal lpFileName As String) As Long
Declare Function GetSystemDirectory Lib "kernel32" Alias "GetSystemDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long
Declare Function GetWindowsDirectory Lib "kernel32" Alias "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long
Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long

Global fn_OldFileList As String           'full name including path
Global Const fn_INI_name = "ASAP.INI"     'non-full name NOT including Windows path

  'OldFiles(i,j):
  '     i = menu code
  '     j = file within that menu (file 1,2,3, or 4, where
  '         file 1 is the most recently accessed file)
Global OldFiles(1 To 5, 1 To 4) As String





Const INIFILES_declarations_end = 0


Function GetWindowsDir() As String
Dim Value As Integer
Dim storage As String * 144
  Value = GetWindowsDirectory(ByVal storage, ByVal Len(storage))
  GetWindowsDir = Trim$(Left$(storage, Value))
End Function


Function GetWindowsTempDir() As String
Dim retstr As String
  retstr = Trim$(Environ$("TEMP"))
  If (retstr = "") Then retstr = Trim$(Environ$("TMP"))
  'IF NEITHER THE TEMP OR TMP ENVIRONMENT VARIABLES EXIST
  'THEN WE USE THE WINDOWS DIRECTORY AS THE TEMPORARY
  'FILE PATH.
  If (retstr = "") Then
    retstr = Trim$(GetWindowsDir())
  End If
  If (Right$(retstr, 1) = "\") Then
    'REMOVE TRAILING BACKSLASH.
    retstr = Left$(retstr, Len(retstr) - 1)
  End If
  GetWindowsTempDir = retstr
End Function


Sub ini_putsetting0(fn_ini As String, ini_header As String, INI_VarName As String, ini_newsetting As String)
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpString As String
Dim lpFileName As String
Dim valid As Integer
  lpApplicationName = ini_header
  lpKeyName = INI_VarName
  lpString = ini_newsetting
  lpFileName = fn_ini
  valid = WritePrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpString, ByVal lpFileName)
End Sub
Sub INI_PutSetting(INI_VarName As String, NewSetting As String)
  Call ini_putsetting0(fn_OldFileList, _
      "UserSettings", INI_VarName, NewSetting)
End Sub


Function INI_GetSetting00(fn_ini As String, ini_header As String, INI_VarName As String) As String
  INI_GetSetting00 = INI_GetSetting0(fn_ini, ini_header, INI_VarName)
End Function
Function INI_GetSetting0(fn_ini As String, ini_header As String, INI_VarName As String) As String
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpszDefault As String
Dim lpReturnedString As String * 200
Dim nSize As Integer
Dim lpFileName As String

Dim BytesCopied As Integer
Dim temp As String

  lpApplicationName = ini_header
  lpKeyName = INI_VarName
  lpszDefault = ""
  lpReturnedString = ""
  nSize = Len(lpReturnedString)
  lpFileName = fn_ini

  BytesCopied = GetPrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpszDefault, ByVal lpReturnedString, ByVal nSize, ByVal lpFileName)
  temp = Left$(Trim$(lpReturnedString), BytesCopied)
  INI_GetSetting0 = temp

End Function
Function INI_Getsetting(INI_VarName As String) As String
  INI_Getsetting = _
      INI_GetSetting0(fn_OldFileList, "UserSettings", INI_VarName)
End Function


Sub OldFileList_Populate( _
    num_menu As Integer, _
    menu0 As Menu, _
    menu1 As Menu, menu2 As Menu, _
    menu3 As Menu, menu4 As Menu)
  OldFiles(num_menu, 1) = INI_GetSetting0(fn_OldFileList, "old_files", _
      "old_file(" & Trim$(Str$(num_menu)) & ",1)")
  OldFiles(num_menu, 2) = INI_GetSetting0(fn_OldFileList, "old_files", _
      "old_file(" & Trim$(Str$(num_menu)) & ",2)")
  OldFiles(num_menu, 3) = INI_GetSetting0(fn_OldFileList, "old_files", _
      "old_file(" & Trim$(Str$(num_menu)) & ",3)")
  OldFiles(num_menu, 4) = INI_GetSetting0(fn_OldFileList, "old_files", _
      "old_file(" & Trim$(Str$(num_menu)) & ",4)")
  Call OldFileList_UpdateMenu(num_menu, menu0, menu1, menu2, menu3, menu4)
End Sub
Sub OldFileList_Promote( _
    fn_newfile As String, _
    num_menu As Integer, _
    menu0 As Menu, menu1 As Menu, menu2 As Menu, _
    menu3 As Menu, menu4 As Menu)
Dim i As Integer
Dim Found As Integer
  'IF NOT IN CURRENT LIST, SHIFT 1-3 DOWN TO 2-4 AND REPLACE 1.
  'IF IN CURRENT LIST, SAVE, SHIFT OTHERS DOWN, AND MOVE TO 1.
  fn_newfile = LCase$(fn_newfile)
  Found = -1
  For i = 1 To 4
    If (Trim$(LCase$(fn_newfile)) = Trim$(LCase$(OldFiles(num_menu, i)))) Then
      Found = i
      Exit For
    End If
  Next i
  If (Found = -1) Then
    For i = 4 To 2 Step -1
      OldFiles(num_menu, i) = OldFiles(num_menu, i - 1)
    Next i
    OldFiles(num_menu, 1) = fn_newfile
  Else
    For i = Found To 2 Step -1
      OldFiles(num_menu, i) = OldFiles(num_menu, i - 1)
    Next i
    OldFiles(num_menu, 1) = fn_newfile
  End If
  'UPDATE MENU:
  Call OldFileList_UpdateMenu(num_menu, menu0, menu1, menu2, menu3, menu4)
  'UPDATE INI FILE:
  For i = 1 To 4
    Call ini_putsetting0(fn_OldFileList, _
        "old_files", _
        "old_file(" & Trim$(Str$(num_menu)) & "," & Trim$(Str$(i)) & ")", _
        OldFiles(num_menu, i))
  Next i
End Sub
Sub OldFileList_UpdateMenu(num_menu As Integer, _
    menu0 As Menu, _
    menu1 As Menu, menu2 As Menu, _
    menu3 As Menu, menu4 As Menu)
Dim found_at_least_one As Integer
Dim i As Integer
Dim mnu As Menu
  found_at_least_one = False
  For i = 1 To 4
    If (i = 1) Then Set mnu = menu1
    If (i = 2) Then Set mnu = menu2
    If (i = 3) Then Set mnu = menu3
    If (i = 4) Then Set mnu = menu4
    If (OldFiles(num_menu, i) <> "") Then
      found_at_least_one = True
      mnu.Caption = "&" & Trim$(Str$(i)) & " - " & OldFiles(num_menu, i)
      mnu.Visible = True
    Else
      mnu.Visible = False
    End If
  Next i
  If (Not found_at_least_one) Then
    menu0.Visible = False
  Else
    menu0.Visible = True
  End If
End Sub
Attribute VB_Name = "IniFileMod"
Option Explicit

'allows for adsim.ini calls
Declare Function GetPrivateProfileInt% Lib "kernel" (ByVal lpApplicationName$, ByVal lpKeyName$, ByVal nDefault%, ByVal lpFileName$)
Declare Function GetPrivateProfileString% Lib "kernel" (ByVal lpApplicationName$, ByVal lpKeyName As Any, ByVal lpDefault$, ByVal lpReturnedString$, ByVal nSize%, ByVal lpFileName$)
Declare Function WritePrivateProfileString% Lib "kernel" (ByVal lpApplicationName$, ByVal lpKeyName$, ByVal lpString$, ByVal lplFileName$)

Declare Function GetWindowsDirectory Lib "kernel" (ByVal lpbuffer$, ByVal nSize%) As Integer
Declare Function GetSystemDirectory Lib "kernel" (ByVal lpbuffer$, ByVal nSize%) As Integer


'Global variables:
Global INI_WindowsDir As String
Global INI_ProgramType As String
Global INI_FileName As String

Function GetWindowsDir() As String
Dim storage As String * 144
Dim value As Integer

  value = GetWindowsDirectory(ByVal storage, ByVal Len(storage))
  GetWindowsDir = Trim$(Left$(storage, value))

End Function

Function GetWindowsSystemDir() As String
Dim value As Integer
Dim storage As String * 144

  value = GetSystemDirectory(ByVal storage, ByVal Len(storage))
  GetWindowsSystemDir = Trim$(Left$(storage, value))

End Function

Function INI_GetSetting(INI_VariableName As String) As String
'Dim lpApplicationName As String
'Dim lpKeyName As String
'Dim lpszDefault As String
'Dim lpReturnedString As String * 200
'Dim nSize As Integer
'Dim lpFileName As String
'
'Dim BytesCopied As Integer
'Dim temp As String
'
'  lpApplicationName = INI_ProgramType
'  lpKeyName = INI_VariableName
'  lpszDefault = ""
'  lpReturnedString = ""
'  nSize = Len(lpReturnedString)
'  lpFileName = INI_FileName
'
'  BytesCopied = GetPrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpszDefault, ByVal lpReturnedString, ByVal nSize, ByVal lpFileName)
'  temp = Trim$(Left$(lpReturnedString, BytesCopied))
'  INI_GetSetting = temp

  'ini_getsetting = INI_GetSetting0(INI_ProgramType, INI_VariableName)
  On Error Resume Next
  INI_GetSetting = Trim$(INI_GetSetting00(INI_FileName, AppProgramKey, INI_VariableName))

End Function

Function INI_GetSetting0(INI_SpecifiedProgramType As String, INI_VariableName As String) As String
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpszDefault As String
Dim lpReturnedString As String * 200
Dim nSize As Integer
Dim lpFileName As String

Dim BytesCopied As Integer
Dim temp As String

  On Error Resume Next
  lpApplicationName = INI_SpecifiedProgramType
  lpKeyName = INI_VariableName
  lpszDefault = ""
  lpReturnedString = ""
  nSize = Len(lpReturnedString)
  lpFileName = INI_WindowsDir & "\" & INI_SpecifiedProgramType & ".ini"
  
  BytesCopied = GetPrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpszDefault, ByVal lpReturnedString, ByVal nSize, ByVal lpFileName)
  temp = Trim$(Left$(lpReturnedString, BytesCopied))
  INI_GetSetting0 = temp

End Function

Function INI_GetSetting00(use_Filename As String, use_Section As String, use_VarName As String)
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpszDefault As String
Dim lpReturnedString As String * 200
Dim nSize As Integer
Dim lpFileName As String

Dim BytesCopied As Integer
Dim temp As String

  On Error Resume Next
  'lpApplicationName = INI_SpecifiedProgramType
  'lpKeyName = INI_VariableName
  lpszDefault = ""
  lpReturnedString = ""
  nSize = Len(lpReturnedString)
  'lpFileName = INI_WindowsDir & "\" & INI_SpecifiedProgramType & ".ini"
  BytesCopied = GetPrivateProfileString(ByVal use_Section, ByVal use_VarName, ByVal lpszDefault, ByVal lpReturnedString, ByVal nSize, ByVal use_Filename)
  temp = Left$(Trim$(lpReturnedString), BytesCopied)
  INI_GetSetting00 = temp
  
End Function

Sub ini_initializethisprogram(SpecifiedProgramType As String)
'Dim programtype As String
Dim infotype As String
Dim defaultresult As String
Dim returnvalue As String * 125
'dim ini_location As String
'ReDim appnames(3) As String
Dim storage As String * 144
Dim newdata As String
Dim defaultnumber As Long, valid As Long, string_size As Long
Dim f As Integer, i As Integer, value As Integer
Dim temp As String

  'Set global variable to specified program type
  INI_ProgramType = Trim$(SpecifiedProgramType)

  'get windows directory and look for adsim.ini
  value = GetWindowsDirectory(ByVal storage, ByVal Len(storage))
  INI_WindowsDir = Trim$(Left$(storage, value))

  'if does not exist, create ini file
  'INI_FileName = INI_WindowsDir & "\" & INI_ProgramType & ".ini"
  
  'SELECT INI FILENAME DIRECTORY.
  If (fileexists(Global_fpath_dir_CPAS & "\DBASE")) Then
    'USE THE DBASE DIRECTORY.
    INI_FileName = Global_fpath_dir_CPAS & "\DBASE\" & INI_ProgramType & ".ini"
  Else
    'VB3 IS FLAKY ABOUT LONG FILENAMES.
    'THEREFORE, PUT THE INI FILE INTO THE WINDOWS DIRECTORY.
    INI_FileName = GetWindowsDir() & "\" & INI_ProgramType & ".ini"
  End If

  On Error Resume Next
  If (Dir(INI_FileName)) = "" Then
    '======>  Program Specified Initialization!  <======
    f = FreeFile
    Open INI_FileName For Output As f
    Print #f, "[asap]"
    Print #f, "app_path="
    Print #f, "has_seen_disclaimer=0"
    Print #f, "oldfile1="
    Print #f, "oldfile2="
    Print #f, "oldfile3="
    Print #f, "oldfile4="

  'appnames(1) = "[adsim]"
  'appnames(2) = "[asap]"
  'appnames(3) = "[stepp]"
  '
  'For i% = 1 To 3
  '  Print #f, appnames(i)
  '  Write #f,
  '  Print #f, "has_seen_disclaimer=0"
  '  Write #f,
  '  Print #f, "oldfile1="
  '  Write #f,
  '  Print #f, "oldfile2="
  '  Write #f,
  '  Print #f, "oldfile3="
  '  Write #f,
  '  Print #f, "oldfile4="
  '  Write #f,
  '  Print #f, "path="
  '  Write #f,
  'Next i%
    Close #f
  End If

'setup variables for ini call
'programtype = "stepp" '**change to name of program
'ini_location = windowsdir
'defaultresult = ""
'infotype = "app_path"
'string_size = Len(returnvalue)
'returnvalue = ""
'value = GetPrivateProfileString(ByVal INI_ProgramType, ByVal infotype, ByVal defaultresult, ByVal returnvalue, ByVal string_size, ByVal INI_FileName)
'temp = Trim$(Left$(returnvalue, value))
  temp = INI_GetSetting("app_path")

  'if incorrect path set with programs current path being used now
  If ((StrComp(temp, App.Path) <> 0) Or (temp = "")) Then
    'newdata = Trim$(app.Path)
    'valid = WritePrivateProfileString(ByVal INI_ProgramType, ByVal infotype, ByVal newdata, ByVal INI_FileName)
    Call ini_putsetting("app_path", Trim$(App.Path))
  End If

  ChDir App.Path

End Sub

Sub ini_putsetting(INI_VariableName As String, INI_NewSetting As String)
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpString As String
Dim lpFileName As String

Dim valid As Integer

  On Error Resume Next
  lpApplicationName = INI_ProgramType
  lpKeyName = INI_VariableName
  lpString = INI_NewSetting
  lpFileName = INI_FileName

  valid = WritePrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpString, ByVal lpFileName)

End Sub

Attribute VB_Name = "LabelsMod"
Option Explicit

Sub LabelsAirWaterPropertiesSI()

    frmAirWaterProperties!lblAirWaterProperties(0).Caption = "Water Density (kg/m" & Chr$(179) & ")"
    frmAirWaterProperties!lblAirWaterProperties(1).Caption = "Water Viscosity (kg/m/sec)"
    frmAirWaterProperties!lblAirWaterProperties(2).Caption = "Water Surface Tension (N/m)"
    frmAirWaterProperties!lblAirWaterProperties(3).Caption = "Air Density (kg/m" & Chr$(179) & ")"
    frmAirWaterProperties!lblAirWaterProperties(4).Caption = "Air Viscosity (kg/m/sec)"

End Sub

Sub LabelsBubble(UnitsType As Integer)
Dim ThisUnit As Integer

  'Operating Conditions.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = PRESSURE_PA
    Case UNITSTYPE_ENGLISH: ThisUnit = PRESSURE_ATM
  End Select
  Call Populate_Pressure_Units(frmBubble!UnitsOpCond(0), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = TEMPERATURE_C
    Case UNITSTYPE_ENGLISH: ThisUnit = TEMPERATURE_F
  End Select
  Call Populate_Temperature_Units(frmBubble!UnitsOpCond(1), ThisUnit)
  
  'Oxygen (reference compound).
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = DIFFUSIVITY_M2_per_S
    Case UNITSTYPE_ENGLISH: ThisUnit = DIFFUSIVITY_FT2_per_S
  End Select
  Call Populate_Diffusivity_Units(frmBubble!UnitsOxygenRef(1), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = INVERSETIME_S
    Case UNITSTYPE_ENGLISH: ThisUnit = INVERSETIME_S
  End Select
  Call Populate_InverseTime_Units(frmBubble!UnitsOxygenRef(2), ThisUnit)
  
  'Design Contaminant.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = CONCENTRATION_UG_per_L
    Case UNITSTYPE_ENGLISH: ThisUnit = CONCENTRATION_UG_per_L
  End Select
  Call Populate_Concentration_Units(frmBubble!UnitsDesignContam(0), ThisUnit)
  Call Populate_Concentration_Units(frmBubble!UnitsDesignContam(1), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = INVERSETIME_S
    Case UNITSTYPE_ENGLISH: ThisUnit = INVERSETIME_S
  End Select
  Call Populate_InverseTime_Units(frmBubble!UnitsDesignContam(3), ThisUnit)

  'Flow Parameters.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = FLOW_M3_per_S
    Case UNITSTYPE_ENGLISH: ThisUnit = FLOW_GPM
  End Select
  Call Populate_FlowRate_Units(frmBubble!UnitsFlowParam(0), ThisUnit)
  Call Populate_FlowRate_Units(frmBubble!UnitsFlowParam(3), ThisUnit)

  'Tank Parameters.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = TIME_HR
    Case UNITSTYPE_ENGLISH: ThisUnit = TIME_HR
  End Select
  Call Populate_Time_Units(frmBubble!UnitsTankParam(1), ThisUnit)
  Call Populate_Time_Units(frmBubble!UnitsTankParam(2), ThisUnit)

  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = VOLUME_M3
    Case UNITSTYPE_ENGLISH: ThisUnit = VOLUME_FT3
  End Select
  Call Populate_Volume_Units(frmBubble!UnitsTankParam(3), ThisUnit)
  Call Populate_Volume_Units(frmBubble!UnitsTankParam(4), ThisUnit)

  'Concentration Results.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = CONCENTRATION_UG_per_L
    Case UNITSTYPE_ENGLISH: ThisUnit = CONCENTRATION_UG_per_L
  End Select
  Call Populate_Concentration_Units(frmBubble!UnitsConcResults(1), ThisUnit)
  Call Populate_Concentration_Units(frmBubble!UnitsConcResults(2), ThisUnit)
  Call Populate_Concentration_Units(frmBubble!UnitsConcResults(3), ThisUnit)






  ''Mass Transfer Parameters.
  'Call Populate_InverseTime_Units(frmPTADScreen1!UnitsMassTransfer(0), INVERSETIME_S)
  'Call Populate_InverseTime_Units(frmPTADScreen1!UnitsMassTransfer(2), INVERSETIME_S)
  '
  ''Tower Parameters.
  'Call Populate_Area_Units(frmPTADScreen1!lblTowerUnits(0), AREA_M2)
  'Call Populate_Length_Units(frmPTADScreen1!lblTowerUnits(1), LENGTH_M)
  'Call Populate_Length_Units(frmPTADScreen1!lblTowerUnits(2), LENGTH_M)
  'Call Populate_Volume_Units(frmPTADScreen1!lblTowerUnits(3), VOLUME_M3)







    'frmBubble!lblOperatingPressure.Caption = "Pressure (Pa)"
    'frmBubble!lblOperatingTemperature.Caption = "Temperature (C)"
    '
    'frmBubble!lblOxygenLabel(1).Caption = "Liquid Diffusivity (m" & Chr$(178) & "/sec)"
    'frmBubble!lblOxygenLabel(2).Caption = "Mass Transfer Coeff. (1/sec)"
    '
    'frmBubble!lblDesignConcentration(0).Caption = "Influent Concentration (" & Chr$(181) & "g/L)"
    'frmBubble!lblDesignConcentration(1).Caption = "Treatment Objective (" & Chr$(181) & "g/L)"
    'frmBubble!lblDesignConcentration(2).Caption = "Desired Percent Removal"
    'frmBubble!lblDesignConcentration(3).Caption = "Mass Transfer Coeff. (1/sec)"
    '
    'frmBubble!lblFlowParametersLabel(0).Caption = "Water Flow Rate (m" & Chr$(179) & "/sec)"
    'frmBubble!lblFlowParametersLabel(1).Caption = "Min Air to Water Ratio (m" & Chr$(179) & "/m" & Chr$(179) & ")"
    'frmBubble!lblFlowParametersLabel(2).Caption = "Air to Water Ratio (m" & Chr$(179) & "/m" & Chr$(179) & ")"
    'frmBubble!lblFlowParametersLabel(3).Caption = "Air Flow Rate (m" & Chr$(179) & "/sec)"
    '
    'frmBubble!lblTankParametersLabel(0).Caption = "No. of Tanks (in series) (-)"
    'frmBubble!lblTankParametersLabel(1).Caption = "Tank Fluid Residence Time (hr)"
    'frmBubble!lblTankParametersLabel(2).Caption = "Total Fluid Residence Time (hr)"
    'frmBubble!lblTankParametersLabel(3).Caption = "Volume of Each Tank (m" & Chr$(179) & ")"
    'frmBubble!lblTankParametersLabel(4).Caption = "Volume of All Tanks (m" & Chr$(179) & ")"
    '
    'frmBubble!lblStantonLabel.Caption = "Stanton Number (-)"
    '
    'frmBubble!lblConcentrationResultsLabel(0).Caption = "Name:"
    'frmBubble!lblConcentrationResultsLabel(1).Caption = "Ci to Tank 1 (" & Chr$(181) & "g/L)"
    'frmBubble!lblConcentrationResultsLabel(2).Caption = "Yi to All Tanks (" & Chr$(181) & "g/L)"
    'frmBubble!lblConcentrationResultsLabel(3).Caption = "Ce from Last Tank (" & Chr$(181) & "g/L)"
    'frmBubble!lblConcentrationResultsLabel(4).Caption = "Achieved Percent Removal"
    
End Sub

Sub LabelsBubbleKLaO2SI()
    
    frmOxygenMassTransferCoeff!lblDataParametersLabel(0).Caption = "SOTE (%)"
    frmOxygenMassTransferCoeff!lblDataParametersLabel(1).Caption = "SOTR (kg O2/d)"
    frmOxygenMassTransferCoeff!lblDataParametersLabel(2).Caption = "Air Flow (std. m" & Chr$(179) & "/hr)"
    frmOxygenMassTransferCoeff!lblDataParametersLabel(3).Caption = "Barometric Pres. (Pa)"
    frmOxygenMassTransferCoeff!lblDataParametersLabel(4).Caption = "Water Depth (m)"
    frmOxygenMassTransferCoeff!lblDataParametersLabel(5).Caption = "Water Volume (m" & Chr$(179) & ")"
    frmOxygenMassTransferCoeff!lblDataParametersLabel(6).Caption = "C* (mg/L)"
    frmOxygenMassTransferCoeff!lblDataParametersLabel(7).Caption = "Apparent KLa,20 (1/s)"
    frmOxygenMassTransferCoeff!lblDataParametersLabel(8).Caption = "Phi (1/s)"
    frmOxygenMassTransferCoeff!lblDataParametersLabel(9).Caption = "True KLa,20 (1/s)"
    frmOxygenMassTransferCoeff!lblDataParametersLabel(10).Caption = "Theta (-)"
    frmOxygenMassTransferCoeff!lblDataParametersLabel(11).Caption = "KLa,O2 at Op. T (1/s)"

End Sub

Sub LabelsBubblePowerSI()

    frmBubblePower!lblPowerLabel(0).Caption = "Inlet Air Temperature (C)"
    frmBubblePower!lblPowerLabel(1).Caption = "Blower Efficiency (%)"
    frmBubblePower!lblPowerLabel(2).Caption = "Tank Water Depth (m)"
    frmBubblePower!lblPowerLabel(3).Caption = "Brake Power (kW/Blower)"
    frmBubblePower!lblPowerLabel(4).Caption = "No. of Tanks (in series)"
    frmBubblePower!lblPowerLabel(5).Caption = "No. of Blowers per Tank"
    frmBubblePower!lblPowerLabel(6).Caption = "Total Brake Power (kW)"

End Sub

Sub LabelsOptimizeContaminantsSI()

    frmOptimizeContaminant.lblOptimizationFormLabel(2).Caption = "Influent Concentration (" & Chr$(181) & "g/L)"
    frmOptimizeContaminant.lblOptimizationFormLabel(3).Caption = "Treatment Objective (" & Chr$(181) & "g/L)"
    frmOptimizeContaminant.lblOptimizationFormLabel(4).Caption = "Effluent Concentration (" & Chr$(181) & "g/L)"
    frmOptimizeContaminant.lblOptimizationFormLabel(6).Caption = "Influent Concentration (" & Chr$(181) & "g/L)"
    frmOptimizeContaminant.lblOptimizationFormLabel(7).Caption = "Treatment Objective (" & Chr$(181) & "g/L)"
    frmOptimizeContaminant.lblOptimizationFormLabel(8).Caption = "Effluent Concentration (" & Chr$(181) & "g/L)"

End Sub

Sub LabelsPowerScreen2SI()

    frmPowerScreen2!lblPowerLabel(0).Caption = "Inlet Air Temperature (C)"
    frmPowerScreen2!lblPowerLabel(1).Caption = "Blower Efficiency (%)"
    frmPowerScreen2!lblPowerLabel(2).Caption = "Blower Brake Power (kW)"
    frmPowerScreen2!lblPowerLabel(3).Caption = "Pump Efficiency (%)"
    frmPowerScreen2!lblPowerLabel(4).Caption = "Pump Brake Power (kW)"
    frmPowerScreen2!lblPowerLabel(5).Caption = "Total Brake Power (kW)"

End Sub

Sub LabelsPowerSI()

    frmPower!lblPowerLabel(0).Caption = "Inlet Air Temperature (C)"
    frmPower!lblPowerLabel(1).Caption = "Blower Efficiency (%)"
    frmPower!lblPowerLabel(2).Caption = "Blower Brake Power (kW)"
    frmPower!lblPowerLabel(3).Caption = "Pump Efficiency (%)"
    frmPower!lblPowerLabel(4).Caption = "Pump Brake Power (kW)"
    frmPower!lblPowerLabel(5).Caption = "Total Brake Power (kW)"

End Sub

Sub LabelsPropContaminant(UnitsType As Integer)
Dim ThisUnit As Integer

  ThisUnit = MOLECULAR_WEIGHT_MG_per_MMOL
  Call Populate_MolecularWeight_Units(frmContaminantPropertyEdit!UnitsProp(0), ThisUnit)

  ThisUnit = MOLAR_VOLUME_M3_per_KMOL
  Call Populate_MolarVolume_Units(frmContaminantPropertyEdit!UnitsProp(2), ThisUnit)

  ThisUnit = TEMPERATURE_C
  Call Populate_Temperature_Units(frmContaminantPropertyEdit!UnitsProp(3), ThisUnit)

  ThisUnit = DIFFUSIVITY_M2_per_S
  Call Populate_Diffusivity_Units(frmContaminantPropertyEdit!UnitsProp(4), ThisUnit)

  ThisUnit = DIFFUSIVITY_M2_per_S
  Call Populate_Diffusivity_Units(frmContaminantPropertyEdit!UnitsProp(5), ThisUnit)

  ThisUnit = CONCENTRATION_UG_per_L
  Call Populate_Concentration_Units(frmContaminantPropertyEdit!UnitsConc(0), ThisUnit)

  ThisUnit = CONCENTRATION_UG_per_L
  Call Populate_Concentration_Units(frmContaminantPropertyEdit!UnitsConc(1), ThisUnit)

'    frmPropContaminant!lblContaminantProperties(1).Caption = "Molecular Weight (kg/kmol)"
'    frmPropContaminant!lblContaminantProperties(2).Caption = "Henry's Constant (-)"
'    frmPropContaminant!lblContaminantProperties(3).Caption = "Molar Volume (m" & Chr$(179) & "/kmol)"
'    frmPropContaminant!lblContaminantProperties(4).Caption = "Normal Boiling Point (C)"
'    frmPropContaminant!lblContaminantProperties(5).Caption = "Liquid Diffusivity (m" & Chr$(178) & "/sec)"
'    frmPropContaminant!lblContaminantProperties(6).Caption = "Gas Diffusivity (m" & Chr$(178) & "/sec)"
'    frmPropContaminant!lblContaminantProperties(7).Caption = "Influent Conc. (" & Chr$(181) & "g/L)"
'    frmPropContaminant!lblContaminantProperties(8).Caption = "Treatment Obj. (" & Chr$(181) & "g/L)"

End Sub

Sub LabelsPropContaminantBubbleSI()

    'frmPropContaminantBubble!lblContaminantProperties(1).Caption = "Molecular Weight (kg/kmol)"
    'frmPropContaminantBubble!lblContaminantProperties(2).Caption = "Henry's Constant (-)"
    'frmPropContaminantBubble!lblContaminantProperties(3).Caption = "Molar Volume (m" & Chr$(179) & "/kmol)"
    'frmPropContaminantBubble!lblContaminantProperties(5).Caption = "Liquid Diffusivity (m" & Chr$(178) & "/sec)"
    'frmPropContaminantBubble!lblContaminantProperties(7).Caption = "Influent Conc. (" & Chr$(181) & "g/L)"
    'frmPropContaminantBubble!lblContaminantProperties(8).Caption = "Treatment Obj. (" & Chr$(181) & "g/L)"
    'frmPropContaminantBubble!lblContaminantProperties(9).Caption = "Pressure (Pa)"
    'frmPropContaminantBubble!lblContaminantProperties(10).Caption = "Temperature (C)"

End Sub

Sub LabelsPropContaminantSurfaceSI()

    'frmPropContaminantSurface!lblContaminantProperties(1).Caption = "Molecular Weight (kg/kmol)"
    'frmPropContaminantSurface!lblContaminantProperties(2).Caption = "Henry's Constant (-)"
    'frmPropContaminantSurface!lblContaminantProperties(3).Caption = "Molar Volume (m" & Chr$(179) & "/kmol)"
    'frmPropContaminantSurface!lblContaminantProperties(5).Caption = "Liquid Diffusivity (m" & Chr$(178) & "/sec)"
    'frmPropContaminantSurface!lblContaminantProperties(7).Caption = "Influent Conc. (" & Chr$(181) & "g/L)"
    'frmPropContaminantSurface!lblContaminantProperties(8).Caption = "Treatment Obj. (" & Chr$(181) & "g/L)"
    'frmPropContaminantSurface!lblContaminantProperties(9).Caption = "Pressure (Pa)"
    'frmPropContaminantSurface!lblContaminantProperties(10).Caption = "Temperature (C)"

End Sub

Sub LabelsPTADScreen1(UnitsType As Integer)
Dim ThisUnit As Integer

  'Operating Conditions.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = PRESSURE_PA
    Case UNITSTYPE_ENGLISH: ThisUnit = PRESSURE_ATM
  End Select
  Call Populate_Pressure_Units(frmptadscreen1!txtPUnits, ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = TEMPERATURE_C
    Case UNITSTYPE_ENGLISH: ThisUnit = TEMPERATURE_F
  End Select
  Call Populate_Temperature_Units(frmptadscreen1!txtTUnits, ThisUnit)
  
  'Flows and Loadings.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = FLOW_M3_per_S
    Case UNITSTYPE_ENGLISH: ThisUnit = FLOW_GPM
  End Select
  Call Populate_FlowRate_Units(frmptadscreen1!txtFlowsUnits(0), ThisUnit)
  Call Populate_FlowRate_Units(frmptadscreen1!txtFlowsUnits(4), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = PRESSUREPERLENGTH_PA_per_M
    Case UNITSTYPE_ENGLISH: ThisUnit = PRESSUREPERLENGTH_PSI_per_FT
  End Select
  Call Populate_PressurePerLength_Units(frmptadscreen1!txtFlowsUnits(5), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = MASSLOADINGRATE_KG_M2_S
    Case UNITSTYPE_ENGLISH: ThisUnit = MASSLOADINGRATE_LBM_FT2_S
  End Select
  Call Populate_MassLoadingRate_Units(frmptadscreen1!lblFlowsUnits(6), ThisUnit)
  Call Populate_MassLoadingRate_Units(frmptadscreen1!lblFlowsUnits(7), ThisUnit)

  'Mass Transfer Parameters.
  ThisUnit = INVERSETIME_S
  Call Populate_InverseTime_Units(frmptadscreen1!UnitsMassTransfer(0), ThisUnit)
  Call Populate_InverseTime_Units(frmptadscreen1!UnitsMassTransfer(2), ThisUnit)

  'Tower Parameters.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = AREA_M2
    Case UNITSTYPE_ENGLISH: ThisUnit = AREA_FT2
  End Select
  Call Populate_Area_Units(frmptadscreen1!lblTowerUnits(0), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = LENGTH_M
    Case UNITSTYPE_ENGLISH: ThisUnit = LENGTH_FT
  End Select
  Call Populate_Length_Units(frmptadscreen1!lblTowerUnits(1), ThisUnit)
  Call Populate_Length_Units(frmptadscreen1!lblTowerUnits(2), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = VOLUME_M3
    Case UNITSTYPE_ENGLISH: ThisUnit = VOLUME_FT3
  End Select
  Call Populate_Volume_Units(frmptadscreen1!lblTowerUnits(3), ThisUnit)

End Sub

Sub LabelsPTADScreen2(UnitsType As Integer)
Dim ThisUnit As Integer

  'Design Based On. ===========================================================
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = LENGTH_M
    Case UNITSTYPE_ENGLISH: ThisUnit = LENGTH_FT
  End Select
  Call Populate_Length_Units(frmPTADScreen2!UnitsDesignBasis(0), ThisUnit)
  Call Populate_Length_Units(frmPTADScreen2!UnitsDesignBasis(1), ThisUnit)
  
  
  'Tower Parameters. ==========================================================
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = LENGTH_M
    Case UNITSTYPE_ENGLISH: ThisUnit = LENGTH_FT
  End Select
  Call Populate_Length_Units(frmPTADScreen2!UnitsTowerParam(0), ThisUnit)
  Call Populate_Length_Units(frmPTADScreen2!UnitsTowerParam(1), ThisUnit)

  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = AREA_M2
    Case UNITSTYPE_ENGLISH: ThisUnit = AREA_FT2
  End Select
  Call Populate_Area_Units(frmPTADScreen2!UnitsTowerParam(2), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = VOLUME_M3
    Case UNITSTYPE_ENGLISH: ThisUnit = VOLUME_FT3
  End Select
  Call Populate_Volume_Units(frmPTADScreen2!UnitsTowerParam(3), ThisUnit)


  'Operating Conditions. ======================================================
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = PRESSURE_PA
    Case UNITSTYPE_ENGLISH: ThisUnit = PRESSURE_ATM
  End Select
  Call Populate_Pressure_Units(frmPTADScreen2!UnitsOpCond(0), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = TEMPERATURE_C
    Case UNITSTYPE_ENGLISH: ThisUnit = TEMPERATURE_F
  End Select
  Call Populate_Temperature_Units(frmPTADScreen2!UnitsOpCond(1), ThisUnit)
  
  
  'Flows and Loadings. ========================================================
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = FLOW_M3_per_S
    Case UNITSTYPE_ENGLISH: ThisUnit = FLOW_GPM
  End Select
  Call Populate_FlowRate_Units(frmPTADScreen2!UnitsFlows(0), ThisUnit)
  Call Populate_FlowRate_Units(frmPTADScreen2!UnitsFlows(1), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = MASSLOADINGRATE_KG_M2_S
    Case UNITSTYPE_ENGLISH: ThisUnit = MASSLOADINGRATE_LBM_FT2_S
  End Select
  Call Populate_MassLoadingRate_Units(frmPTADScreen2!UnitsFlows(3), ThisUnit)
  Call Populate_MassLoadingRate_Units(frmPTADScreen2!UnitsFlows(4), ThisUnit)
  
  
  'Contaminant of Interest. ===================================================
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = INVERSETIME_S
    Case UNITSTYPE_ENGLISH: ThisUnit = INVERSETIME_S
  End Select
  Call Populate_InverseTime_Units(frmPTADScreen2!UnitsInterest(0), ThisUnit)
  Call Populate_InverseTime_Units(frmPTADScreen2!UnitsInterest(2), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = CONCENTRATION_UG_per_L
    Case UNITSTYPE_ENGLISH: ThisUnit = CONCENTRATION_UG_per_L
  End Select
  Call Populate_Concentration_Units(frmPTADScreen2!UnitsInterest(3), ThisUnit)
  Call Populate_Concentration_Units(frmPTADScreen2!UnitsInterest(4), ThisUnit)
  Call Populate_Concentration_Units(frmPTADScreen2!UnitsInterest(5), ThisUnit)
         
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = PRESSUREPERLENGTH_PA_per_M
    Case UNITSTYPE_ENGLISH: ThisUnit = PRESSUREPERLENGTH_PSI_per_FT
  End Select
  Call Populate_PressurePerLength_Units(frmPTADScreen2!UnitsInterest(7), ThisUnit)


  

  '
  ''Flows and Loadings.
  'Call Populate_Flowrate_Units(frmPTADScreen1!txtFlowsUnits(0), FLOW_M3_per_S)
  'Call Populate_Flowrate_Units(frmPTADScreen1!txtFlowsUnits(4), FLOW_M3_per_S)
  'Call Populate_PressurePerLength_Units(frmPTADScreen1!txtFlowsUnits(5), PRESSUREPERLENGTH_PA_per_M)
  'Call Populate_MassLoadingRate_Units(frmPTADScreen1!lblFlowsUnits(6), MASSLOADINGRATE_KG_M2_S)
  'Call Populate_MassLoadingRate_Units(frmPTADScreen1!lblFlowsUnits(7), MASSLOADINGRATE_KG_M2_S)
  '
  ''Mass Transfer Parameters.
  'Call Populate_InverseTime_Units(frmPTADScreen1!lblTransferUnits(0), INVERSETIME_S)
  'Call Populate_InverseTime_Units(frmPTADScreen1!txtTransferUnits(2), INVERSETIME_S)
  '
  ''Tower Parameters.
  'Call Populate_Area_Units(frmPTADScreen1!lblTowerUnits(0), AREA_M2)
  'Call Populate_Length_Units(frmPTADScreen1!lblTowerUnits(1), LENGTH_M)
  'Call Populate_Length_Units(frmPTADScreen1!lblTowerUnits(2), LENGTH_M)
  'Call Populate_Volume_Units(frmPTADScreen1!lblTowerUnits(3), VOLUME_M3)
    


    'frmPTADScreen2!lblDesignParametersLabel(0).Caption = "Tower Diameter (m)"
    'frmPTADScreen2!lblDesignParametersLabel(1).Caption = "Tower Height (m)"
    'frmPTADScreen2!lblTowerParametersLabel(0).Caption = "Specify Tower Diameter (m)"
    'frmPTADScreen2!lblTowerParametersLabel(1).Caption = "Specify Tower Height (m)"
    'frmPTADScreen2!lblTowerParametersLabel(2).Caption = "Tower Area (m" & Chr$(178) & ")"
    'frmPTADScreen2!lblTowerParametersLabel(3).Caption = "Tower Volume (m" & Chr$(179) & ")"
    'frmPTADScreen2!lblOperatingPressure.Caption = "Pressure (Pa)"
    'frmPTADScreen2!lblOperatingTemperature.Caption = "Temperature (C)"
    'frmPTADScreen2!lblFlowsLoadingsLabel(0).Caption = "Water Flow Rate (m" & Chr$(179) & "/sec)"
    'frmPTADScreen2!lblFlowsLoadingsLabel(1).Caption = "Air Flow Rate (m" & Chr$(179) & "/sec)"
    'frmPTADScreen2!lblFlowsLoadingsLabel(2).Caption = "Air to Water Ratio (m" & Chr$(179) & "/m" & Chr$(179) & ")"
    'frmPTADScreen2!lblFlowsLoadingsLabel(3).Caption = "Water Loading Rate (kg/m" & Chr$(178) & "/s)"
    'frmPTADScreen2!lblFlowsLoadingsLabel(4).Caption = "Air Loading Rate (kg/m" & Chr$(178) & "/s)"
    'frmPTADScreen2!lblDesignConcentration(0).Caption = "Onda KLa (1/sec)"
    'frmPTADScreen2!lblDesignConcentration(1).Caption = "KLa Safety Factor (-)"
    'frmPTADScreen2!lblDesignConcentration(2).Caption = "Design KLa (1/sec)"
    'frmPTADScreen2!lblDesignConcentration(3).Caption = "Influent Concentration (" & Chr$(181) & "g/L)"
    'frmPTADScreen2!lblDesignConcentration(4).Caption = "Treatment Objective (" & Chr$(181) & "g/L)"
    'frmPTADScreen2!lblDesignConcentration(5).Caption = "Effluent Concentration (" & Chr$(181) & "g/L)"
    'frmPTADScreen2!lblDesignConcentration(6).Caption = "Percent Removal"
    'frmPTADScreen2!lblDesignConcentration(7).Caption = "Air Pressure Drop (N/m" & Chr$(178) & "/m)"

End Sub

Sub LabelsSelectPackingPropertiesSI()

    frmSelectPacking!lblPackingProperties(1).Caption = "Nominal Size (m)"
    frmSelectPacking!lblPackingProperties(2).Caption = "Packing Factor (-)"
    frmSelectPacking!lblPackingProperties(3).Caption = "Sp. Surf. Area (m" & Chr$(178) & "/m" & Chr$(179) & ")"
    frmSelectPacking!lblPackingProperties(4).Caption = "Crit. Surf. Tension (N/m)"

End Sub

Sub LabelsShowOndaKLaSI()

    frmShowOndaKLaProperties!lblOndaPropertiesLabel(0).Caption = "Reynold's Number (-)"
    frmShowOndaKLaProperties!lblOndaPropertiesLabel(1).Caption = "Froude Number (-)"
    frmShowOndaKLaProperties!lblOndaPropertiesLabel(2).Caption = "Weber Number (-)"
    frmShowOndaKLaProperties!lblOndaPropertiesLabel(3).Caption = "Packing Wetted Surf. Area (m" & Chr$(178) & "/m" & Chr$(179) & ")"
    frmShowOndaKLaProperties!lblOndaPropertiesLabel(4).Caption = "Liq. Phase M. T. Resistance (sec)"
    frmShowOndaKLaProperties!lblOndaPropertiesLabel(5).Caption = "Gas Phase M. T. Resistance (sec)"
    frmShowOndaKLaProperties!lblOndaPropertiesLabel(6).Caption = "Total Mass Transfer Resistance (sec)"
    frmShowOndaKLaProperties!lblOndaPropertiesLabel(7).Caption = "Liq. Phase M. T. Coefficient (m/sec)"
    frmShowOndaKLaProperties!lblOndaPropertiesLabel(8).Caption = "Gas Phase M. T. Coefficient (m/sec)"
    frmShowOndaKLaProperties!lblOndaPropertiesLabel(9).Caption = "Overall M. T. Coeff. = Onda KLa (1/s)"

End Sub

Sub LabelsShowPackingPropertiesSI()

    frmShowPackingProperties!lblShowPackingPropertesLabel(1).Caption = "Nominal Size (m)"
    frmShowPackingProperties!lblShowPackingPropertesLabel(2).Caption = "Packing Factor (-)"
    frmShowPackingProperties!lblShowPackingPropertesLabel(3).Caption = "Sp. Surf. Area (m" & Chr$(178) & "/m" & Chr$(179) & ")"
    frmShowPackingProperties!lblShowPackingPropertesLabel(4).Caption = "Critical Surface Tension (N/m)"

End Sub

Sub LabelsSurface(UnitsType As Integer)
Dim ThisUnit As Integer

  'Operating Conditions.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = PRESSURE_PA
    Case UNITSTYPE_ENGLISH: ThisUnit = PRESSURE_ATM
  End Select
  Call Populate_Pressure_Units(frmsurface!UnitsOpCond(0), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = TEMPERATURE_C
    Case UNITSTYPE_ENGLISH: ThisUnit = TEMPERATURE_F
  End Select
  Call Populate_Temperature_Units(frmsurface!UnitsOpCond(1), ThisUnit)
  
  'Power Input, P/V.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = POWERPERVOLUME_W_per_M3
    Case UNITSTYPE_ENGLISH: ThisUnit = POWERPERVOLUME_HP_per_FT3
  End Select
  Call Populate_PowerPerVolume_Units(frmsurface!UnitsPowerInput, ThisUnit)
  
  'Oxygen (reference compound).
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = DIFFUSIVITY_M2_per_S
    Case UNITSTYPE_ENGLISH: ThisUnit = DIFFUSIVITY_FT2_per_S
  End Select
  Call Populate_Diffusivity_Units(frmsurface!UnitsOxygenRef(1), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = INVERSETIME_S
    Case UNITSTYPE_ENGLISH: ThisUnit = INVERSETIME_S
  End Select
  Call Populate_InverseTime_Units(frmsurface!UnitsOxygenRef(2), ThisUnit)
  
  'Design Contaminant.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = CONCENTRATION_UG_per_L
    Case UNITSTYPE_ENGLISH: ThisUnit = CONCENTRATION_UG_per_L
  End Select
  Call Populate_Concentration_Units(frmsurface!UnitsDesignContam(0), ThisUnit)
  Call Populate_Concentration_Units(frmsurface!UnitsDesignContam(1), ThisUnit)
  
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = INVERSETIME_S
    Case UNITSTYPE_ENGLISH: ThisUnit = INVERSETIME_S
  End Select
  Call Populate_InverseTime_Units(frmsurface!UnitsDesignContam(3), ThisUnit)
  
  'Flow Parameters.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = FLOW_M3_per_S
    Case UNITSTYPE_ENGLISH: ThisUnit = FLOW_GPM
  End Select
  Call Populate_FlowRate_Units(frmsurface!UnitsFlowParam(0), ThisUnit)
  
  'Tank Parameters.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = TIME_HR
    Case UNITSTYPE_ENGLISH: ThisUnit = TIME_HR
  End Select
  Call Populate_Time_Units(frmsurface!UnitsTankParam(1), ThisUnit)
  Call Populate_Time_Units(frmsurface!UnitsTankParam(2), ThisUnit)

  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = VOLUME_M3
    Case UNITSTYPE_ENGLISH: ThisUnit = VOLUME_FT3
  End Select
  Call Populate_Volume_Units(frmsurface!UnitsTankParam(3), ThisUnit)
  Call Populate_Volume_Units(frmsurface!UnitsTankParam(4), ThisUnit)

  'Concentration Results.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = CONCENTRATION_UG_per_L
    Case UNITSTYPE_ENGLISH: ThisUnit = CONCENTRATION_UG_per_L
  End Select
  Call Populate_Concentration_Units(frmsurface!UnitsConcResults(1), ThisUnit)
  Call Populate_Concentration_Units(frmsurface!UnitsConcResults(3), ThisUnit)
  
  'Power Calculation.
  Select Case UnitsType
    Case UNITSTYPE_SI: ThisUnit = POWER_KW
    Case UNITSTYPE_ENGLISH: ThisUnit = POWER_HP
  End Select
  Call Populate_Power_Units(frmsurface!UnitsPowerCalc(1), ThisUnit)
  Call Populate_Power_Units(frmsurface!UnitsPowerCalc(2), ThisUnit)




    ''for main surface form
    '
    'frmSurface!lblOperatingPressure.Caption = "Pressure (Pa)"
    'frmSurface!lblOperatingTemperature.Caption = "Temperature (C)"
    '
    'frmSurface!lblPowerInputLabel.Caption = "Power Input, P/V (W/m" & Chr$(179) & ")"
    '
    'frmSurface!lblOxygenLabel(1).Caption = "Liquid Diffusivity (m" & Chr$(178) & "/sec)"
    'frmSurface!lblOxygenLabel(2).Caption = "Mass Transfer Coeff. (1/sec)"
    '
    'frmSurface!lblDesignConcentration(0).Caption = "Influent Concentration (" & Chr$(181) & "g/L)"
    'frmSurface!lblDesignConcentration(1).Caption = "Treatment Objective (" & Chr$(181) & "g/L)"
    'frmSurface!lblDesignConcentration(2).Caption = "Desired Percent Removal"
    'frmSurface!lblDesignConcentration(3).Caption = "Mass Transfer Coeff. (1/sec)"
    '
    'frmSurface!lblFlowParametersLabel(0).Caption = "Water Flow Rate (m" & Chr$(179) & "/sec)"
    '
    'frmSurface!lblTankParametersLabel(0).Caption = "No. of Tanks (in series) (-)"
    'frmSurface!lblTankParametersLabel(1).Caption = "Tank Fluid Residence Time (hr)"
    'frmSurface!lblTankParametersLabel(2).Caption = "Total Fluid Residence Time (hr)"
    'frmSurface!lblTankParametersLabel(3).Caption = "Volume of Each Tank (m" & Chr$(179) & ")"
    'frmSurface!lblTankParametersLabel(4).Caption = "Volume of All Tanks (m" & Chr$(179) & ")"
    '
    'frmSurface!lblConcentrationResultsLabel(0).Caption = "Name:"
    'frmSurface!lblConcentrationResultsLabel(1).Caption = "Ci to Tank 1 (" & Chr$(181) & "g/L)"
    'frmSurface!lblConcentrationResultsLabel(3).Caption = "Ce from Last Tank (" & Chr$(181) & "g/L)"
    'frmSurface!lblConcentrationResultsLabel(4).Caption = "Achieved Percent Removal"
    '
    'frmSurface!lblPowerCalculationLabel(0).Caption = "Aerator Motor Efficiency (%)"
    'frmSurface!lblPowerCalculationLabel(1).Caption = "Power Required per Tank (kW)"
    'frmSurface!lblPowerCalculationLabel(2).Caption = "Total Power Required (kW)"
    
End Sub

Sub LabelsWaterPropertiesBubbleSI()

    frmWaterPropertiesBubble!lblAirWaterProperties(0).Caption = "Water Density (kg/m" & Chr$(179) & ")"
    frmWaterPropertiesBubble!lblAirWaterProperties(1).Caption = "Water Viscosity (kg/m/sec)"

End Sub

Sub LabelsWaterPropertiesSurfaceSI()

    frmWaterPropertiesSurface!lblAirWaterProperties(0).Caption = "Water Density (kg/m" & Chr$(179) & ")"
    frmWaterPropertiesSurface!lblAirWaterProperties(1).Caption = "Water Viscosity (kg/m/sec)"

End Sub

Sub xxxLabelsPropContaminantScreen2SI()

    'frmPropContaminantScreen2!lblContaminantProperties(1).Caption = "Molecular Weight (kg/kmol)"
    'frmPropContaminantScreen2!lblContaminantProperties(2).Caption = "Henry's Constant (-)"
    'frmPropContaminantScreen2!lblContaminantProperties(3).Caption = "Molar Volume (m" & Chr$(179) & "/kmol)"
    'frmPropContaminantScreen2!lblContaminantProperties(4).Caption = "Normal Boiling Point (C)"
    'frmPropContaminantScreen2!lblContaminantProperties(5).Caption = "Liquid Diffusivity (m" & Chr$(178) & "/sec)"
    'frmPropContaminantScreen2!lblContaminantProperties(6).Caption = "Gas Diffusivity (m" & Chr$(178) & "/sec)"
    'frmPropContaminantScreen2!lblContaminantProperties(7).Caption = "Influent Conc. (" & Chr$(181) & "g/L)"
    'frmPropContaminantScreen2!lblContaminantProperties(8).Caption = "Treatment Obj. (" & Chr$(181) & "g/L)"
    'frmPropContaminantScreen2!lblContaminantProperties(9).Caption = "Pressure (Pa)"
    'frmPropContaminantScreen2!lblContaminantProperties(10).Caption = "Temperature (C)"

End Sub

Attribute VB_Name = "LastFewMod"
Option Explicit


Type LastFewFilesType
  WhichApp As Integer
  WhichForm As Integer
  MenuIDNum_LastFewStartsAt As Integer
  MenuIDNum_FinalSeparator As Integer
  FileNames(1 To 4) As String
  INI_VariablePrefix As String
End Type

Global Current_LastFewFilesRec As LastFewFilesType

Global Const LASTFEW_WHICHAPP_STEPP = 1
Global Const LASTFEW_WHICHAPP_ASAP = 2
Global Const LASTFEW_WHICHAPP_ADSIM = 3

Global Const LASTFEW_STEPP_contam_prop_form = 101
Global Const LASTFEW_ASAP_frmPTADScreen1 = 201
Global Const LASTFEW_ASAP_frmPTADScreen2 = 202
Global Const LASTFEW_ASAP_frmBubble_DESIGN = 203
Global Const LASTFEW_ASAP_frmBubble_RATING = 204
Global Const LASTFEW_ASAP_frmSurface_DESIGN = 205
Global Const LASTFEW_ASAP_frmSurface_RATING = 206
Global Const LASTFEW_ADSIM_frmPFPSDM = 301

Sub LastFewFiles_ChangeCaption(MenuItemID As Integer, ChangeTo As String)

  Call LastFewFiles_ChangeSomething(MenuItemID, "c", ChangeTo, 0)

End Sub

Sub LastFewFiles_ChangeSomething(MenuItemID As Integer, ChangeWhat As String, StrParam1 As String, IntParam1 As Integer)
Dim mm As Menu

  Select Case Current_LastFewFilesRec.WhichApp
    'Case LASTFEW_WHICHAPP_STEPP
    '  Select Case Current_LastFewFilesRec.WhichForm
    '    Case LASTFEW_STEPP_contam_prop_form
    '      Set mm = contam_prop_form!mnuFile(MenuItemID)
    '  End Select
    Case LASTFEW_WHICHAPP_ASAP
      Select Case Current_LastFewFilesRec.WhichForm
        Case LASTFEW_ASAP_frmPTADScreen1
          Set mm = frmptadscreen1!mnuFile(MenuItemID)
        Case LASTFEW_ASAP_frmPTADScreen2
          Set mm = frmPTADScreen2!mnuFile(MenuItemID)
        Case LASTFEW_ASAP_frmBubble_DESIGN
          Set mm = frmBubble!mnuFile(MenuItemID)
        Case LASTFEW_ASAP_frmBubble_RATING
          Set mm = frmBubble!mnuFile(MenuItemID)
        Case LASTFEW_ASAP_frmSurface_DESIGN
          Set mm = frmsurface!mnuFile(MenuItemID)
        Case LASTFEW_ASAP_frmSurface_RATING
          Set mm = frmsurface!mnuFile(MenuItemID)
      End Select
    'Case LASTFEW_WHICHAPP_ADSIM
    '  Select Case Current_LastFewFilesRec.WhichForm
    '    Case LASTFEW_ADSIM_frmPFPSDM
    '      Set mm = frmPFPSDM!mnuFileItem(MenuItemID)
    '  End Select
  End Select

  Call LastFewFiles_ChangeSomething0(mm, ChangeWhat, StrParam1, IntParam1)

End Sub

Sub LastFewFiles_ChangeSomething0(mm As Menu, ChangeWhat As String, StrParam1 As String, IntParam1 As Integer)

  If (UCase$(ChangeWhat) = "C") Then
    mm.Caption = StrParam1
  ElseIf (UCase$(ChangeWhat) = "V") Then
    mm.Visible = IntParam1
  Else
    'Do nothing.
  End If

End Sub

Sub LastFewFiles_ChangeVisibility(MenuItemID As Integer, ChangeTo As Integer)

  Call LastFewFiles_ChangeSomething(MenuItemID, "v", "", ChangeTo)

End Sub

Sub LastFewFiles_DisplayList()
Dim i As Integer
Dim j As Integer
Dim NumVisible As Integer
Dim NewCaption As String

  NumVisible = 0
  For i = 1 To 4
    j = Current_LastFewFilesRec.MenuIDNum_LastFewStartsAt + i - 1
    If (Current_LastFewFilesRec.FileNames(i) <> "") Then
      NewCaption = "&" & Trim$(Str$(i)) & " " & Current_LastFewFilesRec.FileNames(i)
      Call LastFewFiles_ChangeCaption(j, NewCaption)

      'Current_LastFewFilesRec.FileNames(i))
      Call LastFewFiles_ChangeVisibility(j, True)
      NumVisible = NumVisible + 1
    Else
      Call LastFewFiles_ChangeCaption(j, "")
      Call LastFewFiles_ChangeVisibility(j, False)
    End If
  Next i
  
  If (NumVisible = 0) Then
    Call LastFewFiles_ChangeVisibility(Current_LastFewFilesRec.MenuIDNum_FinalSeparator, False)
  Else
    Call LastFewFiles_ChangeVisibility(Current_LastFewFilesRec.MenuIDNum_FinalSeparator, True)
  End If

End Sub

Sub LastFewFiles_InitializeList(WhichApp As Integer, WhichForm As Integer)
Dim i As Integer
Dim thisvarname As String

  Current_LastFewFilesRec.WhichApp = WhichApp
  Current_LastFewFilesRec.WhichForm = WhichForm
  Current_LastFewFilesRec.MenuIDNum_LastFewStartsAt = 191
  Current_LastFewFilesRec.MenuIDNum_FinalSeparator = 199

  Select Case WhichApp
    Case LASTFEW_WHICHAPP_STEPP
      Select Case WhichForm
        Case LASTFEW_STEPP_contam_prop_form
          Current_LastFewFilesRec.INI_VariablePrefix = "MAIN"
      End Select
    Case LASTFEW_WHICHAPP_ASAP
      Select Case WhichForm
        Case LASTFEW_ASAP_frmPTADScreen1
          Current_LastFewFilesRec.INI_VariablePrefix = "PTAD1"
        Case LASTFEW_ASAP_frmPTADScreen2
          Current_LastFewFilesRec.INI_VariablePrefix = "PTAD2"
        Case LASTFEW_ASAP_frmBubble_DESIGN
          Current_LastFewFilesRec.INI_VariablePrefix = "BUB1"
        Case LASTFEW_ASAP_frmBubble_RATING
          Current_LastFewFilesRec.INI_VariablePrefix = "BUB2"
        Case LASTFEW_ASAP_frmSurface_DESIGN
          Current_LastFewFilesRec.INI_VariablePrefix = "SUR1"
        Case LASTFEW_ASAP_frmSurface_RATING
          Current_LastFewFilesRec.INI_VariablePrefix = "SUR2"
      End Select
    Case LASTFEW_WHICHAPP_ADSIM
      Select Case WhichForm
        Case LASTFEW_ADSIM_frmPFPSDM
          Current_LastFewFilesRec.INI_VariablePrefix = "MAIN"
      End Select
  End Select

  For i = 1 To 4
    thisvarname = Current_LastFewFilesRec.INI_VariablePrefix & "_OldFile" & Trim$(Str$(i))
    Current_LastFewFilesRec.FileNames(i) = Trim$(INI_GetSetting(thisvarname))
  Next i

  'Update display from internal memory.
  Call LastFewFiles_DisplayList

End Sub

Sub LastFewFiles_MoveFilenameToTop(fn As String)
Dim found As Integer
Dim i As Integer
Dim fn_this As String
Dim thisvarname As String

  found = 0
  For i = 1 To 4
    fn_this = Trim$(Current_LastFewFilesRec.FileNames(i))
    If (fn_this <> "") Then
      If (UCase$(fn_this) = UCase$(fn)) Then
        found = i
        Exit For
      End If
    End If
  Next i

  If (found <> 0) Then
    For i = found - 1 To 1 Step -1
      Current_LastFewFilesRec.FileNames(i + 1) = Current_LastFewFilesRec.FileNames(i)
    Next i
  Else
    For i = 3 To 1 Step -1
      Current_LastFewFilesRec.FileNames(i + 1) = Current_LastFewFilesRec.FileNames(i)
    Next i
  End If
  Current_LastFewFilesRec.FileNames(1) = UCase$(Trim$(fn))

  'Update display from internal memory.
  Call LastFewFiles_DisplayList

  'Update the .INI file.
  For i = 1 To 4
    thisvarname = Current_LastFewFilesRec.INI_VariablePrefix & "_OldFile" & Trim$(Str$(i))
    Call ini_putsetting(thisvarname, UCase$(Trim$(Current_LastFewFilesRec.FileNames(i))))
  Next i

End Sub

Attribute VB_Name = "LaunchFileVia"
Option Explicit

Global Const OSTYPE_WIN95 = 1
Global Const OSTYPE_WINNT = 2

Global Const LAUNCHFILEVIA_IS_DEBUG_MODE_ON = False






Const LaunchFileVia_declarations_end = True


'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaStartMethod_0( _
    fn_Dir As String, _
    fn_File As String, _
    OSTYPE As Integer) As Boolean
Dim RetVal As Integer
Dim CmdLine As String
    
  On Error GoTo err_LaunchFileViaStartMethod_0
  
  If (Trim$(fn_Dir) <> "") Then
    ChDir Trim$(fn_Dir)
  End If
  Select Case OSTYPE
    Case OSTYPE_WIN95:
      CmdLine = "command.com /c start " & Trim$(fn_File)
    Case OSTYPE_WINNT:
      CmdLine = "cmd /c start " & Trim$(fn_File)
  End Select
  If (LAUNCHFILEVIA_IS_DEBUG_MODE_ON) Then
    MsgBox "CmdLine = `" & CmdLine & "`"
  End If
  RetVal = 0 * Shell(CmdLine, 1)
  
  LaunchFileViaStartMethod_0 = True
  Exit Function
    
exit_err_LaunchFileViaStartMethod_0:
  LaunchFileViaStartMethod_0 = False
  Exit Function
err_LaunchFileViaStartMethod_0:
  Resume exit_err_LaunchFileViaStartMethod_0
End Function


'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaExecMethod( _
    fn_Dir As String, _
    fn_File As String) As Boolean
Dim RetVal As Integer
Dim CmdLine As String
    
  On Error GoTo err_LaunchFileViaExecMethod
  
  If (Trim$(fn_Dir) <> "") Then
    ChDir Trim$(fn_Dir)
    On Error Resume Next
    ChDrive Trim$(fn_Dir)
    On Error GoTo err_LaunchFileViaExecMethod
  End If
  CmdLine = Trim$(fn_File)
  If (LAUNCHFILEVIA_IS_DEBUG_MODE_ON) Then
    MsgBox "CmdLine = `" & CmdLine & "`"
  End If
  'CmdLine = Dir("*.exe")
  
  RetVal = 0 * Shell(CmdLine, 1)
  
  LaunchFileViaExecMethod = True
  Exit Function
    
exit_err_LaunchFileViaExecMethod:
  LaunchFileViaExecMethod = False
  Exit Function
err_LaunchFileViaExecMethod:
  Resume exit_err_LaunchFileViaExecMethod
End Function


'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaStartMethod( _
    fn_Dir As String, _
    fn_File As String) As Boolean
Dim RetValBool As Boolean
  RetValBool = LaunchFileViaStartMethod_0( _
      Trim$(fn_Dir), _
      Trim$(fn_File), _
      OSTYPE_WINNT)
  If (Not RetValBool) Then
    RetValBool = LaunchFileViaStartMethod_0( _
        Trim$(fn_Dir), _
        Trim$(fn_File), _
        OSTYPE_WIN95)
  End If
  LaunchFileViaStartMethod = RetValBool
End Function


'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFile_General( _
    fn_Dir As String, _
    fn_File As String) As Boolean
Dim RetValBool As Boolean
  If (Right$(Trim$(UCase$(fn_File)), 4) = ".EXE") Or _
      (Right$(Trim$(UCase$(fn_File)), 4) = ".COM") Or _
      (Right$(Trim$(UCase$(fn_File)), 4) = ".BAT") Then
    RetValBool = LaunchFileViaExecMethod(fn_Dir, fn_File)
  Else
    RetValBool = LaunchFileViaStartMethod(fn_Dir, fn_File)
  End If
  LaunchFile_General = RetValBool
End Function




Attribute VB_Name = "LicData"
Option Explicit

Global Const AppProgramKey = "ASAP"
Global Const AppCopyrightYears = "1995-1998"
Global Const AppName = "ASAP"
Global AppWillExpire As Integer     'true/false
Global AppExpireYear As Integer
Global AppExpireMonth As Integer
Global AppExpireDay As Integer
Global Global_fpath_dir_CPAS As String


'Global Const LICFILE_GetInfoProgram = "MTCHK.EXE"
Global Const LICFILE_GetInfoProgram = "CPASCHK.EXE"
Global Const LICFILE_GetInfoProgramParams = "-GET_INFO"

'Global Const LICFILE_LicName = "ETDOT10.LIC"
Global Const LICFILE_LicName = "CPAS.LIC"
'Global Const LICFILE_NewLicInfo = "MTNEWLIC.X"
'Global Const LICFILE_GoodSerialNumber = "OKNUM.X"
'Global Const LICFILE_BadSerialNumber = "BADNUM.X"
Global Const LICFILE_GoodLicenseFile = "GO.X"
Global Const LICFILE_BadLicenseFile = "EXIT.X"

Type LicFile_Data_Type
  'Z_PROGRAMKEY_ADS As String
  'Z_PROGRAMKEY_ASAP As String
  'Z_PROGRAMKEY_STEPP As String
  Z_SERIALNUMBER As String
  Z_USERNAME As String
  Z_USERCOMPANY As String
  Z_PROGRAMKEY As String
  Z_EXPIRATIONDATE As String
  Z_RELEASETYPE As String
  Z_VERSIONCODE As String
  Z_VERSIONTYPE As String
  'ZZ_LASTEXECUTIONDATE As String
  'ZZ_LASTEXECUTIONTIME As String
End Type
Global lfd As LicFile_Data_Type

Function get_expiration_info() As String
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      get_expiration_info = "No Expiration Date (Student Copy)"
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      get_expiration_info = "No Expiration Date (Professional Copy)"
    Case Else:
      get_expiration_info = "Expires on " & Trim$(Str$(AppExpireMonth)) & "/" & Trim$(Str$(AppExpireDay)) & "/" & Trim$(Str$(AppExpireYear))
  End Select
End Function

Function get_program_version_with_build_info() As String
Dim ver As String
Dim capped As String
  capped = LCase$(Trim$(lfd.Z_RELEASETYPE))
  If (Len(capped) >= 1) Then
    Mid$(capped, 1, 1) = UCase$(Mid$(capped, 1, 1))
  End If
  ver = lfd.Z_VERSIONCODE & " (" & capped & ")"
  'ver = ver & Trim$(App.Major) & "."
  'ver = ver & Trim$(App.Minor) & "."
  'ver = ver & Trim$(App.Revision)
  get_program_version_with_build_info = ver
End Function

Sub LicFileData_Read(return_fpath_dir_CPAS As String)
Dim WinDir As String
Dim fn_CPASCHK As String
Dim CmdLine As String
Dim time_start As Double
Dim fn_GoodLicenseFile As String
Dim fn_BadLicenseFile As String
Dim time_elapsed As Double
Dim f As Integer
Dim RetVal As Integer
Dim copy_z_expirationdate As String
Dim temp As String
Dim fn_CPASDIR_INI As String
Dim fpath_dir_CPAS As String

  'GET CPAS DIRECTORY NAME.
  fn_CPASDIR_INI = App.Path & "\CPASDIR.INI"
  If (Not fileexists(fn_CPASDIR_INI)) Then
    'UNABLE TO READ LICENSE FILE DATA.
    GoTo err_Cant_Read_Licensing_Data
  End If
  temp = Trim$(INI_GetSetting00(fn_CPASDIR_INI, "Directory", "CPASDIR"))
  fpath_dir_CPAS = temp
  return_fpath_dir_CPAS = temp

  'CHECK ON LICENSE FILE.
  WinDir = GetWindowsDir()
  'fn_MTCHK = WinDir & "\" & LICFILE_GetInfoProgram
  fn_CPASCHK = fpath_dir_CPAS & "\DBASE\" & LICFILE_GetInfoProgram
  If (fileexists(fn_CPASCHK)) Then
    'THAT'S OKAY.
  Else
    'UNABLE TO READ LICENSE FILE DATA.
    GoTo err_Cant_Read_Licensing_Data
  End If
  CmdLine = fn_CPASCHK & " " & LICFILE_GetInfoProgramParams
  CmdLine = CmdLine & " " & fpath_dir_CPAS
  CmdLine = CmdLine & " " & AppProgramKey
  'fn_GoodLicenseFile = WinDir & "\" & LICFILE_GoodLicenseFile
  'fn_BadLicenseFile = WinDir & "\" & LICFILE_BadLicenseFile
  fn_GoodLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_GoodLicenseFile
  fn_BadLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_BadLicenseFile
  time_start = Timer
  RetVal = 0 * Shell(CmdLine, 1)
  Do While (1 = 1)
    DoEvents
    If (fileexists(fn_GoodLicenseFile)) Then
      'Kill fn_GoodLicenseFile    'DELETED BELOW.
      DoEvents
      Exit Do
    End If
    If (fileexists(fn_BadLicenseFile)) Then
      Kill fn_BadLicenseFile
      DoEvents
      End
    End If
    time_elapsed = Timer - time_start
    If (time_elapsed > 10#) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  Loop

  'READ IN LICENSE FILE INFO.
  f = FreeFile
  Open fn_GoodLicenseFile For Input As #f
  Line Input #f, lfd.Z_SERIALNUMBER
  Line Input #f, lfd.Z_USERNAME
  Line Input #f, lfd.Z_USERCOMPANY
  Line Input #f, lfd.Z_PROGRAMKEY
  Line Input #f, lfd.Z_EXPIRATIONDATE
  Line Input #f, lfd.Z_RELEASETYPE
  Line Input #f, lfd.Z_VERSIONCODE
  Line Input #f, lfd.Z_VERSIONTYPE
  Close #f
  Kill fn_GoodLicenseFile
  
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      AppWillExpire = False
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      AppWillExpire = False
    Case Else:
      AppWillExpire = True
      copy_z_expirationdate = Trim$(UCase$(lfd.Z_EXPIRATIONDATE))
      copy_z_expirationdate = Parser_RemoveCharacters(" ", copy_z_expirationdate)
      If (Parser_GetNumArgs(",", copy_z_expirationdate) = 3) Then
        Call Parser_GetArg(",", copy_z_expirationdate, 1, temp)
        AppExpireMonth = CInt(val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 2, temp)
        AppExpireDay = CInt(val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 3, temp)
        AppExpireYear = CInt(val(temp))
      End If
  End Select
  
  Exit Sub

err_Cant_Read_Licensing_Data:
  MsgBox "Unable to read licensing data.  You may need to re-install the software.", 48, AppName
  End
End Sub

Sub Parser_GetArg(sepchar As String, InLine As String, ArgNum As Integer, retstr As String)
Dim i As Integer
Dim j As Integer
  retstr = ""
  j = 1
  For i = 1 To Len(InLine)
    If (Mid$(InLine, i, 1) = sepchar) Then
      j = j + 1
      If (j > ArgNum) Then Exit For
    Else
      If (j = ArgNum) Then
        retstr = retstr + Mid$(InLine, i, 1)
      End If
    End If
  Next i
End Sub

Function Parser_GetNumArgs(sepchar As String, InLine As String) As Integer
Dim NumArgs As Integer
Dim i As Integer
  NumArgs = 1     'between chr #1 and first separator char.
  For i = 1 To Len(InLine)
    If (Mid$(InLine, i, 1) = sepchar) Then
      NumArgs = NumArgs + 1
    End If
  Next i
  Parser_GetNumArgs = NumArgs
End Function

Function Parser_RemoveCharacters(remove_char As String, InLine As String) As String
Dim retstr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retstr = ""
  For i = 1 To Len(InLine)
    ok_append = True
    thisc = Mid$(InLine, i, 1)
    If (thisc = remove_char) Then ok_append = False
    If (ok_append) Then
      retstr = retstr & thisc
    End If
  Next i
  Parser_RemoveCharacters = retstr
End Function

Function Parser_RemoveDuplicateSeparators(sepchar As String, InLine As String) As String
Dim retstr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retstr = ""
  For i = 1 To Len(InLine)
    ok_append = True
    thisc = Mid$(InLine, i, 1)
    If (i > 1) Then
      If (thisc = sepchar) Then
        If (Right$(retstr, 1) = sepchar) Then
          ok_append = False
        End If
      End If
    End If
    If (ok_append) Then
      retstr = retstr & thisc
    End If
  Next i
  Parser_RemoveDuplicateSeparators = retstr
End Function

'NOTE: THERE IS NO RECURSION CHECKER!  IT IS POSSIBLE
'TO SEND THIS ROUTINE INTO AN INFINITE LOOP WITH
'POORLY CHOSEN PARAMETERS.
Function Parser_ReplaceStrings( _
    InputStr As String, _
    OldStr As String, _
    NewStr As String) As String
'Dim Instr_Result As String
Dim Instr_Result As Integer
Dim WorkingStr As String
Dim Part1 As String
Dim Part2 As String
  WorkingStr = InputStr
  
''temp
'Open "c:\test.out" For Output As #1
'Dim i As Integer
'For i = 1 To Len(WorkingStr)
'  Print #1, Asc(Mid$(WorkingStr, i, 1))
'Next i
'Close #1
'  MsgBox WorkingStr
  
  Do While (1 = 1)
    Instr_Result = InStr(WorkingStr, OldStr)
    If (Instr_Result = 0) Then
      Exit Do
    End If
    If (Instr_Result > 1) Then
      Part1 = Left$(WorkingStr, Instr_Result - 1)
    End If
    If (Instr_Result < Len(WorkingStr) - Len(OldStr) + 1) Then
      Part2 = Right$(WorkingStr, Len(WorkingStr) - Instr_Result - Len(OldStr) + 1)
    End If
    WorkingStr = Part1 & NewStr & Part2
'123456789012
'testingXXout           12-2+1=11       12-8-2+1=3
'testingXXo             10-2+1=9        10-8-2+1=1
'testingXX              9-2+1=8         9-8-2+1=0
'-----------------------------------------------------
'12345678901
'testingXout            12-2+1=11       11-8-1+1=3
'testingXo              10-2+1=9        9-8-1+1=1
'testingX               9-2+1=8         8-8-1+1=0
  Loop
  
'Open "c:\test.out" For Output As #1
'For i = 1 To Len(WorkingStr)
'  Print #1, Asc(Mid$(WorkingStr, i, 1))
'Next i
'Close #1
  
  Parser_ReplaceStrings = WorkingStr
End Function


'Function get_program_version_with_build_info() As String
'Dim ver As String
'Dim capped As String
'  capped = LCase$(Trim$(lfd.Z_RELEASETYPE))
'  If (Len(capped) >= 1) Then
'    Mid$(capped, 1, 1) = UCase$(Mid$(capped, 1, 1))
'  End If
'  ver = lfd.Z_VERSIONCODE & " (" & capped & ")"
'  'ver = ver & Trim$(App.Major) & "."
'  'ver = ver & Trim$(App.Minor) & "."
'  'ver = ver & Trim$(App.Revision)
'  get_program_version_with_build_info = ver
'End Function

Option Explicit

Global Const AppCopyrightYears = "1993-1998"
Global Const AppName = "ASAP"
Global AppWillExpire As Integer     'true/false
Global AppExpireYear As Integer
Global AppExpireMonth As Integer
Global AppExpireDay As Integer




Global Const LICFILE_GetInfoProgram = "MTCHK.EXE"
Global Const LICFILE_GetInfoProgramParams = "-GET_INFO"

Global Const LICFILE_LicName = "ETDOT10.LIC"
'Global Const LICFILE_NewLicInfo = "MTNEWLIC.X"
'Global Const LICFILE_GoodSerialNumber = "OKNUM.X"
'Global Const LICFILE_BadSerialNumber = "BADNUM.X"
Global Const LICFILE_GoodLicenseFile = "GO.X"
Global Const LICFILE_BadLicenseFile = "EXIT.X"

Type LicFile_Data_Type
  Z_EXPIRATIONDATE As String
  'Z_PROGRAMKEY_ADS As String
  'Z_PROGRAMKEY_ASAP As String
  'Z_PROGRAMKEY_STEPP As String
  Z_RELEASETYPE As String
  Z_SERIALNUMBER As String
  Z_USERCOMPANY As String
  Z_USERNAME As String
  Z_VERSIONCODE As String
  Z_VERSIONTYPE As String
  'ZZ_LASTEXECUTIONDATE As String
  'ZZ_LASTEXECUTIONTIME As String
End Type
Global lfd As LicFile_Data_Type

Function get_expiration_info () As String
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("INTERNAL_STUDENT")):
      get_expiration_info = "No Expiration Date (Student Copy)"
    Case Trim$(UCase$("EXTERNAL_WONT_EXPIRE")):
      get_expiration_info = "No Expiration Date (Professional Copy)"
    Case Else:
      get_expiration_info = "Expires on " & Trim$(Str$(AppExpireMonth)) & "/" & Trim$(Str$(AppExpireDay)) & "/" & Trim$(Str$(AppExpireYear))
  End Select
End Function

Function get_program_version_with_build_info () As String
Dim ver As String
Dim capped As String
  capped = LCase$(Trim$(lfd.Z_RELEASETYPE))
  If (Len(capped) >= 1) Then
    Mid$(capped, 1, 1) = UCase$(Mid$(capped, 1, 1))
  End If
  ver = lfd.Z_VERSIONCODE & " (" & capped & ")"
  'ver = ver & Trim$(App.Major) & "."
  'ver = ver & Trim$(App.Minor) & "."
  'ver = ver & Trim$(App.Revision)
  get_program_version_with_build_info = ver
End Function

Sub LicFileData_Read ()
Dim WinDir As String
Dim fn_MTCHK As String
Dim cmdline As String
Dim time_start As Double
Dim fn_GoodLicenseFile As String
Dim fn_BadLicenseFile As String
Dim time_elapsed As Double
Dim f As Integer
Dim retval As Integer
Dim copy_z_expirationdate As String
Dim temp As String

  WinDir = GetWindowsDir()
  fn_MTCHK = WinDir & "\" & LICFILE_GetInfoProgram
  If (fileexists(fn_MTCHK)) Then
    'THAT'S OKAY.
  Else
    'UNABLE TO READ LICENSE FILE DATA.
    GoTo err_Cant_Read_Licensing_Data
  End If
  cmdline = fn_MTCHK & " " & LICFILE_GetInfoProgramParams
  time_start = Timer
  fn_GoodLicenseFile = WinDir & "\" & LICFILE_GoodLicenseFile
  fn_BadLicenseFile = WinDir & "\" & LICFILE_BadLicenseFile
  retval = Shell(cmdline, 1)
  Do While (1 = 1)
    DoEvents
    If (fileexists(fn_GoodLicenseFile)) Then
      'Kill fn_GoodLicenseFile    'DELETED BELOW.
      DoEvents
      Exit Do
    End If
    If (fileexists(fn_BadLicenseFile)) Then
      Kill fn_BadLicenseFile
      DoEvents
      End
    End If
    time_elapsed = Timer - time_start
    If (time_elapsed > 10#) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  Loop

  'READ IN LICENSE FILE INFO.
  f = FreeFile
  Open fn_GoodLicenseFile For Input As #f
  Line Input #f, lfd.Z_EXPIRATIONDATE
  Line Input #f, lfd.Z_RELEASETYPE
  Line Input #f, lfd.Z_SERIALNUMBER
  Line Input #f, lfd.Z_USERCOMPANY
  Line Input #f, lfd.Z_USERNAME
  Line Input #f, lfd.Z_VERSIONCODE
  Line Input #f, lfd.Z_VERSIONTYPE
  Close #f
  Kill fn_GoodLicenseFile
  
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("INTERNAL_STUDENT")):
      AppWillExpire = False
    Case Trim$(UCase$("EXTERNAL_WONT_EXPIRE")):
      AppWillExpire = False
    Case Else:
      AppWillExpire = True
      copy_z_expirationdate = Trim$(UCase$(lfd.Z_EXPIRATIONDATE))
      copy_z_expirationdate = Parser_RemoveCharacters(" ", copy_z_expirationdate)
      If (Parser_GetNumArgs(",", copy_z_expirationdate) = 3) Then
        Call Parser_GetArg(",", copy_z_expirationdate, 1, temp)
        AppExpireMonth = CInt(Val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 2, temp)
        AppExpireDay = CInt(Val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 3, temp)
        AppExpireYear = CInt(Val(temp))
      End If
  End Select
  
  Exit Sub

err_Cant_Read_Licensing_Data:
  MsgBox "Unable to read licensing data.  You may need to re-install the software.", 48, AppName
  End
End Sub

Sub Parser_GetArg (sepchar As String, inline As String, ArgNum As Integer, retStr As String)
Dim i As Integer
Dim j As Integer
  retStr = ""
  j = 1
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      j = j + 1
      If (j > ArgNum) Then Exit For
    Else
      If (j = ArgNum) Then
        retStr = retStr + Mid$(inline, i, 1)
      End If
    End If
  Next i
End Sub

Function Parser_GetNumArgs (sepchar As String, inline As String) As Integer
Dim NumArgs As Integer
Dim i As Integer
  NumArgs = 1     'between chr #1 and first separator char.
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      NumArgs = NumArgs + 1
    End If
  Next i
  Parser_GetNumArgs = NumArgs
End Function

Function Parser_RemoveCharacters (remove_char As String, inline As String) As String
Dim retStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (thisc = remove_char) Then ok_append = False
    If (ok_append) Then
      retStr = retStr & thisc
    End If
  Next i
  Parser_RemoveCharacters = retStr
End Function

Function Parser_RemoveDuplicateSeparators (sepchar As String, inline As String) As String
Dim retStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (i > 1) Then
      If (thisc = sepchar) Then
        If (Right$(retStr, 1) = sepchar) Then
          ok_append = False
        End If
      End If
    End If
    If (ok_append) Then
      retStr = retStr & thisc
    End If
  Next i
  Parser_RemoveDuplicateSeparators = retStr
End Function

Attribute VB_Name = "LicDataMod"
Option Explicit

Global Const AppProgramKey = "ASAP"
Global Const AppCopyrightYears = "1993-1998"
Global Const AppName = "ASAP"
Global AppWillExpire As Integer     'true/false
Global AppExpireYear As Integer
Global AppExpireMonth As Integer
Global AppExpireDay As Integer
Global Global_fpath_dir_CPAS As String

Global Const OSTYPE_WIN95 = 1
Global Const OSTYPE_WINNT = 2
Global Const LAUNCHFILEVIA_IS_DEBUG_MODE_ON = False

'Global Const LICFILE_GetInfoProgram = "MTCHK.EXE"
Global Const LICFILE_GetInfoProgram = "CPASCHK.EXE"
Global Const LICFILE_GetInfoProgramParams = "-GET_INFO"

'Global Const LICFILE_LicName = "ETDOT10.LIC"
Global Const LICFILE_LicName = "CPAS.LIC"
'Global Const LICFILE_NewLicInfo = "MTNEWLIC.X"
'Global Const LICFILE_GoodSerialNumber = "OKNUM.X"
'Global Const LICFILE_BadSerialNumber = "BADNUM.X"
Global Const LICFILE_GoodLicenseFile = "GO.X"
Global Const LICFILE_BadLicenseFile = "EXIT.X"

Type LicFile_Data_Type
  'Z_PROGRAMKEY_ADS As String
  'Z_PROGRAMKEY_ASAP As String
  'Z_PROGRAMKEY_STEPP As String
  Z_SERIALNUMBER As String
  Z_USERNAME As String
  Z_USERCOMPANY As String
  Z_PROGRAMKEY As String
  Z_EXPIRATIONDATE As String
  Z_RELEASETYPE As String
  Z_VERSIONCODE As String
  Z_VERSIONTYPE As String
  'ZZ_LASTEXECUTIONDATE As String
  'ZZ_LASTEXECUTIONTIME As String
End Type
Global lfd As LicFile_Data_Type

Function get_expiration_info() As String
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      get_expiration_info = "No Expiration Date (Student Copy)"
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      get_expiration_info = "No Expiration Date (Professional Copy)"
    Case Else:
      get_expiration_info = "Expires on " & Trim$(Str$(AppExpireMonth)) & "/" & Trim$(Str$(AppExpireDay)) & "/" & Trim$(Str$(AppExpireYear))
  End Select
End Function

Function get_program_version_with_build_info() As String
Dim ver As String
Dim capped As String
  capped = LCase$(Trim$(lfd.Z_RELEASETYPE))
  If (Len(capped) >= 1) Then
    Mid$(capped, 1, 1) = UCase$(Mid$(capped, 1, 1))
  End If
  ver = lfd.Z_VERSIONCODE & " (" & capped & ")"
  'ver = ver & Trim$(App.Major) & "."
  'ver = ver & Trim$(App.Minor) & "."
  'ver = ver & Trim$(App.Revision)
  get_program_version_with_build_info = ver
End Function

'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaStartMethod(fn_Dir As String, fn_File As String) As Integer
Dim RetValBool As Integer
  RetValBool = LaunchFileViaStartMethod_0(Trim$(fn_Dir), Trim$(fn_File), OSTYPE_WINNT)
  If (Not RetValBool) Then
    RetValBool = LaunchFileViaStartMethod_0(Trim$(fn_Dir), Trim$(fn_File), OSTYPE_WIN95)
  End If
  LaunchFileViaStartMethod = RetValBool
End Function

'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaStartMethod_0(fn_Dir As String, fn_File As String, OSTYPE As Integer) As Integer
Dim RetVal As Integer
Dim CmdLine As String
    
  On Error GoTo err_LaunchFileViaStartMethod_0
  
  If (Trim$(fn_Dir) <> "") Then
    ChDir Trim$(fn_Dir)
  End If
  Select Case OSTYPE
    Case OSTYPE_WIN95:
      'CMDLINE = "command.com /c start " & Trim$(fn_File)
      CmdLine = "command.com /c " & Trim$(fn_File)
    Case OSTYPE_WINNT:
      'CMDLINE = "cmd /c start " & Trim$(fn_File)
      CmdLine = "cmd /c " & Trim$(fn_File)
  End Select
  'If (LAUNCHFILEVIA_IS_DEBUG_MODE_ON) Then
    MsgBox "CmdLine = `" & CmdLine & "`"
  'End If
  RetVal = 0 * Shell(CmdLine, 1)
  
  LaunchFileViaStartMethod_0 = True
  Exit Function
    
exit_err_LaunchFileViaStartMethod_0:
  LaunchFileViaStartMethod_0 = False
  Exit Function
err_LaunchFileViaStartMethod_0:
  Resume exit_err_LaunchFileViaStartMethod_0
End Function

Sub LicFileData_Read(return_fpath_dir_CPAS As String)
Dim WinDir As String
Dim fn_CPASCHK As String
Dim CmdLine As String
Dim time_start As Double
Dim fn_GoodLicenseFile As String
Dim fn_BadLicenseFile As String
Dim time_elapsed As Double
Dim f As Integer
Dim RetVal As Integer
Dim copy_z_expirationdate As String
Dim temp As String
Dim fn_CPASDIR_INI As String
Dim fpath_Dir_CPAS As String
Dim AnyErrors As Integer
Dim CMDLINE0 As String
Dim fn_ResultsFile As String
Dim OLD_fpath_Dir_CPAS As String

  'GET CPAS DIRECTORY NAME.
  fn_CPASDIR_INI = App.Path & "\CPASDIR.INI"
  If (Not FileExists(fn_CPASDIR_INI)) Then
    'UNABLE TO READ LICENSE FILE DATA.
    GoTo err_Cant_Read_Licensing_Data
  End If
  temp = Trim$(INI_GetSetting00(fn_CPASDIR_INI, "Directory", "CPASDIR"))
  fpath_Dir_CPAS = temp
  return_fpath_dir_CPAS = temp

  'CONVERT CPAS DIRECTORY PATH TO SHORT-FILENAME CONVENTION (IF NEEDED).
  ChDir App.Path
  ChDrive App.Path
  CMDLINE0 = "fnconv " & fpath_Dir_CPAS
  fn_ResultsFile = "shortp.x"
  If (FileExists(fn_ResultsFile)) Then
    Kill fn_ResultsFile
  End If
  RetVal = 0 * Shell(CMDLINE0, 1)
  time_start = Timer
  Do While (1 = 1)
    DoEvents
    If (FileExists(fn_ResultsFile)) Then
      'Kill fn_ResultsFile    'DELETED BELOW.
      time_start = Timer
      Do While (time_start = Timer)
        DoEvents
      Loop
      DoEvents
      Exit Do
    End If
    time_elapsed = Timer - time_start
    If (time_elapsed > 10#) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  Loop
  f = FreeFile
  OLD_fpath_Dir_CPAS = fpath_Dir_CPAS
  Open fn_ResultsFile For Input As #f
  Line Input #f, fpath_Dir_CPAS
  Close #f
  Kill fn_ResultsFile

  'CHECK ON LICENSE FILE.
  WinDir = GetWindowsDir()
  'fn_MTCHK = WinDir & "\" & LICFILE_GetInfoProgram
  fn_CPASCHK = fpath_Dir_CPAS & "\DBASE\" & LICFILE_GetInfoProgram
  'fn_CPASCHK = LICFILE_GetInfoProgram
  'If (fileexists(fn_CPASCHK)) Then
  '  'THAT'S OKAY.
  'Else
  '  'UNABLE TO READ LICENSE FILE DATA.
  '  GoTo err_Cant_Read_Licensing_Data
  'End If
  'CmdLine = LICFILE_GetInfoProgram & " " & LICFILE_GetInfoProgramParams
  'CmdLine = CmdLine & " " & fpath_dir_CPAS
  'CmdLine = CmdLine & " " & AppProgramKey
  'CMDLINE = fn_CPASCHK & " " & LICFILE_GetInfoProgramParams
  'CMDLINE = CMDLINE & " " & fpath_dir_CPAS
  'CMDLINE = CMDLINE & " " & AppProgramKey
  CmdLine = Chr$(34) & fn_CPASCHK & Chr$(34) & " " & LICFILE_GetInfoProgramParams
  CmdLine = CmdLine & " " & fpath_Dir_CPAS
  CmdLine = CmdLine & " " & AppProgramKey
  CmdLine = CmdLine & " ," & App.Path
  ''''MsgBox CMDLINE
  'fn_GoodLicenseFile = WinDir & "\" & LICFILE_GoodLicenseFile
  'fn_BadLicenseFile = WinDir & "\" & LICFILE_BadLicenseFile
  'fn_GoodLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_GoodLicenseFile
  'fn_BadLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_BadLicenseFile
  fn_GoodLicenseFile = App.Path & "\" & LICFILE_GoodLicenseFile
  fn_BadLicenseFile = App.Path & "\" & LICFILE_BadLicenseFile
  time_start = Timer
  
  On Error Resume Next
  AnyErrors = False
  ChDir fpath_Dir_CPAS & "\DBASE": If (Err <> 0) Then AnyErrors = True
  ChDrive fpath_Dir_CPAS & "\DBASE": If (Err <> 0) Then AnyErrors = True
  ''''MsgBox cmdline
  RetVal = 0 * Shell(CmdLine, 1): If (Err <> 0) Then AnyErrors = True
  On Error GoTo 0
  If (AnyErrors) Then
    If (False = LaunchFileViaStartMethod("", CmdLine)) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  End If
  
  Do While (1 = 1)
    DoEvents
    If (FileExists(fn_GoodLicenseFile)) Then
      'Kill fn_GoodLicenseFile    'DELETED BELOW.
      time_start = Timer
      Do While (time_start = Timer)
        DoEvents
      Loop
      DoEvents
      Exit Do
    End If
    If (FileExists(fn_BadLicenseFile)) Then
      Kill fn_BadLicenseFile
      time_start = Timer
      Do While (time_start = Timer)
        DoEvents
      Loop
      DoEvents
      End
    End If
    time_elapsed = Timer - time_start
    If (time_elapsed > 10#) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  Loop
  ChDir App.Path
  ChDrive App.Path

  'READ IN LICENSE FILE INFO.
  f = FreeFile
  Open fn_GoodLicenseFile For Input As #f
  Line Input #f, lfd.Z_SERIALNUMBER
  Line Input #f, lfd.Z_USERNAME
  Line Input #f, lfd.Z_USERCOMPANY
  Line Input #f, lfd.Z_PROGRAMKEY
  Line Input #f, lfd.Z_EXPIRATIONDATE
  Line Input #f, lfd.Z_RELEASETYPE
  Line Input #f, lfd.Z_VERSIONCODE
  Line Input #f, lfd.Z_VERSIONTYPE
  Close #f
  Kill fn_GoodLicenseFile
  
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      AppWillExpire = False
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      AppWillExpire = False
    Case Else:
      AppWillExpire = True
      copy_z_expirationdate = Trim$(UCase$(lfd.Z_EXPIRATIONDATE))
      copy_z_expirationdate = Parser_RemoveCharacters(" ", copy_z_expirationdate)
      If (Parser_GetNumArgs(",", copy_z_expirationdate) = 3) Then
        Call Parser_GetArg(",", copy_z_expirationdate, 1, temp)
        AppExpireMonth = CInt(val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 2, temp)
        AppExpireDay = CInt(val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 3, temp)
        AppExpireYear = CInt(val(temp))
      End If
  End Select
  
  Exit Sub

err_Cant_Read_Licensing_Data:
  MsgBox "Unable to read licensing data.  You may need to re-install the software.", 48, AppName
  End
End Sub

Sub Parser_GetArg(sepchar As String, inline As String, ArgNum As Integer, retStr As String)
Dim i As Integer
Dim j As Integer
  retStr = ""
  j = 1
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      j = j + 1
      If (j > ArgNum) Then Exit For
    Else
      If (j = ArgNum) Then
        retStr = retStr + Mid$(inline, i, 1)
      End If
    End If
  Next i
End Sub

Function Parser_GetNumArgs(sepchar As String, inline As String) As Integer
Dim NumArgs As Integer
Dim i As Integer
  NumArgs = 1     'between chr #1 and first separator char.
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      NumArgs = NumArgs + 1
    End If
  Next i
  Parser_GetNumArgs = NumArgs
End Function

Function Parser_RemoveCharacters(remove_char As String, inline As String) As String
Dim retStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (thisc = remove_char) Then ok_append = False
    If (ok_append) Then
      retStr = retStr & thisc
    End If
  Next i
  Parser_RemoveCharacters = retStr
End Function

Function Parser_RemoveDuplicateSeparators(sepchar As String, inline As String) As String
Dim retStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (i > 1) Then
      If (thisc = sepchar) Then
        If (Right$(retStr, 1) = sepchar) Then
          ok_append = False
        End If
      End If
    End If
    If (ok_append) Then
      retStr = retStr & thisc
    End If
  Next i
  Parser_RemoveDuplicateSeparators = retStr
End Function


'NOTE: THIS FUNCTION WORKS EQUALLY WELL ON
'EITHER FILES OR DIRECTORIES.
Function File_IsExists(fn As String) As Boolean
Dim Dummy As Long
  On Error GoTo err_File_IsExists
  Dummy = GetAttr(fn)   'TRIGGERS ERROR IF FILE DOES NOT EXIST.
  File_IsExists = True
  Exit Function
exit_err_File_IsExists:
  File_IsExists = False
  Exit Function
err_File_IsExists:
  Resume exit_err_File_IsExists
End Function
Function FileExists0(fn As String) As Boolean
  FileExists0 = File_IsExists(fn)
End Function

Attribute VB_Name = "LicDataMod"
Option Explicit

Global Const AppProgramKey = "ASAP"
Global Const AppCopyrightYears = "1993-1998"
Global Const AppName = "ASAP"
Global AppWillExpire As Integer     'true/false
Global AppExpireYear As Integer
Global AppExpireMonth As Integer
Global AppExpireDay As Integer
Global Global_fpath_dir_CPAS As String

Global Const OSTYPE_WIN95 = 1
Global Const OSTYPE_WINNT = 2
Global Const LAUNCHFILEVIA_IS_DEBUG_MODE_ON = False

'Global Const LICFILE_GetInfoProgram = "MTCHK.EXE"
Global Const LICFILE_GetInfoProgram = "CPASCHK.EXE"
Global Const LICFILE_GetInfoProgramParams = "-GET_INFO"

'Global Const LICFILE_LicName = "ETDOT10.LIC"
Global Const LICFILE_LicName = "CPAS.LIC"
'Global Const LICFILE_NewLicInfo = "MTNEWLIC.X"
'Global Const LICFILE_GoodSerialNumber = "OKNUM.X"
'Global Const LICFILE_BadSerialNumber = "BADNUM.X"
Global Const LICFILE_GoodLicenseFile = "GO.X"
Global Const LICFILE_BadLicenseFile = "EXIT.X"

Type LicFile_Data_Type
  'Z_PROGRAMKEY_ADS As String
  'Z_PROGRAMKEY_ASAP As String
  'Z_PROGRAMKEY_STEPP As String
  Z_SERIALNUMBER As String
  Z_USERNAME As String
  Z_USERCOMPANY As String
  Z_PROGRAMKEY As String
  Z_EXPIRATIONDATE As String
  Z_RELEASETYPE As String
  Z_VERSIONCODE As String
  Z_VERSIONTYPE As String
  'ZZ_LASTEXECUTIONDATE As String
  'ZZ_LASTEXECUTIONTIME As String
End Type
Global lfd As LicFile_Data_Type

Function get_expiration_info() As String
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      get_expiration_info = "No Expiration Date (Student Copy)"
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      get_expiration_info = "No Expiration Date (Professional Copy)"
    Case Else:
      get_expiration_info = "Expires on " & Trim$(Str$(AppExpireMonth)) & "/" & Trim$(Str$(AppExpireDay)) & "/" & Trim$(Str$(AppExpireYear))
  End Select
End Function

Function get_program_version_with_build_info() As String
Dim ver As String
Dim capped As String
  capped = LCase$(Trim$(lfd.Z_RELEASETYPE))
  If (Len(capped) >= 1) Then
    Mid$(capped, 1, 1) = UCase$(Mid$(capped, 1, 1))
  End If
  ver = lfd.Z_VERSIONCODE & " (" & capped & ")"
  'ver = ver & Trim$(App.Major) & "."
  'ver = ver & Trim$(App.Minor) & "."
  'ver = ver & Trim$(App.Revision)
  get_program_version_with_build_info = ver
End Function

'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaStartMethod(fn_Dir As String, fn_File As String) As Integer
Dim RetValBool As Integer
  RetValBool = LaunchFileViaStartMethod_0(Trim$(fn_Dir), Trim$(fn_File), OSTYPE_WINNT)
  If (Not RetValBool) Then
    RetValBool = LaunchFileViaStartMethod_0(Trim$(fn_Dir), Trim$(fn_File), OSTYPE_WIN95)
  End If
  LaunchFileViaStartMethod = RetValBool
End Function

'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaStartMethod_0(fn_Dir As String, fn_File As String, OSTYPE As Integer) As Integer
Dim RetVal As Integer
Dim CmdLine As String
    
  On Error GoTo err_LaunchFileViaStartMethod_0
  
  If (Trim$(fn_Dir) <> "") Then
    ChDir Trim$(fn_Dir)
  End If
  Select Case OSTYPE
    Case OSTYPE_WIN95:
      'CMDLINE = "command.com /c start " & Trim$(fn_File)
      CmdLine = "command.com /c " & Trim$(fn_File)
    Case OSTYPE_WINNT:
      'CMDLINE = "cmd /c start " & Trim$(fn_File)
      CmdLine = "cmd /c " & Trim$(fn_File)
  End Select
  'If (LAUNCHFILEVIA_IS_DEBUG_MODE_ON) Then
    MsgBox "CmdLine = `" & CmdLine & "`"
  'End If
  RetVal = 0 * Shell(CmdLine, 1)
  
  LaunchFileViaStartMethod_0 = True
  Exit Function
    
exit_err_LaunchFileViaStartMethod_0:
  LaunchFileViaStartMethod_0 = False
  Exit Function
err_LaunchFileViaStartMethod_0:
  Resume exit_err_LaunchFileViaStartMethod_0
End Function

Sub LicFileData_Read(return_fpath_dir_CPAS As String)
Dim WinDir As String
Dim fn_CPASCHK As String
Dim CmdLine As String
Dim time_start As Double
Dim fn_GoodLicenseFile As String
Dim fn_BadLicenseFile As String
Dim time_elapsed As Double
Dim f As Integer
Dim RetVal As Integer
Dim copy_z_expirationdate As String
Dim temp As String
Dim fn_CPASDIR_INI As String
Dim fpath_Dir_CPAS As String
Dim AnyErrors As Integer
Dim CMDLINE0 As String
Dim fn_ResultsFile As String
Dim OLD_fpath_Dir_CPAS As String

  'GET CPAS DIRECTORY NAME.
  fn_CPASDIR_INI = App.Path & "\CPASDIR.INI"
  If (Not FileExists(fn_CPASDIR_INI)) Then
    'UNABLE TO READ LICENSE FILE DATA.
    GoTo err_Cant_Read_Licensing_Data
  End If
  temp = Trim$(INI_GetSetting00(fn_CPASDIR_INI, "Directory", "CPASDIR"))
  fpath_Dir_CPAS = temp
  return_fpath_dir_CPAS = temp

  'CONVERT CPAS DIRECTORY PATH TO SHORT-FILENAME CONVENTION (IF NEEDED).
  ChDir App.Path
  ChDrive App.Path
  CMDLINE0 = "fnconv " & fpath_Dir_CPAS
  fn_ResultsFile = "shortp.x"
  If (FileExists(fn_ResultsFile)) Then
    Kill fn_ResultsFile
  End If
  RetVal = 0 * Shell(CMDLINE0, 1)
  time_start = Timer
  Do While (1 = 1)
    DoEvents
    If (FileExists(fn_ResultsFile)) Then
      'Kill fn_ResultsFile    'DELETED BELOW.
      time_start = Timer
      Do While (time_start = Timer)
        DoEvents
      Loop
      DoEvents
      Exit Do
    End If
    time_elapsed = Timer - time_start
    If (time_elapsed > 10#) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  Loop
  f = FreeFile
  OLD_fpath_Dir_CPAS = fpath_Dir_CPAS
  Open fn_ResultsFile For Input As #f
  Line Input #f, fpath_Dir_CPAS
  Close #f
  Kill fn_ResultsFile

  'CHECK ON LICENSE FILE.
  WinDir = GetWindowsDir()
  'fn_MTCHK = WinDir & "\" & LICFILE_GetInfoProgram
  fn_CPASCHK = fpath_Dir_CPAS & "\DBASE\" & LICFILE_GetInfoProgram
  'fn_CPASCHK = LICFILE_GetInfoProgram
  'If (fileexists(fn_CPASCHK)) Then
  '  'THAT'S OKAY.
  'Else
  '  'UNABLE TO READ LICENSE FILE DATA.
  '  GoTo err_Cant_Read_Licensing_Data
  'End If
  'CmdLine = LICFILE_GetInfoProgram & " " & LICFILE_GetInfoProgramParams
  'CmdLine = CmdLine & " " & fpath_dir_CPAS
  'CmdLine = CmdLine & " " & AppProgramKey
  'CMDLINE = fn_CPASCHK & " " & LICFILE_GetInfoProgramParams
  'CMDLINE = CMDLINE & " " & fpath_dir_CPAS
  'CMDLINE = CMDLINE & " " & AppProgramKey
  CmdLine = Chr$(34) & fn_CPASCHK & Chr$(34) & " " & LICFILE_GetInfoProgramParams
  CmdLine = CmdLine & " " & fpath_Dir_CPAS
  CmdLine = CmdLine & " " & AppProgramKey
  CmdLine = CmdLine & " ," & App.Path
  ''''MsgBox CMDLINE
  'fn_GoodLicenseFile = WinDir & "\" & LICFILE_GoodLicenseFile
  'fn_BadLicenseFile = WinDir & "\" & LICFILE_BadLicenseFile
  'fn_GoodLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_GoodLicenseFile
  'fn_BadLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_BadLicenseFile
  fn_GoodLicenseFile = App.Path & "\" & LICFILE_GoodLicenseFile
  fn_BadLicenseFile = App.Path & "\" & LICFILE_BadLicenseFile
  time_start = Timer
  
  On Error Resume Next
  AnyErrors = False
  ChDir fpath_Dir_CPAS & "\DBASE": If (Err <> 0) Then AnyErrors = True
  ChDrive fpath_Dir_CPAS & "\DBASE": If (Err <> 0) Then AnyErrors = True
  ''''MsgBox cmdline
  RetVal = 0 * Shell(CmdLine, 1): If (Err <> 0) Then AnyErrors = True
  On Error GoTo 0
  If (AnyErrors) Then
    If (False = LaunchFileViaStartMethod("", CmdLine)) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  End If
  
  Do While (1 = 1)
    DoEvents
    If (FileExists(fn_GoodLicenseFile)) Then
      'Kill fn_GoodLicenseFile    'DELETED BELOW.
      time_start = Timer
      Do While (time_start = Timer)
        DoEvents
      Loop
      DoEvents
      Exit Do
    End If
    If (FileExists(fn_BadLicenseFile)) Then
      Kill fn_BadLicenseFile
      time_start = Timer
      Do While (time_start = Timer)
        DoEvents
      Loop
      DoEvents
      End
    End If
    time_elapsed = Timer - time_start
    If (time_elapsed > 10#) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  Loop
  ChDir App.Path
  ChDrive App.Path

  'READ IN LICENSE FILE INFO.
  f = FreeFile
  Open fn_GoodLicenseFile For Input As #f
  Line Input #f, lfd.Z_SERIALNUMBER
  Line Input #f, lfd.Z_USERNAME
  Line Input #f, lfd.Z_USERCOMPANY
  Line Input #f, lfd.Z_PROGRAMKEY
  Line Input #f, lfd.Z_EXPIRATIONDATE
  Line Input #f, lfd.Z_RELEASETYPE
  Line Input #f, lfd.Z_VERSIONCODE
  Line Input #f, lfd.Z_VERSIONTYPE
  Close #f
  Kill fn_GoodLicenseFile
  
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      AppWillExpire = False
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      AppWillExpire = False
    Case Else:
      AppWillExpire = True
      copy_z_expirationdate = Trim$(UCase$(lfd.Z_EXPIRATIONDATE))
      copy_z_expirationdate = Parser_RemoveCharacters(" ", copy_z_expirationdate)
      If (Parser_GetNumArgs(",", copy_z_expirationdate) = 3) Then
        Call Parser_GetArg(",", copy_z_expirationdate, 1, temp)
        AppExpireMonth = CInt(val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 2, temp)
        AppExpireDay = CInt(val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 3, temp)
        AppExpireYear = CInt(val(temp))
      End If
  End Select
  
  Exit Sub

err_Cant_Read_Licensing_Data:
  MsgBox "Unable to read licensing data.  You may need to re-install the software.", 48, AppName
  End
End Sub

Sub Parser_GetArg(sepchar As String, inline As String, ArgNum As Integer, retStr As String)
Dim i As Integer
Dim j As Integer
  retStr = ""
  j = 1
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      j = j + 1
      If (j > ArgNum) Then Exit For
    Else
      If (j = ArgNum) Then
        retStr = retStr + Mid$(inline, i, 1)
      End If
    End If
  Next i
End Sub

Function Parser_GetNumArgs(sepchar As String, inline As String) As Integer
Dim NumArgs As Integer
Dim i As Integer
  NumArgs = 1     'between chr #1 and first separator char.
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      NumArgs = NumArgs + 1
    End If
  Next i
  Parser_GetNumArgs = NumArgs
End Function

Function Parser_RemoveCharacters(remove_char As String, inline As String) As String
Dim retStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (thisc = remove_char) Then ok_append = False
    If (ok_append) Then
      retStr = retStr & thisc
    End If
  Next i
  Parser_RemoveCharacters = retStr
End Function

Function Parser_RemoveDuplicateSeparators(sepchar As String, inline As String) As String
Dim retStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (i > 1) Then
      If (thisc = sepchar) Then
        If (Right$(retStr, 1) = sepchar) Then
          ok_append = False
        End If
      End If
    End If
    If (ok_append) Then
      retStr = retStr & thisc
    End If
  Next i
  Parser_RemoveDuplicateSeparators = retStr
End Function


Attribute VB_Name = "MainMod"
Option Explicit


'splash_mode: 0 = Continue/Exit window
'             1 = I Agree/I agree, never show again/Exit window
Global splash_mode As Integer

'splash_button_pressed:
'1 = Continue or I Agree
'2 = I agree, never show again
'3 = Exit
Global splash_button_pressed As Integer

'''''Declare Function GetShortPathName Lib "kernel32" Alias "GetShortPathName" (ByVal lpszLongPath As String, ByVal lpszShortPath As String, ByVal cchBuffer As Long) As Long
''''Declare Function GetShortPathName Lib "c:\winnt\system32\kernel32.dll" Alias "GetShortPathNameA" (ByVal lpszLongPath As String, ByVal lpszShortPath As String, ByVal cchBuffer As Long) As Long

Global MAIN_APP_PATH As String




Const MainMod_declarations_end = True


Function get_program_version_with_build_info_VB4() As String
Dim ver As String
  ver = ver & Trim$(App.Major) & "."
  ver = ver & Trim$(App.Minor) & "."
  ver = ver & Trim$(App.Revision)
  get_program_version_with_build_info_VB4 = ver
End Function


Function frmSplash_Run() As Integer
Dim tpath$
Dim tstr$
Dim must_read_disclaimer As Integer

  '''SET UP INI FILE PATH.
  ''tpath$ = GetWindowsDir() & ProgramIniFile$
  
  'SHOW THE CONTINUE/EXIT FRONT WINDOW.
  splash_mode = 0
  splash_button_pressed = 0
  frmSplash.Show 1
  Select Case splash_button_pressed
    Case 1:         'Hit Continue
      'DO NOTHING.
    Case 3:         'Hit Exit
      End
  End Select
    
  'IS THE DISCLAIMER WINDOW STILL ACTIVE?
  must_read_disclaimer = True
  ''tstr$ = INI_GetSetting0(fn_INI_path, "disclaimer", "has_read_disclaimer")
  'tstr$ = INI_GetSetting0(fn_OldFileList, "disclaimer", "has_read_disclaimer")
  tstr$ = INI_Getsetting("has_seen_disclaimer")
  If (tstr$ = "1") Then
    must_read_disclaimer = False
  End If
  
  If (must_read_disclaimer) Then
    'SHOW THE DISCLAIMER WINDOW.
    splash_mode = 1
    splash_button_pressed = 0
    frmSplash.Show 1
    Select Case splash_button_pressed
      Case 1:         'Hit I Agree
        'DO NOTHING.
      Case 2:         'Hit I agree, never show again
        ''Call ini_putsetting0(fn_INI_path, "disclaimer", "has_read_disclaimer", "1")
        'Call ini_putsetting0(fn_OldFileList, "disclaimer", "has_read_disclaimer", "1")
        Call INI_PutSetting("has_seen_disclaimer", "1")
      Case 3:         'Hit Exit
        End
    End Select
  End If

  frmSplash_Run = True

End Function


Sub ChangeDir_Exes()
  ChDrive MAIN_APP_PATH
  ChDir MAIN_APP_PATH & "\EXES"
End Sub
Sub ChangeDir_Main()
  ChDrive MAIN_APP_PATH
  ChDir MAIN_APP_PATH
End Sub


Sub main()
Dim fn_Misc1 As String
  
  'SET UP MAIN APP PATH VARIABLE.
  If (File_IsExists(App.Path & "\debug_in_vb6.txt")) Then
    'FOR DEBUGGING IN THE VB5 ENVIRONMENT.
    MAIN_APP_PATH = "X:\etdot10\code\asap\vb6"
    ChDrive MAIN_APP_PATH
    ChDir MAIN_APP_PATH
  Else
    'DO NOTHING.
    MAIN_APP_PATH = App.Path
  End If
  
  'VERIFY THAT PATHS ARE PROPERLY SET UP.
  fn_Misc1 = App.Path & "\dbase\misc1.dat"
  If (File_IsExists(fn_Misc1)) Then
    'DO NOTHING; THIS IS OKAY.
  Else
    Call Show_Error("The file `" & fn_Misc1 & "` is missing.  " & _
        "Therefore the software must have been improperly installed.  " & _
        "Recommendation: Check the `Start In` path specified in the " & _
        "program icon, or else perform a re-install of the software.")
    End
  End If

  ''temp
  'ChDir "d:\program files\etdot10\asap"
  'ChDrive "d:\program files\etdot10\asap"
  'Dim RetVal As Long
  'Dim lpszLongPath As String * 120
  'Dim lpszShortPath As String * 120
  'Dim cchBuffer As Long
  'lpszLongPath = "d:\program files\etdot10\asap"
  'RetVal = GetShortPathName(ByVal lpszLongPath, ByVal lpszShortPath, ByVal cchBuffer)
  'End
   
  'READ IN THE LICENSE FILE DATA.
  Call LicFileData_Read(Global_fpath_dir_CPAS)
  
  'MISC INITIALIZATIONS.
  ''''Call ini_initializethisprogram("asap")
  
  '---- Setup helpfiles
  If (fileexists(MAIN_APP_PATH & "\help\asap.hlp")) Then
    App.HelpFile = MAIN_APP_PATH & "\help\asap.hlp"
  End If
  Call ChangeDir_Main
  'ChDrive App.Path
  'ChDir App.Path
  SaveAndLoadPath = App.Path
  
  'Initialize Default Power Variables
  scr1.Power.BlowerEfficiency = 35#
  scr1.Power.PumpEfficiency = 80#
  Scr2.Power.BlowerEfficiency = 35#
  Scr2.Power.PumpEfficiency = 80#
  
  bub.Power.BlowerEfficiency = 35#
  bub.Power.TankWaterDepth = 4#
  bub.Power.NumberOfBlowersinEachTank = 1

  ReadMainPackingDB
  ReadUserPackingDB
  
  NL = Chr$(13) & Chr$(10)

  'LOAD THE SPLASH WINDOW.
  If (frmSplash_Run() = False) Then
    End
  End If
  
  'LOAD THE MAIN WINDOW.
  frmMainMenu.Show
End Sub


'NOTE: THIS FUNCTION WORKS EQUALLY WELL ON
'EITHER FILES OR DIRECTORIES.
Function File_IsExists(fn As String) As Boolean
Dim Dummy As Long
  On Error GoTo err_File_IsExists
  Dummy = GetAttr(fn)   'TRIGGERS ERROR IF FILE DOES NOT EXIST.
  File_IsExists = True
  Exit Function
exit_err_File_IsExists:
  File_IsExists = False
  Exit Function
err_File_IsExists:
  Resume exit_err_File_IsExists
End Function
Function FileExists0(fn As String) As Boolean
  FileExists0 = File_IsExists(fn)
End Function


Sub Launch_ASAP_HLP_File()
Dim fn_This As String
  fn_This = MAIN_APP_PATH & "\help\asap.hlp"
  If (fileexists(fn_This) = False) Then
    Call Show_Message("The file `" & fn_This & "` is missing.")
    Exit Sub
  End If
  Call LaunchFile_General("", fn_This)
  'Call LaunchFile_General("", MAIN_APP_PATH & "\help\asap.hlp")
End Sub

Attribute VB_Name = "MiscMod"
Option Explicit

Global Const POSITIONFORM_CENTER = 0
Global Const POSITIONFORM_UR = 1

Sub CenterThisForm(ThisForm As Form)

  Call PositionThisForm(ThisForm, POSITIONFORM_CENTER)

End Sub

Function GetLogDateTime() As String
Dim s As String
Dim s2 As String
Dim NowDateTime

  NowDateTime = Now
  s = Format$(NowDateTime, "ddd mmm")
  s2 = Format$(NowDateTime, "d")
  If (Len(s2) = 1) Then s2 = " " & s2
  s = s & " " & s2
  s2 = Format$(NowDateTime, "h")
  If (Len(s2) = 1) Then s2 = " " & s2
  s = s & " " & s2
  s = s & ":" & Format$(NowDateTime, "nn") & ":" & Format$(NowDateTime, "ss")
  s = s & " " & Format$(NowDateTime, "yyyy")

  GetLogDateTime = s

End Function

Function IsFormLoaded(FormToCheck As Form) As Integer
    Dim Y As Integer
    
    For Y = 0 To Forms.Count - 1
        If Forms(Y) Is FormToCheck Then
            IsFormLoaded = True
            Exit Function
        End If
    Next
    IsFormLoaded = False
End Function

Sub PositionAForm(MainForm As Form, ThisForm As Form, Pos As Integer)
Dim x As Long
Dim Y As Long
Dim CORNER_MARGIN_TWIPS As Long

  CORNER_MARGIN_TWIPS = 200

  Select Case Pos
    Case POSITIONFORM_CENTER:
      x = MainForm.Left + (MainForm.Width - ThisForm.Width) / 2
      Y = MainForm.Top + (MainForm.Height - ThisForm.Height) / 2
    Case POSITIONFORM_UR:
      x = MainForm.Left + MainForm.Width - (ThisForm.Width + CORNER_MARGIN_TWIPS)
      Y = MainForm.Top + (MainForm.Height - MainForm.ScaleHeight) + CORNER_MARGIN_TWIPS
  End Select

  ThisForm.Move x, Y

End Sub

Sub PositionThisForm(ThisForm As Form, Pos As Integer)

  ThisForm.WindowState = 0
  If IsFormLoaded(frmptadscreen1) Then
    Call PositionAForm(frmptadscreen1, ThisForm, Pos)
  ElseIf IsFormLoaded(frmPTADScreen2) Then
    Call PositionAForm(frmPTADScreen2, ThisForm, Pos)
  ElseIf IsFormLoaded(frmBubble) Then
    Call PositionAForm(frmBubble, ThisForm, Pos)
  ElseIf IsFormLoaded(frmsurface) Then
    Call PositionAForm(frmsurface, ThisForm, Pos)
  End If

End Sub

Sub system_log(info As String)
  'Call System_Log0("debug.log", info)
End Sub

Sub System_Log0(fn_log As String, info As String)

  Exit Sub

Dim f As Integer
Dim s As String
Dim fn_debug As String

  f = FreeFile
  fn_debug = App.Path & "\" & fn_log
  Open fn_debug For Append As #f
  s = GetLogDateTime()
  Print #f, s & " : " & info
  Close #f
  Kill fn_debug

End Sub

Attribute VB_Name = "MiscUI"
Option Explicit




Const MiscUI_declarations_end = True


'Sub CalcStatus_Set(NewVal As Boolean)
'  If (NewVal) Then
'    Call GenericStatus_Set("Calculating -- please wait.")
'  Else
'    Call GenericStatus_Set("")
'  End If
'End Sub
'Sub GenericStatus_Set(fn_Text As String)
'  frmMain.sspanel_Status = fn_Text
'End Sub
'Sub DirtyStatus_Set(NewVal As Boolean)
'  If (NewVal) Then
'    frmMain.sspanel_Dirty = "Data Changed"
'    frmMain.sspanel_Dirty.ForeColor = QBColor(12)
'  Else
'    frmMain.sspanel_Dirty = "Unchanged"
'    frmMain.sspanel_Dirty.ForeColor = QBColor(0)
'  End If
'End Sub
'Sub DirtyStatus_Set_Current()
'  Call DirtyStatus_Set(Project_Is_Dirty)
'End Sub
'Sub DirtyStatus_Throw()
'  Project_Is_Dirty = True
'  Call DirtyStatus_Set_Current
'End Sub


Sub frmMain_Close_All_Windows()
Dim ifc%
Dim i%
  On Error Resume Next
  ifc% = Forms.Count - 1
  For i% = ifc% To 0 Step -1
    'If (Forms(i%).name <> "frmMain") And _
       (Forms(i%).name <> "frmProgress") Then
    If (Forms(i%).Name <> "frmMain") Then
      Unload Forms(i%)
    End If
  Next i%
End Sub
Sub Close_All_Windows()
Dim ifc%
Dim i%
  On Error Resume Next
  ifc% = Forms.Count - 1
  For i% = ifc% To 0 Step -1
    'If (Forms(i%).name <> "frmMain") And _
       (Forms(i%).name <> "frmProgress") Then
    'If (Forms(i%).Name <> "frmMain") Then
      Unload Forms(i%)
    'End If
  Next i%
End Sub


Sub CenterOnScreen(frm_to_center As Form)
  frm_to_center.Left = (Screen.Width - frm_to_center.Width) / 2
  frm_to_center.Top = (Screen.Height - frm_to_center.Height) / 2
End Sub
Sub CenterOnForm(frm_to_center As Form, frm As Form)
  frm_to_center.Left = frm.Left + (frm.Width - frm_to_center.Width) / 2
  frm_to_center.Top = frm.Top + (frm.Height - frm_to_center.Height) / 2
End Sub


Sub Show_Message00(msg As String, flags As Integer, WinTitle As String)
  MsgBox msg, flags, WinTitle
End Sub
Sub Show_Message0(msg As String, flags As Integer)
  Call Show_Message00(msg, vbInformation, App.Title)
End Sub
Sub Show_Message(msg As String)
  Call Show_Message0(msg, vbInformation)
End Sub
Sub Show_Error(msg As String)
  Beep
  Call Show_Message0(msg, vbExclamation)
End Sub
Sub Show_Trapped_Error(subname As String)
  Call Show_Error("An error #" & Trim$(Str$(Err)) & _
      " has occurred in routine " & Trim$(subname) & _
      ": `" & Trim$(error$) & "`.  Ending this operation.")
End Sub


Sub Launch_Notepad(fn_edit As String)
Dim CmdLine As String
Dim RetVal As Integer
  CmdLine = "notepad " & fn_edit
  RetVal = 0 * Shell(CmdLine, 3)
End Sub

Attribute VB_Name = "PackSelMod"
Option Explicit

'  THIS MODULE CONTAINS ALL THE DECLARATIONS AND  FUNCTIONS THAT RELATE
' TO THE READING AND WRITING OF THE DIFFERENT PACKING DATABASES.

Type PackingDataType
     Name As String
     Material As String
     source As String
     NominalSize As Double
     PackingFactor As Double
     CriticalSurfaceTension As Double
     SpecificSurfaceArea As Double
     OndaWettedSurfaceArea As Double
     SourceDatabase As Integer
     UserInput As Integer
     ValChanged As Integer
End Type

Global Const MAXDATABASEPACKINGS = 30
Global Const MAXUSERPACKINGS = 60

Global NumPackingsInDatabase As Integer
Global NumUserPackings As Integer

Global DatabasePacking() As PackingDataType

Global UserPacking(1 To MAXUSERPACKINGS) As PackingDataType

Global PackingChanged As Integer  'Whether current packing type is modified

Global Const ORIGINALPACKINGDATABASE = 1
Global Const USERMODIFIEDPACKINGDATABASE = 2

Global PackingDatabaseSource As Integer

Global PackingValuesChanged As Integer 'Whether user has modified any of the values for a selected packing

Global ShownPackingProperties As Integer 'Whether have shown the packing values on PTADScreen1.  Will be used to set the properties only once.

Sub ReadMainPackingDB()
    Dim i%

' Load Packing Parameters from File into Array
    Dim packingname$

packingname$ = "Tri-Packs_No.2"

' DEMO MODE CHANGE ::TACK
    If DemoMode% Then packingname$ = "Tri-Packs_No.1"
' END DEMO CHANGE

frmSelectPacking.cboSelectPacking.Clear

Open App.Path & "\dbase\PACKmain.db" For Binary As #1
Get #1, 1, NumPackingsInDatabase
ReDim DatabasePacking(1 To NumPackingsInDatabase) As PackingDataType

For i% = 1 To NumPackingsInDatabase
    Call ReadPackingDataType(1, DatabasePacking(i%))

    DatabasePacking(i%).SourceDatabase = ORIGINALPACKINGDATABASE
    DatabasePacking(i%).UserInput = False
    DatabasePacking(i%).ValChanged = False
    frmSelectPacking.cboSelectPacking.AddItem DatabasePacking(i%).Name

'  Set Default Packing
    If DatabasePacking(i%).Name = packingname$ Then
        DefaultPacking = DatabasePacking(i%)
    End If
Next i%

Close #1

frmSelectPacking.mnuPackDatabase(0).Checked = True
frmSelectPacking.fraPackingDatabase.Caption = "Original Database"
PackingDatabaseSource = ORIGINALPACKINGDATABASE
frmSelectPacking.mnuPackDatabase(3).Enabled = False
ShownPackingProperties = False
     
End Sub

Sub ReadPackingDataType(fnum As Integer, buf As PackingDataType)
    Dim strsize%

Get #fnum, , buf.NominalSize
Get #fnum, , buf.PackingFactor
Get #fnum, , buf.CriticalSurfaceTension
Get #fnum, , buf.SpecificSurfaceArea
Get #fnum, , buf.OndaWettedSurfaceArea
Get #fnum, , buf.SourceDatabase
Get #fnum, , buf.UserInput
Get #fnum, , buf.ValChanged

Get #fnum, , strsize%
buf.Name = String$(strsize%, " ")
Get #fnum, , buf.Name

Get #fnum, , strsize%
buf.Material = String$(strsize%, " ")
Get #fnum, , buf.Material

Get #fnum, , strsize%
buf.source = String$(strsize%, " ")
Get #fnum, , buf.source


End Sub

Sub ReadUserPackingDB()
    Dim i%

Open App.Path & "\dbase\PACKuser.db" For Binary As #1
Get #1, 1, NumUserPackings

For i% = 1 To NumUserPackings
    Call ReadPackingDataType(1, UserPacking(i%))

    UserPacking(i).SourceDatabase = USERMODIFIEDPACKINGDATABASE
Next i%

Close #1

End Sub

Sub WriteMainPackingDB()
    Dim i%

Open App.Path & "\dbase\PACKmain.db" For Binary As #1
Put #1, 1, NumPackingsInDatabase

For i% = 1 To NumPackingsInDatabase
    Call WritePackingDataType(1, DatabasePacking(i%))
Next i%

Close #1

End Sub

Sub WritePackingDataType(fnum As Integer, buf As PackingDataType)
    Dim strsize%

Put #fnum, , buf.NominalSize
Put #fnum, , buf.PackingFactor
Put #fnum, , buf.CriticalSurfaceTension
Put #fnum, , buf.SpecificSurfaceArea
Put #fnum, , buf.OndaWettedSurfaceArea
Put #fnum, , buf.SourceDatabase
Put #fnum, , buf.UserInput
Put #fnum, , buf.ValChanged

strsize% = Len(buf.Name)
Put #fnum, , strsize%
Put #fnum, , buf.Name

strsize% = Len(buf.Material)
Put #fnum, , strsize%
Put #fnum, , buf.Material

strsize% = Len(buf.source)
Put #fnum, , strsize%
Put #fnum, , buf.source

End Sub

Sub WriteUserPackingDB()
    Dim msg$
    Dim i%, response%

msg$ = ""
msg$ = msg$ + "Would you like to PERMANENTLY update "
msg$ = msg$ + "the changes in the user-modified database "
msg$ = msg$ + "to disk?  This cannot be undone."
response% = MsgBox(msg$, MB_ICONquestion + MB_YESNO, "")
If response% = IDYES Then
    'REDUNDANT, THEREFORE REMOVED, EJO 4/9/98.
    'Response% = MsgBox("This can not be undone.", MB_OKCANCEL + MB_ICONEXCLAMATION, "Warning")
    'If Response% = IDOK Then
        Open App.Path & "\dbase\PACKuser.db" For Binary As #1
        Put #1, 1, NumUserPackings
        
        For i% = 1 To NumUserPackings
            Call WritePackingDataType(1, UserPacking(i%))
        Next i%
    
        Close #1
    'End If
End If



End Sub

Attribute VB_Name = "ScrnTypeMod"
Option Explicit
Type PTADInformationType
     value As Double
     ValChanged As Integer
     UserInput As Integer
End Type

Type ContaminantPropertyType
     Name As String
     Pressure As Double
     Temperature As Double
     AirWaterInterfaceConcentration As Double
     MolecularWeight As PTADInformationType
     HenrysConstant As PTADInformationType
     MolarVolume As PTADInformationType
     NormalBoilingPoint As PTADInformationType
     LiquidDiffusivity As PTADInformationType
     GasDiffusivity As PTADInformationType
     Influent As PTADInformationType
     TreatmentObjective As PTADInformationType
     Effluent As PTADInformationType
End Type

Type OndaMassTransferCoefficientType
     ReynoldsNumber As Double
     FroudeNumber As Double
     WeberNumber As Double
     LiquidPhaseMassTransferResistance As Double
     GasPhaseMassTransferResistance As Double
     TotalMassTransferResistance As Double
     LiquidPhaseMassTransferCoefficient As Double
     GasPhaseMassTransferCoefficient As Double
     OverallMassTransferCoefficient As Double
     ValChanged As Integer
End Type

Type PowerType
     BlowerBrakePower As Double
     PumpBrakePower As Double
     TotalBrakePower As Double
     InletAirTemperature As Double
     BlowerEfficiency As Double
     PumpEfficiency As Double
End Type

Type SCR
     Packing As PackingDataType
     
     NumChemical As Long
     Contaminant(0 To MAXCHEMICAL) As ContaminantPropertyType
     DesignContaminant As ContaminantPropertyType
     
     Onda As OndaMassTransferCoefficientType
     
     ID_OptimalDesignContaminant As Long
     
     Power As PowerType

     TransferUnitHeight As Double
     NumberOfTransferUnits As Double
     Chemical As Integer
     
     OperatingPressure As PTADInformationType       'kPa
     operatingtemperature As PTADInformationType    'K
     WaterFlowRate As PTADInformationType           'm^3/s
     WaterDensity As PTADInformationType            '
     WaterViscosity As PTADInformationType          '
     WaterSurfaceTension As PTADInformationType     '
     WaterLoadingRate As PTADInformationType        'kg/m^2-s
     AirDensity As PTADInformationType              '
     AirViscosity As PTADInformationType            '
     AirToWaterRatio As PTADInformationType         '(-)
     AirFlowRate As PTADInformationType             'm^3/s
     AirPressureDrop As PTADInformationType         'Pa/m
     AirLoadingRate As PTADInformationType          'kg/m^2-s
     MinimumAirToWaterRatio As PTADInformationType  '
     MultipleOfMinimumAirToWaterRatio As PTADInformationType
     KLaSafetyFactor As PTADInformationType         '
     DesignMassTransferCoefficient As PTADInformationType
     TowerArea As PTADInformationType               'm^2
     TowerDiameter As PTADInformationType           'm
     TowerHeight As PTADInformationType             'm
     TowerVolume As PTADInformationType             'm^3
     SpecifiedTowerDiameter As PTADInformationType  'm
     SpecifiedTowerHeight As PTADInformationType    'm
End Type

Global SaveAndLoadPath As String

Global ShownScreen1Previously As Integer

Function GetTheFormat(value As Double) As String
   Dim AbsValue As Double

   AbsValue = Abs(value)

   If AbsValue < 0.001 Then
      GetTheFormat = "0.00E+00"
   ElseIf AbsValue < 0.01 Then
      GetTheFormat = "0.00E+00"
   ElseIf AbsValue < 0.1 Then
      GetTheFormat = "0.0000"
   ElseIf AbsValue < 1 Then
      GetTheFormat = "0.000"
   ElseIf AbsValue < 10 Then
      GetTheFormat = "0.00"
   ElseIf AbsValue < 100 Then
      GetTheFormat = "0.0"
   ElseIf AbsValue < 1000 Then
      GetTheFormat = "0"
   Else
      GetTheFormat = "0.00E+00"
   End If

End Function

Attribute VB_Name = "SteppLnkMod"
Option Explicit

'
' THE ONLY UNCOMMENTED CODE IN THIS MODULE
' IS THE FOLLOWING GLOBAL VARIABLE:
'
Global StEPPImportSuccess As Integer



'
'Type StEPPLink_Property
'  Chemical As String
'  Cas As String
'  propname As String
'  units As String
'  val As Double       'If avail=False, val is 0.0E0
'  avail As Integer
'End Type
'
''---- Input variables to StEPP Link
'Global StEPPImportSuccess As Integer
'Global frmStEPPLink_Temperature As Double   'in DegC
'Global frmStEPPLink_Pressure As Double      'in Pa
'Global frmStEPPLink_ClientName As String    'name of client program, e.g. ADSIM
'Global StEPPLink_RequiredProps() As String  'list of strictly required properties
'Global StEPPLink_DontForget As String       'reminder for "Import Success" dialog
'Global StEPPLink_CurrentChemicalNames() As String
'
''---- Output variables from StEPP Link
'Global frmStEPPLink_Success As Integer
'Global StEPPLink_AllProps() As StEPPLink_Property
'Global StEPPLink_FilteredProps() As StEPPLink_Property
'Global StEPPLink_ImportFailed_Name() As String
'Global StEPPLink_ImportFailed_Reason() As String
'Global StEPPLink_ImportSucceeded_Name() As String
'
''---- Internal to StEPP Link
'Global fn_done_waitfile As String           'If this file exists, the StEPP link is complete
'Global fn_properties As String              'If the link was successful, this file contains the imported properties
'Global frmStEPPLink_SawRecreatedWaitfile As Integer   'Internal to StEPP Link
'
''Create a temporary file in the path {use_path}.
''Returns the filename {fn_temp}.
''Note: Does not return the path of the temporary file in {fn_temp}!
'Sub GetTempFilename(use_path As String, fn_temp As String)
'Dim temp As String
'Dim trycount As Integer
'Dim i As Integer
'Dim c As String
'Dim nowtime As String
'
'Dim save_path As String
'Dim f As Integer
'
'  save_path = CurDir$
'  ChDir use_path
'  ChDrive use_path
'
'  nowtime = Time$
'  temp = Left$(Time$, 2) + Mid$(Time$, 4, 2) + Right$(Time$, 2) + ".___"
'  trycount = 0
'  i = 1
'  Do While (1 = 1)
'    If (Dir(temp) = "") Then Exit Do
'    trycount = trycount + 1
'    'if (trycount > 40) then
'    i = i + 1
'    If (i >= 7) Then
'      i = 1
'    End If
'    c = Mid$(temp, i, 1)
'    If ((c >= "0") And (c <= "8")) Then
'      Mid$(temp, i, 1) = Chr$(Asc(c) + 1)
'    ElseIf ((c >= "A") And (c <= "Y")) Then
'      Mid$(temp, i, 1) = Chr$(Asc(c) + 1)
'    ElseIf (c = "9") Then
'      Mid$(temp, i, 1) = "A"
'    ElseIf (c = "Z") Then
'      Mid$(temp, i, 1) = "0"
'    End If
'  Loop
'
'  fn_temp = temp
'
'  f = FreeFile
'  Open fn_temp For Output As #f
'  Close #f
'  ChDir save_path
'  ChDrive save_path
'
'End Sub
'
'Sub StEPPLink_DisplayImportSucceeded()
'Dim num_import As Integer
'Dim num_failed As Integer
'Dim temp As String
'Dim i As Integer
'
'  num_import = UBound(StEPPLink_ImportSucceeded_Name)
'  num_failed = UBound(StEPPLink_ImportFailed_Name)
'
'  If (num_import <> 0) Then
'    temp = "Successfully imported " & Trim$(Str$(num_import)) & " component"
'    If (num_import <> 1) Then temp = temp & "s"
'    temp = temp & " from StEPP:"
'    For i = 1 To num_import
'      temp = temp & NL & "  " & Trim$(StEPPLink_ImportSucceeded_Name(i))
'    Next i
'    temp = temp & NL & "at pressure " & Trim$(Str$(frmStEPPLink_Pressure))
'    temp = temp & " Pa and temperature " & Trim$(Str$(frmStEPPLink_Temperature))
'    temp = temp & " Celcius."
'    temp = temp & NL
'    temp = temp & NL & StEPPLink_DontForget
'  Else
'    temp = "Unable to import the requested component(s)."
'  End If
'  If (num_failed <> 0) Then
'    temp = temp & NL
'    temp = temp & NL & "Failed to import the following " & Trim$(Str$(num_failed)) & " component"
'    If (num_failed <> 1) Then temp = temp & "s"
'    temp = temp & " from StEPP:"
'    For i = 1 To num_failed
'      temp = temp & NL & "  " & Trim$(StEPPLink_ImportFailed_Name(i))
'      temp = temp & " (unavailable properties: " & Trim$(StEPPLink_ImportFailed_Reason(i)) & ")"
'    Next i
'  End If
'  MsgBox temp, MB_ICONINFORMATION, Application_Name
'
'End Sub
'
'Sub StEPPLink_FilterUnimportable()
'Dim i As Integer
'Dim j As Integer
'Dim n As Integer
'Dim ub As Integer
'Dim num_failedimport As Integer
'Dim num_import As Integer
'Dim now_chemical As String
'Dim this_failed As Integer
'Dim this_failed_reason As String
'Dim importable() As Integer
'Dim s As String
'
'  '---- Misc inits
'  num_failedimport = 0
'  num_import = 0
'  now_chemical = ""
'
'  '---- Initialize success/failure arrays
'  ReDim StEPPLink_ImportSucceeded_Name(0 To 0)
'  ReDim StEPPLink_ImportFailed_Name(0 To 0)
'  ReDim StEPPLink_ImportFailed_Reason(0 To 0)
'
'  '---- Create arrays of successful and failed chemicals
'  ub = UBound(StEPPLink_AllProps)
'  For i = 1 To ub + 1
'    'If (i = ub + 1) Then
'    '  now_chemical = ""
'    'End If
'    If (i <> ub + 1) Then
'      s = StEPPLink_AllProps(i).Chemical
'    End If
'    If ((now_chemical <> s) Or (i = ub + 1)) Then
'      If (now_chemical <> "") Then
'        If (this_failed) Then
'          num_failedimport = num_failedimport + 1
'          If (UBound(StEPPLink_ImportFailed_Name) = 0) Then
'            ReDim StEPPLink_ImportFailed_Name(1 To 1)
'            ReDim StEPPLink_ImportFailed_Reason(1 To 1)
'          Else
'            ReDim Preserve StEPPLink_ImportFailed_Name(1 To num_failedimport)
'            ReDim Preserve StEPPLink_ImportFailed_Reason(1 To num_failedimport)
'          End If
'          StEPPLink_ImportFailed_Name(num_failedimport) = now_chemical
'          StEPPLink_ImportFailed_Reason(num_failedimport) = this_failed_reason
'        Else
'          num_import = num_import + 1
'          If (UBound(StEPPLink_ImportSucceeded_Name) = 0) Then
'            ReDim StEPPLink_ImportSucceeded_Name(1 To 1)
'          Else
'            ReDim Preserve StEPPLink_ImportSucceeded_Name(1 To num_import)
'          End If
'          StEPPLink_ImportSucceeded_Name(num_import) = now_chemical
'        End If
'      End If
'      If (i <> ub + 1) Then
'        now_chemical = StEPPLink_AllProps(i).Chemical
'        this_failed = False
'        this_failed_reason = ""
'        '-- Check to see if a chemical by this name already exists
'        For j = 1 To UBound(StEPPLink_CurrentChemicalNames)
'          If (Trim$(UCase$(now_chemical)) = Trim$(UCase$(StEPPLink_CurrentChemicalNames(j)))) Then
'            this_failed = True
'            this_failed_reason = "Component name already exists!"
'            Exit For
'          End If
'        Next j
'      End If
'    End If
'    If (i >= ub + 1) Then Exit For
'
'    If (Not StEPPLink_AllProps(i).avail) Then
'      '-- Check if this is a required property
'      For j = 1 To UBound(StEPPLink_RequiredProps)
'        If (UCase$(StEPPLink_RequiredProps(j)) = UCase$(StEPPLink_AllProps(i).propname)) Then
'          this_failed = True
'          If (Len(this_failed_reason) <> 0) Then this_failed_reason = this_failed_reason & ", "
'          this_failed_reason = this_failed_reason & StEPPLink_RequiredProps(j)
'          Exit For
'        End If
'      Next j
'    End If
'  Next i
'
'  '---- Create array of which properties have been filtered out (un-importable)
'  ReDim importable(1 To UBound(StEPPLink_AllProps))
'  ub = UBound(StEPPLink_AllProps)
'  For i = 1 To ub
'    importable(i) = False
'    For j = 1 To num_import
'      If (UCase$(StEPPLink_AllProps(i).Chemical) = UCase$(StEPPLink_ImportSucceeded_Name(j))) Then
'        importable(i) = True
'        Exit For
'      End If
'    Next j
'  Next i
'
'  '---- Output importable properties to StEPPLink_FilteredProps()
'  n = 0
'  For i = 1 To ub
'    If (importable(i)) Then
'      n = n + 1
'      ReDim Preserve StEPPLink_FilteredProps(1 To n)
'      StEPPLink_FilteredProps(n) = StEPPLink_AllProps(i)
'    End If
'  Next i
'
'End Sub
'
''Note: Returns -1 if the property cannot be found!
'Function StEPPLink_FindProp(chem As String, propname As String) As Integer
'Dim i As Integer
'Dim ub As Integer
'Dim s As String
'
'  ub = UBound(StEPPLink_FilteredProps)
'  For i = 1 To ub
'    s = StEPPLink_FilteredProps(i).Chemical
'    If (UCase$(chem) = UCase$(s)) Then
'      s = StEPPLink_FilteredProps(i).propname
'      If (UCase$(propname) = UCase$(s)) Then
'        StEPPLink_FindProp = i
'        Exit Function
'      End If
'    End If
'  Next i
'
'  StEPPLink_FindProp = -1
'
'End Function
'
'Sub StEPPLink_ImportPropertyFile(fn As String)
'Dim f As Integer
'Dim s1 As String
'Dim s2 As String
'Dim s3 As String
'Dim n As Integer
'Dim now_chemical As String
'Dim now_cas As String
'
'  n = 0
'  f = FreeFile
'  Open fn For Input As #f
'  Do While (1 = 1)
'    If (EOF(f)) Then Exit Do
'    Input #f, s1, s2, s3
'    If (s1 = "END_OF_FILE") Then Exit Do
'    If (UCase$(s1) = "CHEMICAL") Then
'      now_chemical = s2
'      now_cas = s3
'    Else
'      n = n + 1
'      ReDim Preserve StEPPLink_AllProps(1 To n)
'      StEPPLink_AllProps(n).Chemical = now_chemical
'      StEPPLink_AllProps(n).Cas = now_cas
'      StEPPLink_AllProps(n).propname = s1
'      StEPPLink_AllProps(n).units = s2
'      If (UCase$(s3) <> "UNAVAILABLE") Then
'        StEPPLink_AllProps(n).val = CDbl(s3)
'        StEPPLink_AllProps(n).avail = True
'      Else
'        StEPPLink_AllProps(n).val = 0#
'        StEPPLink_AllProps(n).avail = False
'      End If
'    End If
'  Loop
'
'  Close #f
'
'End Sub
'
Attribute VB_Name = "StepType"
Option Explicit


Global Const MAXCHEMICAL = 10    '/* Maximum no. of occurrences of any chemical
                          '                               in the database */
Global Const MAXNAME = 40        '/* Maximum length of a chemical name */
Global Const MAXFORMULA = 14     '/* Maximum length of a chemical formula */

Global designtype As Integer  'ie (surface, bubble)=0,(ptad1)=1 ,(ptad2)=2 for import reasons

Type sourceType
        short As Integer
        long As Integer
End Type

Type temperatureType
        Temperature As Double
End Type

Type temperatureRangeType
        minimumT As Double
        maximumT As Double
End Type

Type VPsuperfundType
        value As Double
        Temperature As Double
End Type

Type informationType
        value As Double
        source As sourceType
        error As Integer
        equation As Integer
        Temperature As Double
End Type

Type databaseType
        database As informationType
End Type

Type unifacType
        unifac As informationType
End Type

Type inputType
        input As informationType
End Type

Type databaseUnifacInputType
        database As informationType
        unifac As informationType
        input As informationType
End Type

Type unifacInputType
        unifac As informationType
        input As informationType
End Type

Type databaseInputType
        database As informationType
        input As informationType
End Type

Type VPintermediary
        value As Double
        source As sourceType
        error As Integer
        equation As Integer
        Temperature As Double
        minimumT As Double
        maximumT As Double
        antoineA As Double
        antoineB As Double
        antoineC As Double
        antoineD As Double
        antoineE As Double
        superfund As VPsuperfundType
End Type

Type vaporPressureType
        database As VPintermediary
        input As informationType
End Type

Type activityCoefficientType
        unifac As informationType
        input As informationType
End Type

Type henrysConstantType
        RTI As informationType
        operatingT As unifacType
        regress As informationType
        fit As unifacType
        database(MAXCHEMICAL) As informationType
        unifac(MAXCHEMICAL) As informationType
        input As informationType
End Type

Type molecularWeightType
        database As informationType
        unifac As informationType
        input As informationType
End Type

Type boilingPointType
        database As informationType
        input As informationType
End Type

Type liquidDensityType
        database As informationType
        unifac As informationType
        input As informationType
End Type

Type molarVolumeType
        operatingT As databaseUnifacInputType
        BoilingPoint As unifacInputType
End Type

Type refractiveIndexType
        database As informationType
        input As informationType
End Type

Type aqueousSolubilityType
        fit As unifacType
        operatingT As unifacType
        database As informationType
        unifac As informationType
        input As informationType
End Type

Type octWaterPartCoeffType
        database As informationType
        unifac As informationType
        input As informationType
End Type

Type liquidDiffusivityType
        polson As informationType
        haydukLaudie As informationType
        wilkeChang As informationType
        input As informationType
End Type

Type gasDiffusivityType
        wilkeLee As informationType
        input As informationType
End Type

Type waterDensityType
        correlation As informationType
        input As informationType
End Type

Type waterViscosityType
        correlation As informationType
        input As informationType
End Type

Type waterSurfaceTensionType
        correlation As informationType
        input As informationType
End Type

Type airDensityType
        correlation As informationType
        input As informationType
End Type

Type airViscosityType
        correlation As informationType
        input As informationType
End Type
                                                                                                 
Type PHPR    'PHPR --> PHysical PRoperties:  structure to hold physical properties
        OperatingPressure As Double
        operatingtemperature As Double
        BinaryInteractionParameterDatabaseChoice As Integer
        VaporPressure As vaporPressureType
        ActivityCoefficient As activityCoefficientType
        HenrysConstant As henrysConstantType
        MolecularWeight As molecularWeightType
        BoilingPoint As boilingPointType
        LiquidDensity As liquidDensityType
        MolarVolume As molarVolumeType
        RefractiveIndex As refractiveIndexType
        AqueousSolubility As aqueousSolubilityType
        OctWaterPartCoeff As octWaterPartCoeffType
        LiquidDiffusivity As liquidDiffusivityType
        GasDiffusivity As gasDiffusivityType
        WaterDensity As waterDensityType
        WaterViscosity As waterViscosityType
        WaterSurfaceTension As waterSurfaceTensionType
        AirDensity As airDensityType
        AirViscosity As airViscosityType
End Type

Type INP     'INP --> structure to read values from database into
        CASnumber As Integer
        '/* place for contaminant name:  left out for now */
        '/* place for chemical formula:  left out for now */
        MolecularWeight As Double
        '/* field for whether molecular weights have been double checked goes here */
        HenrysConstant(MAXCHEMICAL) As Double
        HenrysConstantTemperature(MAXCHEMICAL) As Double
        HenrysConstantSource As Integer
        VaporPressureSuperfund As Double
        VaporPressureSuperfundTemperature As Double
        LiquidDensityEquation As Integer
        LiquidDensityNumberCoefficients As Integer
        LiquidDensityCoefficientA As Double
        LiquidDensityCoefficientB As Double
        LiquidDensityCoefficientC As Double
        LiquidDensityCoefficientD As Double
        LiquidDensityMinimumT As Double
        LiquidDensityMaximumT As Double
        LiquidDensitySource As Integer
        VaporPressureDatabaseEquation As Integer
        VaporPressureNumberCoefficients As Integer
        VaporPressureAntoineA As Double
        VaporPressureAntoineB As Double
        VaporPressureAntoineC As Double
        VaporPressureAntoineD As Double
        VaporPressureAntoineE As Double
        VaporPressureMinimumT As Double
        VaporPressureMaximumT As Double
        VaporPressureSource As Integer
        NumberofRingsinCompound As Integer
        MaximumUnifacGroups As Integer
        MS(10, 10, 2) As Double
        AqueousSolubility As Double
        AqueousSolubilityTemperature As Double
        AqueousSolubilitySource As Integer
        OctWaterPartCoeff As Double
        OctWaterPartCoeffTemperature As Double
        OctWaterPartCoeffSource As Integer
        BoilingPoint As Double
        BoilingPointSource As Integer
        RefractiveIndex As Double
        RefractiveIndexSource As Integer
        operatingtemperature As Double
        NumberofDatabaseHenrysConstants As Integer

End Type
      

Type StrippingContaminantProperties
     Name As String
     MolecularWeight As Double
     HenrysConstant As Double
     MolarVolume As Double
     NormalBoilingPoint As Double
     LiquidDiffusivity As Double
     GasDiffusivity As Double
End Type

Attribute VB_Name = "SurfaceMod"
Option Explicit
Global Const KLA_METHOD_SURFACE_ROBERTS_CORRELATION = 1
Global Const KLA_METHOD_SURFACE_USER_INPUT = 2
Global Const SURFACE_FILEID = "Properties_Surface_Aeration"
Global Const CONTAMINANTS_SURFACE_FILEID = "Contaminants_Surface_Aeration"

Global SurfaceAerationMode As Integer

Type SurfaceInformationType
     Value As Double
     UserInput As Integer
     ValChanged As Integer
End Type

Type SurfaceInformationType2
     Value As Long
     UserInput As Integer
     ValChanged As Integer
End Type

Type OxygenInformationType_Surface
     LiquidDiffusivity As SurfaceInformationType
     KLaMethod As Integer
     MassTransferCoefficient As SurfaceInformationType
End Type

Type SurfaceContaminantPropertyType
     Pressure As Double
     Temperature As Double
     Name As String
     MolecularWeight As SurfaceInformationType
     HenrysConstant As SurfaceInformationType
     MolarVolume As SurfaceInformationType
     LiquidDiffusivity As SurfaceInformationType
     Influent As SurfaceInformationType
     TreatmentObjective As SurfaceInformationType
     Effluent(0 To MAXIMUM_TANKS) As Double
End Type

Type PowerTypeSurface
     AeratorMotorEfficiency As Double
     PowerForEachTank As Double
     TotalPowerForAllTanks As Double
End Type

Type SurfaceType
     OperatingPressure As SurfaceInformationType
     operatingtemperature As SurfaceInformationType
     WaterDensity As SurfaceInformationType
     WaterViscosity As SurfaceInformationType
     PowerInput_PoverV As SurfaceInformationType
     N_for_Finding_KLa As SurfaceInformationType
     kgOVERkl_for_Finding_KLa As SurfaceInformationType
     ContaminantMassTransferCoefficient As SurfaceInformationType
     WaterFlowRate As SurfaceInformationType
     TankHydraulicRetentionTime As SurfaceInformationType
     TotalHydraulicRetentionTime As SurfaceInformationType
     TankVolume As SurfaceInformationType
     TotalTankVolume As SurfaceInformationType
     
     NumberOfTanks As SurfaceInformationType2
     
     CodeForTausAndTankVolumes As Long
     DesiredPercentRemoval As Double
     AchievedPercentRemoval As Double
     
     Power As PowerTypeSurface
     
     Oxygen As OxygenInformationType_Surface
     
     NumChemical As Integer
     Chemical As Integer
     Contaminant(1 To MAXCHEMICAL) As SurfaceContaminantPropertyType
     DesignContaminant As SurfaceContaminantPropertyType
End Type

Global sur As SurfaceType

Global ErrorFlagSur As Long   'Error Flag passed to Sub VOLBUB

Sub CalculateOxygenMTCoeffSurface()

  Call KLAO2SUR(sur.Oxygen.MassTransferCoefficient.Value, sur.PowerInput_PoverV.Value)
  'frmSurface!txtOxygen(2).Text = Format$(sur.Oxygen.MassTransferCoefficient.Value, GetTheFormat(sur.Oxygen.MassTransferCoefficient.Value))
  Call Unitted_NumberUpdate(frmSurface!UnitsOxygenRef(2))
  sur.Oxygen.MassTransferCoefficient.UserInput = False

End Sub

Sub CalculatePowerSurface()
Dim Dummy As Double

  Call PCALCSUR(sur.Power.TotalPowerForAllTanks, sur.Power.PowerForEachTank, sur.PowerInput_PoverV.Value, sur.TotalTankVolume.Value, sur.NumberOfTanks.Value, sur.Power.AeratorMotorEfficiency)
  
  'UPDATED_UNITS.
  'Update Power Calculation | Power Required per Tank.
  'frmSurface!lblPowerCalculation(1).Caption = Format$(sur.Power.PowerForEachTank, GetTheFormat(sur.Power.PowerForEachTank))
  Call Unitted_NumberUpdate(frmSurface!UnitsPowerCalc(1))
 
  'UPDATED_UNITS.
  'Update Power Calculation | Total Power Required.
  'frmSurface!lblPowerCalculation(2).Caption = Format$(sur.Power.TotalPowerForAllTanks, GetTheFormat(sur.Power.TotalPowerForAllTanks))
  Call Unitted_NumberUpdate(frmSurface!UnitsPowerCalc(2))

End Sub

Sub CalculateRetentionTimeSurface()

  Call TAUISURF(sur.TankHydraulicRetentionTime.Value, sur.DesignContaminant.Influent.Value, sur.DesignContaminant.TreatmentObjective.Value, sur.NumberOfTanks.Value, sur.ContaminantMassTransferCoefficient.Value)
  'frmSurface!txtTankParameters(1).Text = Format$(sur.TankHydraulicRetentionTime.Value, GetTheFormat(sur.TankHydraulicRetentionTime.Value))
  Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(1))
  sur.TankHydraulicRetentionTime.UserInput = False

End Sub

Sub CalculateTausAndTankVolumesSurface()

  Call TAUSVOLS(sur.TotalHydraulicRetentionTime.Value, sur.NumberOfTanks.Value, sur.TankHydraulicRetentionTime.Value, sur.TankVolume.Value, sur.TotalTankVolume.Value, sur.WaterFlowRate.Value, sur.CodeForTausAndTankVolumes)

  Select Case sur.CodeForTausAndTankVolumes
    Case 1   'Input Fluid Residence Time of Each Tank
      'frmSurface!txtTankParameters(2).Text = Format$(sur.TotalHydraulicRetentionTime.Value, GetTheFormat(sur.TotalHydraulicRetentionTime.Value))
      'frmSurface!txtTankParameters(3).Text = Format$(sur.TankVolume.Value, GetTheFormat(sur.TankVolume.Value))
      'frmSurface!txtTankParameters(4).Text = Format$(sur.TotalTankVolume.Value, GetTheFormat(sur.TotalTankVolume.Value))
      sur.TotalHydraulicRetentionTime.UserInput = False
      sur.TankVolume.UserInput = False
      sur.TotalTankVolume.UserInput = False
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(2))
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(3))
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(4))
    Case 2   'Input Total Fluid Residence Time
      'frmSurface!txtTankParameters(1).Text = Format$(sur.TankHydraulicRetentionTime.Value, GetTheFormat(sur.TankHydraulicRetentionTime.Value))
      'frmSurface!txtTankParameters(3).Text = Format$(sur.TankVolume.Value, GetTheFormat(sur.TankVolume.Value))
      'frmSurface!txtTankParameters(4).Text = Format$(sur.TotalTankVolume.Value, GetTheFormat(sur.TotalTankVolume.Value))
      sur.TankHydraulicRetentionTime.UserInput = False
      sur.TankVolume.UserInput = False
      sur.TotalTankVolume.UserInput = False
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(1))
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(3))
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(4))
    Case 3   'Input Volume of Each Tank
      'frmSurface!txtTankParameters(1).Text = Format$(sur.TankHydraulicRetentionTime.Value, GetTheFormat(sur.TankHydraulicRetentionTime.Value))
      'frmSurface!txtTankParameters(2).Text = Format$(sur.TotalHydraulicRetentionTime.Value, GetTheFormat(sur.TotalHydraulicRetentionTime.Value))
      'frmSurface!txtTankParameters(4).Text = Format$(sur.TotalTankVolume.Value, GetTheFormat(sur.TotalTankVolume.Value))
      sur.TankHydraulicRetentionTime.UserInput = False
      sur.TotalHydraulicRetentionTime.UserInput = False
      sur.TotalTankVolume.UserInput = False
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(1))
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(2))
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(4))
    Case 4   'Input Total Volume of All Tanks
      'frmSurface!txtTankParameters(1).Text = Format$(sur.TankHydraulicRetentionTime.Value, GetTheFormat(sur.TankHydraulicRetentionTime.Value))
      'frmSurface!txtTankParameters(2).Text = Format$(sur.TotalHydraulicRetentionTime.Value, GetTheFormat(sur.TotalHydraulicRetentionTime.Value))
      'frmSurface!txtTankParameters(3).Text = Format$(sur.TankVolume.Value, GetTheFormat(sur.TankVolume.Value))
      sur.TankHydraulicRetentionTime.UserInput = False
      sur.TotalHydraulicRetentionTime.UserInput = False
      sur.TankVolume.UserInput = False
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(1))
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(2))
      Call Unitted_NumberUpdate(frmSurface!UnitsTankParam(3))
  End Select

End Sub

Sub CalculateWaterPropertiesSurface()
    Dim Pressure As Double
    Dim Temperature As Double
    Dim WaterDensity As Double
    Dim WaterViscosity As Double
    Dim i As Integer
    
    
       Pressure = sur.OperatingPressure.Value
       Temperature = sur.operatingtemperature.Value

       For i = 0 To 1
           If frmWaterPropertiesSurface!chkUpdateValues(i).Value = True Then
              Select Case i
                 Case 0
                    If HaveValue(Temperature) Then
                       Call H2ODENS(WaterDensity, Temperature)
                       sur.WaterDensity.Value = WaterDensity
                       sur.WaterDensity.UserInput = False
                       sur.WaterDensity.ValChanged = True
                       frmWaterPropertiesSurface.txtAirWaterProperties(0).Text = Format$(WaterDensity, "###0.00")
                       frmWaterPropertiesSurface.lblValueSource(0).Caption = "Correlation"
                    End If
                 Case 1
                    If HaveValue(Temperature) Then
                       Call H2OVISC(WaterViscosity, Temperature)
                       sur.WaterViscosity.Value = WaterViscosity
                       sur.WaterViscosity.UserInput = False
                       sur.WaterViscosity.ValChanged = True
                       frmWaterPropertiesSurface.txtAirWaterProperties(1).Text = Format$(WaterViscosity, "0.000E+##")
                       frmWaterPropertiesSurface.lblValueSource(1).Caption = "Correlation"
                    End If
              End Select
          End If
       Next i
    

End Sub

Sub InitializeOxygenMTCoeff_Surface()

    frmSurface!cboOxygen.ListIndex = 1   'User input
    sur.Oxygen.KLaMethod = KLA_METHOD_SURFACE_USER_INPUT
    sur.Oxygen.MassTransferCoefficient.Value = 0.0046
    frmSurface!txtOxygen(2).Text = "0.0046"

End Sub

Sub InitializePressureTemperatureSurface()
    
  '*****************************************************
  '*                                                   *
  '* Initialize Pressure and Temperature to defaults:  *
  '*                                                   *
  '*  Operating Pressure = 1 atm                       *
  '*  Operating Temperature = 10.0 C                   *
  '*                                                   *
  '*****************************************************

  sur.OperatingPressure.Value = 1#
  sur.OperatingPressure.ValChanged = True
  sur.operatingtemperature.Value = 293.15
  sur.operatingtemperature.ValChanged = True

  frmSurface.txtOperatingPressure.Text = "101325.0"
  frmSurface.txtOperatingTemperature.Text = "20.00"

  Call CalculateWaterPropertiesSurface
  Call CalculateOxygenLiquidDiffSurface

End Sub

Sub LoadContaminantListSurface()
    Dim FileID As String, msg As String
    Dim Pressure As Double, Temperature As Double
    Dim NormalBoilingPoint As Double, GasDiffusivity As Double
    Dim i As Integer
    Dim NotSpecifiedAtOperatingTemperature As Integer
    Dim NotSpecifiedAtOperatingPressure As Integer

    Call LoadFile(Filename)
    
    If Filename$ <> "" Then
       FileID = ""
       Open Filename$ For Input As #1
       On Error Resume Next
       Input #1, FileID
       If FileID <> CONTAMINANTS_BUBBLE_FILEID And FileID <> CONTAMINANTS_SURFACE_FILEID And FileID <> CONTAMINANTS_PTAD_FILEID Then
          msg = "Invalid Contaminant File"
          MsgBox msg, 48, "Error"
          Close #1
          Exit Sub
       End If

       'frmListContaminantSurface.ListContaminants.Clear
       frmSurface!cboDesignContaminant.Clear

       i = 0
       NotSpecifiedAtOperatingTemperature = False
       NotSpecifiedAtOperatingPressure = False
       Do Until EOF(1)
          i = i + 1
          If FileID = CONTAMINANTS_BUBBLE_FILEID Or FileID = CONTAMINANTS_SURFACE_FILEID Then
             Input #1, sur.Contaminant(i).Pressure, sur.Contaminant(i).Temperature, sur.Contaminant(i).Name, sur.Contaminant(i).MolecularWeight.Value, sur.Contaminant(i).HenrysConstant.Value, sur.Contaminant(i).MolarVolume.Value, sur.Contaminant(i).LiquidDiffusivity.Value, sur.Contaminant(i).Influent.Value, sur.Contaminant(i).TreatmentObjective.Value
          Else
             Input #1, sur.Contaminant(i).Pressure, sur.Contaminant(i).Temperature, sur.Contaminant(i).Name, sur.Contaminant(i).MolecularWeight.Value, sur.Contaminant(i).HenrysConstant.Value, sur.Contaminant(i).MolarVolume.Value, NormalBoilingPoint, sur.Contaminant(i).LiquidDiffusivity.Value, GasDiffusivity, sur.Contaminant(i).Influent.Value, sur.Contaminant(i).TreatmentObjective.Value
          End If
          'frmListContaminantSurface.ListContaminants.AddItem sur.Contaminant(i).Name
          frmSurface!cboDesignContaminant.AddItem sur.Contaminant(i).Name

          If Not NotSpecifiedAtOperatingTemperature Then
             If Abs(sur.Contaminant(i).Temperature - sur.operatingtemperature.Value) > TOLERANCE Then
                NotSpecifiedAtOperatingTemperature = True
             End If
          End If
          If Not NotSpecifiedAtOperatingPressure Then
             If Abs(sur.Contaminant(i).Pressure - sur.OperatingPressure.Value) > TOLERANCE Then
                NotSpecifiedAtOperatingPressure = True
             End If
          End If

       Loop
       sur.NumChemical = i
          
       Close #1

       'If frmListContaminantSurface.mnuOptionsManipulateContaminant(1).Enabled = False Then
       '   frmListContaminantSurface.mnuOptionsManipulateContaminant(1).Enabled = True
       '   frmListContaminantSurface.mnuOptionsManipulateContaminant(3).Enabled = True
       '   frmListContaminantSurface.mnuOptionsManipulateContaminant(4).Enabled = True
       '   frmListContaminantSurface.mnuOptionsSave.Enabled = True
       '   frmListContaminantSurface.mnuOptionsView.Enabled = True
       'End If

       'frmListContaminantSurface.ListContaminants.Selected(0) = True

       If NotSpecifiedAtOperatingPressure And NotSpecifiedAtOperatingTemperature Then
          MsgBox "For one or more contaminants, the temperature and pressure at which the contaminant properties are specified differs from the operating temperature and pressure.", MB_ICONINFORMATION, "Warning"
       ElseIf NotSpecifiedAtOperatingTemperature Then
          MsgBox "For one or more contaminants, the temperature at which the contaminant properties are specified differs from the operating temperature.", MB_ICONINFORMATION, "Warning"
       ElseIf NotSpecifiedAtOperatingPressure Then
          MsgBox "For one or more contaminants, the pressure at which the contaminant properties are specified differs from the operating pressure.", MB_ICONINFORMATION, "Warning"
       End If

    End If

End Sub

Sub LoadFileSurface(Filename As String)
Dim Ctl As Control
Set Ctl = frmSurface.CommonDialog1

    On Error Resume Next
    'frmSurface!CMDialog1.DefaultExt = "sur"
    'frmSurface!CMDialog1.Filter = "Surface Aeration Files (*.sur)|*.sur"
    'frmSurface!CMDialog1.DialogTitle = "Load Surface Aeration File"
    'frmSurface!CMDialog1.flags = OFN_FILEMUSTEXIST Or OFN_PATHMUSTEXIST
    'frmSurface!CMDialog1.Action = 1
    'Filename$ = frmSurface!CMDialog1.Filename
    Ctl.DefaultExt = "sur"
    Ctl.Filter = "Surface Aeration Files (*.sur)|*.sur"
    Ctl.DialogTitle = "Load Surface Aeration File"
    Ctl.flags = OFN_FILEMUSTEXIST Or OFN_PATHMUSTEXIST
    Ctl.Action = 1
    Filename$ = Ctl.Filename
    If Err = 32755 Then   'Cancel selected by user
       Filename$ = ""
    End If

End Sub

Sub loadsurface(OverrideFilename As String)
Dim FileID As String, msg As String
Dim i As Integer
Dim TransferTestDummy As Integer
Dim CommentDummy As String
Dim SelectedContaminant As Integer
ReDim u(10) As String
Dim xu As rec_Units_frmContaminantPropertyEdit

    If (OverrideFilename <> "") Then
      Filename = OverrideFilename
    Else
      If Filename = "TheDefaultCaseSurface" Then
        If SurfaceAerationMode = DESIGN_MODE Then
          Filename = App.Path & "\dbase\defltdes.sur"
        Else
          Filename = App.Path & "\dbase\defltrat.sur"
        End If
      Else
        Call LoadFileSurface(Filename)
      End If
    End If
    
    If Filename$ <> "" Then
       FileID = ""
       Open Filename$ For Input As #1
       On Error Resume Next
       Input #1, FileID
       If FileID <> SURFACE_FILEID Then
          msg = "Invalid Design File"
          MsgBox msg, 48, "Error"
          Close #1
          Exit Sub
       End If

       'frmListContaminantSurface.ListContaminants.Clear
       frmSurface!cboDesignContaminant.Clear

       Input #1, SurfaceAerationMode, CommentDummy
       If SurfaceAerationMode = DESIGN_MODE Then
          frmSurface.Caption = "Surface Aeration - Design Mode"
          frmSurface!mnuFile(0).Caption = "Switch to &Rating Mode"
       ElseIf SurfaceAerationMode = RATING_MODE Then
          frmSurface.Caption = "Surface Aeration - Rating Mode"
          frmSurface!mnuFile(0).Caption = "Switch to &Design Mode"
       End If

       Input #1, sur.OperatingPressure.Value, CommentDummy
       frmSurface!txtOperatingPressure.Text = Format$(sur.OperatingPressure.Value * 101325# / 1#, "0.00")

       Input #1, sur.operatingtemperature.Value, CommentDummy
       frmSurface!txtOperatingTemperature.Text = Format$(sur.operatingtemperature.Value - 273.15, "0.0")

       Call CalculateWaterPropertiesSurface

       Input #1, sur.PowerInput_PoverV.Value, CommentDummy
       frmSurface!txtPowerInput.Text = Format$(sur.PowerInput_PoverV.Value, GetTheFormat(sur.PowerInput_PoverV.Value))

       Call CalculateOxygenLiquidDiffSurface

       Input #1, sur.Oxygen.KLaMethod, CommentDummy
       If sur.Oxygen.KLaMethod = KLA_METHOD_SURFACE_USER_INPUT Then
          Input #1, sur.Oxygen.MassTransferCoefficient.Value, CommentDummy
          frmSurface!cboOxygen.ListIndex = 1
          frmSurface!txtOxygen(2).Text = Trim$(Str$(sur.Oxygen.MassTransferCoefficient.Value))

       ElseIf sur.Oxygen.KLaMethod = KLA_METHOD_SURFACE_ROBERTS_CORRELATION Then
          frmSurface!cboOxygen.ListIndex = 0
          Call CalculateOxygenMTCoeffSurface
       End If

       Input #1, sur.NumChemical, CommentDummy
       For i = 1 To sur.NumChemical
           Input #1, sur.Contaminant(i).Pressure, sur.Contaminant(i).Temperature, sur.Contaminant(i).Name, sur.Contaminant(i).MolecularWeight.Value, sur.Contaminant(i).HenrysConstant.Value, sur.Contaminant(i).MolarVolume.Value, sur.Contaminant(i).LiquidDiffusivity.Value, sur.Contaminant(i).Influent.Value, sur.Contaminant(i).TreatmentObjective.Value
           'frmListContaminantSurface.ListContaminants.AddItem sur.Contaminant(i).Name
           frmSurface!cboDesignContaminant.AddItem sur.Contaminant(i).Name
       Next i

       Input #1, sur.DesignContaminant.Name, CommentDummy

       Call SetDesignContaminantEnabledSurface(CInt(frmSurface!cboDesignContaminant.ListCount))

       For i = 1 To sur.NumChemical
           If sur.DesignContaminant.Name = sur.Contaminant(i).Name Then
              sur.DesignContaminant = sur.Contaminant(i)
              'frmListContaminantSurface!ListContaminants.Selected(i - 1) = True
              SelectedContaminant = i - 1
              Exit For
           End If
       Next i

       'If frmListContaminantSurface.mnuOptionsManipulateContaminant(1).Enabled = False Then
       '   frmListContaminantSurface.mnuOptionsManipulateContaminant(1).Enabled = True
       '   frmListContaminantSurface.mnuOptionsManipulateContaminant(3).Enabled = True
       '   frmListContaminantSurface.mnuOptionsManipulateContaminant(4).Enabled = True
       '   frmListContaminantSurface.mnuOptionsSave.Enabled = True
       '   frmListContaminantSurface.mnuOptionsView.Enabled = True
       '   frmSurface!mnuFile(4).Enabled = True
       '   frmSurface!mnuFile(5).Enabled = True
       '   frmSurface!mnuOptions(0).Enabled = True
       'End If

       Call CalculateContaminantMTCoeffSurface

       Input #1, sur.WaterFlowRate.Value, CommentDummy
       frmSurface!txtFlowParameters(0).Text = Format$(sur.WaterFlowRate.Value, GetTheFormat(sur.WaterFlowRate.Value))

       Input #1, sur.NumberOfTanks.Value, CommentDummy
       frmSurface!txtTankParameters(0).Text = Format$(sur.NumberOfTanks.Value, "0")

       Input #1, sur.CodeForTausAndTankVolumes, CommentDummy

          Select Case sur.CodeForTausAndTankVolumes
             Case 1   'Input Hydraulic Retention Time for 1 Tank
                Input #1, sur.TankHydraulicRetentionTime.Value, CommentDummy
                frmSurface!txtTankParameters(1).Text = Format$(sur.TankHydraulicRetentionTime.Value, GetTheFormat(sur.TankHydraulicRetentionTime.Value))
                sur.TankHydraulicRetentionTime.UserInput = True
             Case 2   'Input Hydraulic Retention Time for All Tanks
                Input #1, sur.TotalHydraulicRetentionTime.Value, CommentDummy
                frmSurface!txtTankParameters(2).Text = Format$(sur.TotalHydraulicRetentionTime.Value, GetTheFormat(sur.TotalHydraulicRetentionTime.Value))
                sur.TotalHydraulicRetentionTime.UserInput = True
             Case 3   'Input Volume of Each Tank
                Input #1, sur.TankVolume.Value, CommentDummy
                frmSurface!txtTankParameters(3).Text = Format$(sur.TankVolume.Value, GetTheFormat(sur.TankVolume.Value))
                sur.TankVolume.UserInput = True
             Case 4   'Input Volume of All Tanks
                Input #1, sur.TotalTankVolume.Value, CommentDummy
                frmSurface!txtTankParameters(4).Text = Format$(sur.TotalTankVolume.Value, GetTheFormat(sur.TotalTankVolume.Value))
                sur.TotalTankVolume.UserInput = True
          End Select

       Input #1, sur.Power.AeratorMotorEfficiency, CommentDummy
       frmSurface!txtPowerCalculation(0).Text = Format$(sur.Power.AeratorMotorEfficiency, "0.0")

       If SurfaceAerationMode = DESIGN_MODE Then
          sur.CodeForTausAndTankVolumes = 1
          Call CalculateRetentionTimeSurface
          For i = 1 To 4
              frmSurface!txtTankParameters(i).Enabled = False
          Next i
       Else
          For i = 1 To 4
              frmSurface!txtTankParameters(i).Enabled = True
          Next i
       End If

       Call CalculateTausAndTankVolumesSurface
       frmSurface.cboDesignContaminant.ListIndex = SelectedContaminant
       Call CalculatePowerSurface

       'Input the units of this screen.
       Input #1, u(1), u(2)
       Call SetUnits(frmSurface!UnitsOpCond(0), u(1))
       Call SetUnits(frmSurface!UnitsOpCond(1), u(2))
     
       Input #1, u(1)
       Call SetUnits(frmSurface!UnitsPowerInput, u(1))
     
       Input #1, u(1), u(2)
       Call SetUnits(frmSurface!UnitsOxygenRef(1), u(1))
       Call SetUnits(frmSurface!UnitsOxygenRef(2), u(2))
     
       Input #1, u(1), u(2), u(3)
       Call SetUnits(frmSurface!UnitsDesignContam(0), u(1))
       Call SetUnits(frmSurface!UnitsDesignContam(1), u(2))
       Call SetUnits(frmSurface!UnitsDesignContam(3), u(3))
     
       Input #1, u(1)
       Call SetUnits(frmSurface!UnitsFlowParam(0), u(1))
     
       Input #1, u(1), u(2), u(3), u(4)
       Call SetUnits(frmSurface!UnitsTankParam(1), u(1))
       Call SetUnits(frmSurface!UnitsTankParam(2), u(2))
       Call SetUnits(frmSurface!UnitsTankParam(3), u(3))
       Call SetUnits(frmSurface!UnitsTankParam(4), u(4))
     
       Input #1, u(1), u(2)
       Call SetUnits(frmSurface!UnitsConcResults(1), u(1))
       Call SetUnits(frmSurface!UnitsConcResults(3), u(2))
     
       Input #1, u(1), u(2)
       Call SetUnits(frmSurface!UnitsPowerCalc(1), u(1))
       Call SetUnits(frmSurface!UnitsPowerCalc(2), u(2))
     
       'Input the units of frmContaminantPropertyEdit.
       xu = Units_frmContaminantPropertyEdit
       Input #1, xu.UnitsProp(0), xu.UnitsProp(2), xu.UnitsProp(3), xu.UnitsProp(4), xu.UnitsProp(5)
       Input #1, xu.UnitsConc(0), xu.UnitsConc(1)
       Units_frmContaminantPropertyEdit = xu
     
       Close #1

       If Right$(Filename, 12) = "defltdes.sur" Or Right$(Filename, 12) = "defltrat.sur" Then
          frmSurface.Caption = frmSurface.Caption & " (" & "untitled.sur" & ")"
       Else
          frmSurface.Caption = frmSurface.Caption & " (" & Filename & ")"
       End If

    End If


End Sub

Sub CalculateContaminantMTCoeffSurface()
Dim Dummy As Double

  Call KLASURF(sur.ContaminantMassTransferCoefficient.Value, sur.Oxygen.MassTransferCoefficient.Value, sur.DesignContaminant.LiquidDiffusivity.Value, sur.Oxygen.LiquidDiffusivity.Value, sur.N_for_Finding_KLa.Value, sur.kgOVERkl_for_Finding_KLa.Value, sur.DesignContaminant.HenrysConstant.Value)
   
  'UPDATED_UNITS.
  'frmSurface!txtDesignConcentrationValue(3).Text = Format$(sur.ContaminantMassTransferCoefficient.Value, GetTheFormat(sur.ContaminantMassTransferCoefficient.Value))
  Call Unitted_NumberUpdate(frmSurface!UnitsDesignContam(3))

  sur.ContaminantMassTransferCoefficient.UserInput = False

End Sub

Sub CalculateEffluentConcentrationsSurface()
ReDim Effluent(0 To MAXIMUM_TANKS) As Double
Dim i As Integer
Dim SaveOldUnit As Integer
Dim Dummy As Double

  Call SEFFL(Effluent(1), sur.AchievedPercentRemoval, sur.DesignContaminant.Influent.Value, sur.ContaminantMassTransferCoefficient.Value, sur.TankHydraulicRetentionTime.Value, sur.NumberOfTanks.Value)
  For i = 1 To sur.NumberOfTanks.Value
    sur.DesignContaminant.Effluent(i) = Effluent(i)
  Next i
  sur.DesignContaminant.Effluent(0) = sur.DesignContaminant.Influent.Value

  'frmSurface!lblConcentrationResults(3).Caption = Format$(sur.DesignContaminant.Effluent(sur.NumberOfTanks.Value), GetTheFormat(sur.DesignContaminant.Effluent(sur.NumberOfTanks.Value)))
  'Dummy = sur.DesignContaminant.Effluent(sur.NumberOfTanks.Value)
  Call Unitted_NumberUpdate(frmSurface!UnitsConcResults(3))
  
  For i = 1 To sur.NumberOfTanks.Value
    frmSurfaceEffluentConcentrations!lblTankNumber(i).Visible = True
    frmSurfaceEffluentConcentrations!lblLiquidEffluent(i).Visible = True
    frmSurfaceEffluentConcentrations!lblTankNumber(i).Caption = Trim$(Str$(i))
    frmSurfaceEffluentConcentrations!lblLiquidEffluent(i).Caption = Format$(sur.DesignContaminant.Effluent(i), GetTheFormat(sur.DesignContaminant.Effluent(i)))
  Next i
  
  For i = (sur.NumberOfTanks.Value + 1) To MAXIMUM_TANKS
    frmSurfaceEffluentConcentrations!lblTankNumber(i).Visible = False
    frmSurfaceEffluentConcentrations!lblLiquidEffluent(i).Visible = False
  Next i

  i = sur.NumberOfTanks.Value
  frmSurfaceEffluentConcentrations!cmdOK.Top = frmSurfaceEffluentConcentrations!lblTankNumber(i).Top + frmSurfaceEffluentConcentrations!lblTankNumber(i).Height + 300
  frmSurfaceEffluentConcentrations.Height = frmSurfaceEffluentConcentrations!cmdOK.Top + frmSurfaceEffluentConcentrations!cmdOK.Height + 500
  frmSurfaceEffluentConcentrations!cmdOK.Left = frmSurfaceEffluentConcentrations.Width / 2 - frmSurfaceEffluentConcentrations!cmdOK.Width / 2
        
  frmSurface!lblConcentrationResults(4).Caption = Format$(sur.AchievedPercentRemoval, GetTheFormat(sur.AchievedPercentRemoval))

End Sub

Sub CalculateOxygenLiquidDiffSurface()

  Call DIFO2(sur.Oxygen.LiquidDiffusivity.Value, sur.operatingtemperature.Value)
  'frmSurface!txtOxygen(1).Text = Format$(sur.Oxygen.LiquidDiffusivity.Value, GetTheFormat(sur.Oxygen.LiquidDiffusivity.Value))
  Call Unitted_NumberUpdate(frmSurface!UnitsOxygenRef(1))
  sur.Oxygen.LiquidDiffusivity.UserInput = False

End Sub

Sub PrintSurfaceToFile()
Dim i As Integer, j As Integer
Dim xu As rec_Units_frmContaminantPropertyEdit

    ReDim ContaminantMTCoeff(1 To MAXCHEMICAL) As Double
    ReDim DesiredPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim AchievedPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim Effluent(0 To MAXIMUM_TANKS) As Double
    ReDim GasEffluent(1 To MAXIMUM_TANKS) As Double

    xu = Units_frmContaminantPropertyEdit

        Call GetPrintFileName(PrintFileName)
        If PrintFileName$ = "" Then Exit Sub

        Open PrintFileName$ For Output As #1

    Select Case SurfaceAerationMode
       Case DESIGN_MODE

          Print #1, "Surface Aeration - Design Mode"
          Print #1,
          Print #1,
          'Printer.FontUnderline = True
          'Printer.FontSize = 10
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          Print #1,
          'Printer.FontUnderline = False
          'Printer.FontBold = False
          Print #1, "Operating Pressure (" & frmSurface!UnitsOpCond(0) & ")"; Tab(VALUE_TAB); frmSurface!txtOperatingPressure.Text
          Print #1, "Operating Temperature (" & frmSurface!UnitsOpCond(1) & ")"; Tab(VALUE_TAB); frmSurface!txtOperatingTemperature.Text
          Print #1, frmWaterPropertiesSurface!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmWaterPropertiesSurface!txtAirWaterProperties(0).Text
          Print #1, frmWaterPropertiesSurface!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmWaterPropertiesSurface!txtAirWaterProperties(1).Text
          Print #1,
          Print #1, frmSurface!lblPowerInputLabel.Caption & " (" & frmSurface!UnitsPowerInput & ")"; Tab(VALUE_TAB); frmSurface!txtPowerInput.Text
          Print #1,
          Print #1, "Oxygen " & frmSurface!lblOxygenLabel(1).Caption & " (" & frmSurface!UnitsOxygenRef(1) & ")"; Tab(VALUE_TAB); frmSurface!txtOxygen(1).Text
          Print #1, "Method to Find Oxygen KLa"; Tab(VALUE_TAB); frmSurface!cboOxygen.Text
          Print #1, "Oxygen " & frmSurface!lblOxygenLabel(2).Caption & " (" & frmSurface!UnitsOxygenRef(2) & ")"; Tab(VALUE_TAB); frmSurface!txtOxygen(2).Text
          Print #1,
          Print #1, "Design Contaminant:  "; frmSurface!cboDesignContaminant.Text
          Print #1, "Molecular Weight" & " (" & xu.UnitsProp(0) & ")"; Tab(VALUE_TAB); Format$(sur.DesignContaminant.MolecularWeight.Value, "0.00")
          Print #1, "Henry's Constant (-)"; Tab(VALUE_TAB); Format$(sur.DesignContaminant.HenrysConstant.Value, GetTheFormat(sur.DesignContaminant.HenrysConstant.Value))
          Print #1, "Molar Volume" & " (" & xu.UnitsProp(2) & ")"; Tab(VALUE_TAB); Format$(sur.DesignContaminant.MolarVolume.Value, GetTheFormat(sur.DesignContaminant.MolarVolume.Value))
          Print #1, "Liquid Diffusivity" & " (" & xu.UnitsProp(4) & ")"; Tab(VALUE_TAB); Format$(sur.DesignContaminant.LiquidDiffusivity.Value, GetTheFormat(sur.DesignContaminant.LiquidDiffusivity.Value))
          Print #1, frmSurface!lblDesignConcentration(0).Caption & " (" & frmSurface!UnitsDesignContam(0) & ")"; Tab(VALUE_TAB); frmSurface!lblDesignConcentrationValue(0).Caption
          Print #1, frmSurface!lblDesignConcentration(1).Caption & " (" & frmSurface!UnitsDesignContam(1) & ")"; Tab(VALUE_TAB); frmSurface!lblDesignConcentrationValue(1).Caption
          Print #1, frmSurface!lblDesignConcentration(2).Caption & " (%)"; Tab(VALUE_TAB); frmSurface!lblDesignConcentrationValue(2).Caption
          Print #1, frmSurface!lblDesignConcentration(3).Caption & " (" & frmSurface!UnitsDesignContam(3) & ")"; Tab(VALUE_TAB); frmSurface!txtDesignConcentrationValue(3).Text
          Print #1,
          Print #1, frmSurface!lblFlowParametersLabel(0).Caption & " (" & frmSurface!UnitsFlowParam(0) & ")"; Tab(VALUE_TAB); frmSurface!txtFlowParameters(0).Text
          Print #1,
          Print #1, frmSurface!lblTankParametersLabel(0).Caption; Tab(VALUE_TAB); frmSurface!txtTankParameters(0).Text
          Print #1, frmSurface!lblTankParametersLabel(1).Caption & " (" & frmSurface!UnitsTankParam(1) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(1).Text
          Print #1, frmSurface!lblTankParametersLabel(2).Caption & " (" & frmSurface!UnitsTankParam(2) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(2).Text
          Print #1, frmSurface!lblTankParametersLabel(3).Caption & " (" & frmSurface!UnitsTankParam(3) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(3).Text
          Print #1, frmSurface!lblTankParametersLabel(4).Caption & " (" & frmSurface!UnitsTankParam(4) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(4).Text
          Print #1,
          Print #1, "Design Contaminant:  "; frmSurface!lblConcentrationResults(0).Caption
          Print #1, "Liquid Phase Influent Concentration to Tank 1" & " (" & frmSurface!UnitsConcResults(1) & ")"; Tab(VALUE_TAB); frmSurface!lblConcentrationResults(1).Caption
          Print #1, "Liquid Phase Effluent from Last Tank" & " (" & frmSurface!UnitsConcResults(3) & ")"; Tab(VALUE_TAB); frmSurface!lblConcentrationResults(3).Caption
          Print #1, "Achieved Percent Removal (%)"; Tab(VALUE_TAB); frmSurface!lblConcentrationResults(4).Caption
          Print #1,
          Print #1, "Effluent Concentrations from Each Tank in " & Chr$(181) & "g/L:"
          Print #1,
          Print #1, "Tank:"; Tab(LIQUID_EFFLUENT_TAB); "Effluent Conc."
          Print #1,
          For i = 1 To sur.NumberOfTanks.Value
              Print #1, Format$(i, "0"); Tab(LIQUID_EFFLUENT_TAB); Format$(sur.DesignContaminant.Effluent(i), GetTheFormat(sur.DesignContaminant.Effluent(i)))
          Next i
             Print #1,
             Print #1,
          Print #1, "Power Calculation:"
          Print #1,
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          Print #1,
          Print #1, frmSurface!lblPowerCalculationLabel(0).Caption & " (%)"; Tab(VALUE_TAB); frmSurface!txtPowerCalculation(0).Text
          Print #1, frmSurface!lblPowerCalculationLabel(1).Caption & " (" & frmSurface!UnitsPowerCalc(1) & ")"; Tab(VALUE_TAB); frmSurface!lblPowerCalculation(1).Caption
          Print #1, frmSurface!lblPowerCalculationLabel(2).Caption & " (" & frmSurface!UnitsPowerCalc(2) & ")"; Tab(VALUE_TAB); frmSurface!lblPowerCalculation(2).Caption

       Case RATING_MODE
          Print #1, "Surface Aeration - Rating Mode"
          Print #1,
          Print #1,
          'Printer.FontUnderline = True
          'Printer.FontSize = 10
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          Print #1,
          'Printer.FontUnderline = False
          'Printer.FontBold = False
          Print #1, "Operating Pressure (" & frmSurface!UnitsOpCond(0) & ")"; Tab(VALUE_TAB); frmSurface!txtOperatingPressure.Text
          Print #1, "Operating Temperature (" & frmSurface!UnitsOpCond(1) & ")"; Tab(VALUE_TAB); frmSurface!txtOperatingTemperature.Text
          Print #1, frmWaterPropertiesSurface!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmWaterPropertiesSurface!txtAirWaterProperties(0).Text
          Print #1, frmWaterPropertiesSurface!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmWaterPropertiesSurface!txtAirWaterProperties(1).Text
          Print #1,
          Print #1, frmSurface!lblPowerInputLabel.Caption & " (" & frmSurface!UnitsPowerInput & ")"; Tab(VALUE_TAB); frmSurface!txtPowerInput.Text
          Print #1,
          Print #1, "Oxygen " & frmSurface!lblOxygenLabel(1).Caption & " (" & frmSurface!UnitsOxygenRef(1) & ")"; Tab(VALUE_TAB); frmSurface!txtOxygen(1).Text
          Print #1, "Method to Find Oxygen KLa"; Tab(VALUE_TAB); frmSurface!cboOxygen.Text
          Print #1, "Oxygen " & frmSurface!lblOxygenLabel(2).Caption & " (" & frmSurface!UnitsOxygenRef(2) & ")"; Tab(VALUE_TAB); frmSurface!txtOxygen(2).Text
          Print #1,
          Print #1, frmSurface!lblFlowParametersLabel(0).Caption & " (" & frmSurface!UnitsFlowParam(0) & ")"; Tab(VALUE_TAB); frmSurface!txtFlowParameters(0).Text
          Print #1,
          Print #1, frmSurface!lblTankParametersLabel(0).Caption; Tab(VALUE_TAB); frmSurface!txtTankParameters(0).Text
          Print #1, frmSurface!lblTankParametersLabel(1).Caption & " (" & frmSurface!UnitsTankParam(1) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(1).Text
          Print #1, frmSurface!lblTankParametersLabel(2).Caption & " (" & frmSurface!UnitsTankParam(2) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(2).Text
          Print #1, frmSurface!lblTankParametersLabel(3).Caption & " (" & frmSurface!UnitsTankParam(3) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(3).Text
          Print #1, frmSurface!lblTankParametersLabel(4).Caption & " (" & frmSurface!UnitsTankParam(4) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(4).Text
          Print #1,
          Print #1,
          'Printer.FontBold = True
          Print #1, "Power Calculation:"
          'Printer.FontUnderline = True
          Print #1,
          Print #1, "Property:"; Tab(VALUE_TAB); "Value:"
          'Printer.FontBold = False
          'Printer.FontUnderline = False
          Print #1,
          Print #1, frmSurface!lblPowerCalculationLabel(0).Caption & " (%)"; Tab(VALUE_TAB); frmSurface!txtPowerCalculation(0).Text
          Print #1, frmSurface!lblPowerCalculationLabel(1).Caption & " (" & frmSurface!UnitsPowerCalc(1) & ")"; Tab(VALUE_TAB); frmSurface!lblPowerCalculation(1).Caption
          Print #1, frmSurface!lblPowerCalculationLabel(2).Caption & " (" & frmSurface!UnitsPowerCalc(2) & ")"; Tab(VALUE_TAB); frmSurface!lblPowerCalculation(2).Caption
          
          Print #1,
          Print #1,
          Print #1, "Contaminant Glossary:"
          For i = 1 To sur.NumChemical
              Print #1, Format$(i, "0"); " = "; Trim$(sur.Contaminant(i).Name)
          Next i
             Print #1,
             Print #1,
             Print #1,
          Print #1, "Contaminant Properties:"
          Print #1,
         
          Print #1, "Con.:"; Tab(MWT_TAB); "MWT"; Tab(HC_TAB); "HC"; Tab(VB_TAB); "Vb"; Tab(DIFL_TAB); "DIFL"; Tab(MTCOEFF_TAB); "MT Coeff."
          Print #1,
          For i = 1 To sur.NumChemical
              If sur.DesignContaminant.Name = sur.Contaminant(i).Name Then
                 ContaminantMTCoeff(i) = sur.ContaminantMassTransferCoefficient.Value
              Else
                 Call KLASURF(ContaminantMTCoeff(i), sur.Oxygen.MassTransferCoefficient.Value, sur.Contaminant(i).LiquidDiffusivity.Value, sur.Oxygen.LiquidDiffusivity.Value, sur.N_for_Finding_KLa.Value, sur.kgOVERkl_for_Finding_KLa.Value, sur.Contaminant(i).HenrysConstant.Value)
              End If
              Print #1, Format$(i, "0"); Tab(MWT_TAB); Format$(sur.Contaminant(i).MolecularWeight.Value, "0.00"); Tab(HC_TAB); Format$(sur.Contaminant(i).HenrysConstant.Value, GetTheFormat(sur.Contaminant(i).HenrysConstant.Value)); Tab(VB_TAB); Format$(sur.Contaminant(i).MolarVolume.Value, GetTheFormat(sur.Contaminant(i).MolarVolume.Value)); Tab(DIFL_TAB); Format$(sur.Contaminant(i).LiquidDiffusivity.Value, GetTheFormat(sur.Contaminant(i).LiquidDiffusivity.Value)); Tab(MTCOEFF_TAB); Format$(ContaminantMTCoeff(i), GetTheFormat(ContaminantMTCoeff(i)))
          Next i
          Print #1,
         
          Print #1, "Glossary:"
       
          Print #1, "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Print #1, "MWT = Molecular Weight (kg/kmol)"
          Print #1, "HC = Henry's Constant (-)"
          Print #1, "Vb = Molar Volume (m" & Chr$(179) & "/kmol)"
          Print #1, "DIFL = Liquid Diffusivity (m" & Chr$(178) & "/sec)"
          Print #1, "MT Coeff. = Mass Transfer Coeff. (1/sec)"
             Print #1,
             Print #1,
             Print #1,
          Print #1, "Contaminant Concentration Results:"
          Print #1,
         
          Print #1, "Con.:"; Tab(MWT_TAB); "Cinf"; Tab(HC_TAB); "Cto"; Tab(VB_TAB); "De. % Rem."; Tab(DIFL_TAB); "Ceff"; Tab(MTCOEFF_TAB); "Ach. % Rem."
          Print #1,
          For i = 1 To sur.NumChemical
              If sur.DesignContaminant.Name = sur.Contaminant(i).Name Then
                 DesiredPercentRemoval(i) = sur.DesiredPercentRemoval
                 sur.Contaminant(i).Effluent(0) = sur.DesignContaminant.Effluent(0)
                 For j = 1 To sur.NumberOfTanks.Value
                     sur.Contaminant(i).Effluent(j) = sur.DesignContaminant.Effluent(j)
                 Next j
                 AchievedPercentRemoval(i) = sur.AchievedPercentRemoval
              Else
                 Call REMOVBUB(DesiredPercentRemoval(i), sur.Contaminant(i).Influent.Value, sur.Contaminant(i).TreatmentObjective.Value)
                 Effluent(0) = sur.Contaminant(i).Influent.Value
                 Call SEFFL(Effluent(1), AchievedPercentRemoval(i), sur.Contaminant(i).Influent.Value, ContaminantMTCoeff(i), sur.TankHydraulicRetentionTime.Value, sur.NumberOfTanks.Value)
                 sur.Contaminant(i).Effluent(0) = Effluent(0)
                 For j = 0 To sur.NumberOfTanks.Value
                     sur.Contaminant(i).Effluent(j) = Effluent(j)
                 Next j
              End If
              Print #1, Format$(i, "0"); Tab(MWT_TAB); Format$(sur.Contaminant(i).Influent.Value, GetTheFormat(sur.Contaminant(i).Influent.Value)); Tab(HC_TAB); Format$(sur.Contaminant(i).TreatmentObjective.Value, GetTheFormat(sur.Contaminant(i).TreatmentObjective.Value)); Tab(VB_TAB); Format$(DesiredPercentRemoval(i), GetTheFormat(DesiredPercentRemoval(i))); Tab(DIFL_TAB); Format$(sur.Contaminant(i).Effluent(sur.NumberOfTanks.Value), GetTheFormat(sur.Contaminant(i).Effluent(sur.NumberOfTanks.Value))); Tab(MTCOEFF_TAB); Format$(AchievedPercentRemoval(i), GetTheFormat(AchievedPercentRemoval(i)))
          Next i
          Print #1,
        
          Print #1, "Glossary:"
      
          Print #1, "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Print #1, "Cinf = "; "Liquid Phase " & frmSurface!lblDesignConcentration(0).Caption
          Print #1, "Cto = "; frmSurface!lblDesignConcentration(1).Caption
          Print #1, "De. % Rem. = "; frmSurface!lblDesignConcentration(2).Caption
          Print #1, "Ceff = "; "Liquid Phase Effluent from Last Tank (" & Chr$(181) & "g/L)"
          Print #1, "Ach. % Rem. = "; frmSurface!lblConcentrationResultsLabel(4).Caption
             Print #1,
             Print #1,
             Print #1,
          Print #1, "Liquid Phase Effluent Concentrations from Each Tank in " & Chr$(181) & "g/L:"
          Print #1,
          Print #1,
          Print #1, Tab(MWT_TAB); "Contaminant Number:"
          Print #1,
       
          Select Case sur.NumChemical
             Case 1
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"
             Case 2
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"
             Case 3
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"
             Case 4
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"
             Case 5
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"
             Case Else
                Print #1, "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"; Tab(STANTON_TAB); "6:"
          End Select
          Print #1,

          'Print Liquid Phase Influent Concentrations of Each Contaminant
          Print #1, "Cinf";
          For j = 1 To 6
              If sur.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 1
                    Print #1, Tab(MWT_TAB);
                 Case 2
                    Print #1, Tab(HC_TAB);
                 Case 3
                    Print #1, Tab(VB_TAB);
                 Case 4
                    Print #1, Tab(DIFL_TAB);
                 Case 5
                    Print #1, Tab(MTCOEFF_TAB);
                 Case 6
                    Print #1, Tab(STANTON_TAB);
              End Select
              Print #1, Format$(sur.Contaminant(j).Influent.Value, GetTheFormat(sur.Contaminant(j).Influent.Value));
          Next j
          Print #1,

          'Print Liquid Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To sur.NumberOfTanks.Value
              Print #1, Format$(i, "0");
              For j = 1 To 6
                  If sur.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 1
                        Print #1, Tab(MWT_TAB);
                     Case 2
                        Print #1, Tab(HC_TAB);
                     Case 3
                        Print #1, Tab(VB_TAB);
                     Case 4
                        Print #1, Tab(DIFL_TAB);
                     Case 5
                        Print #1, Tab(MTCOEFF_TAB);
                     Case 6
                        Print #1, Tab(STANTON_TAB);
                  End Select
                  Print #1, Format$(sur.Contaminant(j).Effluent(i), GetTheFormat(sur.Contaminant(j).Effluent(i)));
             Next j
             Print #1,
          Next i
          
          If sur.NumChemical < 7 Then
             Print #1,
             Print #1, "Glossary:"
             Print #1, "Cinf = Liquid Phase Influent Concentration to Tank 1 (" & Chr$(181) & "g/L)"
             GoTo AfterLiquidEffluentsSurface
          End If
          Print #1,
          Print #1,
          Print #1, Tab(MWT_TAB); "Contaminant Number:"
          Print #1,
          Select Case sur.NumChemical
             Case 7
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"
             Case 8
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"
             Case 9
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"
             Case 10
                Print #1, "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"; Tab(DIFL_TAB); "10:"
          End Select
          Print #1,

          'Print Liquid Phase Influent Concentrations of Each Contaminant
          Print #1, "Cinf";
          For j = 7 To 10
              If sur.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 7
                    Print #1, Tab(MWT_TAB);
                 Case 8
                    Print #1, Tab(HC_TAB);
                 Case 9
                    Print #1, Tab(VB_TAB);
                 Case 10
                    Print #1, Tab(DIFL_TAB);
              End Select
              Print #1, Format$(sur.Contaminant(j).Influent.Value, GetTheFormat(sur.Contaminant(j).Influent.Value));
          Next j
          Print #1,

          'Print Liquid Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To sur.NumberOfTanks.Value
              Print #1, Format$(i, "0");
              For j = 7 To 10
                  If sur.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 7
                        Print #1, Tab(MWT_TAB);
                     Case 8
                        Print #1, Tab(HC_TAB);
                     Case 9
                        Print #1, Tab(VB_TAB);
                     Case 10
                        Print #1, Tab(DIFL_TAB);
                  End Select
                  Print #1, Format$(sur.Contaminant(j).Effluent(i), GetTheFormat(sur.Contaminant(j).Effluent(i)));
             Next j
             Print #1,
          Next i
          
          Print #1,
         
          Print #1, "Glossary:"
         
          Print #1, "Cinf = Liquid Phase Influent Concentration to Tank 1 (" & Chr$(181) & "g/L)"

AfterLiquidEffluentsSurface:

    End Select

    Close #1

End Sub

Sub SaveContaminantListSurface()
    Dim FileID As String
    Dim i As Integer

    Call SaveFile(Filename)

    If Filename$ <> "" Then
       FileID = CONTAMINANTS_SURFACE_FILEID
       Open Filename$ For Output As #1
       
       Write #1, FileID
      
       For i = 1 To sur.NumChemical
           Write #1, sur.Contaminant(i).Pressure, sur.Contaminant(i).Temperature, sur.Contaminant(i).Name, sur.Contaminant(i).MolecularWeight.Value, sur.Contaminant(i).HenrysConstant.Value, sur.Contaminant(i).MolarVolume.Value, sur.Contaminant(i).LiquidDiffusivity.Value, sur.Contaminant(i).Influent.Value, sur.Contaminant(i).TreatmentObjective.Value
       Next i

       Close #1

    End If

End Sub

Sub savefilesurface(Filename As String)
Dim Ctl As Control
Set Ctl = frmSurface.CommonDialog1

    On Error Resume Next
    'frmSurface!CMDialog1.DefaultExt = "sur"
    'frmSurface!CMDialog1.Filter = "Surface Aeration Files (*.sur)|*.sur"
    'frmSurface!CMDialog1.DialogTitle = "Save Surface Aeration File"
    'frmSurface!CMDialog1.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
    'frmSurface!CMDialog1.Action = 2
    'Filename$ = frmSurface!CMDialog1.Filename
    Ctl.DefaultExt = "sur"
    Ctl.Filter = "Surface Aeration Files (*.sur)|*.sur"
    Ctl.DialogTitle = "Save Surface Aeration File"
    Ctl.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
    Ctl.Action = 2
    Filename$ = Ctl.Filename
    If Err = 32755 Then   'Cancel selected by user
       Filename$ = ""
    End If

End Sub

Sub SaveSurface()
Dim FileID As String
Dim i As Integer
Dim xu As rec_Units_frmContaminantPropertyEdit
 
    If Right$(frmSurface.Caption, 14) = "(untitled.sur)" Then
       Call savefilesurface(Filename)
    End If
    If Filename$ <> "" Then
       FileID = SURFACE_FILEID
       Open Filename$ For Output As #1
       
       Write #1, FileID
      
       Write #1, SurfaceAerationMode, ""

       Write #1, sur.OperatingPressure.Value, ""
       Write #1, sur.operatingtemperature.Value, ""

       Write #1, sur.PowerInput_PoverV.Value, ""

       If sur.Oxygen.KLaMethod = KLA_METHOD_USER_INPUT Then
          Write #1, sur.Oxygen.KLaMethod, "KLaMethod:  2 = User Input"
          Write #1, sur.Oxygen.MassTransferCoefficient.Value, ""
       ElseIf sur.Oxygen.KLaMethod = KLA_METHOD_CWO2_TRANSFER_TEST Then
          Write #1, sur.Oxygen.KLaMethod, ""
       End If

       Write #1, sur.NumChemical, ""
       For i = 1 To sur.NumChemical
           Write #1, sur.Contaminant(i).Pressure, sur.Contaminant(i).Temperature, sur.Contaminant(i).Name, sur.Contaminant(i).MolecularWeight.Value, sur.Contaminant(i).HenrysConstant.Value, sur.Contaminant(i).MolarVolume.Value, sur.Contaminant(i).LiquidDiffusivity.Value, sur.Contaminant(i).Influent.Value, sur.Contaminant(i).TreatmentObjective.Value
       Next i
       Write #1, sur.DesignContaminant.Name, ""

       Write #1, sur.WaterFlowRate.Value, ""
       Write #1, sur.NumberOfTanks.Value, ""

       Write #1, sur.CodeForTausAndTankVolumes, ""
       Select Case sur.CodeForTausAndTankVolumes
          Case 1   'Write Hydraulic Retention Time for 1 Tank
             Write #1, sur.TankHydraulicRetentionTime.Value, ""
          Case 2   'Write Hydraulic Retention Time for All Tanks
             Write #1, sur.TotalHydraulicRetentionTime.Value, ""
          Case 3   'Write Volume of Each Tank
             Write #1, sur.TankVolume.Value, ""
          Case 4   'Write Volume of All Tanks
             Write #1, sur.TotalTankVolume.Value, ""
       End Select

       Write #1, sur.Power.AeratorMotorEfficiency, ""

       'Output the units of this screen.
       Write #1, GetUnits(frmSurface!UnitsOpCond(0)), GetUnits(frmSurface!UnitsOpCond(1))
       Write #1, GetUnits(frmSurface!UnitsPowerInput)
       Write #1, GetUnits(frmSurface!UnitsOxygenRef(1)), GetUnits(frmSurface!UnitsOxygenRef(2))
       Write #1, GetUnits(frmSurface!UnitsDesignContam(0)), GetUnits(frmSurface!UnitsDesignContam(1)), GetUnits(frmSurface!UnitsDesignContam(3))
       Write #1, GetUnits(frmSurface!UnitsFlowParam(0))
       Write #1, GetUnits(frmSurface!UnitsTankParam(1)), GetUnits(frmSurface!UnitsTankParam(2)), GetUnits(frmSurface!UnitsTankParam(3)), GetUnits(frmSurface!UnitsTankParam(4))
       Write #1, GetUnits(frmSurface!UnitsConcResults(1)), GetUnits(frmSurface!UnitsConcResults(3))
       Write #1, GetUnits(frmSurface!UnitsPowerCalc(1)), GetUnits(frmSurface!UnitsPowerCalc(2))
       
       'Output the units of frmContaminantPropertyEdit.
       xu = Units_frmContaminantPropertyEdit
       Write #1, xu.UnitsProp(0), xu.UnitsProp(2), xu.UnitsProp(3), xu.UnitsProp(4), xu.UnitsProp(5)
       Write #1, xu.UnitsConc(0), xu.UnitsConc(1)
       
       Close #1

       If SurfaceAerationMode = DESIGN_MODE Then
          frmSurface.Caption = "Surface Aeration - Design Mode"
       Else
          frmSurface.Caption = "Surface Aeration - Design Mode"
       End If

       frmSurface.Caption = frmSurface.Caption & " (" & Filename & ")"

    End If

End Sub

Sub SetDesignContaminantEnabledSurface(NumInList As Integer)
    Dim i As Integer

    If NumInList = 0 Then
       frmSurface!mnuFile(4).Enabled = False
       frmSurface!mnuFile(5).Enabled = False
       frmSurface!mnuOptions(0).Enabled = False
       'frmSurface!fraDesignContaminant.Enabled = False
       frmSurface!cboDesignContaminant.Enabled = False
       frmSurface!fraTankParameters.Enabled = False
       frmSurface!fraConcentrationResults.Enabled = False
       frmSurface!fraPower.Enabled = False

       frmSurface!lblPowerCalculation(1).Caption = ""
       frmSurface!lblPowerCalculation(2).Caption = ""
       For i = 0 To 2
           frmSurface!lblDesignConcentrationValue(i).Caption = ""
       Next i
       frmSurface!txtDesignConcentrationValue(3).Text = ""
       If SurfaceAerationMode = DESIGN_MODE Then
          frmSurface.txtTankParameters(1).Text = ""
          frmSurface.txtTankParameters(2).Text = ""
          frmSurface.txtTankParameters(3).Text = ""
          frmSurface.txtTankParameters(4).Text = ""
       End If

       frmSurface!lblConcentrationResults(0).Caption = ""
       frmSurface!lblConcentrationResults(1).Caption = ""
       frmSurface!lblConcentrationResults(3).Caption = ""
       frmSurface!lblConcentrationResults(4).Caption = ""

    Else
       
       frmSurface!mnuFile(4).Enabled = True
       frmSurface!mnuFile(5).Enabled = True
       
       frmSurface!mnuOptions(0).Enabled = True

       'frmSurface!fraDesignContaminant.Enabled = True
       frmSurface!cboDesignContaminant.Enabled = True
       frmSurface!fraTankParameters.Enabled = True
       frmSurface!fraConcentrationResults.Enabled = True
       frmSurface!fraPower.Enabled = True

    End If

End Sub

Sub NewPageSurface()

          Printer.NewPage
          Printer.FontSize = 12
          Printer.FontBold = True
          If SurfaceAerationMode = DESIGN_MODE Then
             Printer.Print "Surface Aeration - Design Mode (continued)"
          Else
             Printer.Print "Surface Aeration - Rating Mode (continued)"
          End If
          Printer.Print
          Printer.Print
          Printer.FontSize = 10
          Printer.FontBold = False

End Sub

Sub PrintSurface()
Dim i As Integer, j As Integer
ReDim ContaminantMTCoeff(1 To MAXCHEMICAL) As Double
ReDim DesiredPercentRemoval(1 To MAXCHEMICAL) As Double
ReDim AchievedPercentRemoval(1 To MAXCHEMICAL) As Double
ReDim Effluent(0 To MAXIMUM_TANKS) As Double
ReDim GasEffluent(1 To MAXIMUM_TANKS) As Double
Dim xu As rec_Units_frmContaminantPropertyEdit

    xu = Units_frmContaminantPropertyEdit

    On Error GoTo PrinterError

    Select Case SurfaceAerationMode
       Case DESIGN_MODE

          Printer.ScaleLeft = -1440
          Printer.ScaleTop = -1440
          Printer.CurrentX = 0
          Printer.CurrentY = 0
          Printer.FontSize = 12
          Printer.FontBold = True
          
          Printer.Print "Surface Aeration - Design Mode"
          Printer.Print
          Printer.Print
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          Printer.Print "Operating Pressure (" & frmSurface!UnitsOpCond(0) & ")"; Tab(VALUE_TAB); frmSurface!txtOperatingPressure.Text
          Printer.Print "Operating Temperature (" & frmSurface!UnitsOpCond(1) & ")"; Tab(VALUE_TAB); frmSurface!txtOperatingTemperature.Text
          Printer.Print frmWaterPropertiesSurface!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmWaterPropertiesSurface!txtAirWaterProperties(0).Text
          Printer.Print frmWaterPropertiesSurface!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmWaterPropertiesSurface!txtAirWaterProperties(1).Text
          Printer.Print
          Printer.Print frmSurface!lblPowerInputLabel.Caption & " (" & frmSurface!UnitsPowerInput & ")"; Tab(VALUE_TAB); frmSurface!txtPowerInput.Text
          Printer.Print
          Printer.Print "Oxygen " & frmSurface!lblOxygenLabel(1).Caption & " (" & frmSurface!UnitsOxygenRef(1) & ")"; Tab(VALUE_TAB); frmSurface!txtOxygen(1).Text
          Printer.Print "Method to Find Oxygen KLa"; Tab(VALUE_TAB); frmSurface!cboOxygen.Text
          Printer.Print "Oxygen " & frmSurface!lblOxygenLabel(2).Caption & " (" & frmSurface!UnitsOxygenRef(2) & ")"; Tab(VALUE_TAB); frmSurface!txtOxygen(2).Text
          Printer.Print
          Printer.Print "Design Contaminant:  "; frmSurface!cboDesignContaminant.Text
          Printer.Print "Molecular Weight" & " (" & xu.UnitsProp(0) & ")"; Tab(VALUE_TAB); Format$(sur.DesignContaminant.MolecularWeight.Value, "0.00")
          Printer.Print "Henry's Constant (-)"; Tab(VALUE_TAB); Format$(sur.DesignContaminant.HenrysConstant.Value, GetTheFormat(sur.DesignContaminant.HenrysConstant.Value))
          Printer.Print "Molar Volume" & " (" & xu.UnitsProp(2) & ")"; Tab(VALUE_TAB); Format$(sur.DesignContaminant.MolarVolume.Value, GetTheFormat(sur.DesignContaminant.MolarVolume.Value))
          Printer.Print "Liquid Diffusivity" & " (" & xu.UnitsProp(4) & ")"; Tab(VALUE_TAB); Format$(sur.DesignContaminant.LiquidDiffusivity.Value, GetTheFormat(sur.DesignContaminant.LiquidDiffusivity.Value))
          Printer.Print frmSurface!lblDesignConcentration(0).Caption & " (" & frmSurface!UnitsDesignContam(0) & ")"; Tab(VALUE_TAB); frmSurface!lblDesignConcentrationValue(0).Caption
          Printer.Print frmSurface!lblDesignConcentration(1).Caption & " (" & frmSurface!UnitsDesignContam(1) & ")"; Tab(VALUE_TAB); frmSurface!lblDesignConcentrationValue(1).Caption
          Printer.Print frmSurface!lblDesignConcentration(2).Caption & " (%)"; Tab(VALUE_TAB); frmSurface!lblDesignConcentrationValue(2).Caption
          Printer.Print frmSurface!lblDesignConcentration(3).Caption & " (" & frmSurface!UnitsDesignContam(3) & ")"; Tab(VALUE_TAB); frmSurface!txtDesignConcentrationValue(3).Text
          Printer.Print
          Printer.Print frmSurface!lblFlowParametersLabel(0).Caption & " (" & frmSurface!UnitsFlowParam(0) & ")"; Tab(VALUE_TAB); frmSurface!txtFlowParameters(0).Text
          Printer.Print
          Printer.Print frmSurface!lblTankParametersLabel(0).Caption; Tab(VALUE_TAB); frmSurface!txtTankParameters(0).Text
          Printer.Print frmSurface!lblTankParametersLabel(1).Caption & " (" & frmSurface!UnitsTankParam(1) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(1).Text
          Printer.Print frmSurface!lblTankParametersLabel(2).Caption & " (" & frmSurface!UnitsTankParam(2) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(2).Text
          Printer.Print frmSurface!lblTankParametersLabel(3).Caption & " (" & frmSurface!UnitsTankParam(3) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(3).Text
          Printer.Print frmSurface!lblTankParametersLabel(4).Caption & " (" & frmSurface!UnitsTankParam(4) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(4).Text
          Printer.Print
          Printer.Print "Design Contaminant:  "; frmSurface!lblConcentrationResults(0).Caption
          Printer.Print "Liquid Phase Influent Concentration to Tank 1" & " (" & frmSurface!UnitsConcResults(1) & ")"; Tab(VALUE_TAB); frmSurface!lblConcentrationResults(1).Caption
          Printer.Print "Liquid Phase Effluent from Last Tank" & " (" & frmSurface!UnitsConcResults(3) & ")"; Tab(VALUE_TAB); frmSurface!lblConcentrationResults(3).Caption
          Printer.Print "Achieved Percent Removal (%)"; Tab(VALUE_TAB); frmSurface!lblConcentrationResults(4).Caption
          Printer.Print
          Printer.FontBold = True
          Printer.Print "Effluent Concentrations from Each Tank in " & Chr$(181) & "g/L:"
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Tank:"; Tab(LIQUID_EFFLUENT_TAB); "Effluent Conc."
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = False
          For i = 1 To sur.NumberOfTanks.Value
              Printer.Print Format$(i, "0"); Tab(LIQUID_EFFLUENT_TAB); Format$(sur.DesignContaminant.Effluent(i), GetTheFormat(sur.DesignContaminant.Effluent(i)))
          Next i
          If sur.NumberOfTanks.Value > 8 Then
             Call NewPageSurface
          Else
             Printer.Print
             Printer.Print
          End If
          Printer.FontBold = True
          Printer.Print "Power Calculation:"
          Printer.FontUnderline = True
          Printer.Print
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.FontBold = False
          Printer.FontUnderline = False
          Printer.Print
          Printer.Print frmSurface!lblPowerCalculationLabel(0).Caption; Tab(VALUE_TAB); frmSurface!txtPowerCalculation(0).Text
          Printer.Print frmSurface!lblPowerCalculationLabel(1).Caption; Tab(VALUE_TAB); frmSurface!lblPowerCalculation(1).Caption
          Printer.Print frmSurface!lblPowerCalculationLabel(2).Caption; Tab(VALUE_TAB); frmSurface!lblPowerCalculation(2).Caption

       Case RATING_MODE
          Printer.ScaleLeft = -1440
          Printer.ScaleTop = -1440
          Printer.CurrentX = 0
          Printer.CurrentY = 0
          Printer.FontSize = 12
          Printer.FontBold = True
          Printer.Print "Surface Aeration - Rating Mode"
          Printer.Print
          Printer.Print
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          Printer.Print "Operating Pressure (" & frmSurface!UnitsOpCond(0) & ")"; Tab(VALUE_TAB); frmSurface!txtOperatingPressure.Text
          Printer.Print "Operating Temperature (" & frmSurface!UnitsOpCond(1) & ")"; Tab(VALUE_TAB); frmSurface!txtOperatingTemperature.Text
          Printer.Print frmWaterPropertiesSurface!lblAirWaterProperties(0).Caption; Tab(VALUE_TAB); frmWaterPropertiesSurface!txtAirWaterProperties(0).Text
          Printer.Print frmWaterPropertiesSurface!lblAirWaterProperties(1).Caption; Tab(VALUE_TAB); frmWaterPropertiesSurface!txtAirWaterProperties(1).Text
          Printer.Print
          Printer.Print frmSurface!lblPowerInputLabel.Caption & " (" & frmSurface!UnitsPowerInput & ")"; Tab(VALUE_TAB); frmSurface!txtPowerInput.Text
          Printer.Print
          Printer.Print "Oxygen " & frmSurface!lblOxygenLabel(1).Caption & " (" & frmSurface!UnitsOxygenRef(1) & ")"; Tab(VALUE_TAB); frmSurface!txtOxygen(1).Text
          Printer.Print "Method to Find Oxygen KLa"; Tab(VALUE_TAB); frmSurface!cboOxygen.Text
          Printer.Print "Oxygen " & frmSurface!lblOxygenLabel(2).Caption & " (" & frmSurface!UnitsOxygenRef(2) & ")"; Tab(VALUE_TAB); frmSurface!txtOxygen(2).Text
          Printer.Print
          Printer.Print frmSurface!lblFlowParametersLabel(0).Caption & " (" & frmSurface!UnitsFlowParam(0) & ")"; Tab(VALUE_TAB); frmSurface!txtFlowParameters(0).Text
          Printer.Print
          Printer.Print frmSurface!lblTankParametersLabel(0).Caption; Tab(VALUE_TAB); frmSurface!txtTankParameters(0).Text
          Printer.Print frmSurface!lblTankParametersLabel(1).Caption & " (" & frmSurface!UnitsTankParam(1) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(1).Text
          Printer.Print frmSurface!lblTankParametersLabel(2).Caption & " (" & frmSurface!UnitsTankParam(2) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(2).Text
          Printer.Print frmSurface!lblTankParametersLabel(3).Caption & " (" & frmSurface!UnitsTankParam(3) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(3).Text
          Printer.Print frmSurface!lblTankParametersLabel(4).Caption & " (" & frmSurface!UnitsTankParam(4) & ")"; Tab(VALUE_TAB); frmSurface!txtTankParameters(4).Text
          Printer.Print
          Printer.Print
          Printer.FontBold = True
          Printer.Print "Power Calculation:"
          Printer.FontUnderline = True
          Printer.Print
          Printer.Print "Property:"; Tab(VALUE_TAB); "Value:"
          Printer.FontBold = False
          Printer.FontUnderline = False
          Printer.Print
          Printer.Print frmSurface!lblPowerCalculationLabel(0).Caption & " (%)"; Tab(VALUE_TAB); frmSurface!txtPowerCalculation(0).Text
          Printer.Print frmSurface!lblPowerCalculationLabel(1).Caption & " (" & frmSurface!UnitsPowerCalc(1) & ")"; Tab(VALUE_TAB); frmSurface!lblPowerCalculation(1).Caption
          Printer.Print frmSurface!lblPowerCalculationLabel(2).Caption & " (" & frmSurface!UnitsPowerCalc(2) & ")"; Tab(VALUE_TAB); frmSurface!lblPowerCalculation(2).Caption
          Printer.Print
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Contaminant Glossary:"
          Printer.FontUnderline = False
          For i = 1 To sur.NumChemical
              Printer.Print Format$(i, "0"); " = "; Trim$(sur.Contaminant(i).Name)
          Next i

          If sur.NumChemical > 6 Then
             Call NewPageSurface
          Else
             Printer.Print
             Printer.Print
          End If
          Printer.FontBold = True
          Printer.Print "Contaminant Properties:"
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Con.:"; Tab(MWT_TAB); "MWT"; Tab(HC_TAB); "HC"; Tab(VB_TAB); "Vb"; Tab(DIFL_TAB); "DIFL"; Tab(MTCOEFF_TAB); "MT Coeff."
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          For i = 1 To sur.NumChemical
              If sur.DesignContaminant.Name = sur.Contaminant(i).Name Then
                 ContaminantMTCoeff(i) = sur.ContaminantMassTransferCoefficient.Value
              Else
                 Call KLASURF(ContaminantMTCoeff(i), sur.Oxygen.MassTransferCoefficient.Value, sur.Contaminant(i).LiquidDiffusivity.Value, sur.Oxygen.LiquidDiffusivity.Value, sur.N_for_Finding_KLa.Value, sur.kgOVERkl_for_Finding_KLa.Value, sur.Contaminant(i).HenrysConstant.Value)
              End If
              Printer.Print Format$(i, "0"); Tab(MWT_TAB); Format$(sur.Contaminant(i).MolecularWeight.Value, "0.00"); Tab(HC_TAB); Format$(sur.Contaminant(i).HenrysConstant.Value, GetTheFormat(sur.Contaminant(i).HenrysConstant.Value)); Tab(VB_TAB); Format$(sur.Contaminant(i).MolarVolume.Value, GetTheFormat(sur.Contaminant(i).MolarVolume.Value)); Tab(DIFL_TAB); Format$(sur.Contaminant(i).LiquidDiffusivity.Value, GetTheFormat(sur.Contaminant(i).LiquidDiffusivity.Value)); Tab(MTCOEFF_TAB); Format$(ContaminantMTCoeff(i), GetTheFormat(ContaminantMTCoeff(i)))
          Next i
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Glossary:"
          Printer.FontUnderline = False
          Printer.Print "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Printer.Print "MWT = Molecular Weight (kg/kmol)"
          Printer.Print "HC = Henry's Constant (-)"
          Printer.Print "Vb = Molar Volume (m" & Chr$(179) & "/kmol)"
          Printer.Print "DIFL = Liquid Diffusivity (m" & Chr$(178) & "/sec)"
          Printer.Print "MT Coeff. = Mass Transfer Coeff. (1/sec)"
          If sur.NumChemical <= 6 Then
             Call NewPageSurface
          Else
             Printer.Print
             Printer.Print
             Printer.Print
          End If
          Printer.FontBold = True
          Printer.Print "Contaminant Concentration Results:"
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Con.:"; Tab(MWT_TAB); "Cinf"; Tab(HC_TAB); "Cto"; Tab(VB_TAB); "De. % Rem."; Tab(DIFL_TAB); "Ceff"; Tab(MTCOEFF_TAB); "Ach. % Rem."
          Printer.Print
          Printer.FontUnderline = False
          Printer.FontBold = False
          For i = 1 To sur.NumChemical
              If sur.DesignContaminant.Name = sur.Contaminant(i).Name Then
                 DesiredPercentRemoval(i) = sur.DesiredPercentRemoval
                 sur.Contaminant(i).Effluent(0) = sur.DesignContaminant.Effluent(0)
                 For j = 1 To sur.NumberOfTanks.Value
                     sur.Contaminant(i).Effluent(j) = sur.DesignContaminant.Effluent(j)
                 Next j
                 AchievedPercentRemoval(i) = sur.AchievedPercentRemoval
              Else
                 Call REMOVBUB(DesiredPercentRemoval(i), sur.Contaminant(i).Influent.Value, sur.Contaminant(i).TreatmentObjective.Value)
                 Effluent(0) = sur.Contaminant(i).Influent.Value
                 Call SEFFL(Effluent(1), AchievedPercentRemoval(i), sur.Contaminant(i).Influent.Value, ContaminantMTCoeff(i), sur.TankHydraulicRetentionTime.Value, sur.NumberOfTanks.Value)
                 sur.Contaminant(i).Effluent(0) = Effluent(0)
                 For j = 0 To sur.NumberOfTanks.Value
                     sur.Contaminant(i).Effluent(j) = Effluent(j)
                 Next j
              End If
              Printer.Print Format$(i, "0"); Tab(MWT_TAB); Format$(sur.Contaminant(i).Influent.Value, GetTheFormat(sur.Contaminant(i).Influent.Value)); Tab(HC_TAB); Format$(sur.Contaminant(i).TreatmentObjective.Value, GetTheFormat(sur.Contaminant(i).TreatmentObjective.Value)); Tab(VB_TAB); Format$(DesiredPercentRemoval(i), GetTheFormat(DesiredPercentRemoval(i))); Tab(DIFL_TAB); Format$(sur.Contaminant(i).Effluent(sur.NumberOfTanks.Value), GetTheFormat(sur.Contaminant(i).Effluent(sur.NumberOfTanks.Value))); Tab(MTCOEFF_TAB); Format$(AchievedPercentRemoval(i), GetTheFormat(AchievedPercentRemoval(i)))
          Next i
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Glossary:"
          Printer.FontUnderline = False
          Printer.Print "Con. = Contaminant Number (see Contaminant Glossary on page 1)"
          Printer.Print "Cinf = "; "Liquid Phase " & frmSurface!lblDesignConcentration(0).Caption
          Printer.Print "Cto = "; frmSurface!lblDesignConcentration(1).Caption
          Printer.Print "De. % Rem. = "; frmSurface!lblDesignConcentration(2).Caption
          Printer.Print "Ceff = "; "Liquid Phase Effluent from Last Tank (" & Chr$(181) & "g/L)"
          Printer.Print "Ach. % Rem. = "; frmSurface!lblConcentrationResultsLabel(4).Caption
          If sur.NumChemical > 6 Then
             Call NewPageSurface
          Else
             Printer.Print
             Printer.Print
             Printer.Print
          End If
          Printer.FontBold = True
          Printer.Print "Liquid Phase Effluent Concentrations from Each Tank in " & Chr$(181) & "g/L:"
          Printer.Print
          Printer.Print
          Printer.Print Tab(MWT_TAB); "Contaminant Number:"
          Printer.Print
          Printer.FontUnderline = True
          Select Case sur.NumChemical
             Case 1
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"
             Case 2
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"
             Case 3
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"
             Case 4
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"
             Case 5
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"
             Case Else
                Printer.Print "Tank:"; Tab(MWT_TAB); "1:"; Tab(HC_TAB); "2:"; Tab(VB_TAB); "3:"; Tab(DIFL_TAB); "4:"; Tab(MTCOEFF_TAB); "5:"; Tab(STANTON_TAB); "6:"
          End Select
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = False

          'Print Liquid Phase Influent Concentrations of Each Contaminant
          Printer.Print "Cinf";
          For j = 1 To 6
              If sur.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 1
                    Printer.Print Tab(MWT_TAB);
                 Case 2
                    Printer.Print Tab(HC_TAB);
                 Case 3
                    Printer.Print Tab(VB_TAB);
                 Case 4
                    Printer.Print Tab(DIFL_TAB);
                 Case 5
                    Printer.Print Tab(MTCOEFF_TAB);
                 Case 6
                    Printer.Print Tab(STANTON_TAB);
              End Select
              Printer.Print Format$(sur.Contaminant(j).Influent.Value, GetTheFormat(sur.Contaminant(j).Influent.Value));
          Next j
          Printer.Print

          'Print Liquid Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To sur.NumberOfTanks.Value
              Printer.Print Format$(i, "0");
              For j = 1 To 6
                  If sur.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 1
                        Printer.Print Tab(MWT_TAB);
                     Case 2
                        Printer.Print Tab(HC_TAB);
                     Case 3
                        Printer.Print Tab(VB_TAB);
                     Case 4
                        Printer.Print Tab(DIFL_TAB);
                     Case 5
                        Printer.Print Tab(MTCOEFF_TAB);
                     Case 6
                        Printer.Print Tab(STANTON_TAB);
                  End Select
                  Printer.Print Format$(sur.Contaminant(j).Effluent(i), GetTheFormat(sur.Contaminant(j).Effluent(i)));
             Next j
             Printer.Print
          Next i
          
          If sur.NumChemical < 7 Then
             Printer.Print
             Printer.FontUnderline = True
             Printer.Print "Glossary:"
             Printer.FontUnderline = False
             Printer.Print "Cinf = Liquid Phase Influent Concentration to Tank 1 (" & Chr$(181) & "g/L)"
             GoTo AfterLiquidEffluents
          End If
          Printer.Print
          Printer.Print
          Printer.FontBold = True
          Printer.Print Tab(MWT_TAB); "Contaminant Number:"
          Printer.Print
          Printer.FontUnderline = True
          Select Case sur.NumChemical
             Case 7
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"
             Case 8
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"
             Case 9
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"
             Case 10
                Printer.Print "Tank:"; Tab(MWT_TAB); "7:"; Tab(HC_TAB); "8:"; Tab(VB_TAB); "9:"; Tab(DIFL_TAB); "10:"
          End Select
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = False

          'Print Liquid Phase Influent Concentrations of Each Contaminant
          Printer.Print "Cinf";
          For j = 7 To 10
              If sur.NumChemical < j Then
                 Exit For
              End If
              Select Case j
                 Case 7
                    Printer.Print Tab(MWT_TAB);
                 Case 8
                    Printer.Print Tab(HC_TAB);
                 Case 9
                    Printer.Print Tab(VB_TAB);
                 Case 10
                    Printer.Print Tab(DIFL_TAB);
              End Select
              Printer.Print Format$(sur.Contaminant(j).Influent.Value, GetTheFormat(sur.Contaminant(j).Influent.Value));
          Next j
          Printer.Print

          'Print Liquid Phase Effluent Concentrations from each tank for each contaminant
          For i = 1 To sur.NumberOfTanks.Value
              Printer.Print Format$(i, "0");
              For j = 7 To 10
                  If sur.NumChemical < j Then
                     Exit For
                  End If
                  Select Case j
                     Case 7
                        Printer.Print Tab(MWT_TAB);
                     Case 8
                        Printer.Print Tab(HC_TAB);
                     Case 9
                        Printer.Print Tab(VB_TAB);
                     Case 10
                        Printer.Print Tab(DIFL_TAB);
                  End Select
                  Printer.Print Format$(sur.Contaminant(j).Effluent(i), GetTheFormat(sur.Contaminant(j).Effluent(i)));
             Next j
             Printer.Print
          Next i
          
          Printer.Print
          Printer.FontUnderline = True
          Printer.Print "Glossary:"
          Printer.FontUnderline = False
          Printer.Print "Cinf = Liquid Phase Influent Concentration to Tank 1 (" & Chr$(181) & "g/L)"

AfterLiquidEffluents:

    End Select

    Printer.EndDoc

    Exit Sub

PrinterError:
    MsgBox error$(Err)
    Resume ExitPrint:

ExitPrint:

End Sub

Sub StartSurfaceDefaultCase()

    Filename = "TheDefaultCaseSurface"
    Call loadsurface("")

End Sub

Sub surface_results()
    Dim i As Integer, j As Integer
    ReDim ContaminantMTCoeff(1 To MAXCHEMICAL) As Double
    ReDim DesiredPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim AchievedPercentRemoval(1 To MAXCHEMICAL) As Double
    ReDim Effluent(0 To MAXIMUM_TANKS) As Double
    Dim ContaminantGlossaryBottom As Integer, GlossaryBottom As Integer

          For i = 1 To sur.NumChemical
              If sur.DesignContaminant.Name = sur.Contaminant(i).Name Then
                 DesiredPercentRemoval(i) = sur.DesiredPercentRemoval
                 ContaminantMTCoeff(i) = sur.ContaminantMassTransferCoefficient.Value
                 sur.Contaminant(i).Effluent(0) = sur.DesignContaminant.Effluent(0)
                 For j = 1 To sur.NumberOfTanks.Value
                     sur.Contaminant(i).Effluent(j) = sur.DesignContaminant.Effluent(j)
                 Next j
                 AchievedPercentRemoval(i) = sur.AchievedPercentRemoval
              Else
                 Call REMOVBUB(DesiredPercentRemoval(i), sur.Contaminant(i).Influent.Value, sur.Contaminant(i).TreatmentObjective.Value)
                 Call KLASURF(ContaminantMTCoeff(i), sur.Oxygen.MassTransferCoefficient.Value, sur.Contaminant(i).LiquidDiffusivity.Value, sur.Oxygen.LiquidDiffusivity.Value, sur.N_for_Finding_KLa.Value, sur.kgOVERkl_for_Finding_KLa.Value, sur.Contaminant(i).HenrysConstant.Value)
                 Effluent(0) = sur.Contaminant(i).Influent.Value
                 Call SEFFL(Effluent(1), AchievedPercentRemoval(i), sur.Contaminant(i).Influent.Value, ContaminantMTCoeff(i), sur.TankHydraulicRetentionTime.Value, sur.NumberOfTanks.Value)
                 sur.Contaminant(i).Effluent(0) = Effluent(0)
                 For j = 0 To sur.NumberOfTanks.Value
                     sur.Contaminant(i).Effluent(j) = Effluent(j)
                 Next j
              End If
          Next i

    For i = 0 To MAXCHEMICAL - 1
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i + 10).Visible = False
        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i).Visible = False
        frmViewEffluentConcentrationsASAP!lblContaminantName(i).Visible = False

    Next i

    For i = 1 To sur.NumChemical
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblContaminantNumber(i + 10 - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i - 1).Visible = True
        frmViewEffluentConcentrationsASAP!lblContaminantName(i - 1).Visible = True

        frmViewEffluentConcentrationsASAP!lblInfluentConcentration(i - 1).Caption = Format$(sur.Contaminant(i).Influent.Value, GetTheFormat(sur.Contaminant(i).Influent.Value))
        frmViewEffluentConcentrationsASAP!lblTreatmentObjective(i - 1).Caption = Format$(sur.Contaminant(i).TreatmentObjective.Value, GetTheFormat(sur.Contaminant(i).TreatmentObjective.Value))
        frmViewEffluentConcentrationsASAP!lblDesiredPercentRemoval(i - 1).Caption = Format$(DesiredPercentRemoval(i), "0.0")
        frmViewEffluentConcentrationsASAP!lblEffluentConcentration(i - 1).Caption = Format$(sur.Contaminant(i).Effluent(sur.NumberOfTanks.Value), GetTheFormat(sur.Contaminant(i).Effluent(sur.NumberOfTanks.Value)))
        frmViewEffluentConcentrationsASAP!lblAchievedPercentRemoval(i - 1).Caption = Format$(AchievedPercentRemoval(i), "0.0")
        frmViewEffluentConcentrationsASAP!lblContaminantName(i - 1).Caption = Trim$(LCase$(sur.Contaminant(i).Name))

    Next i

    frmViewEffluentConcentrationsASAP!fraConcentrationResults.Height = frmViewEffluentConcentrationsASAP!lblContaminantNumber(sur.NumChemical - 1).Top + frmViewEffluentConcentrationsASAP!lblContaminantNumber(sur.NumChemical - 1).Height + 120
    frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Height = frmViewEffluentConcentrationsASAP!lblContaminantNumber(sur.NumChemical + 10 - 1).Top + frmViewEffluentConcentrationsASAP!lblContaminantNumber(sur.NumChemical + 10 - 1).Height + 120
    frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top = frmViewEffluentConcentrationsASAP!fraConcentrationResults.Top + frmViewEffluentConcentrationsASAP!fraConcentrationResults.Height + 120
    frmViewEffluentConcentrationsASAP!fraGlossary.Top = frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top
    ContaminantGlossaryBottom = frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Top + frmViewEffluentConcentrationsASAP!fraContaminantGlossary.Height
    GlossaryBottom = frmViewEffluentConcentrationsASAP!fraGlossary.Top + frmViewEffluentConcentrationsASAP!fraGlossary.Height
    If GlossaryBottom > ContaminantGlossaryBottom Then
       frmViewEffluentConcentrationsASAP!cmdOK.Top = GlossaryBottom + 360
    Else
       frmViewEffluentConcentrationsASAP!cmdOK.Top = ContaminantGlossaryBottom + 360
    End If
    frmViewEffluentConcentrationsASAP.Height = frmViewEffluentConcentrationsASAP!cmdOK.Top + frmViewEffluentConcentrationsASAP!cmdOK.Height + 500 '420

    frmViewEffluentConcentrationsASAP.Show 1


End Sub

Function surface_savechanges() As Integer
Dim i As Integer
Dim msg As String, response As Integer

msg = "Would you like to save the parameters "
msg = msg + "for this surface aeration design case to a file?" & Chr$(13) & Chr$(13)
msg = msg + "Note:  Any information not saved will be permanently lost."
response = MsgBox(msg, MB_ICONquestion + MB_YESNOCANCEL, "Save Current Design")
                
If response = IDCANCEL Then
 Screen.MousePointer = 0
 surface_savechanges = 1
 Exit Function
End If

If response = IDYES Then
  Call SaveSurface
   If StrComp(Filename, "") = 0 Then response = 5
      Do While response = 5
         msg = "Would you like to save the parameters "
         msg = msg + "for this surface aeration design case to a file?" & Chr$(13) & Chr$(13)
         msg = msg + "Note:  Any information not saved will be permanently lost."
           response = MsgBox(msg, MB_ICONquestion + MB_YESNOCANCEL, "Save Current Design")
                           
           If response = IDCANCEL Then
           Screen.MousePointer = 0
           surface_savechanges = 1
           Exit Function
           End If
                           
           If response = IDYES Then Call SaveSurface
           If StrComp(Filename, "") = 0 And response <> IDNO Then response = 5
      Loop
   End If

surface_savechanges = 0
End Function

Attribute VB_Name = "UnitConvMod"
Option Explicit
Global Const PRESSURE_PA = 0
Global Const PRESSURE_KPA = 1
Global Const PRESSURE_BARS = 2
Global Const PRESSURE_ATM = 3
Global Const PRESSURE_PSI = 4
Global Const PRESSURE_MMHG = 5
Global Const PRESSURE_MH2O = 6
Global Const PRESSURE_FTH2O = 7
Global Const PRESSURE_INHG = 8

Global Const TEMPERATURE_K = 0
Global Const TEMPERATURE_C = 1
Global Const TEMPERATURE_R = 2
Global Const TEMPERATURE_F = 3

Global Const LENGTH_M = 0
Global Const LENGTH_CM = 1
Global Const LENGTH_FT = 2
Global Const LENGTH_IN = 3

Global Const MASS_KG = 0
Global Const MASS_G = 1
Global Const MASS_LB = 2

Global Const FLOW_M3_per_S = 0
Global Const FLOW_M3_per_D = 1
Global Const FLOW_CM3_per_S = 2
Global Const FLOW_ML_per_MIN = 3
Global Const FLOW_FT3_per_S = 4
Global Const FLOW__FT3_per_D = 5
Global Const FLOW_GPM = 6
Global Const FLOW_GPD = 7
Global Const FLOW_MGD = 8
    
Global Const TIME_S = 0
Global Const TIME_MIN = 1
Global Const TIME_HR = 2
Global Const TIME_D = 3

Global Const APPARENT_DENSITY_G_per_ML = 0
Global Const APPARENT_DENSITY_KG_per_M3 = 1
Global Const APPARENT_DENSITY_LB_per_FT3 = 2
Global Const APPARENT_DENSITY_LB_per_GAL = 3

Global Const RESIN_CAPACITY_MEQ_per_G = 0
Global Const RESIN_CAPACITY_MEQ_per_MLbed = 1
Global Const RESIN_CAPACITY_MEQ_per_MLresin = 2

Global Const MOLECULAR_WEIGHT_MG_per_MMOL = 0
Global Const MOLECULAR_WEIGHT_UG_per_UMOL = 1
Global Const MOLECULAR_WEIGHT_G_per_GMOL = 2
Global Const MOLECULAR_WEIGHT_KG_per_KMOL = 3

Global Const CONCENTRATION_UG_per_L = 0
Global Const CONCENTRATION_MG_per_L = 1
Global Const CONCENTRATION_G_per_L = 2
'Global Const CONCENTRATION_MEQ_per_L = 3
'Global Const CONCENTRATION_EQ_per_L = 4
'Global Const CONCENTRATION_MMOL_per_L = 5
'Global Const CONCENTRATION_UMOL_per_L = 6
'Global Const CONCENTRATION_GMOL_per_L = 7

Global Const DIFFUSIVITY_M2_per_S = 0
Global Const DIFFUSIVITY_M2_per_MIN = 1
Global Const DIFFUSIVITY_M2_per_HR = 2
Global Const DIFFUSIVITY_M2_per_D = 3
Global Const DIFFUSIVITY_CM2_per_S = 4
Global Const DIFFUSIVITY_CM2_per_MIN = 5
Global Const DIFFUSIVITY_FT2_per_S = 6
Global Const DIFFUSIVITY_FT2_per_MIN = 7
Global Const DIFFUSIVITY_FT2_per_HR = 8
Global Const DIFFUSIVITY_FT2_per_D = 9

Global Const VELOCITY_CM_per_S = 0
Global Const VELOCITY_CM_per_MIN = 1
Global Const VELOCITY_M_per_S = 2
Global Const VELOCITY_M_per_MIN = 3
Global Const VELOCITY_M_per_HR = 4
Global Const VELOCITY_M_per_D = 5
Global Const VELOCITY_FT_per_S = 6
Global Const VELOCITY_FT_per_MIN = 7
Global Const VELOCITY_FT_per_HR = 8
Global Const VELOCITY_FT_per_D = 9

Global Const MOLAR_VOLUME_M3_per_KMOL = 0
Global Const MOLAR_VOLUME_M3_per_GMOL = 1
Global Const MOLAR_VOLUME_L_per_GMOL = 2
Global Const MOLAR_VOLUME_ML_per_GMOL = 3

Global Const K_FREUNDLICH_MG_G_L = 0
Global Const K_FREUNDLICH_MMOL_G_L = 1
Global Const K_FREUNDLICH_UG_G_L = 2
Global Const K_FREUNDLICH_UMOL_G_L = 3

Global Const PRESSUREPERLENGTH_PA_per_M = 0
Global Const PRESSUREPERLENGTH_PSI_per_FT = 1
Global Const PRESSUREPERLENGTH_ATM_per_FT = 2

Global Const MASSLOADINGRATE_KG_M2_S = 0
Global Const MASSLOADINGRATE_G_M2_D = 1
Global Const MASSLOADINGRATE_LBM_FT2_S = 2

Global Const AREA_M2 = 0
Global Const AREA_CM2 = 1
Global Const AREA_FT2 = 2

Global Const VOLUME_M3 = 0
Global Const VOLUME_CM3 = 1
Global Const VOLUME_LITER = 2
Global Const VOLUME_FT3 = 3
Global Const VOLUME_GAL = 4

Global Const INVERSETIME_S = 0
Global Const INVERSETIME_MIN = 1
Global Const INVERSETIME_HR = 2
Global Const INVERSETIME_D = 3

Global Const POWER_KW = 0
Global Const POWER_W = 1
Global Const POWER_HP = 2
Global Const POWER_FTLB_per_S = 3

Global Const POWERPERVOLUME_W_per_M3 = 0
Global Const POWERPERVOLUME_KW_per_M3 = 1
Global Const POWERPERVOLUME_HP_per_FT3 = 2
Global Const POWERPERVOLUME_FTLB_per_S_FT3 = 3


'--------------------------------------------------------
'---  Unit Types:
'--------------------------------------------------------
Global Const UNITS_LENGTH = 1
Global Const UNITS_TIME = 2
Global Const UNITS_MASS = 3
Global Const UNITS_PRESSURE = 4
Global Const UNITS_TEMPERATURE = 5
Global Const UNITS_FLOW = 6
Global Const UNITS_PRESSUREPERLENGTH = 7
Global Const UNITS_MASSLOADINGRATE = 8
Global Const UNITS_INVERSETIME = 9
Global Const UNITS_AREA = 10
Global Const UNITS_VOLUME = 11
Global Const UNITS_DIFFUSIVITY = 12
Global Const UNITS_CONCENTRATION = 13
Global Const UNITS_POWER = 14
Global Const UNITS_POWERPERVOLUME = 15
Global Const UNITS_MW = 16
Global Const UNITS_MOLARVOLUME = 17


'--------------------------------------------------------
'---  SI or English indicator
'--------------------------------------------------------
Global Const UNITSTYPE_SI = 1
Global Const UNITSTYPE_ENGLISH = 2

Function AreaConversionFactor(UnitsToConvertTo As Integer) As Double
'This function will convert from standard area units (m^2) to
'the units specified by the user.

  Select Case UnitsToConvertTo
    Case AREA_M2
      AreaConversionFactor = 1#
    Case AREA_CM2
      AreaConversionFactor = 10000#
    Case AREA_FT2
      AreaConversionFactor = 10.7639
  End Select

End Function

Function ConcentrationConversionFactor(UnitsToConvertTo As Integer) As Double
'This function will convert from standard concentration units (ug/L) to
'the units specified by the user.

   Select Case UnitsToConvertTo
      Case CONCENTRATION_UG_per_L
         ConcentrationConversionFactor = 1#
      Case CONCENTRATION_MG_per_L   'Convert to mg/L
         ConcentrationConversionFactor = 1# / 1000#
      Case CONCENTRATION_G_per_L   'Convert to g/L
         ConcentrationConversionFactor = 1# / 1000# / 1000#

   End Select

End Function

Function DensityConversionFactor(UnitsToConvertTo As Integer) As Double
   'This function will convert from standard density units (g/ml) to
   'the units specified by the user.

   Select Case UnitsToConvertTo
      Case APPARENT_DENSITY_G_per_ML
         DensityConversionFactor = 1#
      Case APPARENT_DENSITY_KG_per_M3   'Convert to kg/m3
         DensityConversionFactor = 1000#
      Case APPARENT_DENSITY_LB_per_FT3   'Convert to lb/ft3
         DensityConversionFactor = (2.20462 / 1000#) / (35.3145 / 1000#)
      Case APPARENT_DENSITY_LB_per_GAL   'Convert to lb/gal
         DensityConversionFactor = (2.20462 / 1000#) / (7.4805 / 28317)
   End Select

End Function

Function DiffusivityConversionFactor(UnitsToConvertTo As Integer) As Double
   'This function will convert from standard diffusivity units (m^2/s) to
   'the units specified by the user.

   Select Case UnitsToConvertTo
      Case DIFFUSIVITY_M2_per_S
         DiffusivityConversionFactor = 1
      Case DIFFUSIVITY_M2_per_MIN   'Convert to m2/min
         DiffusivityConversionFactor = 60#
      Case DIFFUSIVITY_M2_per_HR   'Convert to m2/hr
         DiffusivityConversionFactor = 60# * 60#
      Case DIFFUSIVITY_M2_per_D   'Convert to m2/d
         DiffusivityConversionFactor = (60# * 60# * 24#)
      Case DIFFUSIVITY_CM2_per_S  'Convert to cm2/s
         DiffusivityConversionFactor = 100# * 100#
      Case DIFFUSIVITY_CM2_per_MIN   'Convert to cm2/min
         DiffusivityConversionFactor = (100# * 100#) * (60#)
      Case DIFFUSIVITY_FT2_per_S   'Convert to ft2/s
         DiffusivityConversionFactor = 10.7639
      Case DIFFUSIVITY_FT2_per_MIN   'Convert to ft2/min
         DiffusivityConversionFactor = 10.7639 * 60#
      Case DIFFUSIVITY_FT2_per_HR   'Convert to ft2/hr
         DiffusivityConversionFactor = 10.7639 * (60# * 60#)
      Case DIFFUSIVITY_FT2_per_D   'Convert to ft2/d
         DiffusivityConversionFactor = 10.7639 * (60# * 60# * 24#)
   End Select

End Function

Function FlowConversionFactor(UnitsToConvertTo As Integer) As Double
   'This function will convert from standard flow units (m3/s) to
   'the units specified by the user.

   Select Case UnitsToConvertTo
      Case FLOW_M3_per_S
         FlowConversionFactor = 1#
      Case FLOW_M3_per_D   'Convert to m3/d
         FlowConversionFactor = 86400#
      Case FLOW_CM3_per_S   'Convert to cm3/s
         FlowConversionFactor = 100# * 100# * 100#
      Case FLOW_ML_per_MIN   'Convert to ml/min
         FlowConversionFactor = 1000000# * 60#
      Case FLOW_FT3_per_S   'Convert to ft3/s
         FlowConversionFactor = 35.3145
      Case FLOW__FT3_per_D   'Convert to ft3/d
         FlowConversionFactor = 35.3145 * 86400#
      Case FLOW_GPM   'Convert to gpm
         FlowConversionFactor = 264.17 * 60#
      Case FLOW_GPD   'Convert to gpd
         FlowConversionFactor = 264.17 * 86400#
      Case FLOW_MGD   'Convert to MGD
         FlowConversionFactor = (264.17 / 1000000#) * 86400

   End Select

End Function

Function GetConversionFactor(WhatUnits As Integer, ListIndex As Integer)

  Select Case WhatUnits
    Case UNITS_LENGTH
      GetConversionFactor = LengthConversionFactor(ListIndex)
    Case UNITS_TIME
      GetConversionFactor = TimeConversionFactor(ListIndex)
    Case UNITS_MASS
      GetConversionFactor = MassConversionFactor(ListIndex)
    Case UNITS_PRESSURE
      GetConversionFactor = PressureConversionFactor(ListIndex)
    'Case UNITS_TEMPERATURE
    '  GetConversionFactor = TemperatureConversionFactor(ListIndex)
    Case UNITS_FLOW
      GetConversionFactor = FlowConversionFactor(ListIndex)
    Case UNITS_PRESSUREPERLENGTH
      GetConversionFactor = PressurePerLengthConversionFactor(ListIndex)
    Case UNITS_MASSLOADINGRATE
      GetConversionFactor = MassLoadingRateConversionFactor(ListIndex)
    Case UNITS_INVERSETIME
      GetConversionFactor = InverseTimeConversionFactor(ListIndex)
    Case UNITS_AREA
      GetConversionFactor = AreaConversionFactor(ListIndex)
    Case UNITS_VOLUME
      GetConversionFactor = VolumeConversionFactor(ListIndex)
    Case UNITS_DIFFUSIVITY
      GetConversionFactor = DiffusivityConversionFactor(ListIndex)
    Case UNITS_CONCENTRATION
      GetConversionFactor = ConcentrationConversionFactor(ListIndex)
    Case UNITS_POWER
      GetConversionFactor = PowerConversionFactor(ListIndex)
    Case UNITS_POWERPERVOLUME
      GetConversionFactor = PowerPerVolumeConversionFactor(ListIndex)
    Case UNITS_MW
      GetConversionFactor = MolecularWeightConversionFactor(ListIndex)
    Case UNITS_MOLARVOLUME
      GetConversionFactor = MolarVolumeConversionFactor(ListIndex)
      
      
    'more to come....

  End Select

End Function

Function GetUnits(UnitList As ComboBox) As String

  GetUnits = Trim$(UnitList.List(UnitList.ListIndex))

End Function

Function InverseTimeConversionFactor(UnitsToConvertTo As Integer) As Double
   'This function will convert from standard inverse time units (1/sec) to
   'the units specified by the user.

   Select Case UnitsToConvertTo
      Case INVERSETIME_S
         InverseTimeConversionFactor = 1#
      Case INVERSETIME_MIN    'Convert to 1/min
         InverseTimeConversionFactor = 60#
      Case INVERSETIME_HR     'Convert to 1/hr
         InverseTimeConversionFactor = 60# * 60#
      Case INVERSETIME_D      'Convert to 1/d
         InverseTimeConversionFactor = 60# * 60# * 24#
   End Select

End Function

Function KFreundlichConversionFactor(UnitsToConvertTo As Integer, OneOverN As Double, MW As Double) As Double
   'This function will convert from standard Freundlich K units
   '((mg/g)*(L/mg)^(1/n)) to the units specified by the user.
Dim factor1 As Double
Dim factor2 As Double
   
   factor1 = MW ^ (OneOverN - 1)
   factor2 = 1000 ^ (1 - OneOverN)
   
   Select Case UnitsToConvertTo
      Case K_FREUNDLICH_MG_G_L
         'No conversion.
         KFreundlichConversionFactor = 1#
      Case K_FREUNDLICH_MMOL_G_L
         'Convert to (mmol/g)*(L/mmol)^(1/n)
         KFreundlichConversionFactor = factor1
      Case K_FREUNDLICH_UG_G_L
         'Convert to (ug/g)*(L/ug)^(1/n)
         KFreundlichConversionFactor = factor2
      Case K_FREUNDLICH_UMOL_G_L
         'Convert to (umol/g)*(L/umol)^(1/n)
         KFreundlichConversionFactor = factor1 * factor2
   End Select

End Function

Function LengthConversionFactor(UnitsToConvertTo As Integer) As Double
   'This function will convert from standard length units (m) to
   'the units specified by the user.

   Select Case UnitsToConvertTo
      Case LENGTH_M
         LengthConversionFactor = 1#
      Case LENGTH_CM   'Convert to cm
         LengthConversionFactor = 100#
      Case LENGTH_FT   'Convert to feet
         LengthConversionFactor = 3.2808
      Case LENGTH_IN   'Convert to inches
         LengthConversionFactor = 39.37
   End Select

End Function

Function MassConversionFactor(UnitsToConvertTo As Integer) As Double
   'This function will convert from standard mass units (kg) to
   'the units specified by the user.

   Select Case UnitsToConvertTo
      Case MASS_KG
         MassConversionFactor = 1#
      Case MASS_G   'Convert to g
         MassConversionFactor = 1000#
      Case MASS_LB   'Convert to lb
         MassConversionFactor = 2.20462
   End Select

End Function

Function MassLoadingRateConversionFactor(UnitsToConvertTo As Integer) As Double
'This function will convert from standard mass loading rate units (kg/m^2/s) to
'the units specified by the user.

  Select Case UnitsToConvertTo
    Case MASSLOADINGRATE_KG_M2_S
      MassLoadingRateConversionFactor = 1#
    Case MASSLOADINGRATE_G_M2_D
      MassLoadingRateConversionFactor = 86400# * 1000#
    Case MASSLOADINGRATE_LBM_FT2_S
      MassLoadingRateConversionFactor = 2.20462 / 10.7639
  End Select

End Function

Function MolarVolumeConversionFactor(UnitsToConvertTo As Integer) As Double
   'This function will convert from standard molar volume units (m^3/kmol) to
   'the units specified by the user.

   Select Case UnitsToConvertTo
      Case MOLAR_VOLUME_M3_per_KMOL
         MolarVolumeConversionFactor = 1#
      Case MOLAR_VOLUME_M3_per_GMOL   'Convert to m^3/gmol
         MolarVolumeConversionFactor = 1# / 1000#
      Case MOLAR_VOLUME_L_per_GMOL    'Convert to L/gmol
         MolarVolumeConversionFactor = 1#
      Case MOLAR_VOLUME_ML_per_GMOL   'Convert to mL/gmol
         MolarVolumeConversionFactor = 1000#
   End Select

End Function

Function MolecularWeightConversionFactor(UnitsToConvertTo As Integer) As Double
   'This function always returns 1#
   '(all MW's are the same in this version of UNITCONV.BAS).

   MolecularWeightConversionFactor = 1#

End Function

Sub Populate_Area_Units(dest As ComboBox, Default_Unit As Integer)
  
  dest.Clear
  dest.AddItem "m" & Chr$(178)
  dest.AddItem "cm" & Chr$(178)
  dest.AddItem "ft" & Chr$(178)
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_Concentration_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem Chr$(181) & "g/L"
  dest.AddItem "mg/L"
  dest.AddItem "g/L"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_Density_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "g/mL"
  dest.AddItem "kg/m" & Chr$(179)
  dest.AddItem "lb/ft" & Chr$(179)
  dest.AddItem "lb/gal"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_Diffusivity_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "m" & Chr$(178) & "/s"
  dest.AddItem "m" & Chr$(178) & "/min"
  dest.AddItem "m" & Chr$(178) & "/hr"
  dest.AddItem "m" & Chr$(178) & "/d"
  dest.AddItem "cm" & Chr$(178) & "/s"
  dest.AddItem "cm" & Chr$(178) & "/min"
  dest.AddItem "ft" & Chr$(178) & "/s"
  dest.AddItem "ft" & Chr$(178) & "/min"
  dest.AddItem "ft" & Chr$(178) & "/hr"
  dest.AddItem "ft" & Chr$(178) & "/d"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_FlowRate_Units(dest As ComboBox, Default_Unit As Integer)
  
  dest.Clear
  dest.AddItem "m" & Chr$(179) & "/s"
  dest.AddItem "m" & Chr$(179) & "/d"
  dest.AddItem "cm" & Chr$(179) & "/s"
  dest.AddItem "mL/min"
  dest.AddItem "ft" & Chr$(179) & "/s"
  dest.AddItem "ft" & Chr$(179) & "/d"
  dest.AddItem "gpm"
  dest.AddItem "gpd"
  dest.AddItem "MGD"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_InverseTime_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "1/s"
  dest.AddItem "1/min"
  dest.AddItem "1/hr"
  dest.AddItem "1/d"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_KFreundlich_Units(dest As ComboBox, Default_Unit As Integer)
'
'  dest.Clear
'  dest.AddItem "(mg/g)*(L/mg)^(1/n)"
'  dest.AddItem "(mmol/g)*(L/mmol)^(1/n)"
'  dest.AddItem "(" & Chr$(181) & "g/g)*(L/" & Chr$(181) & "g)^(1/n)"
'  dest.AddItem "(" & Chr$(181) & "mol/g)*(L/" & Chr$(181) & "mol)^(1/n)"
'  dest.ListIndex = Default_Unit
'
End Sub

Sub Populate_Length_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "m"
  dest.AddItem "cm"
  dest.AddItem "ft"
  dest.AddItem "in"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_Mass_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "kg"
  dest.AddItem "g"
  dest.AddItem "lb"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_MassLoadingRate_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "kg/m" & Chr$(178) & "-s"
  dest.AddItem "g/m" & Chr$(178) & "-d"
  dest.AddItem "lbm/ft" & Chr$(178) & "-s"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_MolarVolume_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "m" & Chr$(179) & "/kmol"
  dest.AddItem "m" & Chr$(179) & "/gmol"
  dest.AddItem "L/gmol"
  dest.AddItem "mL/gmol"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_MolecularWeight_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "mg/mmol"
  dest.AddItem Chr$(181) & "g/" & Chr$(181) & "mol"
  dest.AddItem "g/gmol"
  dest.AddItem "kg/kmol"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_Power_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "kW"
  dest.AddItem "W"
  dest.AddItem "hp"
  dest.AddItem "ft-lb/s"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_PowerPerVolume_Units(dest As ComboBox, Default_Unit As Integer)
  
  dest.Clear
  dest.AddItem "W/m" & Chr$(179)
  dest.AddItem "kW/m" & Chr$(179)
  dest.AddItem "hp/ft" & Chr$(179)
  dest.AddItem "ft-lb/ft" & Chr$(179) & "-s"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_Pressure_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "Pa"
  dest.AddItem "kPa"
  dest.AddItem "bars"
  dest.AddItem "atm"
  dest.AddItem "psi"
  dest.AddItem "mmHg"
  dest.AddItem "mH20"
  dest.AddItem "ftH20"
  dest.AddItem "inHg"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_PressurePerLength_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "Pa/m"
  dest.AddItem "psi/ft"
  dest.AddItem "atm/ft"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_Temperature_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "K"
  dest.AddItem "C"
  dest.AddItem "R"
  dest.AddItem "F"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_Time_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "s"
  dest.AddItem "min"
  dest.AddItem "hr"
  dest.AddItem "d"
  dest.ListIndex = Default_Unit

End Sub

Sub Populate_Volume_Units(dest As ComboBox, Default_Unit As Integer)

  dest.Clear
  dest.AddItem "m" & Chr$(179)
  dest.AddItem "cm" & Chr$(179)
  dest.AddItem "liter"
  dest.AddItem "ft" & Chr$(179)
  dest.AddItem "gal"
  dest.ListIndex = Default_Unit

End Sub

Function PowerConversionFactor(UnitsToConvertTo As Integer) As Double
'This function will convert from standard power units (kilowatts) to
'the units specified by the user.

  Select Case UnitsToConvertTo
    Case POWER_KW
      PowerConversionFactor = 1#
    Case POWER_W
      PowerConversionFactor = 1000#
    Case POWER_HP
      PowerConversionFactor = 1000# / 745.6999
    Case POWER_FTLB_per_S
      PowerConversionFactor = 1000# / 1.35582
  End Select

End Function

Function PowerPerVolumeConversionFactor(UnitsToConvertTo As Integer) As Double
'This function will convert from standard power per volume units (watts/m^3) to
'the units specified by the user.

  Select Case UnitsToConvertTo
    Case POWERPERVOLUME_W_per_M3
      PowerPerVolumeConversionFactor = 1#
    Case POWERPERVOLUME_KW_per_M3
      PowerPerVolumeConversionFactor = 1# / 1000#
    Case POWERPERVOLUME_HP_per_FT3
      PowerPerVolumeConversionFactor = 1# / 26334.14
    Case POWERPERVOLUME_FTLB_per_S_FT3
      PowerPerVolumeConversionFactor = 1# / 47.88026
  End Select

End Function

Function PressureConversionFactor(UnitsToConvertTo As Integer) As Double

   'This function will convert from standard pressure units (Pa) to
   'the units specified by the user.

   Select Case UnitsToConvertTo
      Case PRESSURE_PA
         PressureConversionFactor = 1#
      Case PRESSURE_KPA   'Convert to kPa
         PressureConversionFactor = 1# / 1000#
      Case PRESSURE_BARS   'Convert to bars
         PressureConversionFactor = 1# / 100000#
      Case PRESSURE_ATM   'Convert to atm
         PressureConversionFactor = 1# / 101325#
      Case PRESSURE_PSI   'Convert to psi
         PressureConversionFactor = 14.696 / 101325#
      Case PRESSURE_MMHG   'Convert to mm Hg
         PressureConversionFactor = 760# / 101325#
      Case PRESSURE_MH2O   'Convert to m H2O
         PressureConversionFactor = 10.333 / 101325#
      Case PRESSURE_FTH2O   'Convert to ft H2O
         PressureConversionFactor = 33.9 / 101325#
      Case PRESSURE_INHG   'Convert to in. Hg
         PressureConversionFactor = 29.921 / 101325#

   End Select

End Function

Function PressurePerLengthConversionFactor(UnitsToConvertTo As Integer) As Double
'This function will convert from standard pressure/length units (Pa/m) to
'the units specified by the user.

  Select Case UnitsToConvertTo
    Case PRESSUREPERLENGTH_PA_per_M
      PressurePerLengthConversionFactor = 1#
    Case PRESSUREPERLENGTH_PSI_per_FT
      PressurePerLengthConversionFactor = 0.3048 / 6894.76
    Case PRESSUREPERLENGTH_ATM_per_FT
      PressurePerLengthConversionFactor = 0.3048 / 101325
  End Select

End Function

Function ResinCapacityConversionFactor(UnitsToConvertTo As Integer) As Double
''   'This function will convert from standard resin capacity units (meq/g) to
'   'the units specified by the user.
'
'   Dim BedVolume As Double, ColumnArea As Double
'
'   ColumnArea = Pi * (Bed.Diameter * 100#) ^ 2 / 4
'   Select Case UnitsToConvertTo
'      Case RESIN_CAPACITY_MEQ_per_MLbed   'Convert to meq/ml bed
'         ResinCapacityConversionFactor = Bed.Weight * 1000# / ColumnArea / (Bed.Length * 100#)
'      Case RESIN_CAPACITY_MEQ_per_MLresin   'Convert to meq/ml resin
'         ResinCapacityConversionFactor = Resin.ApparentDensity
'   End Select
'
End Function

Function ReverseTemperatureConversion(UnitsToConvertFrom As Integer, Temperature_NonKelvin As Double) As Double
   'This function will convert from non-standard temperature units (C, R, or F) to
   'standard temperature units (K)

   Select Case UnitsToConvertFrom
      Case TEMPERATURE_K   'Convert from Deg. K
         ReverseTemperatureConversion = Temperature_NonKelvin
      Case TEMPERATURE_C   'Convert from Deg. C
         ReverseTemperatureConversion = Temperature_NonKelvin + 273.15
      Case TEMPERATURE_R   'Convert from Deg. R
         ReverseTemperatureConversion = Temperature_NonKelvin / 1.8
      Case TEMPERATURE_F   'Convert from Deg. F
         ReverseTemperatureConversion = (Temperature_NonKelvin + 459.67) / 1.8
   End Select

End Function

Sub SetUnits(UnitList As ComboBox, NewUnitStr As String)
Dim i As Integer
Dim NewUnit As Integer

  NewUnit = -1

  For i = 0 To UnitList.ListCount - 1
    If (Trim$(UnitList.List(i)) = Trim$(NewUnitStr)) Then
      NewUnit = i
      Exit For
    End If
  Next i

  If (NewUnit = -1) Then
    'Error!  Unit not found!
    NewUnit = 0
  End If

  UnitList.ListIndex = NewUnit
  
End Sub

Function TemperatureConversion(UnitsToConvertTo As Integer, Temperature_Kelvin As Double) As Double
   'This function will convert from standard temperature units (K) to
   'the units specified by the user.

   Select Case UnitsToConvertTo
      Case TEMPERATURE_K
         TemperatureConversion = Temperature_Kelvin
      Case TEMPERATURE_C   'Convert to Deg. C
         TemperatureConversion = Temperature_Kelvin - 273.15
      Case TEMPERATURE_R   'Convert to Deg. R
         TemperatureConversion = 1.8 * Temperature_Kelvin
      Case TEMPERATURE_F   'Convert to Deg. F
         TemperatureConversion = 1.8 * Temperature_Kelvin - 459.67
   End Select

End Function

Function TimeConversionFactor(UnitsToConvertTo As Integer) As Double
   'This function will convert from standard time units (sec) to
   'the units specified by the user.

   Select Case UnitsToConvertTo
      Case TIME_S
         TimeConversionFactor = 1#
      Case TIME_MIN   'Convert to min
         TimeConversionFactor = 1 / 60#
      Case TIME_HR    'Convert to hr
         TimeConversionFactor = 1# / 60# / 60#
      Case TIME_D     'Convert to d
         TimeConversionFactor = 1# / 60# / 60# / 24#
   End Select

End Function

Function VelocityConversionFactor(UnitsToConvertTo As Integer) As Double

   'This function will convert from standard velocity units (cm/s) to
   'the units specified by the user.

   Select Case UnitsToConvertTo
      Case VELOCITY_CM_per_S
         VelocityConversionFactor = 1#
      Case VELOCITY_CM_per_MIN   'Convert to cm/min
         VelocityConversionFactor = 60#
      Case VELOCITY_M_per_S   'Convert to m/s
         VelocityConversionFactor = 1 / (100#)
      Case VELOCITY_M_per_MIN   'Convert to m/min
         VelocityConversionFactor = 60# / (100#)
      Case VELOCITY_M_per_HR   'Convert to m/hr
         VelocityConversionFactor = (60# * 60#) / (100#)
      Case VELOCITY_M_per_D   'Convert to m/d
         VelocityConversionFactor = (60# * 60# * 24#) / (100#)
      Case VELOCITY_FT_per_S   'Convert to ft/s
         VelocityConversionFactor = (3.2808 / 100#)
      Case VELOCITY_FT_per_MIN   'Convert to ft/min
         VelocityConversionFactor = 60# * (3.2808 / 100#)
      Case VELOCITY_FT_per_HR   'Convert to ft/hr
         VelocityConversionFactor = 60# * 60# * (3.2808 / 100#)
      Case VELOCITY_FT_per_D   'Convert to ft/d
         VelocityConversionFactor = 60# * 60# * 24# * (3.2808 / 100#)
   End Select

End Function

Function VolumeConversionFactor(UnitsToConvertTo As Integer) As Double
'This function will convert from standard volume units (m^3) to
'the units specified by the user.

  Select Case UnitsToConvertTo
    Case VOLUME_M3
      VolumeConversionFactor = 1#
    Case VOLUME_CM3
      VolumeConversionFactor = 1000# * 1000#
    Case VOLUME_LITER
      VolumeConversionFactor = 1000#
    Case VOLUME_FT3
      VolumeConversionFactor = 35.3147
    Case VOLUME_GAL
      VolumeConversionFactor = 264.172
  End Select

End Function

Attribute VB_Name = "UnitsMod"
Option Explicit

Sub Combobox_KeyPress(KeyAscii As Integer)

  If KeyAscii = 13 Then
    KeyAscii = 0
    SendKeys "{Tab}"
    Exit Sub
  End If

End Sub

Function FormatSciNumber(Dummy As Double) As String

  Select Case Abs(Dummy)
    Case Is < 0.1
      FormatSciNumber = Format$(Dummy, "0.000e+00")
    Case Is > 100#
      FormatSciNumber = Format$(Dummy, "0.000e+00")
    Case Else
      FormatSciNumber = Format$(Dummy, "0.000")
  End Select

End Function

Function NoUnits_LostFocus(txt As TextBox, NewVal As Double, Temp_Text As String)
Dim NoUnitBox As ComboBox

  NoUnits_LostFocus = Unitted_LostFocus(0, txt, NoUnitBox, NewVal, Temp_Text)

End Function

Sub TextBoxNumber_KeyPress(KeyAscii As Integer)

  If KeyAscii = 13 Then
    KeyAscii = 0
    SendKeys "{Tab}"
    Exit Sub
  End If
  
  If ((KeyAscii > Asc("9") Or KeyAscii < Asc("0")) And KeyAscii <> Asc(".") And KeyAscii <> 8 And KeyAscii <> Asc("E") And (KeyAscii <> Asc("e")) And (KeyAscii <> Asc("-"))) Then
    KeyAscii = 0
    Beep
  End If

End Sub

Sub TextBoxString_KeyPress(KeyAscii As Integer)
    
  If (KeyAscii = 13) Then
    KeyAscii = 0
    SendKeys "{Tab}"
    Exit Sub
  End If

End Sub

Sub TextHandleError(IsError As Integer, txt As TextBox, Temp_Text As String)
Dim Dummy As Double
Dim i As Integer

  IsError = False
  On Error GoTo ErrorHandler
  If StrComp("Not", Left$(Trim$(txt.Text), 3)) Then
    Dummy = CDbl(txt.Text)
'    If Dummy < 0# Then GoTo NegativeNumberError
    If IsError Then txt.SetFocus
  Else
    txt.Text = Temp_Text
  End If
  GoTo ContinueSub

ErrorHandler:
  IsError = True
  'frmAirWaterProperties.Print "Error Occurred"
  'MsgBox "Incorrect Value Will Be Replaced By Previous Value", , "Invalid Data Error"
  txt.Text = Temp_Text
  Resume

NegativeNumberError:
  IsError = True
  txt.Text = Temp_Text
  txt.SetFocus

ContinueSub:

End Sub

Sub TextNumberChanged_WithUnits(ConversionFactor As Double, NewVal As Double, ValueChanged As Integer, txt As TextBox, Temp_Text As String)
Dim Dummy1 As Double, Dummy2 As Double

  If (Temp_Text = "") Then
    ValueChanged = True
    Exit Sub
  End If

  If (ConversionFactor < 0) Then
    Dummy1 = ReverseTemperatureConversion(-ConversionFactor - 1, CDbl(txt.Text))
  Else
    Dummy1 = CDbl(txt.Text) / ConversionFactor
  End If
  Dummy2 = CDbl(Temp_Text)

  ValueChanged = True
  If (txt.Text = Temp_Text) Then ValueChanged = False
  If (Abs(Dummy1 - Dummy2) < NUMBER_CHANGING_CRITERIA) Then ValueChanged = False

  If (ValueChanged) Then
    NewVal = Dummy1
  End If

End Sub

Function Unitted_LostFocus(WhatUnits As Integer, txt As TextBox, UnitBox As ComboBox, NewVal As Double, Temp_Text As String)
Dim Dummy1 As Double
Dim Dummy2 As Double
Dim IsNew As Integer
Dim ConversionFactor As Double

  IsNew = False

  Call TextHandleError(IsError, txt, Temp_Text)
  If (IsError) Then GoTo EntryError
  If (Not HaveValue(CDbl(txt))) Then GoTo EntryError
  
  Select Case WhatUnits
    Case 0
      'No units.
      Dummy1 = CDbl(txt.Text)
    Case UNITS_TEMPERATURE
      'Handle special case of temperature conversions.
      Dummy1 = ReverseTemperatureConversion(CInt(UnitBox.ListIndex), CDbl(txt.Text))
    Case Else
      'Handle non-temperature units.
      ConversionFactor = GetConversionFactor(WhatUnits, CInt(UnitBox.ListIndex))
      Dummy1 = CDbl(txt.Text) / ConversionFactor
  End Select
  
  If (Temp_Text = "") Then
    IsNew = True
    NewVal = Dummy1
  Else
    Dummy2 = CDbl(Temp_Text)
    IsNew = True
    If (txt.Text = Temp_Text) Then IsNew = False
    If (Abs(Dummy1 - Dummy2) < NUMBER_CHANGING_CRITERIA) Then
      IsNew = False
    End If
  End If
  
  If (IsNew) Then NewVal = Dummy1
  
  Unitted_LostFocus = IsNew
  Exit Function

EntryError:
  IsNew = False
  txt.Text = Temp_Text
  txt.SetFocus
  Unitted_LostFocus = False

End Function

Sub Unitted_NumberUpdate(UnitBox As ComboBox)
'Generate a click event on this unitbox, thus resulting
'in an update of the associated number into its correct
'units (if it has changed and/or been badly written to).
Dim SaveListIndex As Integer

  SaveListIndex = UnitBox.ListIndex
  UnitBox.ListIndex = -1
  UnitBox.ListIndex = SaveListIndex

End Sub

Sub Unitted_UnitChange(WhatUnits As Integer, MemVal As Double, UnitBox As ComboBox, txt As Control)
Dim ConversionFactor As Double
Dim Dummy1 As Double

  If (WhatUnits = UNITS_TEMPERATURE) Then
    'Handle special case of temperature conversions.
    Dummy1 = TemperatureConversion(CInt(UnitBox.ListIndex), MemVal)
  Else
    'Handle non-temperature units.
    ConversionFactor = GetConversionFactor(WhatUnits, CInt(UnitBox.ListIndex))
    Dummy1 = MemVal * ConversionFactor
  End If

  txt = FormatSciNumber(Dummy1)

End Sub

Attribute VB_Name = "ValidateMod"
Option Explicit

Global Const vfSendFocus = 1
Global Const vfReturnFocus = 2

Global glBackColor As Long
Global glForeColor As Long




Const ValidateMod_declarations_end = True


Sub GotFocus_Handle(Frm As Form, Ctl As Control, OriginalValue As String)
  If TypeOf Ctl Is TextBox Then
    '
    ' Select entire text string
    '
    OriginalValue = Ctl.Text
    Ctl.SelStart = 0
    Ctl.SelLength = Len(OriginalValue)
    '
    ' Set light blue background
    '
    glBackColor = Ctl.BackColor
    glForeColor = Ctl.ForeColor
    Ctl.BackColor = &HFFFF00
    Ctl.ForeColor = &H80000008
  End If
'  If (frmMainMenu!VFocus1.ActiveControl = 0) Then
'    frmMainMenu!VFocus1.ActiveControl = ctl.hWnd
'    If TypeOf ctl Is TextBox Then
'      '-- Select entire text string
'      OriginalValue = ctl.Text
'      ctl.SelStart = 0
'      ctl.SelLength = Len(OriginalValue)
'
'      '-- Set light blue background
'      glBackColor = ctl.BackColor
'      glForeColor = ctl.ForeColor
'      ctl.BackColor = &HFFFF00
'      ctl.ForeColor = &H80000008
'    End If
'  End If
End Sub

Sub LostFocus_Handle(Frm As Form, Ctl As Control, ValidationOK As Integer)
  If TypeOf Ctl Is TextBox Then
    Ctl.BackColor = glBackColor
    Ctl.ForeColor = glForeColor
  End If
'  If (ValidationOK) Then
'    frmMainMenu!VFocus1.FocusAction = vfSendFocus
'  Else
'    frmMainMenu!VFocus1.FocusAction = vfReturnFocus
'  End If
'  frmMainMenu!VFocus1.ActiveControl = 0
'
'  If TypeOf Ctl Is TextBox Then
'    Ctl.BackColor = glBackColor
'    Ctl.ForeColor = glForeColor
'  End If
End Sub

Function LostFocus_IsEvil(Frm As Form, Ctl As Control)
  LostFocus_IsEvil = False
'  If (frmMainMenu!VFocus1.ActiveControl = Ctl.hWnd) Then
'    LostFocus_IsEvil = False
'  Else
'    LostFocus_IsEvil = True
'  End If
End Function

Attribute VB_Name = "WriteMod"
Option Explicit
' THIS MODULE HAS ALL OF THE FUNCTIONS IN IT THAT RELATE
' TO READING AND WRITING OF THE MAIN DEFAULT FILE.

' CURRENT METHOD..   0 = Packed Tower   1 = Bubble  2 = Surface
Global CurrMethod%

' CURRENT MODE        0 = DESIGN   1 = RATING
Global CurrMode%

Sub WriteBubbleType(fnum As Integer, buf As BubbleType)
Dim i%

Call WriteBubInfoType(fnum, buf.OperatingPressure)
Call WriteBubInfoType(fnum, buf.operatingtemperature)
Call WriteBubInfoType(fnum, buf.WaterDensity)
Call WriteBubInfoType(fnum, buf.WaterViscosity)
Call WriteBubInfoType(fnum, buf.N_for_Finding_KLa)
Call WriteBubInfoType(fnum, buf.kgOVERkl_for_Finding_KLa)
Call WriteBubInfoType(fnum, buf.ContaminantMassTransferCoefficient)
Call WriteBubInfoType(fnum, buf.WaterFlowRate)
Call WriteBubInfoType(fnum, buf.MinimumAirToWaterRatio)
Call WriteBubInfoType(fnum, buf.AirToWaterRatio)
Call WriteBubInfoType(fnum, buf.AirFlowRate)
Call WriteBubInfoType(fnum, buf.TankHydraulicRetentionTime)
Call WriteBubInfoType(fnum, buf.TotalHydraulicRetentionTime)
Call WriteBubInfoType(fnum, buf.TankVolume)
Call WriteBubInfoType(fnum, buf.TotalTankVolume)
Call WriteBubInfoType(fnum, buf.StantonNumber)

Put #fnum, , buf.NumberOfTanks.value
Put #fnum, , buf.NumberOfTanks.UserInput
Put #fnum, , buf.NumberOfTanks.ValChanged

Put #fnum, , buf.CodeForTausAndTankVolumes
Put #fnum, , buf.DesiredPercentRemoval
Put #fnum, , buf.AchievedPercentRemoval
Put #fnum, , buf.ID_OptimalDesignContaminant

Put #fnum, , buf.Power.BlowerBrakePower
Put #fnum, , buf.Power.TotalBrakePower
Put #fnum, , buf.Power.InletAirTemperature
Put #fnum, , buf.Power.BlowerEfficiency
Put #fnum, , buf.Power.TankWaterDepth
Put #fnum, , buf.Power.NumberOfBlowersinEachTank

Put #fnum, , buf.Chemical

Put #fnum, , buf.NumChemical
For i% = 1 To buf.NumChemical
    Call WriteBubContamProperty(fnum, buf.Contaminant(i%))
Next i%
Call WriteBubContamProperty(fnum, buf.DesignContaminant)

Put #fnum, , buf.Oxygen.KLaMethod
Call WriteBubInfoType(fnum, buf.Oxygen.LiquidDiffusivity)
Call WriteBubInfoType(fnum, buf.Oxygen.MassTransferCoefficient)
Call WriteBubInfoType(fnum, buf.Oxygen.CWO2TestData.SOTR)
Call WriteBubInfoType(fnum, buf.Oxygen.CWO2TestData.SOTE)
Call WriteBubInfoType(fnum, buf.Oxygen.CWO2TestData.AirFlowRate_QAIR)
Call WriteBubInfoType(fnum, buf.Oxygen.CWO2TestData.BarometricPressure_PB)
Call WriteBubInfoType(fnum, buf.Oxygen.CWO2TestData.WaterDepth_DEPTHW)
Call WriteBubInfoType(fnum, buf.Oxygen.CWO2TestData.WaterVolumePerTank_VM3)
Put #fnum, , buf.Oxygen.CWO2TestData.DOSaturationConc_CSTR20
Put #fnum, , buf.Oxygen.CWO2TestData.WeightDensityOfWater_GAMMAW
Put #fnum, , buf.Oxygen.CWO2TestData.EffectiveSaturationDepth_DEFF
Put #fnum, , buf.Oxygen.CWO2TestData.ApparentOxygenMTCoeff_KLA20
Put #fnum, , buf.Oxygen.CWO2TestData.WaterVolumePerTankLiters_V
Put #fnum, , buf.Oxygen.CWO2TestData.TrueKLaAt20DegC_KLAT20
Put #fnum, , buf.Oxygen.CWO2TestData.Phi
Put #fnum, , buf.Oxygen.CWO2TestData.TrueOxygenMTCoeffOperatingT_KLAO2

End Sub

Sub WriteBubContamProperty(fnum As Integer, buf As BubbleContaminantPropertyType)
    Dim strsize%, i%

strsize% = Len(buf.Name)
Put #fnum, , strsize%
Put #fnum, , buf.Name
Put #fnum, , buf.Pressure
Put #fnum, , buf.Temperature

For i% = 0 To MAXIMUM_TANKS
    Put #fnum, , buf.Effluent(i%)
Next i%

For i% = 1 To MAXIMUM_TANKS
    Put #fnum, , buf.GasEffluent(i%)
Next i%

Call WriteBubInfoType(fnum, buf.MolecularWeight)
Call WriteBubInfoType(fnum, buf.HenrysConstant)
Call WriteBubInfoType(fnum, buf.MolarVolume)
Call WriteBubInfoType(fnum, buf.LiquidDiffusivity)
Call WriteBubInfoType(fnum, buf.Influent)
Call WriteBubInfoType(fnum, buf.TreatmentObjective)
End Sub

Sub WriteBubInfoType(fnum As Integer, buf As BubbleInformationType)

Put #fnum, , buf.value
Put #fnum, , buf.UserInput
Put #fnum, , buf.ValChanged

End Sub

Sub WriteOndaMassTransCoef(fnum As Integer, buf As OndaMassTransferCoefficientType)

Put #fnum, , buf.ReynoldsNumber
Put #fnum, , buf.FroudeNumber
Put #fnum, , buf.WeberNumber
Put #fnum, , buf.LiquidPhaseMassTransferResistance
Put #fnum, , buf.GasPhaseMassTransferResistance
Put #fnum, , buf.TotalMassTransferResistance
Put #fnum, , buf.LiquidPhaseMassTransferCoefficient
Put #fnum, , buf.GasPhaseMassTransferCoefficient
Put #fnum, , buf.OverallMassTransferCoefficient
Put #fnum, , buf.ValChanged

End Sub

Sub WriteProgramState(Filename$)
    Dim StateFileID$
    Dim strsize%


If Filename$ = "" Then Exit Sub
StateFileID$ = "Stepp Data File"


Open Filename$ For Binary As #1
strsize% = Len(StateFileID$)
Put #1, 1, strsize%
Put #1, 1, StateFileID$

Select Case CurrMethod%
    Case 0 ' ***** SAVE PACKED TOWER DESIGN MODE ******
        Call WriteSCRType(1, scr1)
        Call WriteSCRType(1, Scr2)

    Case 1 ' ***** SAVE BUBBLE TOWER RATING MODE ******
        Call WriteBubbleType(1, bub)
'        Call WriteBubbleType(1, bub(CurrMode%))

    Case 2 ' ***** SAVE SURFACE TOWER RATING MODE ******
        Call WriteSurfaceType(1, sur)
'        Call WriteSurfaceType(1, sur(CurrMode%))

End Select


Close #1

End Sub

Sub WritePTADInfoType(fnum As Integer, buf As PTADInformationType)

Put #fnum, , buf.value
Put #fnum, , buf.ValChanged
Put #fnum, , buf.UserInput

End Sub

Sub WritePTContamProperty(fnum As Integer, buf As ContaminantPropertyType)
    Dim strsize%

strsize% = Len(buf.Name)
Put #fnum, , strsize%
Put #fnum, , buf.Name
Put #fnum, , buf.Pressure
Put #fnum, , buf.Temperature
Put #fnum, , buf.AirWaterInterfaceConcentration
Call WritePTADInfoType(fnum, buf.MolecularWeight)
Call WritePTADInfoType(fnum, buf.HenrysConstant)
Call WritePTADInfoType(fnum, buf.MolarVolume)
Call WritePTADInfoType(fnum, buf.NormalBoilingPoint)
Call WritePTADInfoType(fnum, buf.LiquidDiffusivity)
Call WritePTADInfoType(fnum, buf.GasDiffusivity)
Call WritePTADInfoType(fnum, buf.Influent)
Call WritePTADInfoType(fnum, buf.TreatmentObjective)
Call WritePTADInfoType(fnum, buf.Effluent)

End Sub

Sub WriteSCRType(fnum As Integer, buf As SCR)
  Dim i%

Call WritePTADInfoType(fnum, buf.OperatingPressure)
Call WritePTADInfoType(fnum, buf.operatingtemperature)
Call WritePTADInfoType(fnum, buf.WaterFlowRate)
Call WritePTADInfoType(fnum, buf.WaterDensity)
Call WritePTADInfoType(fnum, buf.WaterViscosity)
Call WritePTADInfoType(fnum, buf.WaterSurfaceTension)
Call WritePTADInfoType(fnum, buf.WaterLoadingRate)
Call WritePTADInfoType(fnum, buf.AirDensity)
Call WritePTADInfoType(fnum, buf.AirViscosity)
Call WritePTADInfoType(fnum, buf.AirToWaterRatio)
Call WritePTADInfoType(fnum, buf.AirFlowRate)
Call WritePTADInfoType(fnum, buf.AirPressureDrop)
Call WritePTADInfoType(fnum, buf.AirLoadingRate)
Call WritePTADInfoType(fnum, buf.MinimumAirToWaterRatio)
Call WritePTADInfoType(fnum, buf.MultipleOfMinimumAirToWaterRatio)
Call WritePTADInfoType(fnum, buf.KLaSafetyFactor)
Call WritePTADInfoType(fnum, buf.DesignMassTransferCoefficient)
Call WritePTADInfoType(fnum, buf.TowerArea)
Call WritePTADInfoType(fnum, buf.TowerDiameter)
Call WritePTADInfoType(fnum, buf.TowerHeight)
Call WritePTADInfoType(fnum, buf.TowerVolume)
Call WritePTADInfoType(fnum, buf.SpecifiedTowerDiameter)
Call WritePTADInfoType(fnum, buf.SpecifiedTowerHeight)

Call WritePackingDataType(fnum, buf.Packing)

Put #fnum, , buf.NumChemical
For i% = 1 To buf.NumChemical
    Call WritePTContamProperty(fnum, buf.Contaminant(i%))
Next i%

Put #fnum, , buf.ID_OptimalDesignContaminant
Call WritePTContamProperty(fnum, buf.DesignContaminant)

Call WriteOndaMassTransCoef(fnum, buf.Onda)

Put #fnum, , buf.Power.BlowerBrakePower
Put #fnum, , buf.Power.PumpBrakePower
Put #fnum, , buf.Power.TotalBrakePower
Put #fnum, , buf.Power.InletAirTemperature
Put #fnum, , buf.Power.BlowerEfficiency
Put #fnum, , buf.Power.PumpEfficiency

Put #fnum, , buf.TransferUnitHeight
Put #fnum, , buf.NumberOfTransferUnits
Put #fnum, , buf.Chemical

End Sub

Sub WriteSurfaceType(fnum As Integer, buf As SurfaceType)
    Dim i%


Call WriteSurfInfoType(fnum, buf.OperatingPressure)
Call WriteSurfInfoType(fnum, buf.operatingtemperature)
Call WriteSurfInfoType(fnum, buf.WaterDensity)
Call WriteSurfInfoType(fnum, buf.WaterViscosity)
Call WriteSurfInfoType(fnum, buf.PowerInput_PoverV)
Call WriteSurfInfoType(fnum, buf.N_for_Finding_KLa)
Call WriteSurfInfoType(fnum, buf.kgOVERkl_for_Finding_KLa)
Call WriteSurfInfoType(fnum, buf.ContaminantMassTransferCoefficient)
Call WriteSurfInfoType(fnum, buf.WaterFlowRate)
Call WriteSurfInfoType(fnum, buf.TankHydraulicRetentionTime)
Call WriteSurfInfoType(fnum, buf.TotalHydraulicRetentionTime)
Call WriteSurfInfoType(fnum, buf.TankVolume)
Call WriteSurfInfoType(fnum, buf.TotalTankVolume)

Put #fnum, , buf.NumberOfTanks.value
Put #fnum, , buf.NumberOfTanks.UserInput
Put #fnum, , buf.NumberOfTanks.ValChanged

Put #fnum, , buf.CodeForTausAndTankVolumes
Put #fnum, , buf.DesiredPercentRemoval
Put #fnum, , buf.AchievedPercentRemoval

Put #fnum, , buf.Power.AeratorMotorEfficiency
Put #fnum, , buf.Power.PowerForEachTank
Put #fnum, , buf.Power.TotalPowerForAllTanks

Put #fnum, , buf.Oxygen.KLaMethod
Call WriteSurfInfoType(fnum, buf.Oxygen.LiquidDiffusivity)
Call WriteSurfInfoType(fnum, buf.Oxygen.MassTransferCoefficient)

Put #fnum, , buf.NumChemical
Put #fnum, , buf.Chemical
For i% = 1 To buf.NumChemical
    Call WriteSurfContamProperty(fnum, buf.Contaminant(i%))
Next i%
Call WriteSurfContamProperty(fnum, buf.DesignContaminant)


End Sub

Sub WriteSurfContamProperty(fnum As Integer, buf As SurfaceContaminantPropertyType)
    Dim strsize%
    Dim i%

strsize% = Len(buf.Name)
Put #fnum, , strsize%
Put #fnum, , buf.Name
Put #fnum, , buf.Pressure
Put #fnum, , buf.Temperature
Call WriteSurfInfoType(fnum, buf.MolecularWeight)
Call WriteSurfInfoType(fnum, buf.HenrysConstant)
Call WriteSurfInfoType(fnum, buf.MolarVolume)
Call WriteSurfInfoType(fnum, buf.LiquidDiffusivity)
Call WriteSurfInfoType(fnum, buf.Influent)
Call WriteSurfInfoType(fnum, buf.TreatmentObjective)

For i% = 0 To MAXIMUM_TANKS
    Put #fnum, , buf.Effluent(i%)
Next i%
End Sub

Sub WriteSurfInfoType(fnum As Integer, buf As SurfaceInformationType)

Put #fnum, , buf.value
Put #fnum, , buf.UserInput
Put #fnum, , buf.ValChanged

End Sub

Option Explicit

' "Molecular Weight"
' "Henry's Constant"
' "Molar Volume"
' "Normal Boiling Point"
' "Liquid Diffusivity"
' "Gas Diffusivity"


       'Output the units of this screen.
       
       



    
' & " (" & x & ")"


