Attribute VB_Name = "AddChemMod"
Sub addtolist(casnum As Integer)
    Dim i As Integer, J As Integer
    Dim msg$, Response As Integer

' RETURNS FALSE IF THE CHEMICAL CAN CONTINUE ON
' ALWAYS RETURNS FALSE IF NOT IN DEMOMODE CHECK DEMOMODE.BAS
    ''''If (demo_check_chemicals(contam_prop_form.contam_combo)) Then Exit Sub

    If NumSelectedChemicals = MAXSELECTEDCHEMICALS Then
       msg$ = "The maximum number of contaminants that can be selected at a time in the StEPP program is " & Str$(MAXSELECTEDCHEMICALS) & ".  Therefore, you may not select this chemical unless you Unselect a contaminant you selected previously or begin the program again."
       MsgBox msg$, MB_ICONSTOP, "Too Many Contaminants Selected"
       Exit Sub
    End If

    Screen.MousePointer = 11   'Hourglass

    Update_Fields (casnum)

    If NumSelectedChemicals = 0 Then
       contam_prop_form!mnuFile(4).Enabled = True
       contam_prop_form!mnuFile(5).Enabled = True
       contam_prop_form!mnuFile(7).Enabled = True
       contam_prop_form!cmdUnselectContaminant.Enabled = True
    End If

    For i = 0 To contam_prop_form.cboSelectContaminant.ListCount - 1
        If Trim$(contam_prop_form.cboSelectContaminant.List(i)) = Trim$(contam_prop_form.contam_combo.List(contam_prop_form.contam_combo.ListIndex)) Then
           msg$ = "There is already a contaminant named "
           msg$ = msg$ + contam_prop_form.contam_combo.List(contam_prop_form.contam_combo.ListIndex) + " selected. "
           msg$ = msg$ + Chr$(13) + Chr$(13)
           msg$ = msg$ + "Do you wish to reinitialize it to default properties by selecting it now?"
           Response = MsgBox(msg$, MB_ICONQUESTION + MB_YESNO, "Contaminant Already Selected")
           If Response = IDYES Then
              If Trim$(contam_prop_form.contam_combo.List(contam_prop_form.contam_combo.ListIndex)) <> Trim$(contam_prop_form.cboSelectContaminant.Text) Then  'If contaminant currently selected is not the one being replaced then update its values before performing calculations
                 For J = 1 To NUMBER_OF_PROPERTIES
                     phprop.HaveProperty(J) = HaveProperty(J)
                 Next J
                 For J = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
                     phprop.PROPAVAILABLE(J) = PROPAVAILABLE(J)
                 Next J
                 PropContaminant(PreviouslySelectedIndex) = phprop
              End If

              contam_prop_form.cboSelectContaminant.RemoveItem i
              For J = i + 2 To NumSelectedChemicals
                  PropContaminant(J - 1) = PropContaminant(J)
              Next J
              NumSelectedChemicals = NumSelectedChemicals - 1
              Exit For
           Else
              Screen.MousePointer = 0   'Arrow
              Exit Sub
           End If
        End If
    Next i

    contam_prop_form.cboSelectContaminant.AddItem contam_prop_form.contam_combo.List(contam_prop_form.contam_combo.ListIndex)
    contam_prop_form.lblSelectedContaminant.Caption = Trim$(dbinput.Name)

    'Update the contaminant selected prior to the new one if necessary
    If PreviouslySelectedIndex >= 0 Then
       For J = 1 To NUMBER_OF_PROPERTIES
           phprop.HaveProperty(J) = HaveProperty(J)
       Next J
       For J = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
           phprop.PROPAVAILABLE(J) = PROPAVAILABLE(J)
       Next J
       PropContaminant(PreviouslySelectedIndex) = phprop
    End If

'* initialize binary interaction parameter database choices
    phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = BIP_dbHierarchy.ActivityCoefficient(1)
    phprop.AqueousSolubility.BinaryInteractionParameterDatabase = BIP_dbHierarchy.AqueousSolubility(1)
    phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase = BIP_dbHierarchy.OctWaterPartCoeff(1)
    For i = 1 To 3
        phprop.ActivityCoefficient.BinaryInteractionParameterDBAvailable(i) = True
        phprop.AqueousSolubility.BinaryInteractionParameterDBAvailable(i) = True
        If i <> 3 Then phprop.OctWaterPartCoeff.BinaryInteractionParameterDBAvailable(i) = True
    Next i
    UserSelectedTheUnifacBIPDBActCoeff = False
    UserSelectedTheUnifacBIPDBAqSol = False
    UserSelectedTheUnifacBIPDBKow = False

'* Set Current Selections to None
    Call InitializeCurrentSelections

    NumSelectedChemicals = NumSelectedChemicals + 1
    Call InitializeHilights
    Call InitializePROPandHAVEAVAILABLEArrays
    Call InitializeUserInputs

    Call BlankAllTextBoxes
    frmWaitForCalculations.Show
    frmWaitForCalculations.Refresh

' THIS IS HERE TO MAKE SURE THAT THE CURRENT DIRECTORY IS WITH THE FORTRAN DLL
' FILES.   THE DIFFERENT *.DAT FILES THAT ARE USED BY THE FORTRAN DLLS MUST BE THERE
'    msg$ = CurDir$
'    ChDrive app.path
'    ChDir app.path + "\dlls"

    Call DoCalculationForThisContaminant

' RETURNING TO WHERE WE WERE BEFORE
'    ChDrive msg$
'    ChDir msg$

    phprop.AqueousSolubility.PreviousBinaryInteractionParameterDB = phprop.AqueousSolubility.BinaryInteractionParameterDatabase
    
    If NumSelectedChemicals > 0 Then contam_prop_form.cboSelectContaminant.Enabled = True

    frmWaitForCalculations.Hide
    contam_prop_form.cboSelectContaminant.ListIndex = contam_prop_form.cboSelectContaminant.ListCount - 1
    contam_prop_form.cboSelectContaminant.SetFocus
  
    Screen.MousePointer = 0   'Arrow
End Sub

Sub BlankAllTextBoxes()
    Dim i As Integer

    contam_prop_form.lblSelectedContaminant.Caption = ""

    For i = 0 To 12
      contam_prop_form.lblContaminantProperties(i).Caption = ""
    Next i

    For i = 0 To 4
       contam_prop_form.lblAirWaterProperties(i).Caption = ""
    Next i

End Sub

Function get_source(s As String) As Long
    If (s = "DIPPR801") Then
        get_source = 4
    ElseIf (s = "YAWS") Then
        get_source = 1
    ElseIf (s = "SUPERFUND") Then
        get_source = 2
    ElseIf (s = "RTI") Then
        get_source = 3
    Else
        get_source = -1
    End If
End Function

Function nullcheck(s) As String
    If VarType(s) <> 8 Then
        nullcheck = ""
    Else
        nullcheck = s
    End If
End Function

Function number(num) As String
    If VarType(num) = 2 Or VarType(num) = 5 Or VarType(num) = 3 Then
        If num = -1 Then
            number = ""
        Else
            number = Str$(num)
        End If
    Else
        number = ""
    End If
End Function

Sub Update_Fields(RecordNo As Long)
    
    Dim i As Long
    Dim J As Long
    Dim K As Long
    Dim TempD As Double
    Dim HC_Count As Long
    Dim hc_string As String
    Dim last_hc_string As String
    Dim HC_DB_Source As String
    Dim HC_DB_Value As String * 36
    Dim HC_DB_Temp As String
    
    dbinput.CasNumber = db_index(RecordNo + 1)
    
    '
    ' OPEN RECORDSET.
    '
    Set RS_Main = DB_Main.OpenRecordset( _
        "SELECT * FROM [Names (Master)] WHERE [Names (Master)].CAS = " & _
        Format$(dbinput.CasNumber, "0"))
    If (RS_Main.EOF = False) Then
      RS_Main.MoveFirst
      RS_Main.MoveLast
      RS_Main.MoveFirst
    End If
    Set Selection = RS_Main
    'If (DemoMode) Then
    '    contam_prop_form.Data1.DatabaseName = Database_Path + "\demo_db.mdb"
    'Else
    '    contam_prop_form.Data1.DatabaseName = Database_Path + "\stepp_db.mdb"
    'End If
    'contam_prop_form.Data1.RecordSource = "SELECT * FROM [Names (Master)] WHERE [Names (Master)].CAS = " & Format$(dbinput.CASNumber, "0")
    'contam_prop_form.Data1.Refresh
    'Set Selection = contam_prop_form.Data1.Recordset

    dbinput.Name = Selection(2)

    'Look into the Properties Table ----------------------------------

    '
    ' OPEN RECORDSET.
    '
    Set RS_Main = DB_Main.OpenRecordset( _
        "SELECT * FROM DIPPR801 WHERE DIPPR801.CAS = " & _
        Format$(dbinput.CasNumber, "0"))
    If (RS_Main.EOF = False) Then
      RS_Main.MoveFirst
      RS_Main.MoveLast
      RS_Main.MoveFirst
    End If
    Set Selection = RS_Main
    'contam_prop_form.Data1.RecordSource = "SELECT * FROM DIPPR801 WHERE DIPPR801.CAS = " & Format$(dbinput.CASNumber, "0")
    'contam_prop_form.Data1.Refresh
    'Set Selection = contam_prop_form.Data1.Recordset

    If Selection.EOF = False Then
        
        dbinput.formula = nullcheck(Selection("FORM"))
        dbinput.MolecularWeight = Selection("MW")
        dbinput.BoilingPoint = Selection("NBP")
        dbinput.BoilingPointSource = get_source(nullcheck("DIPPR801"))
        dbinput.RefractiveIndex = Selection("RI")
        dbinput.VaporPressureDatabaseEquation = Selection("VPEQN")
        dbinput.VaporPressureNumberCoefficients = Selection("VPNUM")
        dbinput.VaporPressureAntoineA = Selection("VPA")
        dbinput.VaporPressureAntoineB = Selection("VPB")
        dbinput.VaporPressureAntoineC = Selection("VPC")
        dbinput.VaporPressureAntoineD = Selection("VPD")
        dbinput.VaporPressureAntoineE = Selection("VPE")
        dbinput.VaporPressureMinimumT = Selection("VPTMIN")
        dbinput.VaporPressureMaximumT = Selection("VPTMAX")
        dbinput.VaporPressureSource = get_source(nullcheck("DIPPR801"))
        dbinput.LiquidDensityEquation = Selection("LDNEQN")
        dbinput.LiquidDensityNumberCoefficients = Selection("LDNNUM")
        dbinput.LiquidDensityCoefficientA = Selection("LDNA")
        dbinput.LiquidDensityCoefficientB = Selection("LDNB")
        dbinput.LiquidDensityCoefficientC = Selection("LDNC")
        dbinput.LiquidDensityCoefficientD = Selection("LDND")
        dbinput.LiquidDensityMinimumT = Selection("LDNTMIN")
        dbinput.LiquidDensityMaximumT = Selection("LDNTMAX")
        dbinput.LiquidDensitySource = get_source(nullcheck("DIPPR801"))
    
    Else
        
        dbinput.MolecularWeight = -1
        dbinput.BoilingPointSource = -1
        dbinput.RefractiveIndex = -1
        dbinput.VaporPressureAntoineA = -1
        dbinput.VaporPressureDatabaseEquation = -1
        dbinput.LiquidDensityEquation = -1

    End If

    If dbinput.MolecularWeight = 0 Then
        dbinput.MolecularWeight = -1
    End If
    
    If dbinput.BoilingPoint = 0 Then
        dbinput.BoilingPointSource = -1
    End If
    
    If dbinput.RefractiveIndex = 0 Then
        dbinput.RefractiveIndex = -1
    End If
    
    If dbinput.VaporPressureAntoineA = 0 Then
        dbinput.VaporPressureAntoineA = -1
        dbinput.VaporPressureDatabaseEquation = -1
    End If
    
    If dbinput.LiquidDensityEquation = 0 Then
        dbinput.LiquidDensityEquation = -1
    End If
    
    If dbinput.VaporPressureAntoineA = -1 Then

        '
        ' OPEN RECORDSET.
        '
        Set RS_Main = DB_Main.OpenRecordset( _
            "SELECT * FROM [VP Yaws] WHERE [VP Yaws].CAS = " & _
            Format$(dbinput.CasNumber, "0"))
        If (RS_Main.EOF = False) Then
          RS_Main.MoveFirst
          RS_Main.MoveLast
          RS_Main.MoveFirst
        End If
        Set Selection = RS_Main
        'contam_prop_form.Data1.RecordSource = "SELECT * FROM [VP Yaws] WHERE [VP Yaws].CAS = " & Format$(dbinput.CASNumber, "0")
        'contam_prop_form.Data1.Refresh
        'Set Selection = contam_prop_form.Data1.Recordset
        
        If Selection.EOF = False Then
            
            dbinput.VaporPressureNumberCoefficients = 3
            dbinput.VaporPressureAntoineA = Selection("ANTA")
            dbinput.VaporPressureAntoineB = Selection("ANTB")
            dbinput.VaporPressureAntoineC = Selection("ANTC")
            dbinput.VaporPressureMinimumT = Selection("MINT")
            dbinput.VaporPressureMaximumT = Selection("MAXT")
            dbinput.VaporPressureSource = get_source(nullcheck("YAWS"))
        
        Else
        
            dbinput.VaporPressureAntoineA = -1
            dbinput.VaporPressureDatabaseEquation = -1

        End If

    End If

    If dbinput.VaporPressureAntoineA = 0 Then
        dbinput.VaporPressureAntoineA = -1
        dbinput.VaporPressureDatabaseEquation = -1
    End If
    
    If dbinput.VaporPressureAntoineA = -1 Then
    
        '
        ' OPEN RECORDSET.
        '
        Set RS_Main = DB_Main.OpenRecordset( _
            "SELECT * FROM [VP@25 Superfund] WHERE [VP@25 Superfund].CAS = " & _
            Format$(dbinput.CasNumber, "0"))
        If (RS_Main.EOF = False) Then
          RS_Main.MoveFirst
          RS_Main.MoveLast
          RS_Main.MoveFirst
        End If
        Set Selection = RS_Main
        'contam_prop_form.Data1.RecordSource = "SELECT * FROM [VP@25 Superfund] WHERE [VP@25 Superfund].CAS = " & Format$(dbinput.CASNumber, "0")
        'contam_prop_form.Data1.Refresh
        'Set Selection = contam_prop_form.Data1.Recordset
    
        If Selection.EOF = False Then
            dbinput.VaporPressureSuperfund = Selection("VP")
            dbinput.VaporPressureSuperfundTemperature = 25
            dbinput.VaporPressureSource = get_source(nullcheck("SUPERFUND"))
        Else
            dbinput.VaporPressureSuperfund = -1
        End If

    End If

    If dbinput.VaporPressureSuperfund = 0 Then
        dbinput.VaporPressureSuperfund = -1
    End If
    
    '
    ' OPEN RECORDSET.
    '
    Set RS_Main = DB_Main.OpenRecordset( _
        "SELECT * FROM [SB@25 Yaws] WHERE [SB@25 Yaws].CAS = " & _
        Format$(dbinput.CasNumber, "0"))
    If (RS_Main.EOF = False) Then
      RS_Main.MoveFirst
      RS_Main.MoveLast
      RS_Main.MoveFirst
    End If
    Set Selection = RS_Main
    'contam_prop_form.Data1.RecordSource = "SELECT * FROM [SB@25 Yaws] WHERE [SB@25 Yaws].CAS = " & Format$(dbinput.CASNumber, "0")
    'contam_prop_form.Data1.Refresh
    'Set Selection = contam_prop_form.Data1.Recordset
    
    If Selection.EOF = False Then
        dbinput.AqueousSolubility = Selection("Sol")
        dbinput.AqueousSolubilityTemperature = 25
        dbinput.AqueousSolubilitySource = get_source(nullcheck("YAWS"))
    Else
        dbinput.AqueousSolubility = -1
    End If

    If dbinput.AqueousSolubility = 0 Then

        '
        ' OPEN RECORDSET.
        '
        Set RS_Main = DB_Main.OpenRecordset( _
            "SELECT * FROM [SB@25 Superfund] WHERE [SB@25 Superfund].CAS = " & _
            Format$(dbinput.CasNumber, "0"))
        If (RS_Main.EOF = False) Then
          RS_Main.MoveFirst
          RS_Main.MoveLast
          RS_Main.MoveFirst
        End If
        Set Selection = RS_Main
        'contam_prop_form.Data1.RecordSource = "SELECT * FROM [SB@25 Superfund] WHERE [SB@25 Superfund].CAS = " & Format$(dbinput.CASNumber, "0")
        'contam_prop_form.Data1.Refresh
        'Set Selection = contam_prop_form.Data1.Recordset
    
        If Selection.EOF = False Then
            dbinput.AqueousSolubility = Selection("Sol")
            dbinput.AqueousSolubilityTemperature = 25
            dbinput.AqueousSolubilitySource = get_source(nullcheck("SUPERFUND"))
        
        Else
        
            dbinput.AqueousSolubility = -1
        
        End If
        
    End If

    If dbinput.AqueousSolubility = 0 Then
        dbinput.AqueousSolubility = -1
    End If
    
    '
    ' OPEN RECORDSET.
    '
    Set RS_Main = DB_Main.OpenRecordset( _
        "SELECT * FROM [Kow@25 Superfund] WHERE [Kow@25 Superfund].CAS = " & _
        Format$(dbinput.CasNumber, "0"))
    If (RS_Main.EOF = False) Then
      RS_Main.MoveFirst
      RS_Main.MoveLast
      RS_Main.MoveFirst
    End If
    Set Selection = RS_Main
    'contam_prop_form.Data1.RecordSource = "SELECT * FROM [Kow@25 Superfund] WHERE [Kow@25 Superfund].CAS = " & Format$(dbinput.CASNumber, "0")
    'contam_prop_form.Data1.Refresh
    'Set Selection = contam_prop_form.Data1.Recordset
    
    If Selection.EOF = False Then
        dbinput.OctWaterPartCoeff = Selection("log Kow")
        dbinput.OctWaterPartCoeffTemperature = 25
        dbinput.OctWaterPartCoeffSource = get_source(nullcheck("SUPERFUND"))
    Else
        dbinput.OctWaterPartCoeff = -1
    End If
    
    If dbinput.OctWaterPartCoeff = 0 Then
        dbinput.OctWaterPartCoeff = -1
    End If
    
    '
    ' OPEN RECORDSET.
    '
    Set RS_Main = DB_Main.OpenRecordset( _
        "SELECT * FROM [Rogers/Miller] WHERE [Rogers/Miller].CAS = " & _
        Format$(dbinput.CasNumber, "0"))
    If (RS_Main.EOF = False) Then
      RS_Main.MoveFirst
      RS_Main.MoveLast
      RS_Main.MoveFirst
    End If
    Set Selection = RS_Main
    'contam_prop_form.Data1.RecordSource = "SELECT * FROM [Rogers/Miller] WHERE [Rogers/Miller].CAS = " & Format$(dbinput.CASNumber, "0")
    'contam_prop_form.Data1.Refresh
    'Set Selection = contam_prop_form.Data1.Recordset
    
    If Selection.EOF = False Then
        
        If Selection("MX") <= 0 Then dbinput.MaximumUnifacGroups = 0
    
        For i = 1 To NC
            For J = 1 To 10
                For K = 1 To 2
                    dbinput.MS(i, J, K) = 0
                Next K
            Next J
        Next i

        dbinput.NumberofRingsinCompound = Selection("RG")
        dbinput.MaximumUnifacGroups = Selection("MX")
        
        For i = 1 To dbinput.MaximumUnifacGroups
            dbinput.MS(NC, i, 1) = Selection("G" + Trim$(Str$(i)))
            dbinput.MS(NC, i, 2) = Selection("N" + Trim$(Str$(i)))
        Next i
    
    Else
       
       dbinput.NumberofRingsinCompound = -1
       dbinput.MaximumUnifacGroups = -1
    
    End If

    If dbinput.formula = "" Then
        If Selection.EOF = False Then
            dbinput.formula = Selection("Formula")
        End If
    End If

    HC_Count = 0
    hc_string = ""

    '
    ' OPEN RECORDSET.
    '
    Set RS_Main = DB_Main.OpenRecordset( _
        "SELECT * FROM [HC RTI] WHERE [HC RTI].CAS = " & _
        Format$(dbinput.CasNumber, "0"))
    If (RS_Main.EOF = False) Then
      RS_Main.MoveFirst
      RS_Main.MoveLast
      RS_Main.MoveFirst
    End If
    Set Selection = RS_Main
    'contam_prop_form.Data1.RecordSource = "SELECT * FROM [HC RTI] WHERE [HC RTI].CAS = " & Format$(dbinput.CASNumber, "0")
    'contam_prop_form.Data1.Refresh
    'Set Selection = contam_prop_form.Data1.Recordset

    Do While Not Selection.EOF

        If number(Selection(1)) <> "" Then
            
            last_hc_string = hc_string
            HC_DB_Source = "RTI"
            hc_form!lblDatabase = HC_DB_Source
            LSet HC_DB_Value = Format$(number(Selection(1)), GetTheFormat(CDbl(number(Selection(1)))))
            HC_DB_Temp = Format$(number(Selection(2)), GetTheFormat(CDbl(number(Selection(2)))))
            hc_string = HC_DB_Value + HC_DB_Temp
            
            If hc_string <> last_hc_string Then
                HC_Count = HC_Count + 1
                dbinput.HenrysConstantSource = get_source(nullcheck("RTI"))
                dbinput.HenrysConstant(HC_Count) = Selection(1)
                dbinput.HenrysConstantTemperature(HC_Count) = Selection(2)
            End If
     
        End If
     
        Selection.MoveNext
     
    Loop
    
    dbinput.NumberOfDatabaseHenrysConstants = HC_Count
     
    If dbinput.NumberOfDatabaseHenrysConstants = 0 Then

        '
        ' OPEN RECORDSET.
        '
        Set RS_Main = DB_Main.OpenRecordset( _
            "SELECT * FROM [HC Superfund] WHERE [HC Superfund].CAS = " & _
            Format$(dbinput.CasNumber, "0"))
        If (RS_Main.EOF = False) Then
          RS_Main.MoveFirst
          RS_Main.MoveLast
          RS_Main.MoveFirst
        End If
        Set Selection = RS_Main
        'contam_prop_form.Data1.RecordSource = "SELECT * FROM [HC Superfund] WHERE [HC Superfund].CAS = " & Format$(dbinput.CASNumber, "0")
        'contam_prop_form.Data1.Refresh
        'Set Selection = contam_prop_form.Data1.Recordset

        Do While Not Selection.EOF

            If number(Selection(1)) <> "" Then
                
                last_hc_string = hc_string
                HC_DB_Source = "SUPERFUND"
                hc_form!lblDatabase = HC_DB_Source
                LSet HC_DB_Value = Format$(number(Selection(1)), GetTheFormat(CDbl(number(Selection(1)))))
                HC_DB_Temp = Format$(number(Selection(2)), GetTheFormat(CDbl(number(Selection(2)))))
                hc_string = HC_DB_Value + HC_DB_Temp
                
                If hc_string <> last_hc_string Then
                    HC_Count = HC_Count + 1
                    dbinput.HenrysConstantSource = get_source(nullcheck("SUPERFUND"))
                    dbinput.HenrysConstant(HC_Count) = Selection(1)
                    dbinput.HenrysConstantTemperature(HC_Count) = Selection(2)
                End If
         
            End If
         
            Selection.MoveNext
         
        Loop
         
        dbinput.NumberOfDatabaseHenrysConstants = HC_Count
     
    End If

    If dbinput.NumberOfDatabaseHenrysConstants = 0 Then

        '
        ' OPEN RECORDSET.
        '
        Set RS_Main = DB_Main.OpenRecordset( _
            "SELECT * FROM [HC Yaws] WHERE [HC Yaws].CAS = " & _
            Format$(dbinput.CasNumber, "0"))
        If (RS_Main.EOF = False) Then
          RS_Main.MoveFirst
          RS_Main.MoveLast
          RS_Main.MoveFirst
        End If
        Set Selection = RS_Main
        'contam_prop_form.Data1.RecordSource = "SELECT * FROM [HC Yaws] WHERE [HC Yaws].CAS = " & Format$(dbinput.CASNumber, "0")
        'contam_prop_form.Data1.Refresh
        'Set Selection = contam_prop_form.Data1.Recordset

        Do While Not Selection.EOF

            If number(Selection(1)) <> "" Then
                last_hc_string = hc_string
                HC_DB_Source = "YAWS"
                hc_form!lblDatabase = HC_DB_Source
                LSet HC_DB_Value = Format$(number(Selection(1)), GetTheFormat(CDbl(number(Selection(1)))))
                HC_DB_Temp = Format$(number(Selection(2)), GetTheFormat(CDbl(number(Selection(2)))))
                hc_string = HC_DB_Value + HC_DB_Temp
                If hc_string <> last_hc_string Then
                    HC_Count = HC_Count + 1
                    dbinput.HenrysConstantSource = get_source(nullcheck("YAWS"))
                    dbinput.HenrysConstant(HC_Count) = Selection(1)
                    dbinput.HenrysConstantTemperature(HC_Count) = Selection(2)
                End If
            
            End If
         
        Selection.MoveNext
         
        Loop
        
        dbinput.NumberOfDatabaseHenrysConstants = HC_Count
     
     End If

     'Convert database Henry's constants to dimensionless units
     
     If dbinput.NumberOfDatabaseHenrysConstants > 0 Then
         Call HCDBCONV(dbinput.HenrysConstant(1), dbinput.HenrysConstantTemperature(1), dbinput.NumberOfDatabaseHenrysConstants, dbinput.HenrysConstantSource)
     End If

End Sub

Attribute VB_Name = "CalcPropMod"
'*** This module is used to calculate the properties of
'*** StEPP.  The Calculation of each individual property
'*** will be done in a separate subroutine.

'   *** Array needed by MWTCALL and AQSCALL
'    Global XMW(1 To ND) As Double

Sub CalculateActivityCoefficient()
    Dim msg As String
    

'      *******************************************************
'      *                                                     *
'      *      Infinite Dilution Activity Coefficient         *
'      *                                                     *
'      *******************************************************

       If phprop.MaximumUnifacGroups > 0 Then

CalculateUNIFACActCoeffOperatingT:

          phprop.ActivityCoefficient.UNIFAC.Value = 0#
          phprop.ActivityCoefficient.UNIFAC.error = 0

          On Error GoTo ActivityCoefficientUNIFACError
          Call ACCALL(phprop.ActivityCoefficient.UNIFAC.Value, phprop.ActivityCoefficient.UNIFAC.source.short, phprop.ActivityCoefficient.UNIFAC.source.long, phprop.ActivityCoefficient.UNIFAC.error, phprop.ActivityCoefficient.UNIFAC.temperature, phprop.OperatingTemperature, FGRPErrorFlag, phprop.MaximumUnifacGroups, phprop.MS(1, 1, 1), phprop.ActivityCoefficient.BinaryInteractionParameterDatabase)

          If phprop.ActivityCoefficient.UNIFAC.error < 0 Then 'Error calculating activity coefficient with this particular UNIFAC parameter set
             phprop.ActivityCoefficient.BinaryInteractionParameterDBAvailable(phprop.ActivityCoefficient.BinaryInteractionParameterDatabase) = False
             If UserSelectedTheUnifacBIPDBActCoeff Then
                phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = phprop.ActivityCoefficient.PreviousBinaryInteractionParameterDB
                MsgBox "Selected database not available to calculate activity coefficient for this compound.  Returning to Original Choice", MB_ICONSTOP, "Data Not Available"
                infinite_dilution_form!cboUNIFACParameterSet.ListIndex = phprop.ActivityCoefficient.PreviousBinaryInteractionParameterDB - 1
                GoTo CalculateUNIFACActCoeffOperatingT
             End If

             Select Case phprop.ActivityCoefficient.BinaryInteractionParameterDatabase
                Case BIP_dbHierarchy.ActivityCoefficient(1)
                   phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = BIP_dbHierarchy.ActivityCoefficient(2)
                   GoTo CalculateUNIFACActCoeffOperatingT
                Case BIP_dbHierarchy.ActivityCoefficient(2)
                   phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = BIP_dbHierarchy.ActivityCoefficient(3)
                   GoTo CalculateUNIFACActCoeffOperatingT
                Case BIP_dbHierarchy.ActivityCoefficient(3)
                    phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = 0
             End Select
          End If
          If phprop.ActivityCoefficient.UNIFAC.error < 0 Then
             phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = 0
          End If

          
       Else
          phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = 0
          phprop.ActivityCoefficient.UNIFAC.error = -36
       End If

       If phprop.ActivityCoefficient.UNIFAC.error >= 0 Then
          PROPAVAILABLE(ACTIVITY_COEFFICIENT_UNIFAC) = True
       Else
          If phprop.ActivityCoefficient.CurrentSelection.choice = ACTIVITY_COEFFICIENT_UNIFAC Then
             phprop.ActivityCoefficient.CurrentSelection.choice = 0
             infinite_dilution_form!lblSourceLabel(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(ACTIVITY_COEFFICIENT_UNIFAC) = False
       End If

      Call DisplayActivityCoefficient

      Exit Sub

ActivityCoefficientUNIFACError:
      msg = "Error in the FORTRAN routines while calculating Activity Coefficient from UNIFAC!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.ActivityCoefficient.UNIFAC.error = -200
      Resume Next

End Sub

Sub CalculateAirDensity()

'        ********************************************************
'        *                                                      *
'        *              Air Density                             *
'        *                                                      *
'        ********************************************************

        
        On Error GoTo AirDensityCorrelationError
        Call AIRDENS(phprop.AirDensity.correlation.Value, phprop.OperatingTemperature, phprop.OperatingPressure, phprop.AirDensity.correlation.error, phprop.AirDensity.correlation.source.short, phprop.AirDensity.correlation.source.long, phprop.AirDensity.correlation.temperature)

      If phprop.AirDensity.correlation.error >= 0 Then
         PROPAVAILABLE(AIR_DENSITY_CORRELATION) = True
      Else
         If phprop.AirDensity.CurrentSelection.choice = AIR_DENSITY_CORRELATION Then
            phprop.AirDensity.CurrentSelection.choice = 0
            frmAirDensity!lblSource(0).BackColor = &HC0C0C0
         End If
         PROPAVAILABLE(AIR_DENSITY_CORRELATION) = False
      End If

       Call DisplayAirDensity

      Exit Sub

AirDensityCorrelationError:
      msg = "Error in the FORTRAN routines while calculating Air Density from Correlation!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.AirDensity.correlation.error = -200
      Resume Next

End Sub

Sub CalculateAirViscosity()

'       *******************************************************
'       *                                                     *
'       *              Air Viscosity                          *
'       *                                                     *
'       *******************************************************

      On Error GoTo AirViscosityCorrelationError
      Call AIRVISC(phprop.AirViscosity.correlation.Value, phprop.OperatingTemperature, phprop.AirViscosity.correlation.error, phprop.AirViscosity.correlation.source.short, phprop.AirViscosity.correlation.source.long, phprop.AirViscosity.correlation.temperature)

      If phprop.AirViscosity.correlation.error >= 0 Then
         PROPAVAILABLE(AIR_VISCOSITY_CORRELATION) = True
      Else
         If phprop.AirViscosity.CurrentSelection.choice = AIR_VISCOSITY_CORRELATION Then
            phprop.AirViscosity.CurrentSelection.choice = 0
            frmAirViscosity!lblSource(0).BackColor = &HC0C0C0
         End If
         PROPAVAILABLE(AIR_VISCOSITY_CORRELATION) = False
      End If

       Call DisplayAirViscosity
      
      Exit Sub

AirViscosityCorrelationError:
      msg = "Error in the FORTRAN routines while calculating Air Viscosity from Correlation!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.AirViscosity.correlation.error = -200
      Resume Next

End Sub

Sub CalculateAqueousSolubility()
    Dim I As Integer
    Dim J As Integer
    Dim K As Integer


'        ******************************************************
'        *                                                    *
'        *               Aqueous Solubility                   *
'        *                                                    *
'        ******************************************************


'   /***** VALUE FROM DATABASE */

        If phprop.AqueousSolubility.database.Value < 0 Then
           phprop.AqueousSolubility.database.error = -22
        Else
           phprop.AqueousSolubility.database.error = 0
        End If

       If phprop.AqueousSolubility.database.error >= 0 Then
          PROPAVAILABLE(AQUEOUS_SOLUBILITY_DATABASE) = True
       Else
          If phprop.AqueousSolubility.CurrentSelection.choice = AQUEOUS_SOLUBILITY_DATABASE Then
             phprop.AqueousSolubility.CurrentSelection.choice = 0
             aqsol_form!lblSource(2).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(AQUEOUS_SOLUBILITY_DATABASE) = False
       End If


'   /***** Value from UNIFAC at operating temperature */

       If phprop.MaximumUnifacGroups > 0 Then
CalculateUNIFACAqSolOperatingT:

          phprop.AqueousSolubility.operatingT.UNIFAC.Value = 0#
          phprop.AqueousSolubility.operatingT.UNIFAC.error = 0

          On Error GoTo AqueousSolubilityUNIFACopTError
          Call AQSCALL(phprop.AqueousSolubility.operatingT.UNIFAC.Value, phprop.AqueousSolubility.operatingT.UNIFAC.source.short, phprop.AqueousSolubility.operatingT.UNIFAC.source.long, phprop.AqueousSolubility.operatingT.UNIFAC.error, phprop.AqueousSolubility.operatingT.UNIFAC.temperature, phprop.OperatingTemperature, phprop.MaximumUnifacGroups, phprop.MS(1, 1, 1), phprop.XMW(1), phprop.AqueousSolubility.BinaryInteractionParameterDatabase)

          If phprop.AqueousSolubility.operatingT.UNIFAC.error < 0 Then 'Error calculating solubility with this particular UNIFAC parameter set
             phprop.AqueousSolubility.BinaryInteractionParameterDBAvailable(phprop.AqueousSolubility.BinaryInteractionParameterDatabase) = False
             If UserSelectedTheUnifacBIPDBAqSol Then
                phprop.AqueousSolubility.BinaryInteractionParameterDatabase = phprop.AqueousSolubility.PreviousBinaryInteractionParameterDB
                MsgBox "Selected UNIFAC database not available to calculate aqueous solubility for this compound.  Returning to Original Choice", MB_ICONSTOP, "Data Not Available"
                aqsol_form!cboUNIFACParameterSet.ListIndex = phprop.AqueousSolubility.PreviousBinaryInteractionParameterDB - 1
                GoTo CalculateUNIFACAqSolOperatingT
             End If

             Select Case phprop.AqueousSolubility.BinaryInteractionParameterDatabase
                Case BIP_dbHierarchy.AqueousSolubility(1)
                   phprop.AqueousSolubility.BinaryInteractionParameterDatabase = BIP_dbHierarchy.AqueousSolubility(2)
                   GoTo CalculateUNIFACAqSolOperatingT
                Case BIP_dbHierarchy.AqueousSolubility(2)
                   phprop.AqueousSolubility.BinaryInteractionParameterDatabase = BIP_dbHierarchy.AqueousSolubility(3)
                   GoTo CalculateUNIFACAqSolOperatingT
                Case BIP_dbHierarchy.AqueousSolubility(3)
                    phprop.AqueousSolubility.BinaryInteractionParameterDatabase = 0
             End Select
          End If
          If phprop.AqueousSolubility.operatingT.UNIFAC.error < 0 Then
             phprop.AqueousSolubility.BinaryInteractionParameterDatabase = 0
          End If
       Else
          phprop.AqueousSolubility.BinaryInteractionParameterDatabase = 0
          phprop.AqueousSolubility.operatingT.UNIFAC.error = -36
       End If

       If phprop.AqueousSolubility.operatingT.UNIFAC.error >= 0 Then
          PROPAVAILABLE(AQUEOUS_SOLUBILITY_OPT_UNIFAC) = True
       Else
          If phprop.AqueousSolubility.CurrentSelection.choice = AQUEOUS_SOLUBILITY_OPT_UNIFAC Then
             phprop.AqueousSolubility.CurrentSelection.choice = 0
             aqsol_form!lblSource(1).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(AQUEOUS_SOLUBILITY_OPT_UNIFAC) = False
       End If


'      ********* Value from Unifac at Database Temperature *
      
      If PROPAVAILABLE(AQUEOUS_SOLUBILITY_DATABASE) Then

         If phprop.MaximumUnifacGroups > 0 Then
            On Error GoTo AqueousSolubilityUNIFACdbTError
            Call AQSCALL(phprop.AqueousSolubility.UNIFAC.Value, phprop.AqueousSolubility.UNIFAC.source.short, phprop.AqueousSolubility.UNIFAC.source.long, phprop.AqueousSolubility.UNIFAC.error, phprop.AqueousSolubility.UNIFAC.temperature, phprop.AqueousSolubility.database.temperature, phprop.MaximumUnifacGroups, phprop.MS(1, 1, 1), phprop.XMW(1), phprop.AqueousSolubility.BinaryInteractionParameterDatabase)
       Else
          phprop.AqueousSolubility.UNIFAC.error = -36
       End If
                                                
         If phprop.AqueousSolubility.UNIFAC.error >= 0 Then
            PROPAVAILABLE(AQUEOUS_SOLUBILITY_DBT_UNIFAC) = True
         Else
            If phprop.AqueousSolubility.CurrentSelection.choice = AQUEOUS_SOLUBILITY_DBT_UNIFAC Then
               phprop.AqueousSolubility.CurrentSelection.choice = 0
               aqsol_form!lblSource(3).BackColor = &HC0C0C0
            End If
            PROPAVAILABLE(AQUEOUS_SOLUBILITY_DBT_UNIFAC) = False
         End If

      Else
         phprop.AqueousSolubility.UNIFAC.error = -44
         If phprop.AqueousSolubility.CurrentSelection.choice = AQUEOUS_SOLUBILITY_DBT_UNIFAC Then
            phprop.AqueousSolubility.CurrentSelection.choice = 0
            aqsol_form!lblSource(3).BackColor = &HC0C0C0
         End If
         PROPAVAILABLE(AQUEOUS_SOLUBILITY_DBT_UNIFAC) = False
      End If


'      **** Value from fit of UNIFAC with a data point

      If (PROPAVAILABLE(AQUEOUS_SOLUBILITY_DATABASE) And PROPAVAILABLE(AQUEOUS_SOLUBILITY_OPT_UNIFAC) And PROPAVAILABLE(AQUEOUS_SOLUBILITY_DBT_UNIFAC)) Then
          phprop.AqueousSolubility.fit.UNIFAC.error = 0
          On Error GoTo AqueousSolubilityUNIFACfitError
             Call AQSFIT(phprop.AqueousSolubility.fit.UNIFAC.Value, phprop.AqueousSolubility.fit.UNIFAC.source.short, phprop.AqueousSolubility.fit.UNIFAC.source.long, phprop.AqueousSolubility.fit.UNIFAC.error, phprop.AqueousSolubility.fit.UNIFAC.temperature, phprop.AqueousSolubility.UNIFAC.Value, phprop.AqueousSolubility.UNIFAC.temperature, phprop.AqueousSolubility.operatingT.UNIFAC.Value, phprop.AqueousSolubility.database.Value, phprop.AqueousSolubility.database.temperature, phprop.OperatingTemperature)

          'Fit routine may produce a negative solubility so if this happens, make solubility unavailable from the fit (error = -45)
          If (phprop.AqueousSolubility.fit.UNIFAC.Value < 0#) Then
             phprop.AqueousSolubility.fit.UNIFAC.error = -45
             If phprop.AqueousSolubility.CurrentSelection.choice = AQUEOUS_SOLUBILITY_FIT Then
                phprop.AqueousSolubility.CurrentSelection.choice = 0
                aqsol_form!lblSource(0).BackColor = &HC0C0C0
                aqsol_form!lblSource(0).ForeColor = &H80000008
                hilight.AqueousSolubility.PreviousIndex = -1
             End If
          End If
      Else
         phprop.AqueousSolubility.fit.UNIFAC.error = -45
      End If

       If phprop.AqueousSolubility.fit.UNIFAC.error >= 0 Then
          PROPAVAILABLE(AQUEOUS_SOLUBILITY_FIT) = True
       Else
          If phprop.AqueousSolubility.CurrentSelection.choice = AQUEOUS_SOLUBILITY_FIT Then
             phprop.AqueousSolubility.CurrentSelection.choice = 0
             aqsol_form!lblSource(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(AQUEOUS_SOLUBILITY_FIT) = False
       End If

      Call DisplayAqueousSolubility

      Exit Sub

AqueousSolubilityUNIFACopTError:
      msg = "Error in the FORTRAN routines while calculating Aqueous Solubility from UNIFAC at Operating T!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.AqueousSolubility.operatingT.UNIFAC.error = -200
      Resume Next

AqueousSolubilityUNIFACdbTError:
      msg = "Error in the FORTRAN routines while calculating Aqueous Solubility from UNIFAC at Database T!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.AqueousSolubility.UNIFAC.error = -200
      Resume Next

AqueousSolubilityUNIFACfitError:
      msg = "Error in the FORTRAN routines while calculating Aqueous Solubility from UNIFAC Fit with a Data Point!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.AqueousSolubility.fit.UNIFAC.error = -200
      Resume Next

End Sub

Sub CalculateBoilingPoint()

'       ********************************************************
'       *                                                      *
'       *             Normal Boiling Point                     *
'       *                                                      *
'       ********************************************************

'      /*  Note:  This value is only available in the database, but
'                 I put this note here so we would know it is a
'                 property that fits here in our structure.  No
'                 UNIFAC calculations are needed for it. */

      If (phprop.BoilingPoint.database.source.short = -1) Then
          phprop.BoilingPoint.database.error = -16
          If phprop.BoilingPoint.CurrentSelection.choice = BOILING_POINT_DATABASE Then
             phprop.BoilingPoint.CurrentSelection.choice = 0
             nbp_form!lblSource(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(BOILING_POINT_DATABASE) = False
      Else
          PROPAVAILABLE(BOILING_POINT_DATABASE) = True
          phprop.BoilingPoint.database.error = 0
      End If

      Call DisplayBoilingPoint

End Sub

Sub CalculateGasDiffusivity()

'     *********************************************************
'     *                                                       *
'     *              Gas Diffusivity                          *
'     *                                                       *
'     *********************************************************

'      ******  Value from the Wilke-Lee Modification of the
'      ******  Hirschfelder-Bird-Spotz Method

       If HaveProperty(MOLAR_VOLUME_BOILING_POINT) And HaveProperty(BOILING_POINT) And HaveProperty(MOLECULAR_WEIGHT) Then

          On Error GoTo GasDiffusivityWilkeLeeError
          Call DIFGWL(phprop.GasDiffusivity.wilkeLee.Value, phprop.MolecularWeight.CurrentSelection.Value, phprop.MolarVolume.BoilingPoint.CurrentSelection.Value, phprop.BoilingPoint.CurrentSelection.Value, phprop.OperatingTemperature, phprop.OperatingPressure, phprop.GasDiffusivity.wilkeLee.error, phprop.GasDiffusivity.wilkeLee.source.short, phprop.GasDiffusivity.wilkeLee.source.long, phprop.GasDiffusivity.wilkeLee.temperature)

          If phprop.GasDiffusivity.wilkeLee.error >= 0 Then
             PROPAVAILABLE(GAS_DIFFUSIVITY_WILKELEE) = True
          Else
             If phprop.GasDiffusivity.CurrentSelection.choice = GAS_DIFFUSIVITY_WILKELEE Then
                phprop.GasDiffusivity.CurrentSelection.choice = 0
                gas_diff_form!lblSource(0).BackColor = &HC0C0C0
             End If
             PROPAVAILABLE(GAS_DIFFUSIVITY_WILKELEE) = False
          End If

       Else
          If HaveProperty(BOILING_POINT) And HaveProperty(MOLECULAR_WEIGHT) Then
             phprop.GasDiffusivity.wilkeLee.error = -34
          ElseIf HaveProperty(MOLAR_VOLUME_BOILING_POINT) And HaveProperty(MOLECULAR_WEIGHT) Then
             phprop.GasDiffusivity.wilkeLee.error = -48
          ElseIf HaveProperty(MOLAR_VOLUME_BOILING_POINT) And HaveProperty(BOILING_POINT) Then
             phprop.GasDiffusivity.wilkeLee.error = -49
          ElseIf HaveProperty(MOLECULAR_WEIGHT) Then
             phprop.GasDiffusivity.wilkeLee.error = -50
          ElseIf HaveProperty(BOILING_POINT) Then
             phprop.GasDiffusivity.wilkeLee.error = -51
          ElseIf HaveProperty(MOLAR_VOLUME_BOILING_POINT) Then
             phprop.GasDiffusivity.wilkeLee.error = -52
          Else
             phprop.GasDiffusivity.wilkeLee.error = -53
          End If
          If phprop.BoilingPoint.CurrentSelection.choice = BOILING_POINT_DATABASE Then
             phprop.AqueousSolubility.CurrentSelection.choice = 0
             nbp_form!lblSource(0).BackColor = &HC0C0C0
          End If
          If phprop.GasDiffusivity.CurrentSelection.choice = GAS_DIFFUSIVITY_WILKELEE Then
             phprop.GasDiffusivity.CurrentSelection.choice = 0
             gas_diff_form!lblSource(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(GAS_DIFFUSIVITY_WILKELEE) = False
       End If

       Call DisplayGasDiffusivity

      Exit Sub

GasDiffusivityWilkeLeeError:
      msg = "Error in the FORTRAN routines while calculating Gas Diffusivity from Wilke-Lee Modification of Hirschfelder-Bird-Spotz Method!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.GasDiffusivity.wilkeLee.error = -200
      Resume Next

End Sub

Sub CalculateHenrysConstant()
    Static HenrysConstantDatabaseVal(1 To Maxchemical)  As Double
    Static HenrysConstantDatabaseTemp(1 To Maxchemical)  As Double

    Static HenrysConstantUnifacVal(1 To Maxchemical)  As Double
    Static HenrysConstantUnifacShortSrc(1 To Maxchemical) As Long
    Static HenrysConstantUnifacLongSrc(1 To Maxchemical) As Long
    Static HenrysConstantUnifacErr(1 To Maxchemical) As Long
    Static HenrysConstantUnifacTemp(1 To Maxchemical) As Double

'   *** Declare values to be used to calculate Henry's constants
'   *** corresponding to database temperatures.  Some of these values
'   *** are not used except to prevent overwriting data.

    Dim VaporPressureValHC As Double
    Dim VaporPressureShortSrcHC As Long
    Dim VaporPressureLongSrcHC As Long
    Dim VaporPressureErrHC As Long
    Dim VaporPressureTempHC As Double

    Dim ActivityCoeffValHC As Double
    Dim ActivityCoeffShortSrcHC As Long
    Dim ActivityCoeffLongSrcHC As Long
    Dim ActivityCoeffErrHC As Long
    Dim ActivityCoeffTempHC As Double

    Dim hc_unifac_value As String * 40
    Dim hc_unifac_temp As String
    Dim hc_string As String

'   *** Set arrays for passing to FORTRAN routines

    For I = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants

        HenrysConstantDatabaseVal(I) = phprop.HenrysConstant.database(I).Value
        HenrysConstantDatabaseTemp(I) = phprop.HenrysConstant.database(I).temperature

    Next I

'       *********************************************************
'       *                                                       *
'       *                Henry's Constant                       *
'       *                                                       *
'       *********************************************************


'   *** Henry's Constants from Database:
'   *** Find T in Database Closest to Operating Temperature

    If phprop.HenrysConstant.NumberOfDatabaseHenrysConstants = 0 Then
       phprop.HenrysConstant.chosenDatabaseIndex = 0
    ElseIf phprop.HenrysConstant.NumberOfDatabaseHenrysConstants = 1 Then
       phprop.HenrysConstant.chosenDatabaseIndex = 1
    Else
       Call GetClosestHCDatabaseT
    End If


'   *** Set Activity coefficient and vapor pressure to values
'   *** calculated above.  Eventually, what these are set to will
'   *** have to take the hierarchy into account

       If (HaveProperty(ACTIVITY_COEFFICIENT) And HaveProperty(VAPOR_PRESSURE)) Then
          
'          /* HC1CALL:  Find UNIFAC Henry's constant at operating T */
          
          On Error GoTo HenrysConstantUNIFACopTError
          Call HC1CALL(phprop.HenrysConstant.operatingT.UNIFAC.Value, phprop.HenrysConstant.operatingT.UNIFAC.source.short, phprop.HenrysConstant.operatingT.UNIFAC.source.long, phprop.HenrysConstant.operatingT.UNIFAC.error, phprop.HenrysConstant.operatingT.UNIFAC.temperature, phprop.OperatingTemperature, phprop.ActivityCoefficient.CurrentSelection.Value, phprop.VaporPressure.CurrentSelection.Value)

          If phprop.HenrysConstant.operatingT.UNIFAC.error >= 0 Then
             PROPAVAILABLE(HENRYS_CONSTANT_OPT_UNIFAC) = True
          Else
             If phprop.HenrysConstant.CurrentSelection.choice = HENRYS_CONSTANT_OPT_UNIFAC Then
                phprop.HenrysConstant.CurrentSelection.choice = 0
                hc_form!lblSource(2).BackColor = &HC0C0C0
             End If
             PROPAVAILABLE(HENRYS_CONSTANT_OPT_UNIFAC) = False
          End If
       Else
          If HaveProperty(ACTIVITY_COEFFICIENT) Then
             phprop.HenrysConstant.operatingT.UNIFAC.error = -38
          ElseIf HaveProperty(VAPOR_PRESSURE) Then
             phprop.HenrysConstant.operatingT.UNIFAC.error = -39
          Else
             phprop.HenrysConstant.operatingT.UNIFAC.error = -40
          End If
          If phprop.HenrysConstant.CurrentSelection.choice = HENRYS_CONSTANT_OPT_UNIFAC Then
             phprop.HenrysConstant.CurrentSelection.choice = 0
             hc_form!lblSource(2).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(HENRYS_CONSTANT_OPT_UNIFAC) = False
       End If


'  HC2CALL:        Find Henry's Constant at operating T from linear
'                  regression  on data points in database.  This can
'                  only be done if more than one data point is
'                  available in the database.

       On Error GoTo HenrysConstantRegressionError
       Call HC2CALL(phprop.HenrysConstant.regress.Value, phprop.HenrysConstant.regress.source.short, phprop.HenrysConstant.regress.source.long, phprop.HenrysConstant.regress.error, phprop.HenrysConstant.regress.temperature, HenrysConstantDatabaseVal(1), HenrysConstantDatabaseTemp(1), phprop.OperatingTemperature, phprop.HenrysConstant.NumberOfDatabaseHenrysConstants)
 
       If phprop.HenrysConstant.regress.error >= 0 Then
          PROPAVAILABLE(HENRYS_CONSTANT_REGRESS) = True
       Else
          If phprop.HenrysConstant.CurrentSelection.choice = HENRYS_CONSTANT_REGRESS Then
             phprop.HenrysConstant.CurrentSelection.choice = 0
             hc_form!lblSource(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(HENRYS_CONSTANT_REGRESS) = False
       End If


'       /* Find UNIFAC Values at all temperatures corresponding to values in the database */

      If phprop.MaximumUnifacGroups > 0 Then
         For I = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
             On Error GoTo VaporPressureErrorHenrysCon
                Call VPRCALL(VaporPressureValHC, phprop.VaporPressure.database.source.short, VaporPressureLongSrcHC, VaporPressureErrHC, phprop.VaporPressure.database.equation, VaporPressureTempHC, phprop.VaporPressure.database.minimumT, phprop.VaporPressure.database.maximumT, phprop.VaporPressure.database.antoineA, phprop.VaporPressure.database.antoineB, phprop.VaporPressure.database.antoineC, phprop.VaporPressure.database.antoineD, phprop.VaporPressure.database.antoineE, phprop.VaporPressure.database.superfund.Value, phprop.VaporPressure.database.superfund.temperature, HenrysConstantDatabaseTemp(I))
             On Error GoTo ActivityCoeffErrorHenrysCon
                Call ACCALL(ActivityCoeffValHC, ActivityCoeffShortSrcHC, ActivityCoeffLongSrcHC, ActivityCoeffErrHC, ActivityCoeffTempHC, HenrysConstantDatabaseTemp(I), FGRPErrorFlag, phprop.MaximumUnifacGroups, phprop.MS(1, 1, 1), phprop.ActivityCoefficient.BinaryInteractionParameterDatabase)
             If ((VaporPressureErrHC >= 0) And (ActivityCoeffErrHC >= 0)) Then
                On Error GoTo HenrysConstantUNIFACdbTError
                   Call HC1CALL(HenrysConstantUnifacVal(I), HenrysConstantUnifacShortSrc(I), HenrysConstantUnifacLongSrc(I), HenrysConstantUnifacErr(I), HenrysConstantUnifacTemp(I), HenrysConstantDatabaseTemp(I), ActivityCoeffValHC, VaporPressureValHC)

'               *** Set the temporary values to their permanant arrays
                phprop.HenrysConstant.UNIFAC(I).Value = HenrysConstantUnifacVal(I)
                phprop.HenrysConstant.UNIFAC(I).source.short = HenrysConstantUnifacShortSrc(I)
                phprop.HenrysConstant.UNIFAC(I).source.long = HenrysConstantUnifacLongSrc(I)
                phprop.HenrysConstant.UNIFAC(I).error = HenrysConstantUnifacErr(I)
                phprop.HenrysConstant.UNIFAC(I).temperature = HenrysConstantUnifacTemp(I)
      
             Else  '*** Correct this error number later
                phprop.HenrysConstant.UNIFAC(I).error = -54
             End If

         Next I
      Else   '*** No Unifac Henry's constants are available
         For I = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
             phprop.HenrysConstant.UNIFAC(I).error = -36
         Next I
      End If

      If phprop.HenrysConstant.NumberOfDatabaseHenrysConstants = 0 Then
         If phprop.HenrysConstant.CurrentSelection.choice = HENRYS_CONSTANT_DATABASE Then
            phprop.HenrysConstant.CurrentSelection.choice = 0
            hc_form!lblSource(3).BackColor = &HC0C0C0
         End If
         If phprop.HenrysConstant.CurrentSelection.choice = HENRYS_CONSTANT_UNIFAC Then
            phprop.HenrysConstant.CurrentSelection.choice = 0
            hc_form!lblSource(4).BackColor = &HC0C0C0
         End If
         PROPAVAILABLE(HENRYS_CONSTANT_DATABASE) = False
         PROPAVAILABLE(HENRYS_CONSTANT_UNIFAC) = False
      Else
         If phprop.HenrysConstant.CurrentSelection.choice = HENRYS_CONSTANT_UNIFAC Then
            phprop.HenrysConstant.CurrentSelection.choice = 0
            hc_form!lblSource(4).BackColor = &HC0C0C0
         End If
         PROPAVAILABLE(HENRYS_CONSTANT_DATABASE) = True
         PROPAVAILABLE(HENRYS_CONSTANT_UNIFAC) = False
         For I = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
             If phprop.HenrysConstant.UNIFAC(I).error >= 0 Then
                PROPAVAILABLE(HENRYS_CONSTANT_UNIFAC) = True
             End If
         Next I
      End If

'   *** Determine index of Unifac Henry's constant closest to operating temperature

      If PROPAVAILABLE(HENRYS_CONSTANT_UNIFAC) Then
         phprop.HenrysConstant.chosenUNIFACIndex = phprop.HenrysConstant.chosenDatabaseIndex
         If phprop.HenrysConstant.chosenUNIFACIndex <> 0 Then
            If phprop.HenrysConstant.UNIFAC(phprop.HenrysConstant.chosenUNIFACIndex).error < 0 Then
               If phprop.HenrysConstant.NumberOfDatabaseHenrysConstants = 1 Then
                  phprop.HenrysConstant.chosenUNIFACIndex = 0
               Else
                  Call GetClosestHCUnifacT
               End If
            End If
         End If
      End If


'***     HENFIT:  Find Henry's Constant at operating T from fit of a
'***              single data point in database with UNIFAC values.
'***              This will only be done if at least one data point
'***              is available in the database

        If (PROPAVAILABLE(HENRYS_CONSTANT_DATABASE) And PROPAVAILABLE(HENRYS_CONSTANT_UNIFAC) And PROPAVAILABLE(HENRYS_CONSTANT_OPT_UNIFAC)) Then
            phprop.HenrysConstant.fit.UNIFAC.error = 0
            On Error GoTo HenrysConstantUNIFACfitError
               Call HENFIT(phprop.HenrysConstant.fit.UNIFAC.Value, phprop.HenrysConstant.fit.UNIFAC.source.short, phprop.HenrysConstant.fit.UNIFAC.source.long, phprop.HenrysConstant.fit.UNIFAC.error, phprop.HenrysConstant.fit.UNIFAC.temperature, HenrysConstantDatabaseVal(1), HenrysConstantDatabaseTemp(1), phprop.HenrysConstant.operatingT.UNIFAC.Value, HenrysConstantUnifacVal(1), HenrysConstantUnifacErr(1), phprop.OperatingTemperature, phprop.HenrysConstant.NumberOfDatabaseHenrysConstants)
        Else
             phprop.HenrysConstant.fit.UNIFAC.error = -41
        End If
 
 
       If phprop.HenrysConstant.fit.UNIFAC.error >= 0 Then
          PROPAVAILABLE(HENRYS_CONSTANT_FIT) = True
       Else
          If phprop.HenrysConstant.CurrentSelection.choice = HENRYS_CONSTANT_FIT Then
             phprop.HenrysConstant.CurrentSelection.choice = 0
             hc_form!lblSource(1).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(HENRYS_CONSTANT_FIT) = False
       End If

       Call DisplayHenrysConstant

      Exit Sub

HenrysConstantUNIFACopTError:
      msg = "Error in the FORTRAN routines while calculating Henry's Constant from UNIFAC at Operating T!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.HenrysConstant.operatingT.UNIFAC.error = -200
      Resume Next

HenrysConstantRegressionError:
      msg = "Error in the FORTRAN routines while calculating Henry's Constant from Regression of Data Points!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.HenrysConstant.regress.error = -200
      Resume Next

VaporPressureErrorHenrysCon:   'Needed to calculate Henry's constants at database Temperatures
      msg = "Error in the FORTRAN routines while calculating Vapor Pressure Needed to Calculate Henry's Constants at Database Temperatures!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      VaporPressureErrHC = -200
      Resume Next

ActivityCoeffErrorHenrysCon:   'Needed to calculate Henry's constants at database Temperatures
      msg = "Error in the FORTRAN routines while calculating Activity Coefficient Needed to Calculate Henry's Constants at Database Temperatures!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      ActivityCoeffErrHC = -200
      Resume Next

HenrysConstantUNIFACdbTError:
      msg = "Error in the FORTRAN routines while calculating Henry's Constant from UNIFAC at Database T!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      HenrysConstantUnifacErr(I) = -200
      Resume Next

HenrysConstantUNIFACfitError:
      msg = "Error in the FORTRAN routines while calculating Henry's Constant from UNIFAC Fit with a Data Point!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.HenrysConstant.fit.UNIFAC.error = -200
      Resume Next

End Sub

Sub CalculateLiquidDensity()

'       ********************************************************
'       *                                                      *
'       *                Liquid Density                        *
'       *                                                      *
'       ********************************************************

'      /* LDDBCALL:  Get liquid density from the database */
 
      If HaveProperty(MOLECULAR_WEIGHT) Then
         If (phprop.OperatingTemperature > phprop.LiquidDensity.dbase_minT) And (phprop.OperatingTemperature < phprop.LiquidDensity.dbase_maxT) Then
            On Error GoTo LiquidDensityDatabaseError
               Call LDDBCALL(phprop.LiquidDensity.database.Value, phprop.LiquidDensity.database.source.short, phprop.LiquidDensity.database.source.long, phprop.LiquidDensity.database.error, phprop.LiquidDensity.database.equation, phprop.LiquidDensity.database.temperature, phprop.LiquidDensity.dbase_minT, phprop.LiquidDensity.dbase_maxT, phprop.LiquidDensity.dbase_coeffA, phprop.LiquidDensity.dbase_coeffB, phprop.LiquidDensity.dbase_coeffC, phprop.LiquidDensity.dbase_coeffD, phprop.MolecularWeight.CurrentSelection.Value, phprop.OperatingTemperature)
         Else 'Temperature is out of range
            phprop.LiquidDensity.database.error = -37
         End If
      Else
         phprop.LiquidDensity.database.error = -43  'Liquid Density can not be calculated in proper units if molecular weight is unavailable
      End If

       If phprop.LiquidDensity.database.error >= 0 Then
          PROPAVAILABLE(LIQUID_DENSITY_DATABASE) = True
       Else
          If phprop.LiquidDensity.CurrentSelection.choice = LIQUID_DENSITY_DATABASE Then
             phprop.LiquidDensity.CurrentSelection.choice = 0
             ldens_form!lblSource(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(LIQUID_DENSITY_DATABASE) = False
       End If


'     LDGCCALL:  Obtain Liquid Density from Group Contribution Method

      If HaveProperty(MOLAR_VOLUME_BOILING_POINT) Then
         On Error GoTo LiquidDensityGroupContMethError
            Call LDGCCALL(phprop.LiquidDensity.UNIFAC.Value, phprop.LiquidDensity.UNIFAC.source.short, phprop.LiquidDensity.UNIFAC.source.long, phprop.LiquidDensity.UNIFAC.error, phprop.LiquidDensity.UNIFAC.temperature, phprop.MolecularWeight.CurrentSelection.Value, phprop.MolarVolume.BoilingPoint.CurrentSelection.Value, phprop.OperatingTemperature)
      Else
         phprop.LiquidDensity.UNIFAC.error = -13
      End If
      
       If phprop.LiquidDensity.UNIFAC.error >= 0 Then
          PROPAVAILABLE(LIQUID_DENSITY_UNIFAC) = True
       Else
          PROPAVAILABLE(LIQUID_DENSITY_UNIFAC) = False
          If phprop.LiquidDensity.CurrentSelection.choice = LIQUID_DENSITY_UNIFAC Then
             phprop.LiquidDensity.CurrentSelection.choice = 0
             ldens_form!lblSource(1).BackColor = &HC0C0C0
          End If
       End If

      Call DisplayLiquidDensity

      Exit Sub

LiquidDensityDatabaseError:
      msg = "Error in the FORTRAN routines while calculating Liquid Density from the Database!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.LiquidDensity.database.error = -200
      Resume Next

LiquidDensityGroupContMethError:
      msg = "Error in the FORTRAN routines while calculating Liquid Density from Group Contribution Method!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.LiquidDensity.UNIFAC.error = -200
      Resume Next

End Sub

Sub CalculateLiquidDiffusivity()

'      *******************************************************
'      *                                                     *
'      *              Liquid Diffusivity                     *
'      *                                                     *
'      *******************************************************

'       ********** Calculate liquid diffusivity from
'       ********** Hayduk & Laudie Correlation */

       If HaveProperty(MOLAR_VOLUME_BOILING_POINT) Then

          On Error GoTo LiqDiffHaydukLaudieError
             Call DIFLHL(phprop.LiquidDiffusivity.haydukLaudie.Value, phprop.MolarVolume.BoilingPoint.CurrentSelection.Value, phprop.OperatingTemperature, phprop.MolecularWeight.CurrentSelection.Value, phprop.LiquidDiffusivity.haydukLaudie.error, phprop.LiquidDiffusivity.haydukLaudie.source.short, phprop.LiquidDiffusivity.haydukLaudie.source.long, phprop.LiquidDiffusivity.haydukLaudie.temperature)
         
          If phprop.LiquidDiffusivity.haydukLaudie.error >= 0 Then
             PROPAVAILABLE(LIQUID_DIFFUSIVITY_HAYDUKLAUDIE) = True
          Else
             If phprop.LiquidDiffusivity.CurrentSelection.choice = LIQUID_DIFFUSIVITY_HAYDUKLAUDIE Then
                phprop.LiquidDiffusivity.CurrentSelection.choice = 0
                liquid_diff_form!lblSource(0).BackColor = &HC0C0C0
             End If
             PROPAVAILABLE(LIQUID_DIFFUSIVITY_HAYDUKLAUDIE) = False
          End If
       Else
          phprop.LiquidDiffusivity.haydukLaudie.error = -32
          If phprop.LiquidDiffusivity.CurrentSelection.choice = LIQUID_DIFFUSIVITY_HAYDUKLAUDIE Then
             phprop.LiquidDiffusivity.CurrentSelection.choice = 0
             liquid_diff_form!lblSource(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(LIQUID_DIFFUSIVITY_HAYDUKLAUDIE) = False
       End If


'     ***** Calculate liquid diffusivity from
'     ***** Method of Polson, 1950

       If HaveProperty(MOLECULAR_WEIGHT) Then
          On Error GoTo LiqDiffPolsonError
             Call DIFLPOL(phprop.LiquidDiffusivity.polson.Value, phprop.MolecularWeight.CurrentSelection.Value, phprop.LiquidDiffusivity.polson.error, phprop.LiquidDiffusivity.polson.source.short, phprop.LiquidDiffusivity.polson.source.long, phprop.LiquidDiffusivity.polson.temperature, phprop.OperatingTemperature)
       Else
          phprop.LiquidDiffusivity.polson.error = -47
       End If
       
          If phprop.LiquidDiffusivity.polson.error >= 0 Then
             PROPAVAILABLE(LIQUID_DIFFUSIVITY_POLSON) = True
          Else
             If phprop.LiquidDiffusivity.CurrentSelection.choice = LIQUID_DIFFUSIVITY_POLSON Then
                phprop.LiquidDiffusivity.CurrentSelection.choice = 0
                liquid_diff_form!lblSource(1).BackColor = &HC0C0C0
             End If
             PROPAVAILABLE(LIQUID_DIFFUSIVITY_POLSON) = False
          End If


'     ***** Calculate liquid diffusivity using
'     ***** Wilke-Chang Correlation

       If HaveProperty(MOLAR_VOLUME_BOILING_POINT) Then
          On Error GoTo LiqDiffWilkeChangError
             Call DIFLWC(phprop.LiquidDiffusivity.wilkeChang.Value, phprop.MolarVolume.BoilingPoint.CurrentSelection.Value, phprop.OperatingTemperature, phprop.LiquidDiffusivity.wilkeChang.error, phprop.LiquidDiffusivity.wilkeChang.source.short, phprop.LiquidDiffusivity.wilkeChang.source.long, phprop.LiquidDiffusivity.wilkeChang.temperature)

          If phprop.LiquidDiffusivity.wilkeChang.error >= 0 Then
             PROPAVAILABLE(LIQUID_DIFFUSIVITY_WILKECHANG) = True
          Else
             If phprop.LiquidDiffusivity.CurrentSelection.choice = LIQUID_DIFFUSIVITY_WILKECHANG Then
                phprop.LiquidDiffusivity.CurrentSelection.choice = 0
                liquid_diff_form!lblSource(2).BackColor = &HC0C0C0
             End If
             PROPAVAILABLE(LIQUID_DIFFUSIVITY_WILKECHANG) = False
          End If

       Else
          phprop.LiquidDiffusivity.wilkeChang.error = -33
          If phprop.LiquidDiffusivity.CurrentSelection.choice = LIQUID_DIFFUSIVITY_WILKECHANG Then
             phprop.LiquidDiffusivity.CurrentSelection.choice = 0
             liquid_diff_form!lblSource(2).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(LIQUID_DIFFUSIVITY_WILKECHANG) = False
       End If

      Call DisplayLiquidDiffusivity(phprop.MolecularWeight.CurrentSelection.Value)

      Exit Sub

LiqDiffHaydukLaudieError:
      msg = "Error in the FORTRAN routines while calculating Liquid Diffusivity from the Hayduk and Laudie Correlation!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.LiquidDiffusivity.haydukLaudie.error = -200
      Resume Next

LiqDiffPolsonError:
      msg = "Error in the FORTRAN routines while calculating Liquid Diffusivity from the Method of Polson!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.LiquidDiffusivity.polson.error = -200
      Resume Next

LiqDiffWilkeChangError:
      msg = "Error in the FORTRAN routines while calculating Liquid Diffusivity from the Wilke-Chang Correlation!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.LiquidDiffusivity.wilkeChang.error = -200
      Resume Next

End Sub

Sub CalculateMolarVolumeNBP()

'       *********************************************************
'       *                                                       *
'       *     Molar Volume at the Normal Boiling Point          *
'       *                                                       *
'       *********************************************************
      
        If phprop.MaximumUnifacGroups > 0 Then
           On Error GoTo MolarVolumeNBPSchroederError
              Call VBBPCALL(phprop.MolarVolume.BoilingPoint.UNIFAC.Value, phprop.MolarVolume.BoilingPoint.UNIFAC.source.short, phprop.MolarVolume.BoilingPoint.UNIFAC.source.long, phprop.MolarVolume.BoilingPoint.UNIFAC.error, phprop.MolarVolume.BoilingPoint.UNIFAC.temperature, phprop.BoilingPoint.database.Value, phprop.MaximumUnifacGroups, phprop.MS(1, 1, 1), phprop.NumberofRingsinCompound)
        Else
           phprop.MolarVolume.BoilingPoint.UNIFAC.error = -36
        End If

       If phprop.MolarVolume.BoilingPoint.UNIFAC.error >= 0 Then
          PROPAVAILABLE(MOLAR_VOLUME_NBP_UNIFAC) = True
       Else
          If phprop.MolarVolume.BoilingPoint.CurrentSelection.choice = MOLAR_VOLUME_NBP_UNIFAC Then
             phprop.MolarVolume.BoilingPoint.CurrentSelection.choice = 0
             mv_nbp_form!lblSource(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(MOLAR_VOLUME_NBP_UNIFAC) = False
       End If

     Call DisplayMolarVolumeNBP

      Exit Sub

MolarVolumeNBPSchroederError:
      msg = "Error in the FORTRAN routines while calculating Molar Volume at the Normal Boiling Point from Schroeder's Method!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.MolarVolume.BoilingPoint.UNIFAC.error = -200
      Resume Next

End Sub

Sub CalculateMolarVolumeOpT()

'        *******************************************************
'        *                                                     *
'        *       Molar Volume at the Operating Temperature     *
'        *                                                     *
'        *******************************************************

'      Calculate Molar Volume at operating temp. from
'      Database liquid density value

       phprop.MolarVolume.operatingT.database.error = 0
       If PROPAVAILABLE(LIQUID_DENSITY_DATABASE) Then
          phprop.MolarVolume.operatingT.database.temperature = phprop.OperatingTemperature
          phprop.MolarVolume.operatingT.database.source.short = 4

          If HaveProperty(MOLECULAR_WEIGHT) Then
             On Error GoTo MolarVolumeOpTdbError
                Call VBMATT(phprop.MolarVolume.operatingT.database.Value, phprop.LiquidDensity.database.Value, phprop.MolecularWeight.CurrentSelection.Value)
          Else
             phprop.MolarVolume.operatingT.database.error = -55
          End If

       Else
           phprop.MolarVolume.operatingT.database.error = -14
       End If
        
       If phprop.MolarVolume.operatingT.database.error >= 0 Then
          PROPAVAILABLE(MOLAR_VOLUME_OPT_DATABASE) = True
       Else
          If phprop.MolarVolume.operatingT.CurrentSelection.choice = MOLAR_VOLUME_OPT_DATABASE Then
             phprop.MolarVolume.operatingT.CurrentSelection.choice = 0
             molar_vol_form!lblSource(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(MOLAR_VOLUME_OPT_DATABASE) = False
       End If


'       /* Calculate Molar Volume at operating temp. from Group Contribution liquid density value */

       phprop.MolarVolume.operatingT.UNIFAC.error = 0
       If PROPAVAILABLE(LIQUID_DENSITY_UNIFAC) Then
          phprop.MolarVolume.operatingT.UNIFAC.temperature = phprop.OperatingTemperature
          phprop.MolarVolume.operatingT.UNIFAC.source.short = 9

          On Error GoTo MolarVolumeOpTGroupContrError
             Call VBMATT(phprop.MolarVolume.operatingT.UNIFAC.Value, phprop.LiquidDensity.UNIFAC.Value, phprop.MolecularWeight.CurrentSelection.Value)

       Else
          phprop.MolarVolume.operatingT.UNIFAC.error = -15
       End If
        
       If phprop.MolarVolume.operatingT.UNIFAC.error >= 0 Then
          PROPAVAILABLE(MOLAR_VOLUME_OPT_UNIFAC) = True
       Else
          If phprop.MolarVolume.operatingT.CurrentSelection.choice = MOLAR_VOLUME_OPT_UNIFAC Then
             phprop.MolarVolume.operatingT.CurrentSelection.choice = 0
             molar_vol_form!lblSource(1).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(MOLAR_VOLUME_OPT_UNIFAC) = False
       End If

      Call DisplayMolarVolumeOpT

      Exit Sub

MolarVolumeOpTdbError:
      msg = "Error in the FORTRAN routines while calculating Molar Volume at the Operating T Using Database Liquid Density!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.MolarVolume.operatingT.database.error = -200
      Resume Next

MolarVolumeOpTGroupContrError:
      msg = "Error in the FORTRAN routines while calculating Molar Volume at the Operating T Using Liquid Density Value from Group Contribution Method!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.MolarVolume.operatingT.UNIFAC.error = -200
      Resume Next

End Sub

Sub CalculateMolecularWeight()

'       *********************************************************
'       *                                                       *
'       *               Molecular Weight                        *
'       *                                                       *
'       *********************************************************

'      *** Check if molecular weight available in database

       If phprop.MolecularWeight.database.Value > 0# Then
          PROPAVAILABLE(MOLECULAR_WEIGHT_DATABASE) = True
       Else
          phprop.MolecularWeight.database.error = -42
          If phprop.MolecularWeight.CurrentSelection.choice = MOLAR_WEIGHT_DATABASE Then
             phprop.MolecularWeight.CurrentSelection.choice = 0
             mwt_form!lblSourceLabel(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(MOLECULAR_WEIGHT_DATABASE) = False
       End If


'      *** Calculate Molecular Weight from Group Contribution Method

       If phprop.MaximumUnifacGroups > 0 Then

          On Error GoTo MolecularWtGroupContrError
             Call MWTCALL(phprop.MolecularWeight.UNIFAC.Value, phprop.MolecularWeight.UNIFAC.source.short, phprop.MolecularWeight.UNIFAC.source.long, phprop.MolecularWeight.UNIFAC.error, phprop.MaximumUnifacGroups, phprop.MS(1, 1, 1), phprop.XMW(1))
       Else
          phprop.MolecularWeight.UNIFAC.error = -36
       End If

       If phprop.MolecularWeight.UNIFAC.error >= 0 Then
          PROPAVAILABLE(MOLECULAR_WEIGHT_UNIFAC) = True
       Else
          If phprop.MolecularWeight.CurrentSelection.choice = MOLAR_WEIGHT_UNIFAC Then
             phprop.MolecularWeight.CurrentSelection.choice = 0
             mwt_form!lblSourceLabel(1).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(MOLECULAR_WEIGHT_UNIFAC) = False
       End If

       Call DisplayMolecularWeight

      Exit Sub

MolecularWtGroupContrError:
      msg = "Error in the FORTRAN routines while calculating Molecular Weight from Group Contribution Method!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.MolecularWeight.UNIFAC.error = -200
      Resume Next

End Sub

Sub CalculateOctWaterPartCoeff()

'        ******************************************************
'        *                                                    *
'        *        Octanol Water Partition Coefficient         *
'        *                                                    *
'        ******************************************************


'   /***** VALUE FROM DATABASE */

        If phprop.OctWaterPartCoeff.database.Value = -1 Then
           phprop.OctWaterPartCoeff.database.error = -31
        Else
           phprop.OctWaterPartCoeff.database.error = 0
        End If

       If phprop.OctWaterPartCoeff.database.error >= 0 Then
          PROPAVAILABLE(OCT_WATER_PART_COEFF_DB) = True
       Else
          If phprop.OctWaterPartCoeff.CurrentSelection.choice = OCT_WATER_PART_COEFF_DB Then
             phprop.OctWaterPartCoeff.CurrentSelection.choice = 0
             octanol_form!lblSource(1).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(OCT_WATER_PART_COEFF_DB) = False
       End If


'      /*****  Value from UNIFAC at operating temperature */

      If phprop.MaximumUnifacGroups > 0 Then

CalculateUNIFACKowOperatingT:

          phprop.OctWaterPartCoeff.operatingT.UNIFAC.Value = 0#
          phprop.OctWaterPartCoeff.operatingT.UNIFAC.error = 0

          On Error GoTo OctWatPartCoeffUNIFACopTError
             Call KOWCALL(phprop.OctWaterPartCoeff.operatingT.UNIFAC.Value, phprop.OctWaterPartCoeff.operatingT.UNIFAC.source.short, phprop.OctWaterPartCoeff.operatingT.UNIFAC.source.long, phprop.OctWaterPartCoeff.operatingT.UNIFAC.error, phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature, phprop.OperatingTemperature, FGRPErrorFlag, phprop.MaximumUnifacGroups, phprop.MS(1, 1, 1), phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase)

          If phprop.OctWaterPartCoeff.operatingT.UNIFAC.error < 0 Then 'Error calculating solubility with this particular UNIFAC parameter set
             phprop.OctWaterPartCoeff.BinaryInteractionParameterDBAvailable(phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase) = False
             If UserSelectedTheUnifacBIPDBKow Then
                phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase = phprop.OctWaterPartCoeff.PreviousBinaryInteractionParameterDB
                MsgBox "Selected UNIFAC database not available to calculate octanol water partition coefficient for this compound.  Returning to Original Choice", MB_ICONSTOP, "Data Not Available"
                octanol_form!cboUNIFACParameterSet.ListIndex = phprop.OctWaterPartCoeff.PreviousBinaryInteractionParameterDB - 1
                GoTo CalculateUNIFACKowOperatingT
             End If

             Select Case phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase
                Case BIP_dbHierarchy.OctWaterPartCoeff(1)
                   phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase = BIP_dbHierarchy.OctWaterPartCoeff(2)
                   GoTo CalculateUNIFACKowOperatingT
                Case BIP_dbHierarchy.OctWaterPartCoeff(2)
                    phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase = 0
             End Select
          End If
          If phprop.OctWaterPartCoeff.operatingT.UNIFAC.error < 0 Then
             phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase = 0
          End If
       Else
          phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase = 0
          phprop.OctWaterPartCoeff.operatingT.UNIFAC.error = -36
       End If

       If phprop.OctWaterPartCoeff.operatingT.UNIFAC.error >= 0 Then
          PROPAVAILABLE(OCT_WATER_PART_COEFF_OPT_UNIFAC) = True
       Else
          If phprop.OctWaterPartCoeff.CurrentSelection.choice = OCT_WATER_PART_COEFF_OPT_UNIFAC Then
             phprop.OctWaterPartCoeff.CurrentSelection.choice = 0
             octanol_form!lblSource(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(OCT_WATER_PART_COEFF_OPT_UNIFAC) = False
       End If


'     *****  Value from UNIFAC at database temperature

       If PROPAVAILABLE(OCT_WATER_PART_COEFF_DB) Then
          phprop.OctWaterPartCoeff.databaseT.UNIFAC.error = 0
          If phprop.MaximumUnifacGroups > 0 Then
             On Error GoTo OctWatPartCoeffdbTError
                Call KOWCALL(phprop.OctWaterPartCoeff.databaseT.UNIFAC.Value, phprop.OctWaterPartCoeff.databaseT.UNIFAC.source.short, phprop.OctWaterPartCoeff.databaseT.UNIFAC.source.long, phprop.OctWaterPartCoeff.databaseT.UNIFAC.error, phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature, phprop.OctWaterPartCoeff.database.temperature, FGRPErrorFlag, phprop.MaximumUnifacGroups, phprop.MS(1, 1, 1), phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase)
          Else
             phprop.OctWaterPartCoeff.databaseT.UNIFAC.error = -36
          End If
       Else
          phprop.OctWaterPartCoeff.databaseT.UNIFAC.error = -46
       End If


       If phprop.OctWaterPartCoeff.databaseT.UNIFAC.error >= 0 Then
          PROPAVAILABLE(OCT_WATER_PART_COEFF_DBT_UNIFAC) = True
       Else
          If phprop.OctWaterPartCoeff.CurrentSelection.choice = OCT_WATER_PART_COEFF_DBT_UNIFAC Then
             phprop.OctWaterPartCoeff.CurrentSelection.choice = 0
             octanol_form!lblSource(2).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(OCT_WATER_PART_COEFF_DBT_UNIFAC) = False
       End If

      Call DisplayOctWaterPartCoeff

      Exit Sub

OctWatPartCoeffUNIFACopTError:
      msg = "Error in the FORTRAN routines while calculating Octanol Water Partition Coefficient from UNIFAC at Operating T!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.OctWaterPartCoeff.operatingT.UNIFAC.error = -200
      Resume Next

OctWatPartCoeffdbTError:
      msg = "Error in the FORTRAN routines while calculating Octanol Water Partition Coefficient from UNIFAC at Database T!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.OctWaterPartCoeff.databaseT.UNIFAC.error = -200
      Resume Next

End Sub

Sub CalculateProperties()
    Dim I As Integer, msg As String

    Call CalculateVaporPressure
    contam_prop_form.Refresh

    Call CalculateActivityCoefficient
    contam_prop_form.Refresh

    Call CalculateHenrysConstant
    contam_prop_form.Refresh

    Call CalculateMolecularWeight
    contam_prop_form.Refresh

    Call CalculateBoilingPoint
    contam_prop_form.Refresh

    Call CalculateMolarVolumeNBP
    contam_prop_form.Refresh

    Call CalculateLiquidDensity
    contam_prop_form.Refresh

    Call CalculateMolarVolumeOpT
    contam_prop_form.Refresh

    Call CalculateRefractiveIndex
    contam_prop_form.Refresh

    Call CalculateAqueousSolubility
    contam_prop_form.Refresh

    Call CalculateOctWaterPartCoeff
    contam_prop_form.Refresh
        
    Call CalculateLiquidDiffusivity
    contam_prop_form.Refresh

    Call CalculateGasDiffusivity
    contam_prop_form.Refresh

    Call CalculateWaterDensity
    contam_prop_form.Refresh

    Call CalculateWaterViscosity
    contam_prop_form.Refresh

    Call CalculateWaterSurfaceTension
    contam_prop_form.Refresh

    Call CalculateAirDensity
    contam_prop_form.Refresh

    Call CalculateAirViscosity
    contam_prop_form.Refresh


'*** Place PROPAVAILABLE and HAVEPROPERTY arrays into phprop structure
     For I = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
         phprop.PROPAVAILABLE(I) = PROPAVAILABLE(I)
     Next I
     For I = 1 To NUMBER_OF_PROPERTIES
         phprop.HaveProperty(I) = HaveProperty(I)
     Next I

End Sub

Sub CalculateRefractiveIndex()

'        ******************************************************
'        *                                                    *
'        *               Refractive Index                     *
'        *                                                    *
'        ******************************************************

'        /* Note:  This is only available from the database so
'                  no UNIFAC calculations are needed for it */
      
      If phprop.RefractiveIndex.database.Value = -1 Then
         phprop.RefractiveIndex.database.error = -17
      Else
         phprop.RefractiveIndex.database.error = 0
      End If

       If phprop.RefractiveIndex.database.error >= 0 Then
          PROPAVAILABLE(REFRACTIVE_INDEX_DATABASE) = True
       Else
          If phprop.RefractiveIndex.CurrentSelection.choice = REFRACTIVE_INDEX_DATABASE Then
             phprop.RefractiveIndex.CurrentSelection.choice = 0
             rindex_form!lblSource(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(REFRACTIVE_INDEX_DATABASE) = False
       End If

      Call DisplayRefractiveIndex

End Sub

Sub CalculateVaporPressure()

'       *********************************************************
'       *                                                       *
'       *                  Vapor Pressure                       *
'       *                                                       *
'       *********************************************************
     
       On Error GoTo VaporPressureDatabaseError
          Call VPRCALL(phprop.VaporPressure.database.Value, phprop.VaporPressure.database.source.short, phprop.VaporPressure.database.source.long, phprop.VaporPressure.database.error, phprop.VaporPressure.database.equation, phprop.VaporPressure.database.temperature, phprop.VaporPressure.database.minimumT, phprop.VaporPressure.database.maximumT, phprop.VaporPressure.database.antoineA, phprop.VaporPressure.database.antoineB, phprop.VaporPressure.database.antoineC, phprop.VaporPressure.database.antoineD, phprop.VaporPressure.database.antoineE, phprop.VaporPressure.database.superfund.Value, phprop.VaporPressure.database.superfund.temperature, phprop.OperatingTemperature)

       If phprop.VaporPressure.database.error >= 0 Then
          PROPAVAILABLE(VAPOR_PRESSURE_DATABASE) = True
       Else
          If phprop.VaporPressure.CurrentSelection.choice = VAPOR_PRESSURE_DATABASE Then
             phprop.VaporPressure.CurrentSelection.choice = 0
             vp_form!lblSourceLabel(0).BackColor = &HC0C0C0
          End If
          PROPAVAILABLE(VAPOR_PRESSURE_DATABASE) = False
       End If

      Call DisplayVaporPressure

      Exit Sub

VaporPressureDatabaseError:
      msg = "Error in the FORTRAN routines while calculating Vapor Pressure from the Database!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.VaporPressure.database.error = -200
      Resume Next

End Sub

Sub CalculateWaterDensity()

'       ********************************************************
'       *                                                      *
'       *              Water Density                           *
'       *                                                      *
'       ********************************************************

      On Error GoTo WaterDensityCorrelationError
         Call H2ODENS(phprop.WaterDensity.correlation.Value, phprop.OperatingTemperature, phprop.WaterDensity.correlation.error, phprop.WaterDensity.correlation.source.short, phprop.WaterDensity.correlation.source.long, phprop.WaterDensity.correlation.temperature)

      If (phprop.OperatingTemperature < 0#) Or (phprop.OperatingTemperature > 100#) Then 'Temperature is out of the valid range for the water density correlation
         phprop.WaterDensity.correlation.error = 11
      End If

      If phprop.WaterDensity.correlation.error >= 0 Then
         PROPAVAILABLE(WATER_DENSITY_CORRELATION) = True
      Else
         If phprop.WaterDensity.CurrentSelection.choice = WATER_DENSITY_CORRELATION Then
            phprop.WaterDensity.CurrentSelection.choice = 0
            frmWaterDensity!lblSource(0).BackColor = &HC0C0C0
         End If
         PROPAVAILABLE(WATER_DENSITY_CORRELATION) = False
      End If

       Call DisplayWaterDensity

      Exit Sub

WaterDensityCorrelationError:
      msg = "Error in the FORTRAN routines while calculating Water Density from Correlation!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.WaterDensity.correlation.error = -200
      Resume Next

End Sub

Sub CalculateWaterSurfaceTension()

'      ********************************************************
'      *                                                      *
'      *              Water Surface Tension                   *
'      *                                                      *
'      ********************************************************

      On Error GoTo WaterSurfTensCorrelationError
         Call H2OST(phprop.WaterSurfaceTension.correlation.Value, phprop.OperatingTemperature, phprop.WaterSurfaceTension.correlation.error, phprop.WaterSurfaceTension.correlation.source.short, phprop.WaterSurfaceTension.correlation.source.long, phprop.WaterSurfaceTension.correlation.temperature)

      If phprop.WaterSurfaceTension.correlation.error >= 0 Then
         PROPAVAILABLE(WATER_SURF_TENSION_CORRELATION) = True
      Else
         If phprop.WaterSurfaceTension.CurrentSelection.choice = WATER_SURF_TENSION_CORRELATION Then
            phprop.WaterSurfaceTension.CurrentSelection.choice = 0
            frmWaterSurfaceTension!lblSource(0).BackColor = &HC0C0C0
         End If
         PROPAVAILABLE(WATER_SURF_TENSION_CORRELATION) = False
      End If

      Call DisplayWaterSurfaceTension

      Exit Sub

WaterSurfTensCorrelationError:
      msg = "Error in the FORTRAN routines while calculating Water Surface Tension from Correlation!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.WaterSurfaceTension.correlation.error = -200
      Resume Next

End Sub

Sub CalculateWaterViscosity()

'       ********************************************************
'       *                                                      *
'       *              Water Viscosity                         *
'       *                                                      *
'       ********************************************************

      On Error GoTo WaterViscosityCorrelationError
         Call H2OVISC(phprop.WaterViscosity.correlation.Value, phprop.OperatingTemperature, phprop.WaterViscosity.correlation.error, phprop.WaterViscosity.correlation.source.short, phprop.WaterViscosity.correlation.source.long, phprop.WaterViscosity.correlation.temperature)

      If phprop.WaterViscosity.correlation.error >= 0 Then
         PROPAVAILABLE(WATER_VISCOSITY_CORRELATION) = True
      Else
         If phprop.WaterViscosity.CurrentSelection.choice = WATER_VISCOSITY_CORRELATION Then
            phprop.WaterViscosity.CurrentSelection.choice = 0
            frmWaterViscosity!lblSource(0).BackColor = &HC0C0C0
         End If
         PROPAVAILABLE(WATER_VISCOSITY_CORRELATION) = False
      End If

       Call DisplayWaterViscosity

      Exit Sub

WaterViscosityCorrelationError:
      msg = "Error in the FORTRAN routines while calculating Water Viscosity from Correlation!"
      MsgBox msg, MB_ICONINFORMATION, "Error"
      phprop.WaterViscosity.correlation.error = -200
      Resume Next

End Sub

Sub DoCalculationForThisContaminant()

    Static HaveValue(NUMBER_OF_PROPERTIES_AVAILABLE)     As Long '/* array to store whether we have a value for a particular physical property, either from the database, from UNIFAC, or from user-input */
    Dim I As Long
 '   Dim FGRPErrorFlag As Long ' /* Variable to store if there is an error in retrieving the UNIFAC functional groups */
    Static HCDatabaseTemperature(NDCONSTANT) As Double
    Static HCUnifacValue(NDCONSTANT) As Double
    Static HCUnifacError(NDCONSTANT) As Long
    Static HCunifacSourceShorter(NDCONSTANT) As Long
    Static HCunifacSourceLonger(NDCONSTANT) As Long
    Dim MolecularWeight As Double '/* Variable for use in call to LDDBCALL */
    Dim hc_database_value As String * 40
    Dim hc_database_temp As String
    Dim hc_string As String
    Dim J As Integer, K As Integer, L As Integer


    '   /************************************************************
    '    *                                                          *
    '    *   Set input variables equal to appropriate records in    *
    '    *        the physical properties structure                 *
    '    *                                                          *
    '    ************************************************************/

    phprop.CASNumber = dbinput.CASNumber
    phprop.Name = dbinput.Name
    phprop.formula = dbinput.formula

    phprop.MolecularWeight.database.Value = dbinput.MolecularWeight
    phprop.MolecularWeight.database.source.short = 4  '/* Source for molecular weight = DIPPR801 */

    For I = 1 To dbinput.NumberOfDatabaseHenrysConstants
'        Call GET_HRY(I, phprop.HenrysConstant.database(I).Value)
'        Call GET_TMP1(I, phprop.HenrysConstant.database(I).Temperature)
        phprop.HenrysConstant.database(I).Value = dbinput.HenrysConstant(I)
        phprop.HenrysConstant.database(I).temperature = dbinput.HenrysConstantTemperature(I)
        phprop.HenrysConstant.database(I).source.short = dbinput.HenrysConstantSource
        phprop.HenrysConstant.database(I).error = 0
    Next I

    phprop.HenrysConstant.NumberOfDatabaseHenrysConstants = dbinput.NumberOfDatabaseHenrysConstants

    phprop.VaporPressure.database.superfund.Value = dbinput.VaporPressureSuperfund
    phprop.VaporPressure.database.superfund.temperature = dbinput.VaporPressureSuperfundTemperature

    phprop.LiquidDensity.database.equation = dbinput.LiquidDensityEquation
    phprop.LiquidDensity.dbase_n_coeffs = dbinput.LiquidDensityNumberCoefficients
    phprop.LiquidDensity.dbase_coeffA = dbinput.LiquidDensityCoefficientA
    phprop.LiquidDensity.dbase_coeffB = dbinput.LiquidDensityCoefficientB
    phprop.LiquidDensity.dbase_coeffC = dbinput.LiquidDensityCoefficientC
    phprop.LiquidDensity.dbase_coeffD = dbinput.LiquidDensityCoefficientD
    phprop.LiquidDensity.dbase_minT = dbinput.LiquidDensityMinimumT - 273.15
    phprop.LiquidDensity.dbase_maxT = dbinput.LiquidDensityMaximumT - 273.15
    phprop.LiquidDensity.database.source.short = dbinput.LiquidDensitySource

    phprop.VaporPressure.database.equation = dbinput.VaporPressureDatabaseEquation
    phprop.VaporPressure.database.ncoeffs = dbinput.VaporPressureNumberCoefficients
    phprop.VaporPressure.database.antoineA = dbinput.VaporPressureAntoineA
    phprop.VaporPressure.database.antoineB = dbinput.VaporPressureAntoineB
    phprop.VaporPressure.database.antoineC = dbinput.VaporPressureAntoineC
    phprop.VaporPressure.database.antoineD = dbinput.VaporPressureAntoineD
    phprop.VaporPressure.database.antoineE = dbinput.VaporPressureAntoineE
    phprop.VaporPressure.database.minimumT = dbinput.VaporPressureMinimumT - 273.15
    phprop.VaporPressure.database.maximumT = dbinput.VaporPressureMaximumT - 273.15
    phprop.VaporPressure.database.source.short = dbinput.VaporPressureSource

    phprop.AqueousSolubility.database.Value = dbinput.AqueousSolubility
    phprop.AqueousSolubility.database.temperature = dbinput.AqueousSolubilityTemperature
    phprop.AqueousSolubility.database.source.short = dbinput.AqueousSolubilitySource

    phprop.OctWaterPartCoeff.database.Value = dbinput.OctWaterPartCoeff
    phprop.OctWaterPartCoeff.database.temperature = dbinput.OctWaterPartCoeffTemperature
    phprop.OctWaterPartCoeff.database.source.short = dbinput.OctWaterPartCoeffSource

    phprop.BoilingPoint.database.Value = dbinput.BoilingPoint - 273.15
    phprop.BoilingPoint.database.source.short = dbinput.BoilingPointSource

    phprop.RefractiveIndex.database.Value = dbinput.RefractiveIndex
    phprop.RefractiveIndex.database.source.short = dbinput.RefractiveIndexSource

    phprop.OperatingTemperature = dbinput.OperatingTemperature

    For J = 1 To 10
        For K = 1 To 10
            For L = 1 To 2
                phprop.MS(J, K, L) = dbinput.MS(J, K, L)
            Next L
        Next K
    Next J
    phprop.MaximumUnifacGroups = dbinput.MaximumUnifacGroups
    phprop.NumberofRingsinCompound = dbinput.NumberofRingsinCompound

    Call CalculateProperties
    PropContaminant(NumSelectedChemicals) = phprop
    PreviouslySelectedIndex = NumSelectedChemicals

End Sub

Sub GetClosestHCDatabaseT()
    Dim CurrDiff As Double
    Dim PermDiff As Double
    Dim CurrIndex As Integer
    Dim PermIndex As Integer

    PermDiff = Abs(phprop.OperatingTemperature - phprop.HenrysConstant.database(1).temperature)
    PermIndex = 1
    For CurrIndex = 2 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
        CurrDiff = Abs(phprop.OperatingTemperature - phprop.HenrysConstant.database(CurrIndex).temperature)
        If CurrDiff < PermDiff Then
           PermDiff = CurrDiff
           PermIndex = CurrIndex
        End If
    Next CurrIndex
    phprop.HenrysConstant.chosenDatabaseIndex = PermIndex

End Sub

Sub GetClosestHCUnifacT()
    Dim CurrDiff As Double
    Dim PermDiff As Double
    Dim CurrIndex As Integer
    Dim PermIndex As Integer

    PermDiff = 1E+40
    PermIndex = 0
    For CurrIndex = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
        If phprop.HenrysConstant.UNIFAC(CurrIndex).error >= 0 Then
           CurrDiff = Abs(phprop.OperatingTemperature - phprop.HenrysConstant.UNIFAC(CurrIndex).temperature)
           If CurrDiff < PermDiff Then
              PermDiff = CurrDiff
              PermIndex = CurrIndex
           End If
        End If
    Next CurrIndex
    phprop.HenrysConstant.chosenUNIFACIndex = PermIndex

End Sub

Attribute VB_Name = "DB_Access_Mod"
'
' declare the stuff to let us access the database
'

Global db As database       'Paradox database
''''Global tb As Table          'Paradox database

'
' this will store the record number of the first
'   entry of each unique chemical in the database
'
Global db_index() As Long

' the number of unique chemicals in the database
Global db_num_entries As Integer

Global cbulk_array(15)
Global omag_array(15)
Global nl_array(15)
Global ns_array(15)
Global nv_array(15)
Global rg_array(15)
Global mx_array(15)

''''Global Selection As dynaset
Global Selection As Recordset

'
'DATABASE PASSWORD LISTED BELOW.  AS A DIFFERENCE FROM
'THE WAY StEPP WORKED UNDER MS VB 3.0,
'NO USER NAME IS REQUIRED, ONLY A PASSWORD.
'
'NOTE: FOR SOME #$(*&@#$*# ANNOYING REASON, ONCE A
'PASSWORD IS SUPPLIED FOR A DATABASE TO BE ACCESSED
'FROM VISUAL BASIC 5 (IN THE WAY THIS PROGRAM ACCESSES
'THE DATABASES), IT CANNOT BE DIRECTLY ACCESS FROM
'MICROSOFT ACCESS USING THE SAME PASSWORD IF THE PASSWORD
'WAS 14 CHARACTERS LONG (OR MAYBE JUST THIS EXAMPLE).
'USING THE NEW 9 CHARACTER PASSWORD WORKS EQUALLY
'WELL IN VB 5.0 AND MS ACCESS 8.0.
'              Eric J. Oman
'              10/23/98
'
''Global Const User_Name = "victor t. hart"
''Global Const User_Password = "frieda4wisc836"
'Global Const Encrypted_User_Name = "qJ8k\e%kO%G2ek"
'Global Const Encrypted_User_Password = "AeJ>;2atJh8m^g"
'
'Global Const User_Password = "frieda836"
Global Const Encrypted_User_Password = "AeJ>;2m^g"







Attribute VB_Name = "DemoModeMod"
Option Explicit

'For Distribution on CD
Global Const Mode_Distribution_on_CD = True
Global Const Mode_Stapleton_Disclaimer = False

Global Const DemoMode = False
Global Const StudentMode = False
Global Const SecureDBMode = True

Type blist_save_type
    cas As Long
    Name As String * 40
End Type

Function decrypt_string(password As String) As String
Dim newpass$, i%, length%, keyval%
Dim key() As Integer

ReDim key(100) As Integer

For i% = 32 To 122
    keyval% = ((i% * 3) Mod 91)
    key(keyval%) = i%
Next i%

length% = Len(password)
newpass$ = ""
For i% = 1 To length%
    newpass$ = newpass$ + Chr$(key(Asc(Mid$(password, i%, 1)) - 32))
Next i%

Erase key

decrypt_string = newpass
End Function

'Function demo_check_chemicals(lbox As VListBox) As Integer
'    Dim demochem%, choice$, msg$, NL  As String
'
'
'If (Not DemoMode) Then
'    demo_check_chemicals = False
'    Exit Function
'End If
'
'
'choice$ = Left$(Trim$(lbox.List(0)), 6)
'
'demochem% = False
'If (0 = StrComp(choice$, "79016 ", 1)) Then demochem% = True
'If (0 = StrComp(choice$, "71432 ", 1)) Then demochem% = True
'If (0 = StrComp(choice$, "95501 ", 1)) Then demochem% = True
'
'If (demochem%) Then
'    demo_check_chemicals = False
'Else
'    NL = Chr$(10) + Chr$(13)
'    demo_check_chemicals = True
'    msg$ = "You are in  Demo Mode for this program." + NL
'    msg$ = msg$ + "You may only process one of the following 3 chemicals:" + NL + NL
'    msg$ = msg$ + "     79016 trichloroethylene" + NL
'    msg$ = msg$ + "     71432 benzene" + NL
'    msg$ = msg$ + "     95501 1,2-dichlorobenzene" + NL
'    MsgBox msg$
'End If
'
'
'End Function

Function fileexists(FileName As String) As Integer
    Dim test%

On Error GoTo ErrorIndexOpen

test% = GetAttr(FileName)

fileexists = True

Exit Function

ErrorIndexOpen:
    fileexists = False
    Exit Function
Resume Next

End Function

Sub read_blist_file()
    Dim reccnt%, i%
    Dim blist_tmp As blist_save_type

' CHECK FOR THE EXISTANCE OF THE BLIST.LST FILE.
' IF IT DOES NOT EXIST CREATE IT FROM THE DATABASE
If (Not fileexists(Database_Path + "\blist.lst")) Then
    write_blist_file
End If

contam_prop_form!contam_combo.Clear

reccnt% = 0

Open Database_Path + "\blist.lst" For Binary Access Read As #4
    Get #4, 1, reccnt%
    ReDim Preserve db_index(reccnt%)

    For i% = 1 To reccnt%
        Get #4, , blist_tmp
        db_index(i%) = blist_tmp.cas
        contam_prop_form!contam_combo.AddItem Str$(blist_tmp.cas) + "  " + Trim$(blist_tmp.Name)
    Next i%

Close #4

db_num_entries = reccnt%

End Sub

Sub write_blist_file()
    Dim reccnt%
    Dim blist_tmp As blist_save_type

'Read the database contaminant names and CAS numbers
'
' OPEN RECORDSET.
'
Set RS_Main = DB_Main.OpenRecordset( _
    "SELECT * FROM [Names (Master)] WHERE [Names (Master)].CAS = " & _
    Format$(dbinput.CasNumber, "0"))
If (RS_Main.EOF = False) Then
  RS_Main.MoveFirst
  RS_Main.MoveLast
  RS_Main.MoveFirst
End If
Set Selection = RS_Main
''''Set Selection = contam_prop_form!Data1.Recordset

reccnt% = 0
    
Open Database_Path + "\blist.lst" For Binary Access Write As #4
    Put #4, 1, reccnt%

    Selection.MoveFirst
    While Not Selection.EOF
        If Selection(0) = "On" Then
            reccnt% = reccnt% + 1
            blist_tmp.cas = Selection(1)
            blist_tmp.Name = Trim$(Selection(2))
            Put #4, , blist_tmp
        End If
        Selection.MoveNext
    Wend

' PUT THE RECORD COUNT AS THE FIRST INTEGER IN THE FILE
    Put #4, 1, reccnt%

Close #4

End Sub

Attribute VB_Name = "DisplayMod"
'DISPLAY.BAS

'This module contains the routines for DISPLAYING properties in Visual Basic
'on the appropriate forms and in the appropriate units.


'Format of Numbers in Visual Basic - If not specified for a property, that property will be formatted to three significant figures
Global Const WATER_DENSITY_FORMAT = "0.00"
Global Const MOLECULAR_WEIGHT_FORMAT = "0.00"
Global Const REFRACTIVE_INDEX_FORMAT = "0.0000"

Sub CheckActivityCoefficient(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.ActivityCoefficient(Index).hierarchy
       Case ACTIVITY_COEFFICIENT_UNIFAC
          If PROPAVAILABLE(ACTIVITY_COEFFICIENT_UNIFAC) Then
             ValueToDisplayIndex = ACTIVITY_COEFFICIENT_UNIFAC
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckAirDensity(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.AirDensity(Index).hierarchy
       Case AIR_DENSITY_CORRELATION
          If PROPAVAILABLE(AIR_DENSITY_CORRELATION) Then
             ValueToDisplayIndex = AIR_DENSITY_CORRELATION
             DisplayedValueOnMainScreen = True
          End If
       Case AIR_DENSITY_INPUT
          If PROPAVAILABLE(AIR_DENSITY_INPUT) Then
             ValueToDisplayIndex = AIR_DENSITY_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckAirViscosity(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.AirViscosity(Index).hierarchy
       Case AIR_VISCOSITY_CORRELATION
          If PROPAVAILABLE(AIR_VISCOSITY_CORRELATION) Then
             ValueToDisplayIndex = AIR_VISCOSITY_CORRELATION
             DisplayedValueOnMainScreen = True
          End If
       Case AIR_VISCOSITY_INPUT
          If PROPAVAILABLE(AIR_VISCOSITY_INPUT) Then
             ValueToDisplayIndex = AIR_VISCOSITY_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckAqueousSolubility(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.AqueousSolubility(Index).hierarchy
       Case AQUEOUS_SOLUBILITY_FIT
          If PROPAVAILABLE(AQUEOUS_SOLUBILITY_FIT) Then
             ValueToDisplayIndex = AQUEOUS_SOLUBILITY_FIT
             DisplayedValueOnMainScreen = True
          End If
       Case AQUEOUS_SOLUBILITY_OPT_UNIFAC
          If PROPAVAILABLE(AQUEOUS_SOLUBILITY_OPT_UNIFAC) Then
             ValueToDisplayIndex = AQUEOUS_SOLUBILITY_OPT_UNIFAC
             DisplayedValueOnMainScreen = True
          End If
       Case AQUEOUS_SOLUBILITY_DATABASE
          If PROPAVAILABLE(AQUEOUS_SOLUBILITY_DATABASE) Then
             ValueToDisplayIndex = AQUEOUS_SOLUBILITY_DATABASE
             DisplayedValueOnMainScreen = True
          End If
       Case AQUEOUS_SOLUBILITY_DBT_UNIFAC
          If PROPAVAILABLE(AQUEOUS_SOLUBILITY_DBT_UNIFAC) Then
             ValueToDisplayIndex = AQUEOUS_SOLUBILITY_DBT_UNIFAC
             DisplayedValueOnMainScreen = True
          End If
       Case AQUEOUS_SOLUBILITY_INPUT
          If PROPAVAILABLE(AQUEOUS_SOLUBILITY_INPUT) Then
             ValueToDisplayIndex = AQUEOUS_SOLUBILITY_INPUT
             DisplayedValueOnMainScreen = True
          End If

    End Select

End Sub

Sub CheckBoilingPoint(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.BoilingPoint(Index).hierarchy
       Case BOILING_POINT_DATABASE
          If PROPAVAILABLE(BOILING_POINT_DATABASE) Then
             ValueToDisplayIndex = BOILING_POINT_DATABASE
             DisplayedValueOnMainScreen = True
          End If
       Case BOILING_POINT_INPUT
          If PROPAVAILABLE(BOILING_POINT_INPUT) Then
             ValueToDisplayIndex = BOILING_POINT_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckGasDiffusivity(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.GasDiffusivity(Index).hierarchy
       Case GAS_DIFFUSIVITY_WILKELEE
          If PROPAVAILABLE(GAS_DIFFUSIVITY_WILKELEE) Then
             ValueToDisplayIndex = GAS_DIFFUSIVITY_WILKELEE
             DisplayedValueOnMainScreen = True
          End If
       Case GAS_DIFFUSIVITY_INPUT
          If PROPAVAILABLE(GAS_DIFFUSIVITY_INPUT) Then
             ValueToDisplayIndex = GAS_DIFFUSIVITY_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckHenrysConstant(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.HenrysConstant(Index).hierarchy
       Case HENRYS_CONSTANT_REGRESS
          If PROPAVAILABLE(HENRYS_CONSTANT_REGRESS) Then
             ValueToDisplayIndex = HENRYS_CONSTANT_REGRESS
             DisplayedValueOnMainScreen = True
          End If
       Case HENRYS_CONSTANT_FIT
          If PROPAVAILABLE(HENRYS_CONSTANT_FIT) Then
             ValueToDisplayIndex = HENRYS_CONSTANT_FIT
             DisplayedValueOnMainScreen = True
          End If
       Case HENRYS_CONSTANT_OPT_UNIFAC
          If PROPAVAILABLE(HENRYS_CONSTANT_OPT_UNIFAC) Then
             ValueToDisplayIndex = HENRYS_CONSTANT_OPT_UNIFAC
             DisplayedValueOnMainScreen = True
          End If
       Case HENRYS_CONSTANT_DATABASE
          If PROPAVAILABLE(HENRYS_CONSTANT_DATABASE) Then
             ValueToDisplayIndex = HENRYS_CONSTANT_DATABASE
             DisplayedValueOnMainScreen = True
          End If
       Case HENRYS_CONSTANT_UNIFAC
          If PROPAVAILABLE(HENRYS_CONSTANT_UNIFAC) Then
             ValueToDisplayIndex = HENRYS_CONSTANT_UNIFAC
             DisplayedValueOnMainScreen = True
          End If
       Case HENRYS_CONSTANT_INPUT
          If PROPAVAILABLE(HENRYS_CONSTANT_INPUT) Then
             ValueToDisplayIndex = HENRYS_CONSTANT_INPUT
             DisplayedValueOnMainScreen = True
          End If

    End Select

End Sub

Sub CheckLiquidDensity(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.LiquidDensity(Index).hierarchy
       Case LIQUID_DENSITY_DATABASE
          If PROPAVAILABLE(LIQUID_DENSITY_DATABASE) Then
             ValueToDisplayIndex = LIQUID_DENSITY_DATABASE
             DisplayedValueOnMainScreen = True
          End If
       Case LIQUID_DENSITY_UNIFAC
          If PROPAVAILABLE(LIQUID_DENSITY_UNIFAC) Then
             ValueToDisplayIndex = LIQUID_DENSITY_UNIFAC
             DisplayedValueOnMainScreen = True
          End If
       Case LIQUID_DENSITY_INPUT
          If PROPAVAILABLE(LIQUID_DENSITY_INPUT) Then
             ValueToDisplayIndex = LIQUID_DENSITY_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckLiquidDiffusivity(HierarchyChoice As HierarchyType, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)
    
    Select Case HierarchyChoice.hierarchy
       Case LIQUID_DIFFUSIVITY_HAYDUKLAUDIE
          If PROPAVAILABLE(LIQUID_DIFFUSIVITY_HAYDUKLAUDIE) Then
             ValueToDisplayIndex = LIQUID_DIFFUSIVITY_HAYDUKLAUDIE
             DisplayedValueOnMainScreen = True
          End If
       Case LIQUID_DIFFUSIVITY_WILKECHANG
          If PROPAVAILABLE(LIQUID_DIFFUSIVITY_WILKECHANG) Then
             ValueToDisplayIndex = LIQUID_DIFFUSIVITY_WILKECHANG
             DisplayedValueOnMainScreen = True
          End If
       Case LIQUID_DIFFUSIVITY_POLSON
          If PROPAVAILABLE(LIQUID_DIFFUSIVITY_POLSON) Then
             ValueToDisplayIndex = LIQUID_DIFFUSIVITY_POLSON
             DisplayedValueOnMainScreen = True
          End If
       Case LIQUID_DIFFUSIVITY_INPUT
          If PROPAVAILABLE(OCT_WATER_PART_COEFF_INPUT) Then
             ValueToDisplayIndex = OCT_WATER_PART_COEFF_INPUT
             DisplayedValueOnMainScreen = True
          End If

    End Select

End Sub

Sub CheckMolarVolumeNBP(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.MolarVolumeBoilingPoint(Index).hierarchy
       Case MOLAR_VOLUME_NBP_UNIFAC
          If PROPAVAILABLE(MOLAR_VOLUME_NBP_UNIFAC) Then
             ValueToDisplayIndex = MOLAR_VOLUME_NBP_UNIFAC
             DisplayedValueOnMainScreen = True
          End If
       Case MOLAR_VOLUME_NBP_INPUT
          If PROPAVAILABLE(MOLAR_VOLUME_NBP_INPUT) Then
             ValueToDisplayIndex = MOLAR_VOLUME_NBP_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckMolarVolumeOpT(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.MolarVolumeOperatingT(Index).hierarchy
       Case MOLAR_VOLUME_OPT_DATABASE
          If PROPAVAILABLE(MOLAR_VOLUME_OPT_DATABASE) Then
             ValueToDisplayIndex = MOLAR_VOLUME_OPT_DATABASE
             DisplayedValueOnMainScreen = True
          End If
       Case MOLAR_VOLUME_OPT_UNIFAC
          If PROPAVAILABLE(MOLAR_VOLUME_OPT_UNIFAC) Then
             ValueToDisplayIndex = MOLAR_VOLUME_OPT_UNIFAC
             DisplayedValueOnMainScreen = True
          End If
       Case MOLAR_VOLUME_OPT_INPUT
          If PROPAVAILABLE(MOLAR_VOLUME_OPT_INPUT) Then
             ValueToDisplayIndex = MOLAR_VOLUME_OPT_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckMolecularWeight(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.MolecularWeight(Index).hierarchy
       Case MOLECULAR_WEIGHT_DATABASE
          If PROPAVAILABLE(MOLECULAR_WEIGHT_DATABASE) Then
             ValueToDisplayIndex = MOLECULAR_WEIGHT_DATABASE
             DisplayedValueOnMainScreen = True
          End If
       Case MOLECULAR_WEIGHT_UNIFAC
          If PROPAVAILABLE(MOLECULAR_WEIGHT_UNIFAC) Then
             ValueToDisplayIndex = MOLECULAR_WEIGHT_UNIFAC
             DisplayedValueOnMainScreen = True
          End If
       Case MOLECULAR_WEIGHT_INPUT
          If PROPAVAILABLE(MOLECULAR_WEIGHT_INPUT) Then
             ValueToDisplayIndex = MOLECULAR_WEIGHT_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckOctWaterPartCoeff(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.OctWaterPartCoeff(Index).hierarchy
       Case OCT_WATER_PART_COEFF_OPT_UNIFAC
          If PROPAVAILABLE(OCT_WATER_PART_COEFF_OPT_UNIFAC) Then
             ValueToDisplayIndex = OCT_WATER_PART_COEFF_OPT_UNIFAC
             DisplayedValueOnMainScreen = True
          End If
       Case OCT_WATER_PART_COEFF_DB
          If PROPAVAILABLE(OCT_WATER_PART_COEFF_DB) Then
             ValueToDisplayIndex = OCT_WATER_PART_COEFF_DB
             DisplayedValueOnMainScreen = True
          End If
       Case OCT_WATER_PART_COEFF_DBT_UNIFAC
          If PROPAVAILABLE(OCT_WATER_PART_COEFF_DBT_UNIFAC) Then
             ValueToDisplayIndex = OCT_WATER_PART_COEFF_DBT_UNIFAC
             DisplayedValueOnMainScreen = True
          End If
       Case OCT_WATER_PART_COEFF_INPUT
          If PROPAVAILABLE(OCT_WATER_PART_COEFF_INPUT) Then
             ValueToDisplayIndex = OCT_WATER_PART_COEFF_INPUT
             DisplayedValueOnMainScreen = True
          End If

    End Select

End Sub

Sub CheckRefractiveIndex(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.RefractiveIndex(Index).hierarchy
       Case REFRACTIVE_INDEX_DATABASE
          If PROPAVAILABLE(REFRACTIVE_INDEX_DATABASE) Then
             ValueToDisplayIndex = REFRACTIVE_INDEX_DATABASE
             DisplayedValueOnMainScreen = True
          End If
       Case REFRACTIVE_INDEX_INPUT
          If PROPAVAILABLE(REFRACTIVE_INDEX_INPUT) Then
             ValueToDisplayIndex = REFRACTIVE_INDEX_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckVaporPressure(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.VaporPressure(Index).hierarchy
       Case VAPOR_PRESSURE_DATABASE
          If PROPAVAILABLE(VAPOR_PRESSURE_DATABASE) Then
             ValueToDisplayIndex = VAPOR_PRESSURE_DATABASE
             DisplayedValueOnMainScreen = True
          End If
       Case VAPOR_PRESSURE_INPUT
          If PROPAVAILABLE(VAPOR_PRESSURE_INPUT) Then
             ValueToDisplayIndex = VAPOR_PRESSURE_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckWaterDensity(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.WaterDensity(Index).hierarchy
       Case WATER_DENSITY_CORRELATION
          If PROPAVAILABLE(WATER_DENSITY_CORRELATION) Then
             ValueToDisplayIndex = WATER_DENSITY_CORRELATION
             DisplayedValueOnMainScreen = True
          End If
       Case WATER_DENSITY_INPUT
          If PROPAVAILABLE(WATER_DENSITY_INPUT) Then
             ValueToDisplayIndex = WATER_DENSITY_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckWaterSurfaceTension(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.WaterSurfaceTension(Index).hierarchy
       Case WATER_SURF_TENSION_CORRELATION
          If PROPAVAILABLE(WATER_SURF_TENSION_CORRELATION) Then
             ValueToDisplayIndex = WATER_SURF_TENSION_CORRELATION
             DisplayedValueOnMainScreen = True
          End If
       Case WATER_SURF_TENSION_INPUT
          If PROPAVAILABLE(WATER_SURF_TENSION_INPUT) Then
             ValueToDisplayIndex = WATER_SURF_TENSION_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub CheckWaterViscosity(Index As Integer, ValueToDisplayIndex As Integer, DisplayedValueOnMainScreen As Integer)

    Select Case hie.WaterViscosity(Index).hierarchy
       Case WATER_VISCOSITY_CORRELATION
          If PROPAVAILABLE(WATER_VISCOSITY_CORRELATION) Then
             ValueToDisplayIndex = WATER_VISCOSITY_CORRELATION
             DisplayedValueOnMainScreen = True
          End If
       Case WATER_VISCOSITY_INPUT
          If PROPAVAILABLE(WATER_VISCOSITY_INPUT) Then
             ValueToDisplayIndex = WATER_VISCOSITY_INPUT
             DisplayedValueOnMainScreen = True
          End If
    End Select

End Sub

Sub DisplayActivityCoefficient()
    Dim ValueToDisplayIndex As Integer
    Dim I As Integer
    Dim PropertySourceToHighlight As Integer
    Dim SIValue As Double
    Dim EnglishValue As Double
    Dim ValueToDisplay As Double

' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    infinite_dilution_form!lblCurrentValues(0).Caption = ""
    infinite_dilution_form!lblCurrentValues(1).Caption = ""

    Call DisplayActivityCoefficientMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying Activity Coefficient Values in activity coefficient
' ***** form (Infinite_dilution_form)

'   *** Initialize all text and label boxes on Infinite_dilution_form
'   *** to gray and empty and disabled
    For I = 0 To 0
        infinite_dilution_form!Option1(I + 1).BackColor = &HC0C0C0
        infinite_dilution_form!Option1(I + 1).Enabled = False
        infinite_dilution_form!Option1(I + 1).Value = False
        infinite_dilution_form!lblSourceLabel(I).BackColor = &HC0C0C0
        infinite_dilution_form!lblActivityCoefficientValue(I).Caption = "Not Available"
'        Infinite_dilution_form!lblActivityCoefficientValue(I).Enabled = False
        infinite_dilution_form!lblActivityCoefficientValue(I).BackColor = &HC0C0C0
        infinite_dilution_form!lblACTemperature(I).Caption = ""
        infinite_dilution_form!lblACTemperature(I).Enabled = False
        infinite_dilution_form!lblACTemperature(I).BackColor = &HC0C0C0
    Next I

    If PROPAVAILABLE(ACTIVITY_COEFFICIENT_UNIFAC) Then

       SIValue = phprop.ActivityCoefficient.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call ACCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       infinite_dilution_form!lblActivityCoefficientValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.ActivityCoefficient.UNIFAC.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       infinite_dilution_form!lblACTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       infinite_dilution_form!Option1(1).BackColor = &HFFFFFF
       infinite_dilution_form!Option1(1).Enabled = True
       infinite_dilution_form!lblSourceLabel(0).BackColor = &HFFFFFF
       infinite_dilution_form!lblActivityCoefficientValue(0).Enabled = True
       infinite_dilution_form!lblActivityCoefficientValue(0).BackColor = &HFFFFFF
       infinite_dilution_form!lblACTemperature(0).Enabled = True
       infinite_dilution_form!lblACTemperature(0).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = ACTIVITY_COEFFICIENT_UNIFAC Then
          infinite_dilution_form!Option1(1).Value = True
       Else
          infinite_dilution_form!Option1(1).Value = False
       End If
    End If

       For I = 0 To 0
           infinite_dilution_form!lblSourceLabel(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       infinite_dilution_form!lblSourceLabel(PropertySourceToHighlight).BackColor = &H800000
       infinite_dilution_form!lblSourceLabel(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.ActivityCoefficient.PreviousIndex = PropertySourceToHighlight
    End If

' ***** END Displaying Activity Coefficient Values in activity coefficient
' ***** form (Infinite_dilution_form)


End Sub

Sub DisplayActivityCoefficientMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim SIValue As Double
    Dim EnglishValue As Double

    If phprop.ActivityCoefficient.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.ActivityCoefficient.CurrentSelection.choice
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckActivityCoefficient(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(1).Caption = "Not Available"
       HaveProperty(ACTIVITY_COEFFICIENT) = False
    Else
       Select Case ValueToDisplayIndex
          Case ACTIVITY_COEFFICIENT_UNIFAC

             SIValue = phprop.ActivityCoefficient.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call ACCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If

             SourceOfValueToDisplay = phprop.ActivityCoefficient.UNIFAC.source.short
             infinite_dilution_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             infinite_dilution_form!lblCurrentValues(1).Caption = infinite_dilution_form!lblSourceLabel(0).Caption
       End Select
       HaveProperty(ACTIVITY_COEFFICIENT) = True
       phprop.ActivityCoefficient.CurrentSelection.choice = ValueToDisplayIndex
       phprop.ActivityCoefficient.CurrentSelection.Value = SIValue
       phprop.ActivityCoefficient.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayAirDensity()
    Dim ValueToDisplayIndex As Integer
    Dim I As Integer
    Dim PropertySourceToHighlight As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim ValueToDisplay As Double

' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    frmAirDensity!lblCurrentValues(0).Caption = ""
    frmAirDensity!lblCurrentValues(1).Caption = ""

    Call DisplayAirDensityMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying air density values in air density
' ***** form (frmAirDensity)

'   *** Initialize all text and label boxes on frmAirDensity to gray and empty
    For I = 0 To 0
        frmAirDensity!Option1(I + 1).BackColor = &HC0C0C0
        frmAirDensity!Option1(I + 1).Enabled = False
        frmAirDensity!Option1(I + 1).Value = False
        frmAirDensity!lblSource(I).BackColor = &HC0C0C0
        frmAirDensity!lblAirDensityValue(I).Caption = "Not Available"
'        frmAirDensity!lblAirDensityValue(I).Enabled = False
        frmAirDensity!lblAirDensityValue(I).BackColor = &HC0C0C0
        frmAirDensity!lblAirDensityTemperature(I).Caption = ""
        frmAirDensity!lblAirDensityTemperature(I).Enabled = False
        frmAirDensity!lblAirDensityTemperature(I).BackColor = &HC0C0C0
        frmAirDensity!lblAirDensityminimumT(I).Caption = ""
        frmAirDensity!lblAirDensityminimumT(I).Enabled = False
        frmAirDensity!lblAirDensityminimumT(I).BackColor = &HC0C0C0
        frmAirDensity!lblAirDensitymaximumT(I).Caption = ""
        frmAirDensity!lblAirDensitymaximumT(I).Enabled = False
        frmAirDensity!lblAirDensitymaximumT(I).BackColor = &HC0C0C0
    Next I

        frmAirDensity!Option1(2).BackColor = &HC0C0C0
        frmAirDensity!Option1(2).Enabled = False
        frmAirDensity!Option1(2).Value = False
        frmAirDensity!lblSource(1).BackColor = &HC0C0C0
        frmAirDensity!txtAirDensityValue(1).Text = ""
        frmAirDensity!txtAirDensityValue(1).Enabled = False
        frmAirDensity!txtAirDensityValue(1).BackColor = &HC0C0C0
        frmAirDensity!txtAirDensityTemperature(1).Text = ""
        frmAirDensity!txtAirDensityTemperature(1).Enabled = False
        frmAirDensity!txtAirDensityTemperature(1).BackColor = &HC0C0C0
        frmAirDensity!txtAirDensityminimumT(1).Text = ""
        frmAirDensity!txtAirDensityminimumT(1).Enabled = False
        frmAirDensity!txtAirDensityminimumT(1).BackColor = &HC0C0C0
        frmAirDensity!txtAirDensitymaximumT(1).Text = ""
        frmAirDensity!txtAirDensitymaximumT(1).Enabled = False
        frmAirDensity!txtAirDensitymaximumT(1).BackColor = &HC0C0C0

    If PROPAVAILABLE(AIR_DENSITY_CORRELATION) Then

       SIValue = phprop.AirDensity.correlation.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call ADENSCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmAirDensity!lblAirDensityValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.AirDensity.correlation.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmAirDensity!lblAirDensityTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       frmAirDensity!lblAirDensityminimumT(0).Caption = "N/A"
       frmAirDensity!lblAirDensitymaximumT(0).Caption = "N/A"
       '*** Set colors of available choices to white
       frmAirDensity!Option1(1).BackColor = &HFFFFFF
       frmAirDensity!Option1(1).Enabled = True
       frmAirDensity!lblSource(0).BackColor = &HFFFFFF
       frmAirDensity!lblAirDensityValue(0).Enabled = True
       frmAirDensity!lblAirDensityValue(0).BackColor = &HFFFFFF
       frmAirDensity!lblAirDensityTemperature(0).Enabled = True
       frmAirDensity!lblAirDensityTemperature(0).BackColor = &HFFFFFF
       frmAirDensity!lblAirDensityminimumT(0).Enabled = True
       frmAirDensity!lblAirDensityminimumT(0).BackColor = &HFFFFFF
       frmAirDensity!lblAirDensitymaximumT(0).Enabled = True
       frmAirDensity!lblAirDensitymaximumT(0).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = AIR_DENSITY_CORRELATION Then
          frmAirDensity!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          frmAirDensity!Option1(1).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    frmAirDensity!Option1(2).BackColor = &HFFFFFF
    frmAirDensity!Option1(2).Enabled = True
    frmAirDensity!lblSource(1).BackColor = &HFFFFFF
    frmAirDensity!txtAirDensityValue(1).Enabled = True
    frmAirDensity!txtAirDensityValue(1).BackColor = &HFFFFFF
    frmAirDensity!txtAirDensityTemperature(1).Enabled = True
    frmAirDensity!txtAirDensityTemperature(1).BackColor = &HFFFFFF
    frmAirDensity!txtAirDensityminimumT(1).Enabled = True
    frmAirDensity!txtAirDensityminimumT(1).BackColor = &HFFFFFF
    frmAirDensity!txtAirDensitymaximumT(1).Enabled = True
    frmAirDensity!txtAirDensitymaximumT(1).BackColor = &HFFFFFF

    If PROPAVAILABLE(AIR_DENSITY_INPUT) Then

       SIValue = phprop.AirDensity.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call ADENSCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmAirDensity!txtAirDensityValue(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.AirDensity.input.temperature) Then
          SIValue = phprop.AirDensity.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          frmAirDensity!txtAirDensityTemperature(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          frmAirDensity!txtAirDensityTemperature(1).Text = ""
       End If

       frmAirDensity!txtAirDensityminimumT(1).Text = ""
       frmAirDensity!txtAirDensitymaximumT(1).Text = ""

       If ValueToDisplayIndex = AIR_DENSITY_INPUT Then
          frmAirDensity!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          frmAirDensity!Option1(2).Value = False
       End If

    End If

       For I = 0 To 1
           frmAirDensity!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       frmAirDensity!lblSource(PropertySourceToHighlight).BackColor = &H800000
       frmAirDensity!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.AirDensity.PreviousIndex = PropertySourceToHighlight
    End If

' ***** END Displaying air density values in air density
' ***** form (frmAirDensity)


End Sub

Sub DisplayAirDensityMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim SIValue As Double, EnglishValue As Double

    If phprop.AirDensity.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.AirDensity.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckAirDensity(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckAirDensity(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblAirWaterProperties(3).Caption = "Not Available"
       HaveProperty(AIR_DENSITY) = False
    Else
       Select Case ValueToDisplayIndex

          Case AIR_DENSITY_CORRELATION

             SIValue = phprop.AirDensity.correlation.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call ADENSCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.AirDensity.correlation.source.short
             frmAirDensity!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             frmAirDensity!lblCurrentValues(1).Caption = frmAirDensity!lblSource(0).Caption

          Case AIR_DENSITY_INPUT

             SIValue = phprop.AirDensity.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call ADENSCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.AirDensity.input.source.short
             frmAirDensity!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             frmAirDensity!lblCurrentValues(1).Caption = frmAirDensity!lblSource(1).Caption
       End Select

       HaveProperty(AIR_DENSITY) = True
       phprop.AirDensity.CurrentSelection.choice = ValueToDisplayIndex
       phprop.AirDensity.CurrentSelection.Value = SIValue
       phprop.AirDensity.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblAirWaterProperties(3).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayAirViscosity()
    Dim ValueToDisplayIndex As Integer
    Dim I As Integer
    Dim PropertySourceToHighlight As Integer
    Dim SIValue As Double, EnglishValue As Double
    Dim ValueToDisplay As Double


' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    frmAirViscosity!lblCurrentValues(0).Caption = ""
    frmAirViscosity!lblCurrentValues(1).Caption = ""

    Call DisplayAirViscosityMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying air viscosity values in air viscosity
' ***** form (frmAirViscosity)

'   *** Initialize all text and label boxes on frmAirViscosity to gray and empty
    For I = 0 To 0
        frmAirViscosity!Option1(I + 1).BackColor = &HC0C0C0
        frmAirViscosity!Option1(I + 1).Enabled = False
        frmAirViscosity!Option1(I + 1).Value = False
        frmAirViscosity!lblSource(I).BackColor = &HC0C0C0
        frmAirViscosity!lblAirViscosityValue(I).Caption = "Not Available"
'        frmAirViscosity!lblAirViscosityValue(I).Enabled = False
        frmAirViscosity!lblAirViscosityValue(I).BackColor = &HC0C0C0
        frmAirViscosity!lblAirViscosityTemperature(I).Caption = ""
        frmAirViscosity!lblAirViscosityTemperature(I).Enabled = False
        frmAirViscosity!lblAirViscosityTemperature(I).BackColor = &HC0C0C0
        frmAirViscosity!lblAirViscosityminimumT(I).Caption = ""
        frmAirViscosity!lblAirViscosityminimumT(I).Enabled = False
        frmAirViscosity!lblAirViscosityminimumT(I).BackColor = &HC0C0C0
        frmAirViscosity!lblAirViscositymaximumT(I).Caption = ""
        frmAirViscosity!lblAirViscositymaximumT(I).Enabled = False
        frmAirViscosity!lblAirViscositymaximumT(I).BackColor = &HC0C0C0
    Next I

        frmAirViscosity!Option1(2).BackColor = &HC0C0C0
        frmAirViscosity!Option1(2).Enabled = False
        frmAirViscosity!Option1(2).Value = False
        frmAirViscosity!lblSource(1).BackColor = &HC0C0C0
        frmAirViscosity!txtAirViscosityValue(1).Text = ""
        frmAirViscosity!txtAirViscosityValue(1).Enabled = False
        frmAirViscosity!txtAirViscosityValue(1).BackColor = &HC0C0C0
        frmAirViscosity!txtAirViscosityTemperature(1).Text = ""
        frmAirViscosity!txtAirViscosityTemperature(1).Enabled = False
        frmAirViscosity!txtAirViscosityTemperature(1).BackColor = &HC0C0C0
        frmAirViscosity!txtAirViscosityminimumT(1).Text = ""
        frmAirViscosity!txtAirViscosityminimumT(1).Enabled = False
        frmAirViscosity!txtAirViscosityminimumT(1).BackColor = &HC0C0C0
        frmAirViscosity!txtAirViscositymaximumT(1).Text = ""
        frmAirViscosity!txtAirViscositymaximumT(1).Enabled = False
        frmAirViscosity!txtAirViscositymaximumT(1).BackColor = &HC0C0C0

    If PROPAVAILABLE(AIR_VISCOSITY_CORRELATION) Then

       SIValue = phprop.AirViscosity.correlation.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call AVISCCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmAirViscosity!lblAirViscosityValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.AirViscosity.correlation.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmAirViscosity!lblAirViscosityTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       frmAirViscosity!lblAirViscosityminimumT(0).Caption = "N/A"
       frmAirViscosity!lblAirViscositymaximumT(0).Caption = "N/A"
       '*** Set colors of available choices to white
       frmAirViscosity!Option1(1).BackColor = &HFFFFFF
       frmAirViscosity!Option1(1).Enabled = True
       frmAirViscosity!lblSource(0).BackColor = &HFFFFFF
       frmAirViscosity!lblAirViscosityValue(0).Enabled = True
       frmAirViscosity!lblAirViscosityValue(0).BackColor = &HFFFFFF
       frmAirViscosity!lblAirViscosityTemperature(0).Enabled = True
       frmAirViscosity!lblAirViscosityTemperature(0).BackColor = &HFFFFFF
       frmAirViscosity!lblAirViscosityminimumT(0).Enabled = True
       frmAirViscosity!lblAirViscosityminimumT(0).BackColor = &HFFFFFF
       frmAirViscosity!lblAirViscositymaximumT(0).Enabled = True
       frmAirViscosity!lblAirViscositymaximumT(0).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = AIR_VISCOSITY_CORRELATION Then
          frmAirViscosity!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          frmAirViscosity!Option1(1).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    frmAirViscosity!Option1(2).BackColor = &HFFFFFF
    frmAirViscosity!Option1(2).Enabled = True
    frmAirViscosity!lblSource(1).BackColor = &HFFFFFF
    frmAirViscosity!txtAirViscosityValue(1).Enabled = True
    frmAirViscosity!txtAirViscosityValue(1).BackColor = &HFFFFFF
    frmAirViscosity!txtAirViscosityTemperature(1).Enabled = True
    frmAirViscosity!txtAirViscosityTemperature(1).BackColor = &HFFFFFF
    frmAirViscosity!txtAirViscosityminimumT(1).Enabled = True
    frmAirViscosity!txtAirViscosityminimumT(1).BackColor = &HFFFFFF
    frmAirViscosity!txtAirViscositymaximumT(1).Enabled = True
    frmAirViscosity!txtAirViscositymaximumT(1).BackColor = &HFFFFFF

    If PROPAVAILABLE(AIR_VISCOSITY_INPUT) Then

       SIValue = phprop.AirViscosity.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call AVISCCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmAirViscosity!txtAirViscosityValue(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.AirViscosity.input.temperature) Then
          SIValue = phprop.AirViscosity.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          frmAirViscosity!txtAirViscosityTemperature(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          frmAirViscosity!txtAirViscosityTemperature(1).Text = ""
       End If

       frmAirViscosity!txtAirViscosityminimumT(1).Text = ""
       frmAirViscosity!txtAirViscositymaximumT(1).Text = ""

       If ValueToDisplayIndex = AIR_VISCOSITY_INPUT Then
          frmAirViscosity!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          frmAirViscosity!Option1(2).Value = False
       End If

    End If

       For I = 0 To 1
           frmAirViscosity!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       frmAirViscosity!lblSource(PropertySourceToHighlight).BackColor = &H800000
       frmAirViscosity!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.AirViscosity.PreviousIndex = PropertySourceToHighlight
    End If


End Sub

Sub DisplayAirViscosityMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim EnglishValue As Double, SIValue As Double

    If phprop.AirViscosity.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.AirViscosity.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckAirViscosity(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckAirViscosity(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblAirWaterProperties(4).Caption = "Not Available"
       HaveProperty(AIR_VISCOSITY) = False
    Else
       Select Case ValueToDisplayIndex

          Case AIR_VISCOSITY_CORRELATION

             SIValue = phprop.AirViscosity.correlation.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call AVISCCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.AirViscosity.correlation.source.short
             frmAirViscosity!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             frmAirViscosity!lblCurrentValues(1).Caption = frmAirViscosity!lblSource(0).Caption

          Case AIR_VISCOSITY_INPUT

             SIValue = phprop.AirViscosity.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call AVISCCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.AirViscosity.input.source.short
             frmAirViscosity!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             frmAirViscosity!lblCurrentValues(1).Caption = frmAirViscosity!lblSource(1).Caption
       End Select

       HaveProperty(AIR_VISCOSITY) = True
       phprop.AirViscosity.CurrentSelection.choice = ValueToDisplayIndex
       phprop.AirViscosity.CurrentSelection.Value = SIValue
       phprop.AirViscosity.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblAirWaterProperties(4).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayAllProperties()
    Dim MolecularWeight As Double

      If HaveProperty(MOLECULAR_WEIGHT) Then
         MolecularWeight = phprop.MolecularWeight.CurrentSelection.Value
      Else
         MolecularWeight = -1#
      End If

    Call DisplayVaporPressure
    Call DisplayActivityCoefficient
    Call DisplayHenrysConstant
    Call DisplayMolecularWeight
    Call DisplayBoilingPoint
    Call DisplayLiquidDensity
    Call DisplayMolarVolumeOpT
    Call DisplayMolarVolumeNBP
    Call DisplayRefractiveIndex
    Call DisplayAqueousSolubility
    Call DisplayOctWaterPartCoeff
    Call DisplayLiquidDiffusivity(MolecularWeight)
    Call DisplayGasDiffusivity
    Call DisplayWaterDensity
    Call DisplayWaterViscosity
    Call DisplayWaterSurfaceTension
    Call DisplayAirDensity
    Call DisplayAirViscosity

End Sub

Sub DisplayAqueousSolubility()
    Dim ValueToDisplayIndex As Integer
    Dim PropertySourceToHighlight As Integer
    Dim I As Integer
    Dim SIValue As Double, EnglishValue As Double
    Dim ValueToDisplay As Double


' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    aqsol_form!lblCurrentValues(0).Caption = ""
    aqsol_form!lblCurrentValues(1).Caption = ""

    Call DisplayAqueousSolubilityMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying Aqueous Solubility values in aqueous solubility
' ***** form (aqsol_form)

'   *** Initialize all text and label boxes on aqsol_form to gray and empty
    For I = 0 To 3
        aqsol_form!Option1(I + 1).BackColor = &HC0C0C0
        aqsol_form!Option1(I + 1).Enabled = False
        aqsol_form!Option1(I + 1).Value = False
        aqsol_form!lblSource(I).BackColor = &HC0C0C0
        aqsol_form!lblAqueousSolubilityValue(I).Caption = "Not Available"
'        aqsol_form!lblAqueousSolubilityValue(I).Enabled = False
        aqsol_form!lblAqueousSolubilityValue(I).BackColor = &HC0C0C0
        aqsol_form!lblAqSolTemperature(I).Caption = ""
        aqsol_form!lblAqSolTemperature(I).Enabled = False
        aqsol_form!lblAqSolTemperature(I).BackColor = &HC0C0C0
    Next I

        aqsol_form!Option1(5).BackColor = &HC0C0C0
        aqsol_form!Option1(5).Enabled = False
        aqsol_form!Option1(5).Value = False
        aqsol_form!lblSource(4).BackColor = &HC0C0C0
        aqsol_form!txtAqueousSolubilityValue(4).Text = ""
        aqsol_form!txtAqueousSolubilityValue(4).Enabled = False
        aqsol_form!txtAqueousSolubilityValue(4).BackColor = &HC0C0C0
        aqsol_form!txtAqSolTemperature(4).Text = ""
        aqsol_form!txtAqSolTemperature(4).Enabled = False
        aqsol_form!txtAqSolTemperature(4).BackColor = &HC0C0C0

    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_FIT) Then

       SIValue = phprop.AqueousSolubility.fit.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call AQSCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       aqsol_form!lblAqueousSolubilityValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.AqueousSolubility.fit.UNIFAC.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       aqsol_form!lblAqSolTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       aqsol_form!Option1(1).BackColor = &HFFFFFF
       aqsol_form!Option1(1).Enabled = True
       aqsol_form!lblSource(0).BackColor = &HFFFFFF
       aqsol_form!lblAqueousSolubilityValue(0).Enabled = True
       aqsol_form!lblAqueousSolubilityValue(0).BackColor = &HFFFFFF
       aqsol_form!lblAqSolTemperature(0).Enabled = True
       aqsol_form!lblAqSolTemperature(0).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = AQUEOUS_SOLUBILITY_FIT Then
          aqsol_form!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          aqsol_form!Option1(1).Value = False
       End If
    End If

    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_OPT_UNIFAC) Then

       SIValue = phprop.AqueousSolubility.operatingT.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call AQSCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       aqsol_form!lblAqueousSolubilityValue(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.AqueousSolubility.operatingT.UNIFAC.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       aqsol_form!lblAqSolTemperature(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       aqsol_form!Option1(2).BackColor = &HFFFFFF
       aqsol_form!Option1(2).Enabled = True
       aqsol_form!lblSource(1).BackColor = &HFFFFFF
       aqsol_form!lblAqueousSolubilityValue(1).Enabled = True
       aqsol_form!lblAqueousSolubilityValue(1).BackColor = &HFFFFFF
       aqsol_form!lblAqSolTemperature(1).Enabled = True
       aqsol_form!lblAqSolTemperature(1).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = AQUEOUS_SOLUBILITY_OPT_UNIFAC Then
          aqsol_form!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          aqsol_form!Option1(2).Value = False
       End If
    End If

    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_DATABASE) Then

       SIValue = phprop.AqueousSolubility.database.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call AQSCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       aqsol_form!lblAqueousSolubilityValue(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.AqueousSolubility.database.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       aqsol_form!lblAqSolTemperature(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       aqsol_form!Option1(3).BackColor = &HFFFFFF
       aqsol_form!Option1(3).Enabled = True
       aqsol_form!lblSource(2).BackColor = &HFFFFFF
       aqsol_form!lblAqueousSolubilityValue(2).Enabled = True
       aqsol_form!lblAqueousSolubilityValue(2).BackColor = &HFFFFFF
       aqsol_form!lblAqSolTemperature(2).Enabled = True
       aqsol_form!lblAqSolTemperature(2).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = AQUEOUS_SOLUBILITY_DATABASE Then
          aqsol_form!Option1(3).Value = True
          PropertySourceToHighlight = 2
       Else
          aqsol_form!Option1(3).Value = False
       End If
    End If

    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_DBT_UNIFAC) Then

       SIValue = phprop.AqueousSolubility.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call AQSCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       aqsol_form!lblAqueousSolubilityValue(3).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.AqueousSolubility.UNIFAC.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       aqsol_form!lblAqSolTemperature(3).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       aqsol_form!Option1(4).BackColor = &HFFFFFF
       aqsol_form!Option1(4).Enabled = True
       aqsol_form!lblSource(3).BackColor = &HFFFFFF
       aqsol_form!lblAqueousSolubilityValue(3).Enabled = True
       aqsol_form!lblAqueousSolubilityValue(3).BackColor = &HFFFFFF
       aqsol_form!lblAqSolTemperature(3).Enabled = True
       aqsol_form!lblAqSolTemperature(3).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = AQUEOUS_SOLUBILITY_DBT_UNIFAC Then
          aqsol_form!Option1(4).Value = True
          PropertySourceToHighlight = 3
       Else
          aqsol_form!Option1(4).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    aqsol_form!Option1(5).BackColor = &HFFFFFF
    aqsol_form!Option1(5).Enabled = True
    aqsol_form!lblSource(4).BackColor = &HFFFFFF
    aqsol_form!txtAqueousSolubilityValue(4).Enabled = True
    aqsol_form!txtAqueousSolubilityValue(4).BackColor = &HFFFFFF
    aqsol_form!txtAqSolTemperature(4).Enabled = True
    aqsol_form!txtAqSolTemperature(4).BackColor = &HFFFFFF

    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_INPUT) Then

       SIValue = phprop.AqueousSolubility.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call AQSCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       aqsol_form!txtAqueousSolubilityValue(4).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.AqueousSolubility.input.temperature) Then
          SIValue = phprop.AqueousSolubility.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          aqsol_form!txtAqSolTemperature(4).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          aqsol_form!txtAqSolTemperature(4).Text = ""
       End If

       If ValueToDisplayIndex = AQUEOUS_SOLUBILITY_INPUT Then
          aqsol_form!Option1(5).Value = True
          PropertySourceToHighlight = 4
       Else
          aqsol_form!Option1(5).Value = False
       End If

    End If

       For I = 0 To 4
           aqsol_form!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       aqsol_form!lblSource(PropertySourceToHighlight).BackColor = &H800000
       aqsol_form!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.AqueousSolubility.PreviousIndex = PropertySourceToHighlight
    End If


' ***** END Displaying Aqueous Solubility values in aqueous solubility
' ***** form (aqsol_form)

End Sub

Sub DisplayAqueousSolubilityMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim EnglishValue As Double, SIValue As Double

    If phprop.AqueousSolubility.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.AqueousSolubility.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckAqueousSolubility(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckAqueousSolubility(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckAqueousSolubility(3, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckAqueousSolubility(4, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckAqueousSolubility(5, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(9).Caption = "Not Available"
       HaveProperty(AQUEOUS_SOLUBILITY) = False
    Else
       Select Case ValueToDisplayIndex

          Case AQUEOUS_SOLUBILITY_FIT

             SIValue = phprop.AqueousSolubility.fit.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call AQSCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.AqueousSolubility.fit.UNIFAC.source.short
             aqsol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             aqsol_form!lblCurrentValues(1).Caption = aqsol_form!lblSource(0).Caption

          Case AQUEOUS_SOLUBILITY_OPT_UNIFAC

             SIValue = phprop.AqueousSolubility.operatingT.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call AQSCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
           
             SourceOfValueToDisplay = phprop.AqueousSolubility.operatingT.UNIFAC.source.short
             aqsol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             aqsol_form!lblCurrentValues(1).Caption = aqsol_form!lblSource(1).Caption

          Case AQUEOUS_SOLUBILITY_DATABASE

             SIValue = phprop.AqueousSolubility.database.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call AQSCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
           
             SourceOfValueToDisplay = phprop.AqueousSolubility.database.source.short
             aqsol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             aqsol_form!lblCurrentValues(1).Caption = aqsol_form!lblSource(2).Caption

          Case AQUEOUS_SOLUBILITY_DBT_UNIFAC

             SIValue = phprop.AqueousSolubility.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call AQSCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
          
             SourceOfValueToDisplay = phprop.AqueousSolubility.UNIFAC.source.short
             aqsol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             aqsol_form!lblCurrentValues(1).Caption = aqsol_form!lblSource(3).Caption

          Case AQUEOUS_SOLUBILITY_INPUT

             SIValue = phprop.AqueousSolubility.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call AQSCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.AqueousSolubility.input.source.short
             aqsol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             aqsol_form!lblCurrentValues(1).Caption = aqsol_form!lblSource(4).Caption
       End Select

       HaveProperty(AQUEOUS_SOLUBILITY) = True
       phprop.AqueousSolubility.CurrentSelection.choice = ValueToDisplayIndex
       phprop.AqueousSolubility.CurrentSelection.Value = SIValue
       phprop.AqueousSolubility.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(9).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If
    
End Sub

Sub DisplayBoilingPoint()
    Dim ValueToDisplayIndex As Integer
    Dim PropertySourceToHighlight As Integer
    Dim I As Integer
    Dim SIValue As Double, EnglishValue As Double
    Dim ValueToDisplay As Double


' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    nbp_form!lblCurrentValues(0).Caption = ""
    nbp_form!lblCurrentValues(1).Caption = ""

    Call DisplayBoilingPointMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying Normal Boiling Point Values in
' ***** normal boiling point form (nbp_form)

'   *** Initialize all text and label boxes on nbp_form
'   *** to gray and empty and disabled
    For I = 0 To 0
        nbp_form!Option1(I + 1).BackColor = &HC0C0C0
        nbp_form!Option1(I + 1).Enabled = False
        nbp_form!Option1(I + 1).Value = False
        nbp_form!lblSource(I).BackColor = &HC0C0C0
        nbp_form!lblNormalBPValue(I).Caption = "Not Available"
'        nbp_form!lblNormalBPValue(I).Enabled = False
        nbp_form!lblNormalBPValue(I).BackColor = &HC0C0C0
    Next I

        nbp_form!Option1(2).BackColor = &HC0C0C0
        nbp_form!Option1(2).Enabled = False
        nbp_form!Option1(2).Value = False
        nbp_form!lblSource(1).BackColor = &HC0C0C0
        nbp_form!txtNormalBPValue(1).Text = ""
        nbp_form!txtNormalBPValue(1).Enabled = False
        nbp_form!txtNormalBPValue(1).BackColor = &HC0C0C0

    If PROPAVAILABLE(BOILING_POINT_DATABASE) Then

       SIValue = phprop.BoilingPoint.database.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call NBPCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       nbp_form!lblNormalBPValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       nbp_form!Option1(1).BackColor = &HFFFFFF
       nbp_form!Option1(1).Enabled = True
       nbp_form!lblSource(0).BackColor = &HFFFFFF
       nbp_form!lblNormalBPValue(0).Enabled = True
       nbp_form!lblNormalBPValue(0).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = BOILING_POINT_DATABASE Then
          nbp_form!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          nbp_form!Option1(1).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    nbp_form!Option1(2).BackColor = &HFFFFFF
    nbp_form!Option1(2).Enabled = True
    nbp_form!lblSource(1).BackColor = &HFFFFFF
    nbp_form!txtNormalBPValue(1).Enabled = True
    nbp_form!txtNormalBPValue(1).BackColor = &HFFFFFF

    If PROPAVAILABLE(BOILING_POINT_INPUT) Then

       SIValue = phprop.BoilingPoint.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call NBPCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       nbp_form!txtNormalBPValue(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If ValueToDisplayIndex = BOILING_POINT_INPUT Then
          nbp_form!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          nbp_form!Option1(2).Value = False
       End If

    End If

       For I = 0 To 1
           nbp_form!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       nbp_form!lblSource(PropertySourceToHighlight).BackColor = &H800000
       nbp_form!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.BoilingPoint.PreviousIndex = PropertySourceToHighlight
    End If


' ***** END Displaying Normal Boiling Point Values in
' ***** normal boiling point form (nbp_form)

End Sub

Sub DisplayBoilingPointMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim SIValue As Double, EnglishValue As Double
    
    If phprop.BoilingPoint.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.BoilingPoint.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckBoilingPoint(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckBoilingPoint(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(4).Caption = "Not Available"
       HaveProperty(BOILING_POINT) = False
    Else
       Select Case ValueToDisplayIndex
          Case BOILING_POINT_DATABASE

             SIValue = phprop.BoilingPoint.database.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call NBPCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
           
             SourceOfValueToDisplay = phprop.BoilingPoint.database.source.short
             nbp_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             nbp_form!lblCurrentValues(1).Caption = nbp_form!lblSource(0).Caption
          Case BOILING_POINT_INPUT

             SIValue = phprop.BoilingPoint.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call NBPCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.BoilingPoint.input.source.short
             nbp_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             nbp_form!lblCurrentValues(1).Caption = nbp_form!lblSource(1).Caption
       End Select
       HaveProperty(BOILING_POINT) = True
       phprop.BoilingPoint.CurrentSelection.choice = ValueToDisplayIndex
       phprop.BoilingPoint.CurrentSelection.Value = SIValue
       phprop.BoilingPoint.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(4).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If


End Sub

Sub DisplayGasDiffusivity()
    Dim ValueToDisplayIndex As Integer
    Dim I As Integer
    Dim PropertySourceToHighlight As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim ValueToDisplay As Double

' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    gas_diff_form!lblCurrentValues(0).Caption = ""
    gas_diff_form!lblCurrentValues(1).Caption = ""

    Call DisplayGasDiffusivityMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying Gas Diffusivity values
' ***** in gas diffusivity form (gas_diff_form)

'   *** Initialize all text and label boxes on gas_diff_form to gray and empty
    For I = 0 To 0
        gas_diff_form!Option1(I + 1).BackColor = &HC0C0C0
        gas_diff_form!Option1(I + 1).Enabled = False
        gas_diff_form!Option1(I + 1).Value = False
        gas_diff_form!lblSource(I).BackColor = &HC0C0C0
        gas_diff_form!lblGasDiffusivityValue(I).Caption = "Not Available"
'        gas_diff_form!lblGasDiffusivityValue(I).Enabled = False
        gas_diff_form!lblGasDiffusivityValue(I).BackColor = &HC0C0C0
        gas_diff_form!lblGasDiffTemperature(I).Caption = ""
        gas_diff_form!lblGasDiffTemperature(I).Enabled = False
        gas_diff_form!lblGasDiffTemperature(I).BackColor = &HC0C0C0
    Next I

        gas_diff_form!Option1(2).BackColor = &HC0C0C0
        gas_diff_form!Option1(2).Enabled = False
        gas_diff_form!Option1(2).Value = False
        gas_diff_form!lblSource(1).BackColor = &HC0C0C0
        gas_diff_form!txtGasDiffusivityValue(1).Text = ""
        gas_diff_form!txtGasDiffusivityValue(1).Enabled = False
        gas_diff_form!txtGasDiffusivityValue(1).BackColor = &HC0C0C0
        gas_diff_form!txtGasDiffTemperature(1).Text = ""
        gas_diff_form!txtGasDiffTemperature(1).Enabled = False
        gas_diff_form!txtGasDiffTemperature(1).BackColor = &HC0C0C0

    If PROPAVAILABLE(GAS_DIFFUSIVITY_WILKELEE) Then

       SIValue = phprop.GasDiffusivity.wilkeLee.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call GDIFFCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       gas_diff_form!lblGasDiffusivityValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.GasDiffusivity.wilkeLee.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       gas_diff_form!lblGasDiffTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       gas_diff_form!Option1(1).BackColor = &HFFFFFF
       gas_diff_form!Option1(1).Enabled = True
       gas_diff_form!lblSource(0).BackColor = &HFFFFFF
       gas_diff_form!lblGasDiffusivityValue(0).Enabled = True
       gas_diff_form!lblGasDiffusivityValue(0).BackColor = &HFFFFFF
       gas_diff_form!lblGasDiffTemperature(0).Enabled = True
       gas_diff_form!lblGasDiffTemperature(0).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = GAS_DIFFUSIVITY_WILKELEE Then
          gas_diff_form!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          gas_diff_form!Option1(1).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    gas_diff_form!Option1(2).BackColor = &HFFFFFF
    gas_diff_form!Option1(2).Enabled = True
    gas_diff_form!lblSource(1).BackColor = &HFFFFFF
    gas_diff_form!txtGasDiffusivityValue(1).Enabled = True
    gas_diff_form!txtGasDiffusivityValue(1).BackColor = &HFFFFFF
    gas_diff_form!txtGasDiffTemperature(1).Enabled = True
    gas_diff_form!txtGasDiffTemperature(1).BackColor = &HFFFFFF

    If PROPAVAILABLE(GAS_DIFFUSIVITY_INPUT) Then

       SIValue = phprop.GasDiffusivity.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call GDIFFCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       gas_diff_form!txtGasDiffusivityValue(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.GasDiffusivity.input.temperature) Then
          SIValue = phprop.GasDiffusivity.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          gas_diff_form!txtGasDiffTemperature(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          gas_diff_form!txtGasDiffTemperature(1).Text = ""
       End If

       If ValueToDisplayIndex = GAS_DIFFUSIVITY_INPUT Then
          gas_diff_form!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          gas_diff_form!Option1(2).Value = False
       End If

    End If

       For I = 0 To 1
           gas_diff_form!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       gas_diff_form!lblSource(PropertySourceToHighlight).BackColor = &H800000
       gas_diff_form!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.GasDiffusivity.PreviousIndex = PropertySourceToHighlight
    End If


' ***** END Displaying Gas Diffusivity values
' ***** in gas diffusivity form (gas_diff_form)


End Sub

Sub DisplayGasDiffusivityMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim EnglishValue As Double, SIValue As Double

    If phprop.GasDiffusivity.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.GasDiffusivity.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckGasDiffusivity(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckGasDiffusivity(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(12).Caption = "Not Available"
       HaveProperty(GAS_DIFFUSIVITY) = False
    Else
       Select Case ValueToDisplayIndex

          Case GAS_DIFFUSIVITY_WILKELEE

             SIValue = phprop.GasDiffusivity.wilkeLee.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call GDIFFCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
           
             SourceOfValueToDisplay = phprop.GasDiffusivity.wilkeLee.source.short
             gas_diff_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             gas_diff_form!lblCurrentValues(1).Caption = gas_diff_form!lblSource(0).Caption

          Case GAS_DIFFUSIVITY_INPUT

             SIValue = phprop.GasDiffusivity.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call GDIFFCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
           
             SourceOfValueToDisplay = phprop.GasDiffusivity.input.source.short
             gas_diff_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             gas_diff_form!lblCurrentValues(1).Caption = gas_diff_form!lblSource(1).Caption
       End Select

       HaveProperty(GAS_DIFFUSIVITY) = True
       phprop.GasDiffusivity.CurrentSelection.choice = ValueToDisplayIndex
       phprop.GasDiffusivity.CurrentSelection.Value = SIValue
       phprop.GasDiffusivity.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(12).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayHenrysConstant()
    
    Dim ValueToDisplayIndex As Integer
    Dim PropertySourceToHighlight As Integer
    Dim I As Integer
    Dim SIValue As Double, EnglishValue As Double
    Dim ValueToDisplay As Double
    Dim hc_database_value As String * 40
    Dim hc_database_temp As String
    Dim hc_string As String
    Dim hc_unifac_value As String * 40
    Dim hc_unifac_temp As String


' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    hc_form!lblCurrentValues(0).Caption = ""
    hc_form!lblCurrentValues(1).Caption = ""

    Call DisplayHenrysConstantMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying Henry's constant values in Henry's constant
' ***** form (hc_form)

'   *** Initialize all text and label boxes on hc_form to gray and empty
    For I = 0 To 4
        hc_form!Option1(I + 1).BackColor = &HC0C0C0
        hc_form!Option1(I + 1).Enabled = False
        hc_form!Option1(I + 1).Value = False
        hc_form!lblSource(I).BackColor = &HC0C0C0
        hc_form!lblHenrysConstantValue(I).Caption = "Not Available"
'        hc_form!lblHenrysConstantValue(I).Enabled = False
        hc_form!lblHenrysConstantValue(I).BackColor = &HC0C0C0
        hc_form!lblHCTemperature(I).Caption = ""
        hc_form!lblHCTemperature(I).Enabled = False
        hc_form!lblHCTemperature(I).BackColor = &HC0C0C0
        hc_form!lblHCminimumT(I).Caption = ""
        hc_form!lblHCminimumT(I).Enabled = False
        hc_form!lblHCminimumT(I).BackColor = &HC0C0C0
        hc_form!lblHCmaximumT(I).Caption = ""
        hc_form!lblHCmaximumT(I).Enabled = False
        hc_form!lblHCmaximumT(I).BackColor = &HC0C0C0
    Next I

        hc_form!Option1(6).BackColor = &HC0C0C0
        hc_form!Option1(6).Enabled = False
        hc_form!Option1(6).Value = False
        hc_form!lblSource(5).BackColor = &HC0C0C0
        hc_form!txtHenrysConstantValue(5).Text = ""
        hc_form!txtHenrysConstantValue(5).Enabled = False
        hc_form!txtHenrysConstantValue(5).BackColor = &HC0C0C0
        hc_form!txtHCTemperature(5).Text = ""
        hc_form!txtHCTemperature(5).Enabled = False
        hc_form!txtHCTemperature(5).BackColor = &HC0C0C0
        hc_form!txtHCminimumT(5).Text = ""
        hc_form!txtHCminimumT(5).Enabled = False
        hc_form!txtHCminimumT(5).BackColor = &HC0C0C0
        hc_form!txtHCmaximumT(5).Text = ""
        hc_form!txtHCmaximumT(5).Enabled = False
        hc_form!txtHCmaximumT(5).BackColor = &HC0C0C0
        hc_form!lblUNIFAC.BackColor = &HC0C0C0
        hc_form!cboUNIFAC.BackColor = &HC0C0C0
        hc_form!cboUNIFAC.Enabled = False
        hc_form!lblDatabase.BackColor = &HC0C0C0
        hc_form!hc_list.BackColor = &HC0C0C0
        hc_form!hc_list.Enabled = False


    If PROPAVAILABLE(HENRYS_CONSTANT_REGRESS) Then

       SIValue = phprop.HenrysConstant.regress.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call HCCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHenrysConstantValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.HenrysConstant.regress.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHCTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       hc_form!lblHCminimumT(0).Caption = "N/A"
       hc_form!lblHCmaximumT(0).Caption = "N/A"
       '*** Set colors of available choices to white
       hc_form!Option1(1).BackColor = &HFFFFFF
       hc_form!Option1(1).Enabled = True
       hc_form!lblSource(0).BackColor = &HFFFFFF
       hc_form!lblHenrysConstantValue(0).Enabled = True
       hc_form!lblHenrysConstantValue(0).BackColor = &HFFFFFF
       hc_form!lblHCTemperature(0).Enabled = True
       hc_form!lblHCTemperature(0).BackColor = &HFFFFFF
       hc_form!lblHCminimumT(0).Enabled = True
       hc_form!lblHCminimumT(0).BackColor = &HFFFFFF
       hc_form!lblHCmaximumT(0).Enabled = True
       hc_form!lblHCmaximumT(0).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = HENRYS_CONSTANT_REGRESS Then
          hc_form!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          hc_form!Option1(1).Value = False
       End If
    End If


    If PROPAVAILABLE(HENRYS_CONSTANT_FIT) Then

       SIValue = phprop.HenrysConstant.fit.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call HCCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHenrysConstantValue(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.HenrysConstant.fit.UNIFAC.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHCTemperature(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       hc_form!lblHCminimumT(1).Caption = "N/A"
       hc_form!lblHCmaximumT(1).Caption = "N/A"
       '*** Set colors of available choices to white
       hc_form!Option1(2).BackColor = &HFFFFFF
       hc_form!Option1(2).Enabled = True
       hc_form!lblSource(1).BackColor = &HFFFFFF
       hc_form!lblHenrysConstantValue(1).Enabled = True
       hc_form!lblHenrysConstantValue(1).BackColor = &HFFFFFF
       hc_form!lblHCTemperature(1).Enabled = True
       hc_form!lblHCTemperature(1).BackColor = &HFFFFFF
       hc_form!lblHCminimumT(1).Enabled = True
       hc_form!lblHCminimumT(1).BackColor = &HFFFFFF
       hc_form!lblHCmaximumT(1).Enabled = True
       hc_form!lblHCmaximumT(1).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = HENRYS_CONSTANT_FIT Then
          hc_form!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          hc_form!Option1(2).Value = False
       End If
    End If

    If PROPAVAILABLE(HENRYS_CONSTANT_OPT_UNIFAC) Then

       SIValue = phprop.HenrysConstant.operatingT.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call HCCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHenrysConstantValue(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.HenrysConstant.operatingT.UNIFAC.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHCTemperature(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       hc_form!lblHCminimumT(2).Caption = "N/A"
       hc_form!lblHCmaximumT(2).Caption = "N/A"
       '*** Set colors of available choices to white
       hc_form!Option1(3).BackColor = &HFFFFFF
       hc_form!Option1(3).Enabled = True
       hc_form!lblSource(2).BackColor = &HFFFFFF
       hc_form!lblHenrysConstantValue(2).Enabled = True
       hc_form!lblHenrysConstantValue(2).BackColor = &HFFFFFF
       hc_form!lblHCTemperature(2).Enabled = True
       hc_form!lblHCTemperature(2).BackColor = &HFFFFFF
       hc_form!lblHCminimumT(2).Enabled = True
       hc_form!lblHCminimumT(2).BackColor = &HFFFFFF
       hc_form!lblHCmaximumT(2).Enabled = True
       hc_form!lblHCmaximumT(2).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = HENRYS_CONSTANT_OPT_UNIFAC Then
          hc_form!Option1(3).Value = True
          PropertySourceToHighlight = 2
       Else
          hc_form!Option1(3).Value = False
       End If
    End If

    If PROPAVAILABLE(HENRYS_CONSTANT_DATABASE) Then

       SIValue = phprop.HenrysConstant.database(phprop.HenrysConstant.chosenDatabaseIndex).Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call HCCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHenrysConstantValue(3).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.HenrysConstant.database(phprop.HenrysConstant.chosenDatabaseIndex).temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHCTemperature(3).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       hc_form!lblHCminimumT(3).Caption = "N/A"
       hc_form!lblHCmaximumT(3).Caption = "N/A"
       '*** Set colors of available choices to white
       hc_form!Option1(4).BackColor = &HFFFFFF
       hc_form!Option1(4).Enabled = True
       hc_form!lblSource(3).BackColor = &HFFFFFF
       hc_form!lblHenrysConstantValue(3).Enabled = True
       hc_form!lblHenrysConstantValue(3).BackColor = &HFFFFFF
       hc_form!lblHCTemperature(3).Enabled = True
       hc_form!lblHCTemperature(3).BackColor = &HFFFFFF
       hc_form!lblHCminimumT(3).Enabled = True
       hc_form!lblHCminimumT(3).BackColor = &HFFFFFF
       hc_form!lblHCmaximumT(3).Enabled = True
       hc_form!lblHCmaximumT(3).BackColor = &HFFFFFF
       hc_form!lblDatabase.BackColor = &HFFFFFF
       hc_form!hc_list.BackColor = &HFFFFFF
       hc_form!hc_list.Enabled = True

       '***  Build combo box on HC_FORM for database values

       hc_form!hc_list.Clear

       If phprop.HenrysConstant.database(1).source.short = 3 Then   'RTI
          hc_form!lblDatabase.Caption = "RTI"
       ElseIf phprop.HenrysConstant.database(1).source.short = 1 Then   'Yaws
          hc_form!lblDatabase.Caption = "Yaws"
       ElseIf phprop.HenrysConstant.database(1).source.short = 2 Then   'Superfund
          hc_form!lblDatabase.Caption = "Superfund"
       End If

       For I = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
             
           SIValue = phprop.HenrysConstant.database(I).Value
           If CurrentUnits = SIUnits Then
              ValueToDisplay = SIValue
           ElseIf CurrentUnits = EnglishUnits Then
              Call HCCONV(EnglishValue, SIValue)
              ValueToDisplay = EnglishValue
           End If
           LSet hc_database_value = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

           SIValue = phprop.HenrysConstant.database(I).temperature
           If CurrentUnits = SIUnits Then
              ValueToDisplay = SIValue
           ElseIf CurrentUnits = EnglishUnits Then
              Call TEMPCNV(EnglishValue, SIValue)
              ValueToDisplay = EnglishValue
           End If
           hc_database_temp = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

           hc_string = hc_database_value + hc_database_temp
           hc_form!hc_list.AddItem hc_string
           If phprop.HenrysConstant.chosenDatabaseIndex = I Then
              hc_form!hc_list.ListIndex = I - 1
           End If
             
       Next I

       
       If ValueToDisplayIndex = HENRYS_CONSTANT_DATABASE Then
          hc_form!Option1(4).Value = True
          PropertySourceToHighlight = 3
       Else
          hc_form!Option1(4).Value = False
       End If
    End If

    If PROPAVAILABLE(HENRYS_CONSTANT_UNIFAC) Then

       SIValue = phprop.HenrysConstant.UNIFAC(phprop.HenrysConstant.chosenUNIFACIndex).Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call HCCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHenrysConstantValue(4).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.HenrysConstant.UNIFAC(phprop.HenrysConstant.chosenUNIFACIndex).temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHCTemperature(4).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       hc_form!lblHCminimumT(4).Caption = "N/A"
       hc_form!lblHCmaximumT(4).Caption = "N/A"
       '*** Set colors of available choices to white
       hc_form!Option1(5).BackColor = &HFFFFFF
       hc_form!Option1(5).Enabled = True
       hc_form!lblSource(4).BackColor = &HFFFFFF
       hc_form!lblHenrysConstantValue(4).Enabled = True
       hc_form!lblHenrysConstantValue(4).BackColor = &HFFFFFF
       hc_form!lblHCTemperature(4).Enabled = True
       hc_form!lblHCTemperature(4).BackColor = &HFFFFFF
       hc_form!lblHCminimumT(4).Enabled = True
       hc_form!lblHCminimumT(4).BackColor = &HFFFFFF
       hc_form!lblHCmaximumT(4).Enabled = True
       hc_form!lblHCmaximumT(4).BackColor = &HFFFFFF
       hc_form!lblUNIFAC.BackColor = &HFFFFFF
       hc_form!cboUNIFAC.BackColor = &HFFFFFF
       hc_form!cboUNIFAC.Enabled = True

       hc_form!cboUNIFAC.Clear
       '*** Build combo box of UNIFAC Henry's constants on hc_form
       
       For I = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
           If phprop.HenrysConstant.UNIFAC(I).error >= 0 Then
              If hc_form!lblUNIFAC.Caption = "" Then hc_form!lblUNIFAC.Caption = "UNIFAC"

              SIValue = phprop.HenrysConstant.UNIFAC(I).Value
              If CurrentUnits = SIUnits Then
                 ValueToDisplay = SIValue
              ElseIf CurrentUnits = EnglishUnits Then
                 Call HCCONV(EnglishValue, SIValue)
                 ValueToDisplay = EnglishValue
              End If
              LSet hc_unifac_value = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

              SIValue = phprop.HenrysConstant.UNIFAC(I).temperature
              If CurrentUnits = SIUnits Then
                 ValueToDisplay = SIValue
              ElseIf CurrentUnits = EnglishUnits Then
                 Call TEMPCNV(EnglishValue, SIValue)
                 ValueToDisplay = EnglishValue
              End If
              hc_unifac_temp = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

              hc_string = hc_unifac_value + hc_unifac_temp
              hc_form!cboUNIFAC.AddItem hc_string
              If phprop.HenrysConstant.chosenUNIFACIndex = I Then
                 hc_form!cboUNIFAC.ListIndex = I - 1
              End If
           Else
              LSet hc_unifac_value = "N/A    "

              SIValue = phprop.HenrysConstant.database(I).temperature
              If CurrentUnits = SIUnits Then
                 ValueToDisplay = SIValue
              ElseIf CurrentUnits = EnglishUnits Then
                 Call TEMPCNV(EnglishValue, SIValue)
                 ValueToDisplay = EnglishValue
              End If
              hc_unifac_temp = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

              hc_string = hc_unifac_value + hc_unifac_temp
              hc_form!cboUNIFAC.AddItem hc_string
           End If
       Next I


       If ValueToDisplayIndex = HENRYS_CONSTANT_UNIFAC Then
          hc_form!Option1(5).Value = True
          PropertySourceToHighlight = 4
       Else
          hc_form!Option1(5).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    hc_form!Option1(6).BackColor = &HFFFFFF
    hc_form!Option1(6).Enabled = True
    hc_form!lblSource(5).BackColor = &HFFFFFF
    hc_form!txtHenrysConstantValue(5).Enabled = True
    hc_form!txtHenrysConstantValue(5).BackColor = &HFFFFFF
    hc_form!txtHCTemperature(5).Enabled = True
    hc_form!txtHCTemperature(5).BackColor = &HFFFFFF
    hc_form!txtHCminimumT(5).Enabled = True
    hc_form!txtHCminimumT(5).BackColor = &HFFFFFF
    hc_form!txtHCmaximumT(5).Enabled = True
    hc_form!txtHCmaximumT(5).BackColor = &HFFFFFF

    If PROPAVAILABLE(HENRYS_CONSTANT_INPUT) Then

       SIValue = phprop.HenrysConstant.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call HCCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!txtHenrysConstantValue(5).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.HenrysConstant.input.temperature) Then

          SIValue = phprop.HenrysConstant.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          hc_form!txtHCTemperature(5).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          hc_form!txtHCTemperature(5).Text = ""
       End If
       hc_form!txtHCminimumT(5).Text = "N/A"
       hc_form!txtHCmaximumT(5).Text = "N/A"

       If ValueToDisplayIndex = HENRYS_CONSTANT_INPUT Then
          hc_form!Option1(6).Value = True
          PropertySourceToHighlight = 5
       Else
          hc_form!Option1(5).Value = False
       End If

    End If

       For I = 0 To 5
           hc_form!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       hc_form!lblSource(PropertySourceToHighlight).BackColor = &H800000
       hc_form!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.HenrysConstant.PreviousIndex = PropertySourceToHighlight
    End If


' ***** END Displaying Henry's constant values in Henry's constant
' ***** form (hc_form)

End Sub

Sub DisplayHenrysConstantMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim HenrysConstantCloseIndex As Integer
    Dim HenrysConstantUNIFACCloseIndex As Integer
    Dim SourceOfValueToDisplay As Long
    Dim SIValue As Double, EnglishValue As Double

    If phprop.HenrysConstant.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.HenrysConstant.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckHenrysConstant(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckHenrysConstant(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckHenrysConstant(3, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckHenrysConstant(4, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckHenrysConstant(5, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckHenrysConstant(6, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If


    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(2).Caption = "Not Available"
       HaveProperty(HENRYS_CONSTANT) = False
    Else
       Select Case ValueToDisplayIndex
          Case HENRYS_CONSTANT_REGRESS

             SIValue = phprop.HenrysConstant.regress.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call HCCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If

             SourceOfValueToDisplay = phprop.HenrysConstant.regress.source.short
             hc_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             hc_form!lblCurrentValues(1).Caption = hc_form!lblSource(0).Caption
          Case HENRYS_CONSTANT_FIT

             SIValue = phprop.HenrysConstant.fit.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call HCCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If

             SourceOfValueToDisplay = phprop.HenrysConstant.fit.UNIFAC.source.short
             hc_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             hc_form!lblCurrentValues(1).Caption = hc_form!lblSource(1).Caption
          Case HENRYS_CONSTANT_OPT_UNIFAC

             SIValue = phprop.HenrysConstant.operatingT.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call HCCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If

             SourceOfValueToDisplay = phprop.HenrysConstant.operatingT.UNIFAC.source.short
             hc_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             hc_form!lblCurrentValues(1).Caption = hc_form!lblSource(2).Caption
          Case HENRYS_CONSTANT_DATABASE

             HenrysConstantCloseIndex = phprop.HenrysConstant.chosenDatabaseIndex
             SIValue = phprop.HenrysConstant.database(HenrysConstantCloseIndex).Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call HCCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If

             SourceOfValueToDisplay = phprop.HenrysConstant.database(HenrysConstantCloseIndex).source.short
             hc_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             hc_form!lblCurrentValues(1).Caption = hc_form!lblSource(3).Caption
          Case HENRYS_CONSTANT_UNIFAC

             HenrysConstantUNIFACCloseIndex = phprop.HenrysConstant.chosenUNIFACIndex
             SIValue = phprop.HenrysConstant.UNIFAC(HenrysConstantUNIFACCloseIndex).Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call HCCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If

             SourceOfValueToDisplay = phprop.HenrysConstant.UNIFAC(HenrysConstantUNIFACCloseIndex).source.short
             hc_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             hc_form!lblCurrentValues(1).Caption = hc_form!lblSource(4).Caption
          Case HENRYS_CONSTANT_INPUT

             SIValue = phprop.HenrysConstant.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call HCCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If

             SourceOfValueToDisplay = phprop.HenrysConstant.input.source.short
             hc_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             hc_form!lblCurrentValues(1).Caption = hc_form!lblSource(5).Caption
       End Select
       HaveProperty(HENRYS_CONSTANT) = True
       phprop.HenrysConstant.CurrentSelection.choice = ValueToDisplayIndex
       phprop.HenrysConstant.CurrentSelection.Value = SIValue
       phprop.HenrysConstant.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayLiquidDensity()
    Dim ValueToDisplayIndex As Integer
    Dim PropertySourceToHighlight As Integer
    Dim I As Integer
    Dim SIValue As Double, EnglishValue As Double
    Dim ValueToDisplay As Double


' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    ldens_form!lblCurrentValues(0).Caption = ""
    ldens_form!lblCurrentValues(1).Caption = ""

    Call DisplayLiquidDensityMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying liquid density values in liquid density
' ***** form (ldens_form)

'   *** Initialize all text and label boxes on ldens_form to gray and empty
    For I = 0 To 1
        ldens_form!Option1(I + 1).BackColor = &HC0C0C0
        ldens_form!Option1(I + 1).Enabled = False
        ldens_form!Option1(I + 1).Value = False
        ldens_form!lblSource(I).BackColor = &HC0C0C0
        ldens_form!lblLiquidDensityValue(I).Caption = "Not Available"
'        ldens_form!lblLiquidDensityValue(I).Enabled = False
        ldens_form!lblLiquidDensityValue(I).BackColor = &HC0C0C0
        ldens_form!lblLDTemperature(I).Caption = ""
        ldens_form!lblLDTemperature(I).Enabled = False
        ldens_form!lblLDTemperature(I).BackColor = &HC0C0C0
        ldens_form!lblLDminimumT(I).Caption = ""
        ldens_form!lblLDminimumT(I).Enabled = False
        ldens_form!lblLDminimumT(I).BackColor = &HC0C0C0
        ldens_form!lblLDmaximumT(I).Caption = ""
        ldens_form!lblLDmaximumT(I).Enabled = False
        ldens_form!lblLDmaximumT(I).BackColor = &HC0C0C0
    Next I

        ldens_form!Option1(3).BackColor = &HC0C0C0
        ldens_form!Option1(3).Enabled = False
        ldens_form!Option1(3).Value = False
        ldens_form!lblSource(2).BackColor = &HC0C0C0
        ldens_form!txtLiquidDensityValue(2).Text = ""
        ldens_form!txtLiquidDensityValue(2).Enabled = False
        ldens_form!txtLiquidDensityValue(2).BackColor = &HC0C0C0
        ldens_form!txtLDTemperature(2).Text = ""
        ldens_form!txtLDTemperature(2).Enabled = False
        ldens_form!txtLDTemperature(2).BackColor = &HC0C0C0
        ldens_form!txtLDminimumT(2).Text = ""
        ldens_form!txtLDminimumT(2).Enabled = False
        ldens_form!txtLDminimumT(2).BackColor = &HC0C0C0
        ldens_form!txtLDmaximumT(2).Text = ""
        ldens_form!txtLDmaximumT(2).Enabled = False
        ldens_form!txtLDmaximumT(2).BackColor = &HC0C0C0

    If PROPAVAILABLE(LIQUID_DENSITY_DATABASE) Then

       SIValue = phprop.LiquidDensity.database.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call LDENSCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       ldens_form!lblLiquidDensityValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.LiquidDensity.database.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       ldens_form!lblLDTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.LiquidDensity.dbase_minT
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       ldens_form!lblLDminimumT(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.LiquidDensity.dbase_maxT
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       ldens_form!lblLDmaximumT(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       ldens_form!Option1(1).BackColor = &HFFFFFF
       ldens_form!Option1(1).Enabled = True
       ldens_form!lblSource(0).BackColor = &HFFFFFF
       ldens_form!lblLiquidDensityValue(0).Enabled = True
       ldens_form!lblLiquidDensityValue(0).BackColor = &HFFFFFF
       ldens_form!lblLDTemperature(0).Enabled = True
       ldens_form!lblLDTemperature(0).BackColor = &HFFFFFF
       ldens_form!lblLDminimumT(0).Enabled = True
       ldens_form!lblLDminimumT(0).BackColor = &HFFFFFF
       ldens_form!lblLDmaximumT(0).Enabled = True
       ldens_form!lblLDmaximumT(0).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = LIQUID_DENSITY_DATABASE Then
          ldens_form!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          ldens_form!Option1(1).Value = False
       End If
    End If

    If PROPAVAILABLE(LIQUID_DENSITY_UNIFAC) Then

       SIValue = phprop.LiquidDensity.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call LDENSCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       ldens_form!lblLiquidDensityValue(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.LiquidDensity.UNIFAC.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       ldens_form!lblLDTemperature(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       ldens_form!lblLDminimumT(1).Caption = "N/A"
       ldens_form!lblLDmaximumT(1).Caption = "N/A"
       '*** Set colors of available choices to white
       ldens_form!Option1(2).BackColor = &HFFFFFF
       ldens_form!Option1(2).Enabled = True
       ldens_form!lblSource(1).BackColor = &HFFFFFF
       ldens_form!lblLiquidDensityValue(1).Enabled = True
       ldens_form!lblLiquidDensityValue(1).BackColor = &HFFFFFF
       ldens_form!lblLDTemperature(1).Enabled = True
       ldens_form!lblLDTemperature(1).BackColor = &HFFFFFF
       ldens_form!lblLDminimumT(1).Enabled = True
       ldens_form!lblLDminimumT(1).BackColor = &HFFFFFF
       ldens_form!lblLDmaximumT(1).Enabled = True
       ldens_form!lblLDmaximumT(1).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = LIQUID_DENSITY_UNIFAC Then
          ldens_form!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          ldens_form!Option1(2).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    ldens_form!Option1(3).BackColor = &HFFFFFF
    ldens_form!Option1(3).Enabled = True
    ldens_form!lblSource(2).BackColor = &HFFFFFF
    ldens_form!txtLiquidDensityValue(2).Enabled = True
    ldens_form!txtLiquidDensityValue(2).BackColor = &HFFFFFF
    ldens_form!txtLDTemperature(2).Enabled = True
    ldens_form!txtLDTemperature(2).BackColor = &HFFFFFF
    ldens_form!txtLDminimumT(2).Enabled = True
    ldens_form!txtLDminimumT(2).BackColor = &HFFFFFF
    ldens_form!txtLDmaximumT(2).Enabled = True
    ldens_form!txtLDmaximumT(2).BackColor = &HFFFFFF

    If PROPAVAILABLE(LIQUID_DENSITY_INPUT) Then

       SIValue = phprop.LiquidDensity.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call LDENSCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       ldens_form!txtLiquidDensityValue(2).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.LiquidDensity.input.temperature) Then
          SIValue = phprop.LiquidDensity.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          ldens_form!txtLDTemperature(2).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          ldens_form!txtLDTemperature(2).Text = ""
       End If

       ldens_form!txtLDminimumT(2).Text = "N/A"
       ldens_form!txtLDmaximumT(2).Text = "N/A"

       If ValueToDisplayIndex = LIQUID_DENSITY_INPUT Then
          ldens_form!Option1(3).Value = True
          PropertySourceToHighlight = 2
       Else
          ldens_form!Option1(3).Value = False
       End If

    End If

       For I = 0 To 2
           ldens_form!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       ldens_form!lblSource(PropertySourceToHighlight).BackColor = &H800000
       ldens_form!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.LiquidDensity.PreviousIndex = PropertySourceToHighlight
    End If

' ***** END Displaying liquid density values in liquid density
' ***** form (ldens_form)


End Sub

Sub DisplayLiquidDensityMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim SIValue As Double, EnglishValue As Double
    
    If phprop.LiquidDensity.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.LiquidDensity.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckLiquidDensity(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckLiquidDensity(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckLiquidDensity(3, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(5).Caption = "Not Available"
       HaveProperty(LIQUID_DENSITY) = False
    Else
       Select Case ValueToDisplayIndex

          Case LIQUID_DENSITY_DATABASE

             SIValue = phprop.LiquidDensity.database.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call LDENSCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.LiquidDensity.database.source.short
             ldens_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             ldens_form!lblCurrentValues(1).Caption = ldens_form!lblSource(0).Caption

          Case LIQUID_DENSITY_UNIFAC

             SIValue = phprop.LiquidDensity.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call LDENSCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.LiquidDensity.UNIFAC.source.short
             ldens_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             ldens_form!lblCurrentValues(1).Caption = ldens_form!lblSource(1).Caption

          Case LIQUID_DENSITY_INPUT

             SIValue = phprop.LiquidDensity.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call LDENSCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.LiquidDensity.input.source.short
             ldens_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             ldens_form!lblCurrentValues(1).Caption = ldens_form!lblSource(2).Caption
      End Select
      HaveProperty(LIQUID_DENSITY) = True
      phprop.LiquidDensity.CurrentSelection.choice = ValueToDisplayIndex
      phprop.LiquidDensity.CurrentSelection.Value = SIValue
      phprop.LiquidDensity.CurrentSelection.source = SourceOfValueToDisplay

      contam_prop_form!lblContaminantProperties(5).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayLiquidDiffusivity(MolecularWeight As Double)
    Dim ValueToDisplayIndex As Integer
    Dim I As Integer
    Dim PropertySourceToHighlight As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim ValueToDisplay As Double

' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    liquid_diff_form!lblCurrentValues(0).Caption = ""
    liquid_diff_form!lblCurrentValues(1).Caption = ""

    Call DisplayLiquidDiffusivityMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying Liquid Diffusivity values
' ***** in liquid diffusivity form (liquid_diff_form)

'   *** Initialize all text and label boxes on liquid_diff_form to gray and empty
    For I = 0 To 2
        liquid_diff_form!Option1(I + 1).BackColor = &HC0C0C0
        liquid_diff_form!Option1(I + 1).Enabled = False
        liquid_diff_form!Option1(I + 1).Value = False
        liquid_diff_form!lblSource(I).BackColor = &HC0C0C0
        liquid_diff_form!lblLiquidDiffusivityValue(I).Caption = "Not Available"
'        liquid_diff_form!lblLiquidDiffusivityValue(I).Enabled = False
        liquid_diff_form!lblLiquidDiffusivityValue(I).BackColor = &HC0C0C0
        liquid_diff_form!lblLiqDiffTemperature(I).Caption = ""
        liquid_diff_form!lblLiqDiffTemperature(I).Enabled = False
        liquid_diff_form!lblLiqDiffTemperature(I).BackColor = &HC0C0C0
    Next I

        liquid_diff_form!Option1(4).BackColor = &HC0C0C0
        liquid_diff_form!Option1(4).Enabled = False
        liquid_diff_form!Option1(4).Value = False
        liquid_diff_form!lblSource(3).BackColor = &HC0C0C0
        liquid_diff_form!txtLiquidDiffusivityValue(3).Text = ""
        liquid_diff_form!txtLiquidDiffusivityValue(3).Enabled = False
        liquid_diff_form!txtLiquidDiffusivityValue(3).BackColor = &HC0C0C0
        liquid_diff_form!txtLiqDiffTemperature(3).Text = ""
        liquid_diff_form!txtLiqDiffTemperature(3).Enabled = False
        liquid_diff_form!txtLiqDiffTemperature(3).BackColor = &HC0C0C0

    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_HAYDUKLAUDIE) Then

       SIValue = phprop.LiquidDiffusivity.haydukLaudie.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call LDIFFCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       liquid_diff_form!lblLiquidDiffusivityValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.LiquidDiffusivity.haydukLaudie.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       liquid_diff_form!lblLiqDiffTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       liquid_diff_form!Option1(1).BackColor = &HFFFFFF
       liquid_diff_form!Option1(1).Enabled = True
       liquid_diff_form!lblSource(0).BackColor = &HFFFFFF
       liquid_diff_form!lblLiquidDiffusivityValue(0).Enabled = True
       liquid_diff_form!lblLiquidDiffusivityValue(0).BackColor = &HFFFFFF
       liquid_diff_form!lblLiqDiffTemperature(0).Enabled = True
       liquid_diff_form!lblLiqDiffTemperature(0).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = LIQUID_DIFFUSIVITY_HAYDUKLAUDIE Then
          liquid_diff_form!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          liquid_diff_form!Option1(1).Value = False
       End If
    End If

    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_POLSON) Then

       SIValue = phprop.LiquidDiffusivity.polson.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call LDIFFCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       liquid_diff_form!lblLiquidDiffusivityValue(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.LiquidDiffusivity.polson.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       liquid_diff_form!lblLiqDiffTemperature(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       liquid_diff_form!Option1(2).BackColor = &HFFFFFF
       liquid_diff_form!Option1(2).Enabled = True
       liquid_diff_form!lblSource(1).BackColor = &HFFFFFF
       liquid_diff_form!lblLiquidDiffusivityValue(1).Enabled = True
       liquid_diff_form!lblLiquidDiffusivityValue(1).BackColor = &HFFFFFF
       liquid_diff_form!lblLiqDiffTemperature(1).Enabled = True
       liquid_diff_form!lblLiqDiffTemperature(1).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = LIQUID_DIFFUSIVITY_POLSON Then
          liquid_diff_form!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          liquid_diff_form!Option1(2).Value = False
       End If
    End If

    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_WILKECHANG) Then

       SIValue = phprop.LiquidDiffusivity.wilkeChang.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call LDIFFCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       liquid_diff_form!lblLiquidDiffusivityValue(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.LiquidDiffusivity.wilkeChang.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       liquid_diff_form!lblLiqDiffTemperature(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       liquid_diff_form!Option1(3).BackColor = &HFFFFFF
       liquid_diff_form!Option1(3).Enabled = True
       liquid_diff_form!lblSource(2).BackColor = &HFFFFFF
       liquid_diff_form!lblLiquidDiffusivityValue(2).Enabled = True
       liquid_diff_form!lblLiquidDiffusivityValue(2).BackColor = &HFFFFFF
       liquid_diff_form!lblLiqDiffTemperature(2).Enabled = True
       liquid_diff_form!lblLiqDiffTemperature(2).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = LIQUID_DIFFUSIVITY_WILKECHANG Then
          liquid_diff_form!Option1(3).Value = True
          PropertySourceToHighlight = 2
       Else
          liquid_diff_form!Option1(3).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    liquid_diff_form!Option1(4).BackColor = &HFFFFFF
    liquid_diff_form!Option1(4).Enabled = True
    liquid_diff_form!lblSource(3).BackColor = &HFFFFFF
    liquid_diff_form!txtLiquidDiffusivityValue(3).Enabled = True
    liquid_diff_form!txtLiquidDiffusivityValue(3).BackColor = &HFFFFFF
    liquid_diff_form!txtLiqDiffTemperature(3).Enabled = True
    liquid_diff_form!txtLiqDiffTemperature(3).BackColor = &HFFFFFF

    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_INPUT) Then

       SIValue = phprop.LiquidDiffusivity.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call LDIFFCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       liquid_diff_form!txtLiquidDiffusivityValue(3).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.LiquidDiffusivity.input.temperature) Then
          SIValue = phprop.LiquidDiffusivity.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          liquid_diff_form!txtLiqDiffTemperature(3).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          liquid_diff_form!txtLiqDiffTemperature(3).Text = ""
       End If

       If ValueToDisplayIndex = LIQUID_DIFFUSIVITY_INPUT Then
          liquid_diff_form!Option1(4).Value = True
          PropertySourceToHighlight = 3
       Else
          liquid_diff_form!Option1(4).Value = False
       End If

    End If

       For I = 0 To 3
           liquid_diff_form!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       liquid_diff_form!lblSource(PropertySourceToHighlight).BackColor = &H800000
       liquid_diff_form!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.LiquidDiffusivity.PreviousIndex = PropertySourceToHighlight
    End If


' ***** END Displaying Liquid Diffusivity values
' ***** in liquid diffusivity form (liquid_diff_form)

End Sub

Sub DisplayLiquidDiffusivityMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Static HierarchyArray(1 To 4) As HierarchyType
    Dim SourceOfValueToDisplay As Long
    Dim EnglishValue As Double, SIValue As Double

    If phprop.LiquidDiffusivity.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.LiquidDiffusivity.CurrentSelection.choice
    End If

    If MolecularWeight < 1000# Then
       For I = 1 To 4
           HierarchyArray(I) = hie.LiquidDiffusivityMWTlt1000(I)
       Next I
    Else
       For I = 1 To 4
           HierarchyArray(I) = hie.LiquidDiffusivityMWTgt1000(I)
       Next I
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckLiquidDiffusivity(HierarchyArray(1), ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckLiquidDiffusivity(HierarchyArray(2), ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckLiquidDiffusivity(HierarchyArray(3), ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckLiquidDiffusivity(HierarchyArray(4), ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(11).Caption = "Not Available"
       HaveProperty(LIQUID_DIFFUSIVITY) = False
    Else
       Select Case ValueToDisplayIndex

          Case LIQUID_DIFFUSIVITY_HAYDUKLAUDIE

             SIValue = phprop.LiquidDiffusivity.haydukLaudie.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call LDIFFCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If

             SourceOfValueToDisplay = phprop.LiquidDiffusivity.haydukLaudie.source.short
             liquid_diff_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             liquid_diff_form!lblCurrentValues(1).Caption = liquid_diff_form!lblSource(0).Caption

          Case LIQUID_DIFFUSIVITY_WILKECHANG

             SIValue = phprop.LiquidDiffusivity.wilkeChang.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call LDIFFCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.LiquidDiffusivity.wilkeChang.source.short
             liquid_diff_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             liquid_diff_form!lblCurrentValues(1).Caption = liquid_diff_form!lblSource(2).Caption

          Case LIQUID_DIFFUSIVITY_POLSON

             SIValue = phprop.LiquidDiffusivity.polson.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call LDIFFCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.LiquidDiffusivity.polson.source.short
             liquid_diff_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             liquid_diff_form!lblCurrentValues(1).Caption = liquid_diff_form!lblSource(1).Caption

          Case LIQUID_DIFFUSIVITY_INPUT

             SIValue = phprop.LiquidDiffusivity.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call LDIFFCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
           
             SourceOfValueToDisplay = phprop.LiquidDiffusivity.input.source.short
             liquid_diff_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             liquid_diff_form!lblCurrentValues(1).Caption = liquid_diff_form!lblSource(3).Caption
       End Select

       HaveProperty(LIQUID_DIFFUSIVITY) = True
       phprop.LiquidDiffusivity.CurrentSelection.choice = ValueToDisplayIndex
       phprop.LiquidDiffusivity.CurrentSelection.Value = SIValue
       phprop.LiquidDiffusivity.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(11).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayMolarVolumeNBP()
    Dim ValueToDisplayIndex As Integer
    Dim PropertySourceToHighlight As Integer
    Dim I As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim ValueToDisplay As Double


' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    mv_nbp_form!lblCurrentValues(0).Caption = ""
    mv_nbp_form!lblCurrentValues(1).Caption = ""

    Call DisplayMolarVolumeNBPMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying molar volume at normal boiling point Values
' ***** in molar volume at normal boiling point form (mv_nbp_form)

'   *** Initialize all text and label boxes on mv_nbp_form
'   *** to gray and empty and disabled
    For I = 0 To 0
        mv_nbp_form!Option1(I + 1).BackColor = &HC0C0C0
        mv_nbp_form!Option1(I + 1).Enabled = False
        mv_nbp_form!Option1(I + 1).Value = False
        mv_nbp_form!lblSource(I).BackColor = &HC0C0C0
        mv_nbp_form!lblMolarVolumeNBPValue(I).Caption = "Not Available"
'        mv_nbp_form!lblMolarVolumeNBPValue(I).Enabled = False
        mv_nbp_form!lblMolarVolumeNBPValue(I).BackColor = &HC0C0C0
        mv_nbp_form!lblMVNBPTemperature(I).Caption = ""
        mv_nbp_form!lblMVNBPTemperature(I).Enabled = False
        mv_nbp_form!lblMVNBPTemperature(I).BackColor = &HC0C0C0
    Next I

        mv_nbp_form!Option1(2).BackColor = &HC0C0C0
        mv_nbp_form!Option1(2).Enabled = False
        mv_nbp_form!Option1(2).Value = False
        mv_nbp_form!lblSource(1).BackColor = &HC0C0C0
        mv_nbp_form!txtMolarVolumeNBPValue(1).Text = ""
        mv_nbp_form!txtMolarVolumeNBPValue(1).Enabled = False
        mv_nbp_form!txtMolarVolumeNBPValue(1).BackColor = &HC0C0C0
        mv_nbp_form!txtMVNBPTemperature(1).Text = ""
        mv_nbp_form!txtMVNBPTemperature(1).Enabled = False
        mv_nbp_form!txtMVNBPTemperature(1).BackColor = &HC0C0C0

    If PROPAVAILABLE(MOLAR_VOLUME_NBP_UNIFAC) Then

       SIValue = phprop.MolarVolume.BoilingPoint.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call MVNBPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       mv_nbp_form!lblMolarVolumeNBPValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveProperty(BOILING_POINT) Then
          SIValue = phprop.MolarVolume.BoilingPoint.UNIFAC.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          mv_nbp_form!lblMVNBPTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          mv_nbp_form!lblMVNBPTemperature(0).Caption = "N/A"
       End If

       '*** Set colors of available choices to white
       mv_nbp_form!Option1(1).BackColor = &HFFFFFF
       mv_nbp_form!Option1(1).Enabled = True
       mv_nbp_form!lblSource(0).BackColor = &HFFFFFF
       mv_nbp_form!lblMolarVolumeNBPValue(0).Enabled = True
       mv_nbp_form!lblMolarVolumeNBPValue(0).BackColor = &HFFFFFF
       mv_nbp_form!lblMVNBPTemperature(0).Enabled = True
       mv_nbp_form!lblMVNBPTemperature(0).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = MOLAR_VOLUME_NBP_UNIFAC Then
          mv_nbp_form!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          mv_nbp_form!Option1(1).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    mv_nbp_form!Option1(2).BackColor = &HFFFFFF
    mv_nbp_form!Option1(2).Enabled = True
    mv_nbp_form!lblSource(1).BackColor = &HFFFFFF
    mv_nbp_form!txtMolarVolumeNBPValue(1).Enabled = True
    mv_nbp_form!txtMolarVolumeNBPValue(1).BackColor = &HFFFFFF
    mv_nbp_form!txtMVNBPTemperature(1).Enabled = True
    mv_nbp_form!txtMVNBPTemperature(1).BackColor = &HFFFFFF

    If PROPAVAILABLE(MOLAR_VOLUME_NBP_INPUT) Then

       SIValue = phprop.MolarVolume.BoilingPoint.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call MVNBPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       mv_nbp_form!txtMolarVolumeNBPValue(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.MolarVolume.BoilingPoint.input.temperature) Then
          SIValue = phprop.MolarVolume.BoilingPoint.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          mv_nbp_form!txtMVNBPTemperature(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          mv_nbp_form!txtMVNBPTemperature(1).Text = ""
       End If

       If ValueToDisplayIndex = MOLAR_VOLUME_NBP_INPUT Then
          mv_nbp_form!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          mv_nbp_form!Option1(2).Value = False
       End If

    End If

       For I = 0 To 1
           mv_nbp_form!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       mv_nbp_form!lblSource(PropertySourceToHighlight).BackColor = &H800000
       mv_nbp_form!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.MolarVolumeBoilingPoint.PreviousIndex = PropertySourceToHighlight
    End If


' ***** END Displaying molar volume at normal boiling point Values
' ***** in molar volume at normal boiling point form (mv_nbp_form)


End Sub

Sub DisplayMolarVolumeNBPMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim EnglishValue As Double, SIValue As Double
    
    If phprop.MolarVolume.BoilingPoint.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.MolarVolume.BoilingPoint.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckMolarVolumeNBP(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckMolarVolumeNBP(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(7).Caption = "Not Available"
       HaveProperty(MOLAR_VOLUME_BOILING_POINT) = False
    Else
       Select Case ValueToDisplayIndex

          Case MOLAR_VOLUME_NBP_UNIFAC

             SIValue = phprop.MolarVolume.BoilingPoint.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call MVNBPCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.MolarVolume.BoilingPoint.UNIFAC.source.short
             mv_nbp_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             mv_nbp_form!lblCurrentValues(1).Caption = mv_nbp_form!lblSource(0).Caption

          Case MOLAR_VOLUME_NBP_INPUT

             SIValue = phprop.MolarVolume.BoilingPoint.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call MVNBPCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.MolarVolume.BoilingPoint.input.source.short
             mv_nbp_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             mv_nbp_form!lblCurrentValues(1).Caption = mv_nbp_form!lblSource(1).Caption
       End Select
       HaveProperty(MOLAR_VOLUME_BOILING_POINT) = True
       phprop.MolarVolume.BoilingPoint.CurrentSelection.choice = ValueToDisplayIndex
       phprop.MolarVolume.BoilingPoint.CurrentSelection.Value = SIValue
       phprop.MolarVolume.BoilingPoint.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(7).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayMolarVolumeOpT()
    Dim ValueToDisplayIndex As Integer
    Dim PropertySourceToHighlight As Integer
    Dim I As Integer
    Dim SIValue As Double, EnglishValue As Double
    Dim ValueToDisplay As Double


' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    molar_vol_form!lblCurrentValues(0).Caption = ""
    molar_vol_form!lblCurrentValues(1).Caption = ""

    Call DisplayMolarVolumeOpTMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying molar volume at operating temperature values
' ***** in molar volume at operating temperature form (molar_vol_form)
                                         
'   *** Initialize all text and label boxes on molar_vol_form to gray and empty
    For I = 0 To 1
        molar_vol_form!Option1(I + 1).BackColor = &HC0C0C0
        molar_vol_form!Option1(I + 1).Enabled = False
        molar_vol_form!Option1(I + 1).Value = False
        molar_vol_form!lblSource(I).BackColor = &HC0C0C0
        molar_vol_form!lblMolarVolumeOpTValue(I).Caption = "Not Available"
'        molar_vol_form!lblMolarVolumeOpTValue(I).Enabled = False
        molar_vol_form!lblMolarVolumeOpTValue(I).BackColor = &HC0C0C0
        molar_vol_form!lblMVOpTTemperature(I).Caption = ""
        molar_vol_form!lblMVOpTTemperature(I).Enabled = False
        molar_vol_form!lblMVOpTTemperature(I).BackColor = &HC0C0C0
        molar_vol_form!lblMVOpTminimumT(I).Caption = ""
        molar_vol_form!lblMVOpTminimumT(I).Enabled = False
        molar_vol_form!lblMVOpTminimumT(I).BackColor = &HC0C0C0
        molar_vol_form!lblMVOpTmaximumT(I).Caption = ""
        molar_vol_form!lblMVOpTmaximumT(I).Enabled = False
        molar_vol_form!lblMVOpTmaximumT(I).BackColor = &HC0C0C0
    Next I

        molar_vol_form!Option1(3).BackColor = &HC0C0C0
        molar_vol_form!Option1(3).Enabled = False
        molar_vol_form!Option1(3).Value = False
        molar_vol_form!lblSource(2).BackColor = &HC0C0C0
        molar_vol_form!txtMolarVolumeOpTValue(2).Text = ""
        molar_vol_form!txtMolarVolumeOpTValue(2).Enabled = False
        molar_vol_form!txtMolarVolumeOpTValue(2).BackColor = &HC0C0C0
        molar_vol_form!txtMVOpTTemperature(2).Text = ""
        molar_vol_form!txtMVOpTTemperature(2).Enabled = False
        molar_vol_form!txtMVOpTTemperature(2).BackColor = &HC0C0C0
        molar_vol_form!txtMVOpTminimumT(2).Text = ""
        molar_vol_form!txtMVOpTminimumT(2).Enabled = False
        molar_vol_form!txtMVOpTminimumT(2).BackColor = &HC0C0C0
        molar_vol_form!txtMVOpTmaximumT(2).Text = ""
        molar_vol_form!txtMVOpTmaximumT(2).Enabled = False
        molar_vol_form!txtMVOpTmaximumT(2).BackColor = &HC0C0C0

    If PROPAVAILABLE(MOLAR_VOLUME_OPT_DATABASE) Then

       SIValue = phprop.MolarVolume.operatingT.database.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call MVOPTCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       molar_vol_form!lblMolarVolumeOpTValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.MolarVolume.operatingT.database.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       molar_vol_form!lblMVOpTTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.LiquidDensity.dbase_minT
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       molar_vol_form!lblMVOpTminimumT(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.LiquidDensity.dbase_maxT
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       molar_vol_form!lblMVOpTmaximumT(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       molar_vol_form!Option1(1).BackColor = &HFFFFFF
       molar_vol_form!Option1(1).Enabled = True
       molar_vol_form!lblSource(0).BackColor = &HFFFFFF
       molar_vol_form!lblMolarVolumeOpTValue(0).Enabled = True
       molar_vol_form!lblMolarVolumeOpTValue(0).BackColor = &HFFFFFF
       molar_vol_form!lblMVOpTTemperature(0).Enabled = True
       molar_vol_form!lblMVOpTTemperature(0).BackColor = &HFFFFFF
       molar_vol_form!lblMVOpTminimumT(0).Enabled = True
       molar_vol_form!lblMVOpTminimumT(0).BackColor = &HFFFFFF
       molar_vol_form!lblMVOpTmaximumT(0).Enabled = True
       molar_vol_form!lblMVOpTmaximumT(0).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = MOLAR_VOLUME_OPT_DATABASE Then
          molar_vol_form!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          molar_vol_form!Option1(1).Value = False
       End If
    End If

    If PROPAVAILABLE(MOLAR_VOLUME_OPT_UNIFAC) Then

       SIValue = phprop.MolarVolume.operatingT.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call MVOPTCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       molar_vol_form!lblMolarVolumeOpTValue(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.MolarVolume.operatingT.UNIFAC.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       molar_vol_form!lblMVOpTTemperature(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       molar_vol_form!lblMVOpTminimumT(1).Caption = "N/A"
       molar_vol_form!lblMVOpTmaximumT(1).Caption = "N/A"

       '*** Set colors of available choices to white
       molar_vol_form!Option1(2).BackColor = &HFFFFFF
       molar_vol_form!Option1(2).Enabled = True
       molar_vol_form!lblSource(1).BackColor = &HFFFFFF
       molar_vol_form!lblMolarVolumeOpTValue(1).Enabled = True
       molar_vol_form!lblMolarVolumeOpTValue(1).BackColor = &HFFFFFF
       molar_vol_form!lblMVOpTTemperature(1).Enabled = True
       molar_vol_form!lblMVOpTTemperature(1).BackColor = &HFFFFFF
       molar_vol_form!lblMVOpTminimumT(1).Enabled = True
       molar_vol_form!lblMVOpTminimumT(1).BackColor = &HFFFFFF
       molar_vol_form!lblMVOpTmaximumT(1).Enabled = True
       molar_vol_form!lblMVOpTmaximumT(1).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = MOLAR_VOLUME_OPT_UNIFAC Then
          molar_vol_form!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          molar_vol_form!Option1(2).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    molar_vol_form!Option1(3).BackColor = &HFFFFFF
    molar_vol_form!Option1(3).Enabled = True
    molar_vol_form!lblSource(2).BackColor = &HFFFFFF
    molar_vol_form!txtMolarVolumeOpTValue(2).Enabled = True
    molar_vol_form!txtMolarVolumeOpTValue(2).BackColor = &HFFFFFF
    molar_vol_form!txtMVOpTTemperature(2).Enabled = True
    molar_vol_form!txtMVOpTTemperature(2).BackColor = &HFFFFFF
    molar_vol_form!txtMVOpTminimumT(2).Enabled = True
    molar_vol_form!txtMVOpTminimumT(2).BackColor = &HFFFFFF
    molar_vol_form!txtMVOpTmaximumT(2).Enabled = True
    molar_vol_form!txtMVOpTmaximumT(2).BackColor = &HFFFFFF

    If PROPAVAILABLE(MOLAR_VOLUME_OPT_INPUT) Then

       SIValue = phprop.MolarVolume.operatingT.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call MVOPTCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       molar_vol_form!txtMolarVolumeOpTValue(2).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.MolarVolume.operatingT.input.temperature) Then
          SIValue = phprop.MolarVolume.operatingT.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          molar_vol_form!txtMVOpTTemperature(2).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          molar_vol_form!txtMVOpTTemperature(2).Text = ""
       End If

       molar_vol_form!txtMVOpTminimumT(2).Text = "N/A"
       molar_vol_form!txtMVOpTmaximumT(2).Text = "N/A"

       If ValueToDisplayIndex = MOLAR_VOLUME_OPT_INPUT Then
          molar_vol_form!Option1(3).Value = True
          PropertySourceToHighlight = 2
       Else
          molar_vol_form!Option1(3).Value = False
       End If

    End If

       For I = 0 To 2
           molar_vol_form!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       molar_vol_form!lblSource(PropertySourceToHighlight).BackColor = &H800000
       molar_vol_form!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.MolarVolumeOperatingT.PreviousIndex = PropertySourceToHighlight
    End If


' ***** END Displaying molar volume at operating temperature values
' ***** in molar volume at operating temperature form (molar_vol_form)

End Sub

Sub DisplayMolarVolumeOpTMainScreen(ValueToDisplayIndex As Integer)
    Dim ValueToDisplay As Double
    Dim DisplayedValueOnMainScreen As Integer
    Dim SourceOfValueToDisplay As Long
    Dim SIValue As Double, EnglishValue As Double

    If phprop.MolarVolume.operatingT.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.MolarVolume.operatingT.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckMolarVolumeOpT(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckMolarVolumeOpT(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckMolarVolumeOpT(3, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(6).Caption = "Not Available"
       HaveProperty(MOLAR_VOLUME_OPT) = False
    Else
       Select Case ValueToDisplayIndex

          Case MOLAR_VOLUME_OPT_DATABASE

             SIValue = phprop.MolarVolume.operatingT.database.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call MVOPTCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.MolarVolume.operatingT.database.source.short
             molar_vol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             molar_vol_form!lblCurrentValues(1).Caption = molar_vol_form!lblSource(0).Caption

          Case MOLAR_VOLUME_OPT_UNIFAC

             SIValue = phprop.MolarVolume.operatingT.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call MVOPTCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.MolarVolume.operatingT.UNIFAC.source.short
             molar_vol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             molar_vol_form!lblCurrentValues(1).Caption = molar_vol_form!lblSource(1).Caption

          Case MOLAR_VOLUME_OPT_INPUT

             SIValue = phprop.MolarVolume.operatingT.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call MVOPTCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.MolarVolume.operatingT.input.source.short
             molar_vol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             molar_vol_form!lblCurrentValues(1).Caption = molar_vol_form!lblSource(2).Caption
       End Select
       HaveProperty(MOLAR_VOLUME_OPT) = True
       phprop.MolarVolume.operatingT.CurrentSelection.choice = ValueToDisplayIndex
       phprop.MolarVolume.operatingT.CurrentSelection.Value = SIValue
       phprop.MolarVolume.operatingT.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(6).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayMolecularWeight()
    Dim ValueToDisplayIndex As Integer
    Dim PropertySourceToHighlight As Integer
    Dim I As Integer
    Dim SIValue As Double, EnglishValue As Double
    Dim ValueToDisplay As Double


' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    mwt_form!lblCurrentValues(0).Caption = ""
    mwt_form!lblCurrentValues(1).Caption = ""

    Call DisplayMolecularWeightMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying Molecular Weight Values in molecular weight
' ***** form (mwt_form)

'   *** Initialize all text and label boxes on mwt_form
'   *** to gray and empty and disabled
    For I = 0 To 1
        mwt_form!Option1(I + 1).BackColor = &HC0C0C0
        mwt_form!Option1(I + 1).Enabled = False
        mwt_form!Option1(I + 1).Value = False
        mwt_form!lblSourceLabel(I).BackColor = &HC0C0C0
        mwt_form!lblMolecularWeightValue(I).Caption = "Not Available"
'        mwt_form!lblMolecularWeightValue(I).Enabled = False
        mwt_form!lblMolecularWeightValue(I).BackColor = &HC0C0C0
    Next I

        mwt_form!Option1(3).BackColor = &HC0C0C0
        mwt_form!Option1(3).Enabled = False
        mwt_form!Option1(3).Value = False
        mwt_form!lblSourceLabel(2).BackColor = &HC0C0C0
        mwt_form!txtMolecularWeightValue(2).Text = ""
        mwt_form!txtMolecularWeightValue(2).Enabled = False
        mwt_form!txtMolecularWeightValue(2).BackColor = &HC0C0C0


    If PROPAVAILABLE(MOLECULAR_WEIGHT_DATABASE) Then

       SIValue = phprop.MolecularWeight.database.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call MWCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       mwt_form!lblMolecularWeightValue(0).Caption = Format$(ValueToDisplay, MOLECULAR_WEIGHT_FORMAT)

       '*** Set colors of available choices to white
       mwt_form!Option1(1).BackColor = &HFFFFFF
       mwt_form!Option1(1).Enabled = True
       mwt_form!lblSourceLabel(0).BackColor = &HFFFFFF
       mwt_form!lblMolecularWeightValue(0).Enabled = True
       mwt_form!lblMolecularWeightValue(0).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = MOLECULAR_WEIGHT_DATABASE Then
          mwt_form!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          mwt_form!Option1(1).Value = False
       End If
    End If

    If PROPAVAILABLE(MOLECULAR_WEIGHT_UNIFAC) Then

       SIValue = phprop.MolecularWeight.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call MWCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       mwt_form!lblMolecularWeightValue(1).Caption = Format$(ValueToDisplay, MOLECULAR_WEIGHT_FORMAT)

       '*** Set colors of available choices to white
       mwt_form!Option1(2).BackColor = &HFFFFFF
       mwt_form!Option1(2).Enabled = True
       mwt_form!lblSourceLabel(1).BackColor = &HFFFFFF
       mwt_form!lblMolecularWeightValue(1).Enabled = True
       mwt_form!lblMolecularWeightValue(1).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = MOLECULAR_WEIGHT_UNIFAC Then
          mwt_form!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          mwt_form!Option1(2).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    mwt_form!Option1(3).BackColor = &HFFFFFF
    mwt_form!Option1(3).Enabled = True
    mwt_form!lblSourceLabel(2).BackColor = &HFFFFFF
    mwt_form!txtMolecularWeightValue(2).Enabled = True
    mwt_form!txtMolecularWeightValue(2).BackColor = &HFFFFFF

    If PROPAVAILABLE(MOLECULAR_WEIGHT_INPUT) Then

       SIValue = phprop.MolecularWeight.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call MWCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       mwt_form!txtMolecularWeightValue(2).Text = Format$(ValueToDisplay, MOLECULAR_WEIGHT_FORMAT)

       If ValueToDisplayIndex = MOLECULAR_WEIGHT_INPUT Then
          mwt_form!Option1(3).Value = True
          PropertySourceToHighlight = 2
       Else
          mwt_form!Option1(3).Value = False
       End If

    End If

       For I = 0 To 2
           mwt_form!lblSourceLabel(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       mwt_form!lblSourceLabel(PropertySourceToHighlight).BackColor = &H800000
       mwt_form!lblSourceLabel(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.MolecularWeight.PreviousIndex = PropertySourceToHighlight
    End If

End Sub

Sub DisplayMolecularWeightMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim SIValue As Double, EnglishValue As Double

    If phprop.MolecularWeight.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.MolecularWeight.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckMolecularWeight(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckMolecularWeight(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckMolecularWeight(3, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(3).Caption = "Not Available"
       HaveProperty(MOLECULAR_WEIGHT) = False
    Else
       Select Case ValueToDisplayIndex

          Case MOLECULAR_WEIGHT_DATABASE

             SIValue = phprop.MolecularWeight.database.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call MWCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.MolecularWeight.database.source.short
             mwt_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, MOLECULAR_WEIGHT_FORMAT)
             mwt_form!lblCurrentValues(1).Caption = mwt_form!lblSourceLabel(0).Caption

          Case MOLECULAR_WEIGHT_UNIFAC

             SIValue = phprop.MolecularWeight.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call MWCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.MolecularWeight.UNIFAC.source.short
             mwt_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, MOLECULAR_WEIGHT_FORMAT)
             mwt_form!lblCurrentValues(1).Caption = mwt_form!lblSourceLabel(1).Caption

          Case MOLECULAR_WEIGHT_INPUT

             SIValue = phprop.MolecularWeight.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call MWCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If

             SourceOfValueToDisplay = phprop.MolecularWeight.input.source.short
             mwt_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, MOLECULAR_WEIGHT_FORMAT)
             mwt_form!lblCurrentValues(1).Caption = mwt_form!lblSourceLabel(2).Caption
       End Select
       HaveProperty(MOLECULAR_WEIGHT) = True
       phprop.MolecularWeight.CurrentSelection.choice = ValueToDisplayIndex
       phprop.MolecularWeight.CurrentSelection.Value = SIValue
       phprop.MolecularWeight.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(3).Caption = Format$(ValueToDisplay, MOLECULAR_WEIGHT_FORMAT)
    End If

End Sub

Sub DisplayOctWaterPartCoeff()
    Dim ValueToDisplayIndex As Integer
    Dim PropertySourceToHighlight As Integer
    Dim I As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim ValueToDisplay As Double

' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    octanol_form!lblCurrentValues(0).Caption = ""
    octanol_form!lblCurrentValues(1).Caption = ""

    Call DisplayOctWaterPartCoeffMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying Octanol Water Partition Coefficient values
' ***** in octanol water partition coefficient form (octanol_form)

'   *** Initialize all text and label boxes on octanol_form to gray and empty
    For I = 0 To 2
        octanol_form!Option1(I + 1).BackColor = &HC0C0C0
        octanol_form!Option1(I + 1).Enabled = False
        octanol_form!Option1(I + 1).Value = False
        octanol_form!lblSource(I).BackColor = &HC0C0C0
        octanol_form!lblOctWatPartCoeffValue(I).Caption = "Not Available"
'        octanol_form!lblOctWatPartCoeffValue(I).Enabled = False
        octanol_form!lblOctWatPartCoeffValue(I).BackColor = &HC0C0C0
        octanol_form!lblOWPCTemperature(I).Caption = ""
        octanol_form!lblOWPCTemperature(I).Enabled = False
        octanol_form!lblOWPCTemperature(I).BackColor = &HC0C0C0
    Next I

        octanol_form!Option1(4).BackColor = &HC0C0C0
        octanol_form!Option1(4).Enabled = False
        octanol_form!Option1(4).Value = False
        octanol_form!lblSource(3).BackColor = &HC0C0C0
        octanol_form!txtOctWatPartCoeffValue(3).Text = ""
        octanol_form!txtOctWatPartCoeffValue(3).Enabled = False
        octanol_form!txtOctWatPartCoeffValue(3).BackColor = &HC0C0C0
        octanol_form!txtOWPCTemperature(3).Text = ""
        octanol_form!txtOWPCTemperature(3).Enabled = False
        octanol_form!txtOWPCTemperature(3).BackColor = &HC0C0C0

    If PROPAVAILABLE(OCT_WATER_PART_COEFF_OPT_UNIFAC) Then

       SIValue = phprop.OctWaterPartCoeff.operatingT.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call KOWCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       octanol_form!lblOctWatPartCoeffValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       octanol_form!lblOWPCTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       octanol_form!Option1(1).BackColor = &HFFFFFF
       octanol_form!Option1(1).Enabled = True
       octanol_form!lblSource(0).BackColor = &HFFFFFF
       octanol_form!lblOctWatPartCoeffValue(0).Enabled = True
       octanol_form!lblOctWatPartCoeffValue(0).BackColor = &HFFFFFF
       octanol_form!lblOWPCTemperature(0).Enabled = True
       octanol_form!lblOWPCTemperature(0).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = OCT_WATER_PART_COEFF_OPT_UNIFAC Then
          octanol_form!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          octanol_form!Option1(1).Value = False
       End If
    End If

    If PROPAVAILABLE(OCT_WATER_PART_COEFF_DB) Then

       SIValue = phprop.OctWaterPartCoeff.database.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call KOWCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       octanol_form!lblOctWatPartCoeffValue(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.OctWaterPartCoeff.database.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       octanol_form!lblOWPCTemperature(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       octanol_form!Option1(2).BackColor = &HFFFFFF
       octanol_form!Option1(2).Enabled = True
       octanol_form!lblSource(1).BackColor = &HFFFFFF
       octanol_form!lblOctWatPartCoeffValue(1).Enabled = True
       octanol_form!lblOctWatPartCoeffValue(1).BackColor = &HFFFFFF
       octanol_form!lblOWPCTemperature(1).Enabled = True
       octanol_form!lblOWPCTemperature(1).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = OCT_WATER_PART_COEFF_DB Then
          octanol_form!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          octanol_form!Option1(2).Value = False
       End If
    End If

    If PROPAVAILABLE(OCT_WATER_PART_COEFF_DBT_UNIFAC) Then

       SIValue = phprop.OctWaterPartCoeff.databaseT.UNIFAC.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call KOWCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       octanol_form!lblOctWatPartCoeffValue(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       octanol_form!lblOWPCTemperature(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       '*** Set colors of available choices to white
       octanol_form!Option1(3).BackColor = &HFFFFFF
       octanol_form!Option1(3).Enabled = True
       octanol_form!lblSource(2).BackColor = &HFFFFFF
       octanol_form!lblOctWatPartCoeffValue(2).Enabled = True
       octanol_form!lblOctWatPartCoeffValue(2).BackColor = &HFFFFFF
       octanol_form!lblOWPCTemperature(2).Enabled = True
       octanol_form!lblOWPCTemperature(2).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = OCT_WATER_PART_COEFF_DBT_UNIFAC Then
          octanol_form!Option1(3).Value = True
          PropertySourceToHighlight = 2
       Else
          octanol_form!Option1(3).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    octanol_form!Option1(4).BackColor = &HFFFFFF
    octanol_form!Option1(4).Enabled = True
    octanol_form!lblSource(3).BackColor = &HFFFFFF
    octanol_form!txtOctWatPartCoeffValue(3).Enabled = True
    octanol_form!txtOctWatPartCoeffValue(3).BackColor = &HFFFFFF
    octanol_form!txtOWPCTemperature(3).Enabled = True
    octanol_form!txtOWPCTemperature(3).BackColor = &HFFFFFF

    If PROPAVAILABLE(OCT_WATER_PART_COEFF_INPUT) Then

       SIValue = phprop.OctWaterPartCoeff.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call KOWCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       octanol_form!txtOctWatPartCoeffValue(3).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.OctWaterPartCoeff.input.temperature) Then
          SIValue = phprop.OctWaterPartCoeff.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          octanol_form!txtOWPCTemperature(3).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          octanol_form!txtOWPCTemperature(3).Text = ""
       End If

       If ValueToDisplayIndex = OCT_WATER_PART_COEFF_INPUT Then
          octanol_form!Option1(4).Value = True
          PropertySourceToHighlight = 3
       Else
          octanol_form!Option1(4).Value = False
       End If

    End If

       For I = 0 To 3
           octanol_form!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       octanol_form!lblSource(PropertySourceToHighlight).BackColor = &H800000
       octanol_form!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.OctWaterPartCoeff.PreviousIndex = PropertySourceToHighlight
    End If

' ***** END Displaying Octanol Water Partition Coefficient values
' ***** in octanol water partition coefficient form (octanol_form)

End Sub

Sub DisplayOctWaterPartCoeffMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim SIValue As Double, EnglishValue As Double

    If phprop.OctWaterPartCoeff.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.OctWaterPartCoeff.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckOctWaterPartCoeff(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckOctWaterPartCoeff(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckOctWaterPartCoeff(3, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckOctWaterPartCoeff(4, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(10).Caption = "Not Available"
       HaveProperty(OCT_WATER_PART_COEFF) = False
    Else
       Select Case ValueToDisplayIndex

          Case OCT_WATER_PART_COEFF_OPT_UNIFAC

             SIValue = phprop.OctWaterPartCoeff.operatingT.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call KOWCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.OctWaterPartCoeff.operatingT.UNIFAC.source.short
             octanol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             octanol_form!lblCurrentValues(1).Caption = octanol_form!lblSource(0).Caption

          Case OCT_WATER_PART_COEFF_DB

             SIValue = phprop.OctWaterPartCoeff.database.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call KOWCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
           
             SourceOfValueToDisplay = phprop.OctWaterPartCoeff.database.source.short
             octanol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             octanol_form!lblCurrentValues(1).Caption = octanol_form!lblSource(1).Caption

          Case OCT_WATER_PART_COEFF_DBT_UNIFAC

             SIValue = phprop.OctWaterPartCoeff.databaseT.UNIFAC.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call KOWCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.OctWaterPartCoeff.databaseT.UNIFAC.source.short
             octanol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             octanol_form!lblCurrentValues(1).Caption = octanol_form!lblSource(2).Caption

          Case OCT_WATER_PART_COEFF_INPUT

             SIValue = phprop.OctWaterPartCoeff.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call KOWCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.OctWaterPartCoeff.input.source.short
             octanol_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             octanol_form!lblCurrentValues(1).Caption = octanol_form!lblSource(3).Caption
       End Select

       HaveProperty(OCT_WATER_PART_COEFF) = True
       phprop.OctWaterPartCoeff.CurrentSelection.choice = ValueToDisplayIndex
       phprop.OctWaterPartCoeff.CurrentSelection.Value = SIValue
       phprop.OctWaterPartCoeff.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(10).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayRefractiveIndex()
    Dim ValueToDisplayIndex As Integer
    Dim PropertySourceToHighlight As Integer
    Dim I As Integer
    Dim SIValue As Double, EnglishValue As Double
    Dim ValueToDisplay As Double


' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    rindex_form!lblCurrentValues(0).Caption = ""
    rindex_form!lblCurrentValues(1).Caption = ""

    Call DisplayRefractiveIndexMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying Refractive Index Values in
' ***** refractive index form (rindex_form)

'   *** Initialize all text and label boxes on rindex_form
'   *** to gray and empty and disabled
    For I = 0 To 0
        rindex_form!Option1(I + 1).BackColor = &HC0C0C0
        rindex_form!Option1(I + 1).Enabled = False
        rindex_form!Option1(I + 1).Value = False
        rindex_form!lblSource(I).BackColor = &HC0C0C0
        rindex_form!lblRefractiveIndexValue(I).Caption = "Not Available"
'        rindex_form!lblRefractiveIndexValue(I).Enabled = False
        rindex_form!lblRefractiveIndexValue(I).BackColor = &HC0C0C0
    Next I

        rindex_form!Option1(2).BackColor = &HC0C0C0
        rindex_form!Option1(2).Enabled = False
        rindex_form!Option1(2).Value = False
        rindex_form!lblSource(1).BackColor = &HC0C0C0
        rindex_form!txtRefractiveIndexValue(1).Text = ""
        rindex_form!txtRefractiveIndexValue(1).Enabled = False
        rindex_form!txtRefractiveIndexValue(1).BackColor = &HC0C0C0

    If PROPAVAILABLE(REFRACTIVE_INDEX_DATABASE) Then

       SIValue = phprop.RefractiveIndex.database.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call RICONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       rindex_form!lblRefractiveIndexValue(0).Caption = Format$(ValueToDisplay, REFRACTIVE_INDEX_FORMAT)

       '*** Set colors of available choices to white
       rindex_form!Option1(1).BackColor = &HFFFFFF
       rindex_form!Option1(1).Enabled = True
       rindex_form!lblSource(0).BackColor = &HFFFFFF
       rindex_form!lblRefractiveIndexValue(0).Enabled = True
       rindex_form!lblRefractiveIndexValue(0).BackColor = &HFFFFFF
             
       If ValueToDisplayIndex = REFRACTIVE_INDEX_DATABASE Then
          rindex_form!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          rindex_form!Option1(1).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    rindex_form!Option1(2).BackColor = &HFFFFFF
    rindex_form!Option1(2).Enabled = True
    rindex_form!lblSource(1).BackColor = &HFFFFFF
    rindex_form!txtRefractiveIndexValue(1).Enabled = True
    rindex_form!txtRefractiveIndexValue(1).BackColor = &HFFFFFF

    If PROPAVAILABLE(REFRACTIVE_INDEX_INPUT) Then

       SIValue = phprop.RefractiveIndex.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call RICONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       rindex_form!txtRefractiveIndexValue(1).Text = Format$(ValueToDisplay, REFRACTIVE_INDEX_FORMAT)

       If ValueToDisplayIndex = REFRACTIVE_INDEX_INPUT Then
          rindex_form!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          rindex_form!Option1(2).Value = False
       End If

    End If

       For I = 0 To 1
           rindex_form!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       rindex_form!lblSource(PropertySourceToHighlight).BackColor = &H800000
       rindex_form!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.RefractiveIndex.PreviousIndex = PropertySourceToHighlight
    End If

' ***** END Displaying Refractive Index Values in
' ***** refractive index form (rindex_form)


End Sub

Sub DisplayRefractiveIndexMainScreen(ValueToDisplayIndex As Integer)
    Dim ValueToDisplay As Double
    Dim DisplayedValueOnMainScreen As Integer
    Dim SourceOfValueToDisplay As Long
    Dim EnglishValue As Double, SIValue As Double

    If phprop.RefractiveIndex.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.RefractiveIndex.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckRefractiveIndex(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckRefractiveIndex(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(8).Caption = "Not Available"
       HaveProperty(REFRACTIVE_INDEX) = False
    Else
       Select Case ValueToDisplayIndex

          Case REFRACTIVE_INDEX_DATABASE

             SIValue = phprop.RefractiveIndex.database.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call RICONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.RefractiveIndex.database.source.short
             rindex_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, REFRACTIVE_INDEX_FORMAT)
             rindex_form!lblCurrentValues(1).Caption = rindex_form!lblSource(0).Caption

          Case REFRACTIVE_INDEX_INPUT

             SIValue = phprop.RefractiveIndex.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call RICONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.RefractiveIndex.input.source.short
             rindex_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, REFRACTIVE_INDEX_FORMAT)
             rindex_form!lblCurrentValues(1).Caption = rindex_form!lblSource(1).Caption
       End Select

       HaveProperty(REFRACTIVE_INDEX) = True
       phprop.RefractiveIndex.CurrentSelection.choice = ValueToDisplayIndex
       phprop.RefractiveIndex.CurrentSelection.Value = SIValue
       phprop.RefractiveIndex.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(8).Caption = Format$(ValueToDisplay, REFRACTIVE_INDEX_FORMAT)
    End If

End Sub

Sub DisplayVaporPressure()
    Dim ValueToDisplayIndex As Integer
    Dim SIValue As Double
    Dim EnglishValue As Double
    Dim ValueToDisplay As Double
    Dim I As Integer
    Dim PropertySourceToHighlight As Integer

' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    vp_form!lblCurrentValues(0).Caption = ""
    vp_form!lblCurrentValues(1).Caption = ""

    Call DisplayVaporPressureMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying Vapor Pressure Values in vapor pressure
' ***** form (vp_form)

'   *** Initialize all text and label boxes on vp_form to gray and empty
    For I = 0 To 2
        vp_form!Option1(I + 1).BackColor = &HC0C0C0
        vp_form!Option1(I + 1).Enabled = False
        vp_form!Option1(I + 1).Value = False
        vp_form!lblSourceLabel(I).BackColor = &HC0C0C0
        vp_form!lblVaporPressureValue(I).Caption = "Not Available"
'        vp_form!lblVaporPressureValue(I).Enabled = False
        vp_form!lblVaporPressureValue(I).BackColor = &HC0C0C0
        vp_form!lblVPTemperature(I).Caption = ""
        vp_form!lblVPTemperature(I).Enabled = False
        vp_form!lblVPTemperature(I).BackColor = &HC0C0C0
        vp_form!lblVPminimumT(I).Caption = ""
        vp_form!lblVPminimumT(I).Enabled = False
        vp_form!lblVPminimumT(I).BackColor = &HC0C0C0
        vp_form!lblVPmaximumT(I).Caption = ""
        vp_form!lblVPmaximumT(I).Enabled = False
        vp_form!lblVPmaximumT(I).BackColor = &HC0C0C0
    Next I

        vp_form!Option1(4).BackColor = &HC0C0C0
        vp_form!Option1(4).Enabled = False
        vp_form!Option1(4).Value = False
        vp_form!lblSourceLabel(3).BackColor = &HC0C0C0
        vp_form!txtVaporPressureValue(3).Text = ""
        vp_form!txtVaporPressureValue(3).Enabled = False
        vp_form!txtVaporPressureValue(3).BackColor = &HC0C0C0
        vp_form!txtVPTemperature(3).Text = ""
        vp_form!txtVPTemperature(3).Enabled = False
        vp_form!txtVPTemperature(3).BackColor = &HC0C0C0
        vp_form!txtVPminimumT(3).Text = ""
        vp_form!txtVPminimumT(3).Enabled = False
        vp_form!txtVPminimumT(3).BackColor = &HC0C0C0
        vp_form!txtVPmaximumT(3).Text = ""
        vp_form!txtVPmaximumT(3).Enabled = False
        vp_form!txtVPmaximumT(3).BackColor = &HC0C0C0

    If PROPAVAILABLE(VAPOR_PRESSURE_DATABASE) Then
       Select Case phprop.VaporPressure.database.source.short
          Case 4   'DIPPR801

             SIValue = phprop.VaporPressure.database.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call VPCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             vp_form!lblVaporPressureValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

             SIValue = phprop.VaporPressure.database.temperature
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call TEMPCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             vp_form!lblVPTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

             SIValue = phprop.VaporPressure.database.minimumT
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call TEMPCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             vp_form!lblVPminimumT(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

             SIValue = phprop.VaporPressure.database.maximumT
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call TEMPCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             vp_form!lblVPmaximumT(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

             '*** Set colors of available choices to white
             vp_form!Option1(1).BackColor = &HFFFFFF
             vp_form!Option1(1).Enabled = True
             vp_form!lblSourceLabel(0).BackColor = &HFFFFFF
             vp_form!lblVaporPressureValue(0).Enabled = True
             vp_form!lblVaporPressureValue(0).BackColor = &HFFFFFF
             vp_form!lblVPTemperature(0).Enabled = True
             vp_form!lblVPTemperature(0).BackColor = &HFFFFFF
             vp_form!lblVPminimumT(0).Enabled = True
             vp_form!lblVPminimumT(0).BackColor = &HFFFFFF
             vp_form!lblVPmaximumT(0).Enabled = True
             vp_form!lblVPmaximumT(0).BackColor = &HFFFFFF
             
             If ValueToDisplayIndex = VAPOR_PRESSURE_DATABASE Then
                vp_form!Option1(1).Value = True
                PropertySourceToHighlight = 0
             Else
                vp_form!Option1(1).Value = False
             End If

          Case 1   'Yaws (Antoine's)

             SIValue = phprop.VaporPressure.database.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call VPCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             vp_form!lblVaporPressureValue(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

             SIValue = phprop.VaporPressure.database.temperature
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call TEMPCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             vp_form!lblVPTemperature(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

             SIValue = phprop.VaporPressure.database.minimumT
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call TEMPCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             vp_form!lblVPminimumT(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

             SIValue = phprop.VaporPressure.database.maximumT
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call TEMPCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             vp_form!lblVPmaximumT(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

             '*** Set colors of available choices to white
             vp_form!Option1(2).BackColor = &HFFFFFF
             vp_form!Option1(2).Enabled = True
             vp_form!lblSourceLabel(1).BackColor = &HFFFFFF
             vp_form!lblVaporPressureValue(1).Enabled = True
             vp_form!lblVaporPressureValue(1).BackColor = &HFFFFFF
             vp_form!lblVPTemperature(1).Enabled = True
             vp_form!lblVPTemperature(1).BackColor = &HFFFFFF
             vp_form!lblVPminimumT(1).Enabled = True
             vp_form!lblVPminimumT(1).BackColor = &HFFFFFF
             vp_form!lblVPmaximumT(1).Enabled = True
             vp_form!lblVPmaximumT(1).BackColor = &HFFFFFF

             If ValueToDisplayIndex = VAPOR_PRESSURE_DATABASE Then
                vp_form!Option1(2).Value = True
                PropertySourceToHighlight = 1
             Else
                vp_form!Option1(2).Value = False
             End If

          Case 2   'Superfund

             SIValue = phprop.VaporPressure.database.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call VPCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             vp_form!lblVaporPressureValue(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

             SIValue = phprop.VaporPressure.database.temperature
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call TEMPCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             vp_form!lblVPTemperature(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

             vp_form!lblVPminimumT(2).Caption = "N/A"
             vp_form!lblVPmaximumT(2).Caption = "N/A"
             '*** Set colors of available choices to white
             vp_form!Option1(3).BackColor = &HFFFFFF
             vp_form!Option1(3).Enabled = True
             vp_form!lblSourceLabel(2).BackColor = &HFFFFFF
             vp_form!lblVaporPressureValue(2).Enabled = True
             vp_form!lblVaporPressureValue(2).BackColor = &HFFFFFF
             vp_form!lblVPTemperature(2).Enabled = True
             vp_form!lblVPTemperature(2).BackColor = &HFFFFFF
             vp_form!lblVPminimumT(2).Enabled = True
             vp_form!lblVPminimumT(2).BackColor = &HFFFFFF
             vp_form!lblVPmaximumT(2).Enabled = True
             vp_form!lblVPmaximumT(2).BackColor = &HFFFFFF

             If ValueToDisplayIndex = VAPOR_PRESSURE_DATABASE Then
                vp_form!Option1(3).Value = True
                PropertySourceToHighlight = 2
             Else
                vp_form!Option1(3).Value = False
             End If

       End Select
    End If

'  *** User input always possible so set backcolor to white
    vp_form!Option1(4).BackColor = &HFFFFFF
    vp_form!Option1(4).Enabled = True
    vp_form!lblSourceLabel(3).BackColor = &HFFFFFF
    vp_form!txtVaporPressureValue(3).Enabled = True
    vp_form!txtVaporPressureValue(3).BackColor = &HFFFFFF
    vp_form!txtVPTemperature(3).Enabled = True
    vp_form!txtVPTemperature(3).BackColor = &HFFFFFF
    vp_form!txtVPminimumT(3).Enabled = True
    vp_form!txtVPminimumT(3).BackColor = &HFFFFFF
    vp_form!txtVPmaximumT(3).Enabled = True
    vp_form!txtVPmaximumT(3).BackColor = &HFFFFFF

    If PROPAVAILABLE(VAPOR_PRESSURE_INPUT) Then

       SIValue = phprop.VaporPressure.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call VPCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       vp_form!txtVaporPressureValue(3).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.VaporPressure.input.temperature) Then
          SIValue = phprop.VaporPressure.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          vp_form!txtVPTemperature(3).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          vp_form!txtVPTemperature(3).Text = ""
       End If
       vp_form!txtVPminimumT(3).Text = "N/A"
       vp_form!txtVPmaximumT(3).Text = "N/A"

       If ValueToDisplayIndex = VAPOR_PRESSURE_INPUT Then
          vp_form!Option1(4).Value = True
          PropertySourceToHighlight = 3
       Else
          vp_form!Option1(4).Value = False
       End If

    End If

       For I = 0 To 3
           vp_form!lblSourceLabel(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       vp_form!lblSourceLabel(PropertySourceToHighlight).BackColor = &H800000
       vp_form!lblSourceLabel(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.VaporPressure.PreviousIndex = PropertySourceToHighlight
    End If

' ***** END Displaying Vapor Pressure Values in vapor pressure
' ***** form (vp_form)

End Sub

Sub DisplayVaporPressureMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim SourceOfValueToDisplay As Long
    Dim ValueToDisplay As Double
    Dim SIValue As Double
    Dim EnglishValue As Double

    If phprop.VaporPressure.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.VaporPressure.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckVaporPressure(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckVaporPressure(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblContaminantProperties(0).Caption = "Not Available"
       HaveProperty(VAPOR_PRESSURE) = False
    Else
       Select Case ValueToDisplayIndex
          Case VAPOR_PRESSURE_DATABASE

             SIValue = phprop.VaporPressure.database.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call VPCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If

             SourceOfValueToDisplay = phprop.VaporPressure.database.source.short
             Select Case phprop.VaporPressure.database.source.short
                Case 4   'DIPPR801
                   vp_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
                   vp_form!lblCurrentValues(1).Caption = vp_form!lblSourceLabel(0).Caption
                Case 1   'Yaws (Antoine's)
                   vp_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
                   vp_form!lblCurrentValues(1).Caption = vp_form!lblSourceLabel(1).Caption
                Case 2   'Superfund
                   vp_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
                   vp_form!lblCurrentValues(1).Caption = vp_form!lblSourceLabel(2).Caption
             End Select

          Case VAPOR_PRESSURE_INPUT

             SIValue = phprop.VaporPressure.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call VPCONV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.VaporPressure.input.source.short
             vp_form!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             vp_form!lblCurrentValues(1).Caption = vp_form!lblSourceLabel(3).Caption
       End Select

       HaveProperty(VAPOR_PRESSURE) = True
       phprop.VaporPressure.CurrentSelection.choice = ValueToDisplayIndex
       phprop.VaporPressure.CurrentSelection.Value = SIValue
       phprop.VaporPressure.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblContaminantProperties(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayWaterDensity()
    Dim ValueToDisplayIndex As Integer
    Dim I As Integer
    Dim PropertySourceToHighlight As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim ValueToDisplay As Double

' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    frmWaterDensity!lblCurrentValues(0).Caption = ""
    frmWaterDensity!lblCurrentValues(1).Caption = ""

    Call DisplayWaterDensityMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying water density values in water density
' ***** form (frmWaterDensity)

'   *** Initialize all text and label boxes on frmWaterDensity to gray and empty
    For I = 0 To 0
        frmWaterDensity!Option1(I + 1).BackColor = &HC0C0C0
        frmWaterDensity!Option1(I + 1).Enabled = False
        frmWaterDensity!Option1(I + 1).Value = False
        frmWaterDensity!lblSource(I).BackColor = &HC0C0C0
        frmWaterDensity!lblWaterDensityValue(I).Caption = "Not Available"
'        frmWaterDensity!lblWaterDensityValue(I).Enabled = False
        frmWaterDensity!lblWaterDensityValue(I).BackColor = &HC0C0C0
        frmWaterDensity!lblH2ODensityTemperature(I).Caption = ""
        frmWaterDensity!lblH2ODensityTemperature(I).Enabled = False
        frmWaterDensity!lblH2ODensityTemperature(I).BackColor = &HC0C0C0
        frmWaterDensity!lblH2ODensityminimumT(I).Caption = ""
        frmWaterDensity!lblH2ODensityminimumT(I).Enabled = False
        frmWaterDensity!lblH2ODensityminimumT(I).BackColor = &HC0C0C0
        frmWaterDensity!lblH2ODensitymaximumT(I).Caption = ""
        frmWaterDensity!lblH2ODensitymaximumT(I).Enabled = False
        frmWaterDensity!lblH2ODensitymaximumT(I).BackColor = &HC0C0C0
    Next I

        frmWaterDensity!Option1(2).BackColor = &HC0C0C0
        frmWaterDensity!Option1(2).Enabled = False
        frmWaterDensity!Option1(2).Value = False
        frmWaterDensity!lblSource(1).BackColor = &HC0C0C0
        frmWaterDensity!txtWaterDensityValue(1).Text = ""
        frmWaterDensity!txtWaterDensityValue(1).Enabled = False
        frmWaterDensity!txtWaterDensityValue(1).BackColor = &HC0C0C0
        frmWaterDensity!txtH2ODensityTemperature(1).Text = ""
        frmWaterDensity!txtH2ODensityTemperature(1).Enabled = False
        frmWaterDensity!txtH2ODensityTemperature(1).BackColor = &HC0C0C0
        frmWaterDensity!txtH2ODensityminimumT(1).Text = ""
        frmWaterDensity!txtH2ODensityminimumT(1).Enabled = False
        frmWaterDensity!txtH2ODensityminimumT(1).BackColor = &HC0C0C0
        frmWaterDensity!txtH2ODensitymaximumT(1).Text = ""
        frmWaterDensity!txtH2ODensitymaximumT(1).Enabled = False
        frmWaterDensity!txtH2ODensitymaximumT(1).BackColor = &HC0C0C0

    If PROPAVAILABLE(WATER_DENSITY_CORRELATION) Then

       SIValue = phprop.WaterDensity.correlation.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call WDENSCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmWaterDensity!lblWaterDensityValue(0).Caption = Format$(ValueToDisplay, WATER_DENSITY_FORMAT)

       SIValue = phprop.WaterDensity.correlation.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmWaterDensity!lblH2ODensityTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If CurrentUnits = SIUnits Then
          frmWaterDensity!lblH2ODensityminimumT(0).Caption = "0.0"
          frmWaterDensity!lblH2ODensitymaximumT(0).Caption = "100.0"
       Else
          frmWaterDensity!lblH2ODensityminimumT(0).Caption = "32.0"
          frmWaterDensity!lblH2ODensitymaximumT(0).Caption = "212.0"
       End If

       '*** Set colors of available choices to white
       frmWaterDensity!Option1(1).BackColor = &HFFFFFF
       frmWaterDensity!Option1(1).Enabled = True
       frmWaterDensity!lblSource(0).BackColor = &HFFFFFF
       frmWaterDensity!lblWaterDensityValue(0).Enabled = True
       frmWaterDensity!lblWaterDensityValue(0).BackColor = &HFFFFFF
       frmWaterDensity!lblH2ODensityTemperature(0).Enabled = True
       frmWaterDensity!lblH2ODensityTemperature(0).BackColor = &HFFFFFF
       frmWaterDensity!lblH2ODensityminimumT(0).Enabled = True
       frmWaterDensity!lblH2ODensityminimumT(0).BackColor = &HFFFFFF
       frmWaterDensity!lblH2ODensitymaximumT(0).Enabled = True
       frmWaterDensity!lblH2ODensitymaximumT(0).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = WATER_DENSITY_CORRELATION Then
          frmWaterDensity!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          frmWaterDensity!Option1(1).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    frmWaterDensity!Option1(2).BackColor = &HFFFFFF
    frmWaterDensity!Option1(2).Enabled = True
    frmWaterDensity!lblSource(1).BackColor = &HFFFFFF
    frmWaterDensity!txtWaterDensityValue(1).Enabled = True
    frmWaterDensity!txtWaterDensityValue(1).BackColor = &HFFFFFF
    frmWaterDensity!txtH2ODensityTemperature(1).Enabled = True
    frmWaterDensity!txtH2ODensityTemperature(1).BackColor = &HFFFFFF
    frmWaterDensity!txtH2ODensityminimumT(1).Enabled = True
    frmWaterDensity!txtH2ODensityminimumT(1).BackColor = &HFFFFFF
    frmWaterDensity!txtH2ODensitymaximumT(1).Enabled = True
    frmWaterDensity!txtH2ODensitymaximumT(1).BackColor = &HFFFFFF

    If PROPAVAILABLE(WATER_DENSITY_INPUT) Then

       SIValue = phprop.WaterDensity.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call WDENSCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmWaterDensity!txtWaterDensityValue(1).Text = Format$(ValueToDisplay, WATER_DENSITY_FORMAT)

       If HaveTemp(phprop.WaterDensity.input.temperature) Then
          SIValue = phprop.WaterDensity.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          frmWaterDensity!txtH2ODensityTemperature(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          frmWaterDensity!txtH2ODensityTemperature(1).Text = ""
       End If

       frmWaterDensity!txtH2ODensityminimumT(1).Text = ""
       frmWaterDensity!txtH2ODensitymaximumT(1).Text = ""

       If ValueToDisplayIndex = WATER_DENSITY_INPUT Then
          frmWaterDensity!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          frmWaterDensity!Option1(2).Value = False
       End If

    End If

       For I = 0 To 1
           frmWaterDensity!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       frmWaterDensity!lblSource(PropertySourceToHighlight).BackColor = &H800000
       frmWaterDensity!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.WaterDensity.PreviousIndex = PropertySourceToHighlight
    End If

' ***** END Displaying water density values in water density
' ***** form (frmWaterDensity)

End Sub

Sub DisplayWaterDensityMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim SIValue As Double, EnglishValue As Double

    If phprop.WaterDensity.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.WaterDensity.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckWaterDensity(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckWaterDensity(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblAirWaterProperties(0).Caption = "Not Available"
       HaveProperty(WATER_DENSITY) = False
    Else
       Select Case ValueToDisplayIndex

          Case WATER_DENSITY_CORRELATION

             SIValue = phprop.WaterDensity.correlation.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call WDENSCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.WaterDensity.correlation.source.short
             frmWaterDensity!lblCurrentValues(0).Caption = Format$(ValueToDisplay, WATER_DENSITY_FORMAT)
             frmWaterDensity!lblCurrentValues(1).Caption = frmWaterDensity!lblSource(0).Caption

          Case WATER_DENSITY_INPUT

             SIValue = phprop.WaterDensity.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call WDENSCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.WaterDensity.input.source.short
             frmWaterDensity!lblCurrentValues(0).Caption = Format$(ValueToDisplay, WATER_DENSITY_FORMAT)
             frmWaterDensity!lblCurrentValues(1).Caption = frmWaterDensity!lblSource(1).Caption
       End Select

       HaveProperty(WATER_DENSITY) = True
       phprop.WaterDensity.CurrentSelection.choice = ValueToDisplayIndex
       phprop.WaterDensity.CurrentSelection.Value = SIValue
       phprop.WaterDensity.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblAirWaterProperties(0).Caption = Format$(ValueToDisplay, WATER_DENSITY_FORMAT)
    End If

End Sub

Sub DisplayWaterSurfaceTension()
    Dim ValueToDisplayIndex As Integer
    Dim I As Integer
    Dim PropertySourceToHighlight As Integer
    Dim SIValue As Double, EnglishValue As Double
    Dim ValueToDisplay As Double


' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    frmWaterSurfaceTension!lblCurrentValues(0).Caption = ""
    frmWaterSurfaceTension!lblCurrentValues(1).Caption = ""

    Call DisplayWaterSurfaceTensionMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying water surface tension values in water surface tension
' ***** form (frmWaterSurfaceTension)

'   *** Initialize all text and label boxes on frmWaterViscosity to gray and empty
    For I = 0 To 0
        frmWaterSurfaceTension!Option1(I + 1).BackColor = &HC0C0C0
        frmWaterSurfaceTension!Option1(I + 1).Enabled = False
        frmWaterSurfaceTension!Option1(I + 1).Value = False
        frmWaterSurfaceTension!lblSource(I).BackColor = &HC0C0C0
        frmWaterSurfaceTension!lblWaterSurfaceTensionValue(I).Caption = "Not Available"
'        frmWaterSurfaceTension!lblWaterSurfaceTensionValue(I).Enabled = False
        frmWaterSurfaceTension!lblWaterSurfaceTensionValue(I).BackColor = &HC0C0C0
        frmWaterSurfaceTension!lblH2OSurfTensTemperature(I).Caption = ""
        frmWaterSurfaceTension!lblH2OSurfTensTemperature(I).Enabled = False
        frmWaterSurfaceTension!lblH2OSurfTensTemperature(I).BackColor = &HC0C0C0
        frmWaterSurfaceTension!lblH2OSurfTensminimumT(I).Caption = ""
        frmWaterSurfaceTension!lblH2OSurfTensminimumT(I).Enabled = False
        frmWaterSurfaceTension!lblH2OSurfTensminimumT(I).BackColor = &HC0C0C0
        frmWaterSurfaceTension!lblH2OSurfTensmaximumT(I).Caption = ""
        frmWaterSurfaceTension!lblH2OSurfTensmaximumT(I).Enabled = False
        frmWaterSurfaceTension!lblH2OSurfTensmaximumT(I).BackColor = &HC0C0C0
    Next I

        frmWaterSurfaceTension!Option1(2).BackColor = &HC0C0C0
        frmWaterSurfaceTension!Option1(2).Enabled = False
        frmWaterSurfaceTension!Option1(2).Value = False
        frmWaterSurfaceTension!lblSource(1).BackColor = &HC0C0C0
        frmWaterSurfaceTension!txtWaterSurfaceTensionValue(1).Text = ""
        frmWaterSurfaceTension!txtWaterSurfaceTensionValue(1).Enabled = False
        frmWaterSurfaceTension!txtWaterSurfaceTensionValue(1).BackColor = &HC0C0C0
        frmWaterSurfaceTension!txtH2OSurfTensTemperature(1).Text = ""
        frmWaterSurfaceTension!txtH2OSurfTensTemperature(1).Enabled = False
        frmWaterSurfaceTension!txtH2OSurfTensTemperature(1).BackColor = &HC0C0C0
        frmWaterSurfaceTension!txtH2OSurfTensminimumT(1).Text = ""
        frmWaterSurfaceTension!txtH2OSurfTensminimumT(1).Enabled = False
        frmWaterSurfaceTension!txtH2OSurfTensminimumT(1).BackColor = &HC0C0C0
        frmWaterSurfaceTension!txtH2OSurfTensmaximumT(1).Text = ""
        frmWaterSurfaceTension!txtH2OSurfTensmaximumT(1).Enabled = False
        frmWaterSurfaceTension!txtH2OSurfTensmaximumT(1).BackColor = &HC0C0C0

    If PROPAVAILABLE(WATER_SURF_TENSION_CORRELATION) Then

       SIValue = phprop.WaterSurfaceTension.correlation.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call H2OSTCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmWaterSurfaceTension!lblWaterSurfaceTensionValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.WaterSurfaceTension.correlation.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmWaterSurfaceTension!lblH2OSurfTensTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       frmWaterSurfaceTension!lblH2OSurfTensminimumT(0).Caption = "N/A"
       frmWaterSurfaceTension!lblH2OSurfTensmaximumT(0).Caption = "N/A"
       '*** Set colors of available choices to white
       frmWaterSurfaceTension!Option1(1).BackColor = &HFFFFFF
       frmWaterSurfaceTension!Option1(1).Enabled = True
       frmWaterSurfaceTension!lblSource(0).BackColor = &HFFFFFF
       frmWaterSurfaceTension!lblWaterSurfaceTensionValue(0).Enabled = True
       frmWaterSurfaceTension!lblWaterSurfaceTensionValue(0).BackColor = &HFFFFFF
       frmWaterSurfaceTension!lblH2OSurfTensTemperature(0).Enabled = True
       frmWaterSurfaceTension!lblH2OSurfTensTemperature(0).BackColor = &HFFFFFF
       frmWaterSurfaceTension!lblH2OSurfTensminimumT(0).Enabled = True
       frmWaterSurfaceTension!lblH2OSurfTensminimumT(0).BackColor = &HFFFFFF
       frmWaterSurfaceTension!lblH2OSurfTensmaximumT(0).Enabled = True
       frmWaterSurfaceTension!lblH2OSurfTensmaximumT(0).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = WATER_SURF_TENSION_CORRELATION Then
          frmWaterSurfaceTension!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          frmWaterSurfaceTension!Option1(1).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    frmWaterSurfaceTension!Option1(2).BackColor = &HFFFFFF
    frmWaterSurfaceTension!Option1(2).Enabled = True
    frmWaterSurfaceTension!lblSource(1).BackColor = &HFFFFFF
    frmWaterSurfaceTension!txtWaterSurfaceTensionValue(1).Enabled = True
    frmWaterSurfaceTension!txtWaterSurfaceTensionValue(1).BackColor = &HFFFFFF
    frmWaterSurfaceTension!txtH2OSurfTensTemperature(1).Enabled = True
    frmWaterSurfaceTension!txtH2OSurfTensTemperature(1).BackColor = &HFFFFFF
    frmWaterSurfaceTension!txtH2OSurfTensminimumT(1).Enabled = True
    frmWaterSurfaceTension!txtH2OSurfTensminimumT(1).BackColor = &HFFFFFF
    frmWaterSurfaceTension!txtH2OSurfTensmaximumT(1).Enabled = True
    frmWaterSurfaceTension!txtH2OSurfTensmaximumT(1).BackColor = &HFFFFFF

    If PROPAVAILABLE(WATER_SURF_TENSION_INPUT) Then

       SIValue = phprop.WaterSurfaceTension.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call H2OSTCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmWaterSurfaceTension!txtWaterSurfaceTensionValue(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.WaterSurfaceTension.input.temperature) Then
          SIValue = phprop.WaterSurfaceTension.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          frmWaterSurfaceTension!txtH2OSurfTensTemperature(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          frmWaterSurfaceTension!txtH2OSurfTensTemperature(1).Text = ""
       End If
       frmWaterSurfaceTension!txtH2OSurfTensminimumT(1).Text = ""
       frmWaterSurfaceTension!txtH2OSurfTensmaximumT(1).Text = ""

       If ValueToDisplayIndex = WATER_SURF_TENSION_INPUT Then
          frmWaterSurfaceTension!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          frmWaterSurfaceTension!Option1(2).Value = False
       End If

    End If

       For I = 0 To 1
           frmWaterSurfaceTension!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       frmWaterSurfaceTension!lblSource(PropertySourceToHighlight).BackColor = &H800000
       frmWaterSurfaceTension!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.WaterSurfaceTension.PreviousIndex = PropertySourceToHighlight
    End If

' ***** END Displaying water surface tension values in water surface tension
' ***** form (frmWaterSurfaceTension)

End Sub

Sub DisplayWaterSurfaceTensionMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim EnglishValue As Double, SIValue As Double

    If phprop.WaterSurfaceTension.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.WaterSurfaceTension.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckWaterSurfaceTension(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckWaterSurfaceTension(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblAirWaterProperties(2).Caption = "Not Available"
       HaveProperty(WATER_SURFACE_TENSION) = False
    Else
       Select Case ValueToDisplayIndex

          Case WATER_SURF_TENSION_CORRELATION

             SIValue = phprop.WaterSurfaceTension.correlation.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call H2OSTCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.WaterSurfaceTension.correlation.source.short
             frmWaterSurfaceTension!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             frmWaterSurfaceTension!lblCurrentValues(1).Caption = frmWaterSurfaceTension!lblSource(0).Caption

          Case WATER_SURF_TENSION_INPUT

             SIValue = phprop.WaterSurfaceTension.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call H2OSTCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
             
             SourceOfValueToDisplay = phprop.WaterSurfaceTension.input.source.short
             frmWaterSurfaceTension!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             frmWaterSurfaceTension!lblCurrentValues(1).Caption = frmWaterSurfaceTension!lblSource(1).Caption
       End Select

       HaveProperty(WATER_SURFACE_TENSION) = True
       phprop.WaterSurfaceTension.CurrentSelection.choice = ValueToDisplayIndex
       phprop.WaterSurfaceTension.CurrentSelection.Value = SIValue
       phprop.WaterSurfaceTension.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblAirWaterProperties(2).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Sub DisplayWaterViscosity()
    Dim ValueToDisplayIndex As Integer
    Dim I As Integer
    Dim PropertySourceToHighlight As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim ValueToDisplay As Double


' ***** BEGIN Calculations to determine which value is displayed on
' ***** main screen according to hierarchy

    frmWaterViscosity!lblCurrentValues(0).Caption = ""
    frmWaterViscosity!lblCurrentValues(1).Caption = ""

    Call DisplayWaterViscosityMainScreen(ValueToDisplayIndex)

' ***** END Calculations to determine which value is displayed on
' ***** main screen according to hierarchy


' ***** BEGIN Displaying water viscosity values in water viscosity
' ***** form (frmWaterViscosity)

'   *** Initialize all text and label boxes on frmWaterViscosity to gray and empty
    For I = 0 To 0
        frmWaterViscosity!Option1(I + 1).BackColor = &HC0C0C0
        frmWaterViscosity!Option1(I + 1).Enabled = False
        frmWaterViscosity!Option1(I + 1).Value = False
        frmWaterViscosity!lblSource(I).BackColor = &HC0C0C0
        frmWaterViscosity!lblWaterViscosityValue(I).Caption = "Not Available"
'        frmWaterViscosity!lblWaterViscosityValue(I).Enabled = False
        frmWaterViscosity!lblWaterViscosityValue(I).BackColor = &HC0C0C0
        frmWaterViscosity!lblH2OViscosityTemperature(I).Caption = ""
        frmWaterViscosity!lblH2OViscosityTemperature(I).Enabled = False
        frmWaterViscosity!lblH2OViscosityTemperature(I).BackColor = &HC0C0C0
        frmWaterViscosity!lblH2OViscosityminimumT(I).Caption = ""
        frmWaterViscosity!lblH2OViscosityminimumT(I).Enabled = False
        frmWaterViscosity!lblH2OViscosityminimumT(I).BackColor = &HC0C0C0
        frmWaterViscosity!lblH2OViscositymaximumT(I).Caption = ""
        frmWaterViscosity!lblH2OViscositymaximumT(I).Enabled = False
        frmWaterViscosity!lblH2OViscositymaximumT(I).BackColor = &HC0C0C0
    Next I

        frmWaterViscosity!Option1(2).BackColor = &HC0C0C0
        frmWaterViscosity!Option1(2).Enabled = False
        frmWaterViscosity!Option1(2).Value = False
        frmWaterViscosity!lblSource(1).BackColor = &HC0C0C0
        frmWaterViscosity!txtWaterViscosityValue(1).Text = ""
        frmWaterViscosity!txtWaterViscosityValue(1).Enabled = False
        frmWaterViscosity!txtWaterViscosityValue(1).BackColor = &HC0C0C0
        frmWaterViscosity!txtH2OViscosityTemperature(1).Text = ""
        frmWaterViscosity!txtH2OViscosityTemperature(1).Enabled = False
        frmWaterViscosity!txtH2OViscosityTemperature(1).BackColor = &HC0C0C0
        frmWaterViscosity!txtH2OViscosityminimumT(1).Text = ""
        frmWaterViscosity!txtH2OViscosityminimumT(1).Enabled = False
        frmWaterViscosity!txtH2OViscosityminimumT(1).BackColor = &HC0C0C0
        frmWaterViscosity!txtH2OViscositymaximumT(1).Text = ""
        frmWaterViscosity!txtH2OViscositymaximumT(1).Enabled = False
        frmWaterViscosity!txtH2OViscositymaximumT(1).BackColor = &HC0C0C0

    If PROPAVAILABLE(WATER_VISCOSITY_CORRELATION) Then

       SIValue = phprop.WaterViscosity.correlation.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call WVISCCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmWaterViscosity!lblWaterViscosityValue(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.WaterViscosity.correlation.temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmWaterViscosity!lblH2OViscosityTemperature(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If CurrentUnits = SIUnits Then
          frmWaterViscosity!lblH2OViscosityminimumT(0).Caption = "0.0"
          frmWaterViscosity!lblH2OViscositymaximumT(0).Caption = "370.0"
       Else
          frmWaterViscosity!lblH2OViscosityminimumT(0).Caption = "32.0"
          frmWaterViscosity!lblH2OViscositymaximumT(0).Caption = "698.0"
       End If
       '*** Set colors of available choices to white
       frmWaterViscosity!Option1(1).BackColor = &HFFFFFF
       frmWaterViscosity!Option1(1).Enabled = True
       frmWaterViscosity!lblSource(0).BackColor = &HFFFFFF
       frmWaterViscosity!lblWaterViscosityValue(0).Enabled = True
       frmWaterViscosity!lblWaterViscosityValue(0).BackColor = &HFFFFFF
       frmWaterViscosity!lblH2OViscosityTemperature(0).Enabled = True
       frmWaterViscosity!lblH2OViscosityTemperature(0).BackColor = &HFFFFFF
       frmWaterViscosity!lblH2OViscosityminimumT(0).Enabled = True
       frmWaterViscosity!lblH2OViscosityminimumT(0).BackColor = &HFFFFFF
       frmWaterViscosity!lblH2OViscositymaximumT(0).Enabled = True
       frmWaterViscosity!lblH2OViscositymaximumT(0).BackColor = &HFFFFFF
       
       If ValueToDisplayIndex = WATER_VISCOSITY_CORRELATION Then
          frmWaterViscosity!Option1(1).Value = True
          PropertySourceToHighlight = 0
       Else
          frmWaterViscosity!Option1(1).Value = False
       End If
    End If

'  *** User input always possible so set backcolor to white
    frmWaterViscosity!Option1(2).BackColor = &HFFFFFF
    frmWaterViscosity!Option1(2).Enabled = True
    frmWaterViscosity!lblSource(1).BackColor = &HFFFFFF
    frmWaterViscosity!txtWaterViscosityValue(1).Enabled = True
    frmWaterViscosity!txtWaterViscosityValue(1).BackColor = &HFFFFFF
    frmWaterViscosity!txtH2OViscosityTemperature(1).Enabled = True
    frmWaterViscosity!txtH2OViscosityTemperature(1).BackColor = &HFFFFFF
    frmWaterViscosity!txtH2OViscosityminimumT(1).Enabled = True
    frmWaterViscosity!txtH2OViscosityminimumT(1).BackColor = &HFFFFFF
    frmWaterViscosity!txtH2OViscositymaximumT(1).Enabled = True
    frmWaterViscosity!txtH2OViscositymaximumT(1).BackColor = &HFFFFFF

    If PROPAVAILABLE(WATER_VISCOSITY_INPUT) Then

       SIValue = phprop.WaterViscosity.input.Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call WVISCCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       frmWaterViscosity!txtWaterViscosityValue(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       If HaveTemp(phprop.WaterViscosity.input.temperature) Then
          SIValue = phprop.WaterViscosity.input.temperature
          If CurrentUnits = SIUnits Then
             ValueToDisplay = SIValue
          ElseIf CurrentUnits = EnglishUnits Then
             Call TEMPCNV(EnglishValue, SIValue)
             ValueToDisplay = EnglishValue
          End If
          frmWaterViscosity!txtH2OViscosityTemperature(1).Text = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
       Else
          frmWaterViscosity!txtH2OViscosityTemperature(1).Text = ""
       End If
       frmWaterViscosity!txtH2OViscosityminimumT(1).Text = ""
       frmWaterViscosity!txtH2OViscositymaximumT(1).Text = ""

       If ValueToDisplayIndex = WATER_VISCOSITY_INPUT Then
          frmWaterViscosity!Option1(2).Value = True
          PropertySourceToHighlight = 1
       Else
          frmWaterViscosity!Option1(2).Value = False
       End If

    End If

       For I = 0 To 1
           frmWaterViscosity!lblSource(I).ForeColor = &H80000008
       Next I

    '*** Highlight selected property source
    If ValueToDisplayIndex <> 0 Then
       frmWaterViscosity!lblSource(PropertySourceToHighlight).BackColor = &H800000
       frmWaterViscosity!lblSource(PropertySourceToHighlight).ForeColor = &H80000005
       hilight.WaterViscosity.PreviousIndex = PropertySourceToHighlight
    End If


' ***** END Displaying water viscosity values in water viscosity
' ***** form (frmWaterViscosity)

End Sub

Sub DisplayWaterViscosityMainScreen(ValueToDisplayIndex As Integer)
    Dim DisplayedValueOnMainScreen As Integer
    Dim ValueToDisplay As Double
    Dim SourceOfValueToDisplay As Long
    Dim SIValue As Double, EnglishValue As Double

    If phprop.WaterViscosity.CurrentSelection.choice = 0 Then
       DisplayedValueOnMainScreen = False
       ValueToDisplayIndex = 0
    Else
       DisplayedValueOnMainScreen = True
       ValueToDisplayIndex = phprop.WaterViscosity.CurrentSelection.choice
    End If
    
    If Not DisplayedValueOnMainScreen Then
       Call CheckWaterViscosity(1, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       Call CheckWaterViscosity(2, ValueToDisplayIndex, DisplayedValueOnMainScreen)
    End If

    If Not DisplayedValueOnMainScreen Then
       contam_prop_form!lblAirWaterProperties(1).Caption = "Not Available"
       HaveProperty(WATER_VISCOSITY) = False
    Else
       Select Case ValueToDisplayIndex
          Case WATER_VISCOSITY_CORRELATION

             SIValue = phprop.WaterViscosity.correlation.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call WVISCCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
           
             SourceOfValueToDisplay = phprop.WaterViscosity.correlation.source.short
             frmWaterViscosity!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             frmWaterViscosity!lblCurrentValues(1).Caption = frmWaterViscosity!lblSource(0).Caption

          Case WATER_VISCOSITY_INPUT

             SIValue = phprop.WaterViscosity.input.Value
             If CurrentUnits = SIUnits Then
                ValueToDisplay = SIValue
             ElseIf CurrentUnits = EnglishUnits Then
                Call WVISCCNV(EnglishValue, SIValue)
                ValueToDisplay = EnglishValue
             End If
            
             SourceOfValueToDisplay = phprop.WaterViscosity.input.source.short
             frmWaterViscosity!lblCurrentValues(0).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
             frmWaterViscosity!lblCurrentValues(1).Caption = frmWaterViscosity!lblSource(1).Caption
       End Select

       HaveProperty(WATER_VISCOSITY) = True
       phprop.WaterViscosity.CurrentSelection.choice = ValueToDisplayIndex
       phprop.WaterViscosity.CurrentSelection.Value = SIValue
       phprop.WaterViscosity.CurrentSelection.source = SourceOfValueToDisplay

       contam_prop_form!lblAirWaterProperties(1).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))
    End If

End Sub

Function GetBIP_DB_String(BinaryInteractionParameterDatabase As Long) As String

   Select Case BinaryInteractionParameterDatabase
      Case 1    'Original UNIFAC VLE
           GetBIP_DB_String = "Original UNIFAC VLE"
      Case 2    'UNIFAC LLE
           GetBIP_DB_String = "UNIFAC LLE"
      Case 3    'Environmental VLE
           GetBIP_DB_String = "Environmental VLE"
      Case 0    'UNIFAC calculation not possible
           GetBIP_DB_String = "UNIFAC calculation not possible"
   End Select

End Function

Function GetTheFormat(Value As Double) As String
   Dim AbsValue As Double

   AbsValue = Abs(Value)

   If AbsValue < 0.001 Then
      GetTheFormat = "0.00E+00"
   ElseIf AbsValue < 0.01 Then
      GetTheFormat = "0.00E+00"
   ElseIf AbsValue < 0.1 Then
      GetTheFormat = "0.0000"
   ElseIf AbsValue < 1 Then
      GetTheFormat = "0.000"
   ElseIf AbsValue < 10 Then
      GetTheFormat = "0.00"
   ElseIf AbsValue < 100 Then
      GetTheFormat = "0.0"
   ElseIf AbsValue < 1000 Then
      GetTheFormat = "0"
   Else
      GetTheFormat = "0.00E+00"
   End If

End Function

Attribute VB_Name = "DLL_Decl_Mod"
Option Explicit

'
' This module contains the DLL declarations needed to make
' calls to FORTRAN routines within the program
'


'
' DLL DECLARATIONS FOR MAIN STEPP FORTRAN CODE (DLLS\STEPP.DLL).
' THESE ROUTINES PERFORM PROPERTY CALCULATIONS.
' NOTE: (*) INDICATES THIS ROUTINE IS PRESENT IN THE DLL BUT IS NOT CALLED BY THE StEPP VISUAL BASIC CODE.
'
' .......... NON-ALIASED DLL ROUTINES:
'Alias "GETSAF"
Declare Sub ACCALL Lib "dlls\stepp.dll" (ActivityCoefficient As Double, ACShortSource As Long, ACLongSource As Long, ACError As Long, ACTEMP As Double, OperatingTemp As Double, FGRPError As Long, MaxUnifacGroups As Long, MS As Long, BinaryInteractionParameterDatabase As Long)
Declare Sub AIRDENS Lib "dlls\stepp.dll" (AirDensity As Double, OperatingTemp As Double, OperatingPressure As Double, AirDensityError As Long, AirDensityShortSource As Long, AirDensityLongSource As Long, AirDensityTemperature As Double)
Declare Sub AIRVISC Lib "dlls\stepp.dll" (AirViscosity As Double, OperatingTemp As Double, AirViscosityError As Long, AirViscosityShortSource As Long, AirViscosityLongSource As Long, AirViscosityTemperature As Double)
Declare Sub AQSCALL Lib "dlls\stepp.dll" (AqueousSolubilty As Double, AqueousSolubiltyShortSource As Long, AqueousSolubiltyLongSource As Long, AqueousSolubiltyError As Long, AqueousSolubiltyTemp As Double, CalculationTemperature As Double, MaximumUnifacGroups As Long, MS As Long, XMW As Double, BinaryInteractionParameterDatabase As Long)
Declare Sub AQSFIT Lib "dlls\stepp.dll" (AqueousSolubilityFit As Double, AqSolFitShortSource As Long, AqSolFitLongSource As Long, AqSolFitError As Long, AqSolFitTemp As Double, AqSolUnifacDBT As Double, AQSolUnifacDBTTmp As Double, AqSolUnifacOpT As Double, AqSolDatabase As Double, AqSolDatabaseTemp As Double, OperatingTemp As Double)
Declare Sub DIFGWL Lib "dlls\stepp.dll" (DIFGWilkeLee As Double, MolecularWeight As Double, MolarVolumeNBP As Double, BoilingPointTemp As Double, OperatingTemp As Double, OperatingPressure As Double, DIFGWilkeLeeError As Long, DIFGWilkeLeeShortSource As Long, DIFGWilkeLeeLongSource As Long, DIFGWilkeLeeTemp As Double)
Declare Sub DIFLHL Lib "dlls\stepp.dll" (DIFLHaydukLaudie As Double, MolarVolumeNBP As Double, OperatingTemp As Double, MolecularWeight As Double, DIFLHaydukLaudieError As Long, DIFLHaydukLaudieSourceShort As Long, DIFLHaydukLaudieSourceLong As Long, DIFLHaydukLaudieTemp As Double)
Declare Sub DIFLPOL Lib "dlls\stepp.dll" (DIFLPolson As Double, MolecularWeight As Double, DIFLPolsonError As Long, DIFLPolsonShortSource As Long, DIFLPolsonLongSource As Long, DIFLPolsonTemp As Double, OperatingTemp As Double)
Declare Sub DIFLWC Lib "dlls\stepp.dll" (DIFLWilkeChang As Double, MolarVolumeNBP As Double, OperatingTemperature As Double, DIFLWilkeChangError As Long, DIFLWilkeChangShortSource As Long, DIFLWilkeChangLongSource As Long, DIFLWilkeChangTemp As Double)
Declare Sub H2OST Lib "dlls\stepp.dll" (WaterSurfaceTension As Double, OperatingTemp As Double, WaterSurfaceTensionError As Long, WaterSurfaceTensionShortSource As Long, WaterSurfaceTensionLongSource As Long, WaterSurfaceTensionTemp As Double)
Declare Sub HC1CALL Lib "dlls\stepp.dll" (HenryCUNIFAC As Double, HCUnifacShortSource As Long, HCUnifacLongSource As Long, HCUnifacError As Long, HCUnifacTemp As Double, OperatingTemp As Double, ActivityCoefficient As Double, VaporPressure As Double)
Declare Sub HC2CALL Lib "dlls\stepp.dll" (HenryCRegress As Double, HCRegressShortSource As Long, HCRegressLongSource As Long, HCRegressError As Long, HCRegressTemp As Double, HCDatabase As Double, HCDatabaseTemp As Double, OperatingTemp As Double, NumberOfDatabaseHCs As Long)
Declare Sub HCDBCONV Lib "dlls\stepp.dll" (HenrysConstantDatabase As Double, HenrysConstantDatabaseTemp As Double, NumberOfDatabaseHenrysConstants As Long, HCShortSource As Long)
Declare Sub HENFIT Lib "dlls\stepp.dll" (HenrysConstantFit As Double, HCFitShortSource As Long, HCFitLongSource As Long, HCFitError As Long, HCFitTemperature As Double, HCDatabase As Double, HCDatabaseTemp As Double, HCUnifacOpT As Double, HCUnifacDBTs As Double, HCUnifacDBTsErrors As Long, OperatingTemp As Double, NumberDBHenryCs As Long)
Declare Sub KOWCALL Lib "dlls\stepp.dll" (Kow As Double, KowShortSource As Long, KowLongSource As Long, KowError As Long, KowTemp As Double, CalculationTemperature As Double, FGRPErrorFlag As Long, MaximumUnifacGroups As Long, MS As Long, BinaryInteractionParameterDatabase As Long)
Declare Sub LDDBCALL Lib "dlls\stepp.dll" (LiquidDensityDB As Double, LiquidDensityDBShortSource As Long, LiquidDensityDBLongSource As Long, LiquidDensityDBError As Long, LiquidDensityDBEqn As Long, LiquidDensityDBTemp As Double, LiquidDensityDBMinimumT As Double, LiquidDensityDBMaximumT As Double, LiquidDensityDBCoeffA As Double, LiquidDensityDBCoeffB As Double, LiquidDensityDBCoeffC As Double, LiquidDensityDBCoeffD As Double, MolecularWeight As Double, OperatingTemperature As Double)
Declare Sub LDGCCALL Lib "dlls\stepp.dll" (LiquidDensityGC As Double, LiquidDensityGCShortSource As Long, LiquidDensityGCLongSource As Long, LiquidDensityGCError As Long, LiquidDensityGCTemp As Double, MolecularWeight As Double, MolarVolumeNBP As Double, OperatingTemperature As Double)
Declare Sub MWTCALL Lib "dlls\stepp.dll" (MWtUnifac As Double, MWtUnifacShortSource As Long, MWtUnifacLongSource As Long, MWtUnifacError As Long, MaximumUnifacGroups As Long, MS As Long, XMW As Double)
Declare Sub VBBPCALL Lib "dlls\stepp.dll" (MolarVolumeNBP As Double, MolarVolumeNBPShortSource As Long, MolarVolumeNBPLongSource As Long, MolarVolumeNBPError As Long, MolarVolumeNBPTemp As Double, BoilingPointTemp As Double, MaximumUnifacGroups As Long, MS As Long, NumberOfRings As Long)
Declare Sub VBMATT Lib "dlls\stepp.dll" (MolarVolumeOpT As Double, LiquidDensity As Double, MolecularWeight As Double)
Declare Sub VPRCALL Lib "dlls\stepp.dll" (VaporPressure As Double, VPShortSource As Long, VPLongSource As Long, VPError As Long, VPEquation As Long, VPTempDB As Double, VPMinimumT As Double, VPMaximumT As Double, VPCoeffA As Double, VPCoeffB As Double, VPCoeffC As Double, VPCoeffD As Double, VPCoeffE As Double, VPSuperfund As Double, VPSuperfundTemp As Double, OperatingTemp As Double)
' .......... ALIASED DLL ROUTINES:
'AQSOL -- (*)
'BINPAR -- (*)
'DBDENS -- (*)
'ERROR -- (*)
'FGRP -- (*)
'FGRPCALL -- (*)
'GETGAM -- (*)
Declare Sub H2ODENS Lib "dlls\stepp.dll" Alias "_H2ODENS@24" (WaterDensity As Double, OperatingTemperature As Double, WaterDensityError As Long, WaterDensityShortSource As Long, WaterDensityLongSource As Long, WaterDensityTemp As Double)
Declare Sub H2OVISC Lib "dlls\stepp.dll" Alias "_H2OVISC@24" (WaterViscosity As Double, OperatingTemp As Double, WaterViscosityError As Long, WaterViscosityShortSource As Long, WaterViscosityLongSource As Long, WaterViscosityTemp As Double)
'HENRY -- (*)
'INITVS -- (*)
'MOLWT -- (*)
'NEWTON -- (*)
'ORGDENS -- (*)
'PARMS -- (*)
'PARTC -- (*)
'REGRESS -- (*)
'UNIMOD -- (*)
'VAPORP -- (*)
'VBMSCH -- (*)



'
' DLL DECLARATIONS FOR UNIT CONVERSION FORTRAN CODE (DLLS\STEPPCONV.DLL).
' THESE ROUTINES PERFORM CONVERSIONS FROM SI-TO-ENGLISH AND FROM ENGLISH-TO-SI.
' NOTE: (*) INDICATES THIS ROUTINE IS PRESENT IN THE DLL BUT IS NOT CALLED BY THE StEPP VISUAL BASIC CODE.
'
' ROUTINES NAMED *CONV OR *CNV ARE SI-TO-ENGLISH CONVERTORS.
' ROUTINES NAMED *SI ARE ENGLISH-TO-SI CONVERTORS.
'
' .......... NON-ALIASED DLL ROUTINES:
Declare Sub ACCONV Lib "dlls\stepconv.dll" (ActivityCoefficientEnglishUnits As Double, ActivityCoefficientSIUnits As Double)
Declare Sub ACENSI Lib "dlls\stepconv.dll" (ActivityCoefficientSIUnits As Double, ActivityCoefficientEnglishUnits As Double)
Declare Sub ADENENSI Lib "dlls\stepconv.dll" (AirDensitySIUnits As Double, AirDensityEnglishUnits As Double)
Declare Sub ADENSCNV Lib "dlls\stepconv.dll" (AirDensityEnglishUnits As Double, AirDensitySIUnits As Double)
Declare Sub AQSCONV Lib "dlls\stepconv.dll" (AqueousSolubilityEnglishUnits As Double, AqueousSolubilitySIUnits As Double)
Declare Sub AQSENSI Lib "dlls\stepconv.dll" (AqueousSolubilitySIUnits As Double, AqueousSolubilityEnglishUnits As Double)
Declare Sub AVISCCNV Lib "dlls\stepconv.dll" (AirViscosityEnglishUnits As Double, AirViscositySIUnits As Double)
Declare Sub AVISENSI Lib "dlls\stepconv.dll" (AirViscositySIUnits As Double, AirViscosityEnglishUnits As Double)
Declare Sub GDIFENSI Lib "dlls\stepconv.dll" (GasDiffusivitySIUnits As Double, GasDiffusivityEnglishUnits As Double)
Declare Sub GDIFFCNV Lib "dlls\stepconv.dll" (GasDiffusivityEnglishUnits As Double, GasDiffusivitySIUnits As Double)
Declare Sub H2OSTCNV Lib "dlls\stepconv.dll" (WaterSurfTensionEnglishUnits As Double, WaterSurfTensionSIUnits As Double)
Declare Sub HCCONV Lib "dlls\stepconv.dll" (HenrysConstantEnglishUnits As Double, HenrysConstantSIUnits As Double)
Declare Sub HCENSI Lib "dlls\stepconv.dll" (HenrysConstantSIUnits As Double, HenrysConstantEnglishUnits As Double)
Declare Sub KOWCONV Lib "dlls\stepconv.dll" (OctWaterPartCoeffEnglishUnits As Double, OctWaterPartCoeffSIUnits As Double)
Declare Sub KOWENSI Lib "dlls\stepconv.dll" (OctWaterPartCoeffSIUnits As Double, OctWaterPartCoeffEnglishUnits As Double)
Declare Sub LDENENSI Lib "dlls\stepconv.dll" (LiquidDensitySIUnits As Double, LiquidDensityEnglishUnits As Double)
Declare Sub LDENSCNV Lib "dlls\stepconv.dll" (LiquidDensityEnglishUnits As Double, LiquidDensitySIUnits As Double)
Declare Sub LDIFENSI Lib "dlls\stepconv.dll" (LiquidDiffusivitySIUnits As Double, LiquidDiffusivityEnglishUnits As Double)
Declare Sub LDIFFCNV Lib "dlls\stepconv.dll" (LiquidDiffusivityEnglishUnits As Double, LiquidDiffusivitySIUnits As Double)
Declare Sub MVBPENSI Lib "dlls\stepconv.dll" (MolarVolumeNBPSIUnits As Double, MolarVolumeNBPEnglishUnits As Double)
Declare Sub MVNBPCNV Lib "dlls\stepconv.dll" (MolarVolumeNBPEnglishUnits As Double, MolarVolumeNBPSIUnits As Double)
Declare Sub MVOPTCNV Lib "dlls\stepconv.dll" (MolarVolumeOpTEnglishUnits As Double, MolarVolumeOpTSIUnits As Double)
Declare Sub MVOTENSI Lib "dlls\stepconv.dll" (MolarVolumeOpTSIUnits As Double, MolarVolumeOpTEnglishUnits As Double)
Declare Sub MWCONV Lib "dlls\stepconv.dll" (MolecularWeightEnglishUnits As Double, MolecularWeightSIUnits As Double)
Declare Sub MWENSI Lib "dlls\stepconv.dll" (MolecularWeightSIUnits As Double, MolecularWeightEnglishUnits As Double)
Declare Sub NBPCONV Lib "dlls\stepconv.dll" (BoilingPointEnglishUnits As Double, BoilingPointSIUnits As Double)
Declare Sub NBPENSI Lib "dlls\stepconv.dll" (BoilingPointSIUnits As Double, BoilingPointEnglishUnits As Double)
Declare Sub PRESENSI Lib "dlls\stepconv.dll" (PressureSIUnits As Double, PressureEnglishUnits As Double)
Declare Sub PRESSCNV Lib "dlls\stepconv.dll" (PressureEnglishUnits As Double, PressureSIUnits As Double)
Declare Sub RICONV Lib "dlls\stepconv.dll" (RefractiveIndexEnglishUnits As Double, RefractiveIndexSIUnits As Double)
Declare Sub RIENSI Lib "dlls\stepconv.dll" (RefractiveIndexSIUnits As Double, RefractiveIndexEnglishUnits As Double)
Declare Sub TEMPCNV Lib "dlls\stepconv.dll" (TemperatureEnglishUnits As Double, TemperatureSIUnits As Double)
Declare Sub TEMPENSI Lib "dlls\stepconv.dll" (TemperatureSIUnits As Double, TemperatureEnglishUnits As Double)
Declare Sub VPCONV Lib "dlls\stepconv.dll" (VaporPressureEnglishUnits As Double, VaporPressureSIUnits As Double)
Declare Sub VPENSI Lib "dlls\stepconv.dll" (VaporPressureSIUnits As Double, VaporPressureEnglishUnits As Double)
Declare Sub WDENENSI Lib "dlls\stepconv.dll" (WaterDensitySIUnits As Double, WaterDensityEnglishUnits As Double)
Declare Sub WDENSCNV Lib "dlls\stepconv.dll" (WaterDensityEnglishUnits As Double, WaterDensitySIUnits As Double)
Declare Sub WSTENSI Lib "dlls\stepconv.dll" (WaterSurfTensionSIUnits As Double, WaterSurfTensionEnglishUnits As Double)
Declare Sub WVISCCNV Lib "dlls\stepconv.dll" (WaterViscosityEnglishUnits As Double, WaterViscositySIUnits As Double)
Declare Sub WVISENSI Lib "dlls\stepconv.dll" (WaterViscositySIUnits As Double, WaterViscosityEnglishUnits As Double)
' .......... ALIASED DLL ROUTINES:
' (NO ALIASED DLL ROUTINES PRESENT.)






'
'
' OLD DLL DECLARATION LIST. =======================
'
'
'
''DLL Declarations from StEPP.dll
''   DLL Declarations needed to calculate the properties
'
'Declare Sub VPRCALL Lib "dlls\stepp.dll" (VaporPressure As Double, VPShortSource As Long, VPLongSource As Long, VPError As Long, VPEquation As Long, VPTempDB As Double, VPMinimumT As Double, VPMaximumT As Double, VPCoeffA As Double, VPCoeffB As Double, VPCoeffC As Double, VPCoeffD As Double, VPCoeffE As Double, VPSuperfund As Double, VPSuperfundTemp As Double, OperatingTemp As Double)
'Declare Sub ACCALL Lib "dlls\stepp.dll" (ActivityCoefficient As Double, ACShortSource As Long, ACLongSource As Long, ACError As Long, ACTEMP As Double, OperatingTemp As Double, FGRPError As Long, MaxUnifacGroups As Long, MS As Long, BinaryInteractionParameterDatabase As Long)
'Declare Sub HC1CALL Lib "dlls\stepp.dll" (HenryCUNIFAC As Double, HCUnifacShortSource As Long, HCUnifacLongSource As Long, HCUnifacError As Long, HCUnifacTemp As Double, OperatingTemp As Double, ActivityCoefficient As Double, VaporPressure As Double)
'Declare Sub HC2CALL Lib "dlls\stepp.dll" (HenryCRegress As Double, HCRegressShortSource As Long, HCRegressLongSource As Long, HCRegressError As Long, HCRegressTemp As Double, HCDatabase As Double, HCDatabaseTemp As Double, OperatingTemp As Double, NumberOfDatabaseHCs As Long)
'Declare Sub MWTCALL Lib "dlls\stepp.dll" (MWtUnifac As Double, MWtUnifacShortSource As Long, MWtUnifacLongSource As Long, MWtUnifacError As Long, MaximumUnifacGroups As Long, MS As Long, XMW As Double)
'Declare Sub VBBPCALL Lib "dlls\stepp.dll" (MolarVolumeNBP As Double, MolarVolumeNBPShortSource As Long, MolarVolumeNBPLongSource As Long, MolarVolumeNBPError As Long, MolarVolumeNBPTemp As Double, BoilingPointTemp As Double, MaximumUnifacGroups As Long, MS As Long, NumberOfRings As Long)
'Declare Sub LDDBCALL Lib "dlls\stepp.dll" (LiquidDensityDB As Double, LiquidDensityDBShortSource As Long, LiquidDensityDBLongSource As Long, LiquidDensityDBError As Long, LiquidDensityDBEqn As Long, LiquidDensityDBTemp As Double, LiquidDensityDBMinimumT As Double, LiquidDensityDBMaximumT As Double, LiquidDensityDBCoeffA As Double, LiquidDensityDBCoeffB As Double, LiquidDensityDBCoeffC As Double, LiquidDensityDBCoeffD As Double, MolecularWeight As Double, OperatingTemperature As Double)
'Declare Sub LDGCCALL Lib "dlls\stepp.dll" (LiquidDensityGC As Double, LiquidDensityGCShortSource As Long, LiquidDensityGCLongSource As Long, LiquidDensityGCError As Long, LiquidDensityGCTemp As Double, MolecularWeight As Double, MolarVolumeNBP As Double, OperatingTemperature As Double)
'Declare Sub VBMATT Lib "dlls\stepp.dll" (MolarVolumeOpT As Double, LiquidDensity As Double, MolecularWeight As Double)
'Declare Sub AQSCALL Lib "dlls\stepp.dll" (AqueousSolubilty As Double, AqueousSolubiltyShortSource As Long, AqueousSolubiltyLongSource As Long, AqueousSolubiltyError As Long, AqueousSolubiltyTemp As Double, CalculationTemperature As Double, MaximumUnifacGroups As Long, MS As Long, XMW As Double, BinaryInteractionParameterDatabase As Long)
'Declare Sub KOWCALL Lib "dlls\stepp.dll" (Kow As Double, KowShortSource As Long, KowLongSource As Long, KowError As Long, KowTemp As Double, CalculationTemperature As Double, FGRPErrorFlag As Long, MaximumUnifacGroups As Long, MS As Long, BinaryInteractionParameterDatabase As Long)
'Declare Sub DIFLHL Lib "dlls\stepp.dll" (DIFLHaydukLaudie As Double, MolarVolumeNBP As Double, OperatingTemp As Double, MolecularWeight As Double, DIFLHaydukLaudieError As Long, DIFLHaydukLaudieSourceShort As Long, DIFLHaydukLaudieSourceLong As Long, DIFLHaydukLaudieTemp As Double)
'Declare Sub DIFLPOL Lib "dlls\stepp.dll" (DIFLPolson As Double, MolecularWeight As Double, DIFLPolsonError As Long, DIFLPolsonShortSource As Long, DIFLPolsonLongSource As Long, DIFLPolsonTemp As Double, OperatingTemp As Double)
'Declare Sub DIFLWC Lib "dlls\stepp.dll" (DIFLWilkeChang As Double, MolarVolumeNBP As Double, OperatingTemperature As Double, DIFLWilkeChangError As Long, DIFLWilkeChangShortSource As Long, DIFLWilkeChangLongSource As Long, DIFLWilkeChangTemp As Double)
'Declare Sub DIFGWL Lib "dlls\stepp.dll" (DIFGWilkeLee As Double, MolecularWeight As Double, MolarVolumeNBP As Double, BoilingPointTemp As Double, OperatingTemp As Double, OperatingPressure As Double, DIFGWilkeLeeError As Long, DIFGWilkeLeeShortSource As Long, DIFGWilkeLeeLongSource As Long, DIFGWilkeLeeTemp As Double)
'Declare Sub H2ODENS Lib "dlls\stepp.dll" (WaterDensity As Double, OperatingTemperature As Double, WaterDensityError As Long, WaterDensityShortSource As Long, WaterDensityLongSource As Long, WaterDensityTemp As Double)
'Declare Sub H2OVISC Lib "dlls\stepp.dll" (WaterViscosity As Double, OperatingTemp As Double, WaterViscosityError As Long, WaterViscosityShortSource As Long, WaterViscosityLongSource As Long, WaterViscosityTemp As Double)
'Declare Sub H2OST Lib "dlls\stepp.dll" (WaterSurfaceTension As Double, OperatingTemp As Double, WaterSurfaceTensionError As Long, WaterSurfaceTensionShortSource As Long, WaterSurfaceTensionLongSource As Long, WaterSurfaceTensionTemp As Double)
'Declare Sub AIRDENS Lib "dlls\stepp.dll" (AirDensity As Double, OperatingTemp As Double, OperatingPressure As Double, AirDensityError As Long, AirDensityShortSource As Long, AirDensityLongSource As Long, AirDensityTemperature As Double)
'Declare Sub AIRVISC Lib "dlls\stepp.dll" (AirViscosity As Double, OperatingTemp As Double, AirViscosityError As Long, AirViscosityShortSource As Long, AirViscosityLongSource As Long, AirViscosityTemperature As Double)
'Declare Sub HENFIT Lib "dlls\stepp.dll" (HenrysConstantFit As Double, HCFitShortSource As Long, HCFitLongSource As Long, HCFitError As Long, HCFitTemperature As Double, HCDatabase As Double, HCDatabaseTemp As Double, HCUnifacOpT As Double, HCUnifacDBTs As Double, HCUnifacDBTsErrors As Long, OperatingTemp As Double, NumberDBHenryCs As Long)
'Declare Sub AQSFIT Lib "dlls\stepp.dll" (AqueousSolubilityFit As Double, AqSolFitShortSource As Long, AqSolFitLongSource As Long, AqSolFitError As Long, AqSolFitTemp As Double, AqSolUnifacDBT As Double, AQSolUnifacDBTTmp As Double, AqSolUnifacOpT As Double, AqSolDatabase As Double, AqSolDatabaseTemp As Double, OperatingTemp As Double)
'Declare Sub HCDBCONV Lib "dlls\stepp.dll" (HenrysConstantDatabase As Double, HenrysConstantDatabaseTemp As Double, NumberOfDatabaseHenrysConstants As Long, HCShortSource As Long)
'
'
''DLL Declarations from STEPPCONV.dll
''   DLL Declarations needed to perform unit conversions
'
''SI to English Units
'Declare Sub VPCONV Lib "dlls\stepconv.dll" (VaporPressureEnglishUnits As Double, VaporPressureSIUnits As Double)
'Declare Sub ACCONV Lib "dlls\stepconv.dll" (ActivityCoefficientEnglishUnits As Double, ActivityCoefficientSIUnits As Double)
'Declare Sub HCCONV Lib "dlls\stepconv.dll" (HenrysConstantEnglishUnits As Double, HenrysConstantSIUnits As Double)
'Declare Sub MWCONV Lib "dlls\stepconv.dll" (MolecularWeightEnglishUnits As Double, MolecularWeightSIUnits As Double)
'Declare Sub LDENSCNV Lib "dlls\stepconv.dll" (LiquidDensityEnglishUnits As Double, LiquidDensitySIUnits As Double)
'Declare Sub MVOPTCNV Lib "dlls\stepconv.dll" (MolarVolumeOpTEnglishUnits As Double, MolarVolumeOpTSIUnits As Double)
'Declare Sub MVNBPCNV Lib "dlls\stepconv.dll" (MolarVolumeNBPEnglishUnits As Double, MolarVolumeNBPSIUnits As Double)
'Declare Sub NBPCONV Lib "dlls\stepconv.dll" (BoilingPointEnglishUnits As Double, BoilingPointSIUnits As Double)
'Declare Sub RICONV Lib "dlls\stepconv.dll" (RefractiveIndexEnglishUnits As Double, RefractiveIndexSIUnits As Double)
'Declare Sub AQSCONV Lib "dlls\stepconv.dll" (AqueousSolubilityEnglishUnits As Double, AqueousSolubilitySIUnits As Double)
'Declare Sub KOWCONV Lib "dlls\stepconv.dll" (OctWaterPartCoeffEnglishUnits As Double, OctWaterPartCoeffSIUnits As Double)
'Declare Sub LDIFFCNV Lib "dlls\stepconv.dll" (LiquidDiffusivityEnglishUnits As Double, LiquidDiffusivitySIUnits As Double)
'Declare Sub GDIFFCNV Lib "dlls\stepconv.dll" (GasDiffusivityEnglishUnits As Double, GasDiffusivitySIUnits As Double)
'Declare Sub WDENSCNV Lib "dlls\stepconv.dll" (WaterDensityEnglishUnits As Double, WaterDensitySIUnits As Double)
'Declare Sub WVISCCNV Lib "dlls\stepconv.dll" (WaterViscosityEnglishUnits As Double, WaterViscositySIUnits As Double)
'Declare Sub H2OSTCNV Lib "dlls\stepconv.dll" (WaterSurfTensionEnglishUnits As Double, WaterSurfTensionSIUnits As Double)
'Declare Sub ADENSCNV Lib "dlls\stepconv.dll" (AirDensityEnglishUnits As Double, AirDensitySIUnits As Double)
'Declare Sub AVISCCNV Lib "dlls\stepconv.dll" (AirViscosityEnglishUnits As Double, AirViscositySIUnits As Double)
'Declare Sub PRESSCNV Lib "dlls\stepconv.dll" (PressureEnglishUnits As Double, PressureSIUnits As Double)
'Declare Sub TEMPCNV Lib "dlls\stepconv.dll" (TemperatureEnglishUnits As Double, TemperatureSIUnits As Double)
'
''English to SI Units
'Declare Sub VPENSI Lib "dlls\stepconv.dll" (VaporPressureSIUnits As Double, VaporPressureEnglishUnits As Double)
'Declare Sub ACENSI Lib "dlls\stepconv.dll" (ActivityCoefficientSIUnits As Double, ActivityCoefficientEnglishUnits As Double)
'Declare Sub HCENSI Lib "dlls\stepconv.dll" (HenrysConstantSIUnits As Double, HenrysConstantEnglishUnits As Double)
'Declare Sub MWENSI Lib "dlls\stepconv.dll" (MolecularWeightSIUnits As Double, MolecularWeightEnglishUnits As Double)
'Declare Sub LDENENSI Lib "dlls\stepconv.dll" (LiquidDensitySIUnits As Double, LiquidDensityEnglishUnits As Double)
'Declare Sub MVOTENSI Lib "dlls\stepconv.dll" (MolarVolumeOpTSIUnits As Double, MolarVolumeOpTEnglishUnits As Double)
'Declare Sub MVBPENSI Lib "dlls\stepconv.dll" (MolarVolumeNBPSIUnits As Double, MolarVolumeNBPEnglishUnits As Double)
'Declare Sub NBPENSI Lib "dlls\stepconv.dll" (BoilingPointSIUnits As Double, BoilingPointEnglishUnits As Double)
'Declare Sub RIENSI Lib "dlls\stepconv.dll" (RefractiveIndexSIUnits As Double, RefractiveIndexEnglishUnits As Double)
'Declare Sub AQSENSI Lib "dlls\stepconv.dll" (AqueousSolubilitySIUnits As Double, AqueousSolubilityEnglishUnits As Double)
'Declare Sub KOWENSI Lib "dlls\stepconv.dll" (OctWaterPartCoeffSIUnits As Double, OctWaterPartCoeffEnglishUnits As Double)
'Declare Sub LDIFENSI Lib "dlls\stepconv.dll" (LiquidDiffusivitySIUnits As Double, LiquidDiffusivityEnglishUnits As Double)
'Declare Sub GDIFENSI Lib "dlls\stepconv.dll" (GasDiffusivitySIUnits As Double, GasDiffusivityEnglishUnits As Double)
'Declare Sub WDENENSI Lib "dlls\stepconv.dll" (WaterDensitySIUnits As Double, WaterDensityEnglishUnits As Double)
'Declare Sub WVISENSI Lib "dlls\stepconv.dll" (WaterViscositySIUnits As Double, WaterViscosityEnglishUnits As Double)
'Declare Sub WSTENSI Lib "dlls\stepconv.dll" (WaterSurfTensionSIUnits As Double, WaterSurfTensionEnglishUnits As Double)
'Declare Sub ADENENSI Lib "dlls\stepconv.dll" (AirDensitySIUnits As Double, AirDensityEnglishUnits As Double)
'Declare Sub AVISENSI Lib "dlls\stepconv.dll" (AirViscositySIUnits As Double, AirViscosityEnglishUnits As Double)
'Declare Sub PRESENSI Lib "dlls\stepconv.dll" (PressureSIUnits As Double, PressureEnglishUnits As Double)
'Declare Sub TEMPENSI Lib "dlls\stepconv.dll" (TemperatureSIUnits As Double, TemperatureEnglishUnits As Double)

Attribute VB_Name = "ErrorMod"
Global ErrorMsg(-200 To 200) As String

Sub LoadErrorMessages()
    'This subroutine will read error messages needed by StEPP
    'from a file called errcodes.txt

ErrorMsg(1) = "Temperature at which vapor pressure was calculated is out of the valid temperature range for the applicable vapor pressure equation."
ErrorMsg(2) = "Vapor pressure only available at a discrete temperature.  This may affect the validity of UNIFAC Henry's constants at temperatures differing from the vapor pressure temperature."
ErrorMsg(3) = "Temperature at which liquid density was calculated is out of the valid temperature range for the applicable liquid density equation."
ErrorMsg(4) = "Molecular weight is less than 1000 and the equation of Polson (1950) is generally only valid for molecular weights greater than 1000."
ErrorMsg(5) = "Hayduk & Laudie equation generally applies for molecular weights less than 1000 and for molar volumes between 0.015 and 0.5 m^3/kmol.  Current molecular weight is too large and current molar volume is too small."
ErrorMsg(6) = "Hayduk & Laudie equation generally applies for molecular weights less than 1000 and for molar volumes between 0.015 and 0.5 m^3/kmol.  Current molecular weight and molar volume are both too large."
ErrorMsg(7) = "Hayduk & Laudie equation generally applies for molecular weights less than 1000 and for molar volumes between 0.015 and 0.5 m^3/kmol.  Current molecular weight is too large."
ErrorMsg(8) = "Hayduk & Laudie equation generally applies for molecular weights less than 1000 and for molar volumes between 0.015 and 0.5 m^3/kmol.  Current molar volume is too small."
ErrorMsg(9) = "Hayduk & Laudie equation generally applies for molecular weights less than 1000 and for molar volumes between 0.015 and 0.5 m^3/kmol.  Current molar volume is too large."
ErrorMsg(10) = "Saturation pressure exceeds 1 atm."
ErrorMsg(11) = "Temperature at which water density was calculated is out of the valid temperature range for the water density correlation used."
ErrorMsg(-1) = "No vapor pressure is available in the database."
ErrorMsg(-2) = "No. of UNIFAC subgroups exceeds 20.  Therefore, infinite dilution activity coefficient can not be determined by UNIFAC."
ErrorMsg(-3) = "One or more UNIFAC parameters are missing.  Therefore, infinite dilution activity coefficient can not be determined by UNIFAC.  Try using a different database to get binary interaction parameters."
ErrorMsg(-4) = "No vapor pressure is available in the database.  No. of UNIFAC subgroups exceeds 20.  Therefore, infinite dilution activity coefficient can not be determined by UNIFAC."
ErrorMsg(-5) = "No vapor pressure is available in the database.  One or more UNIFAC parameters are missing.  Therefore, infinite dilution activity coefficient can not be determined by UNIFAC."
ErrorMsg(-6) = "Problem with calculating molecular weight."
ErrorMsg(-7) = "Problem with calculating molar volume at the normal boiling point with Schroeder's method."
ErrorMsg(-8) = "Problem with the equation for Vapor Pressure from the database.  No value could be calculated."
ErrorMsg(-9) = "Problem with the equation for Vapor Pressure from the database.  No value could be calculated.  No. of UNIFAC subgroups exceeds 20.  Therefore, infinite dilution activity coefficient can not be determined by UNIFAC."
ErrorMsg(-10) = "Problem with the equation for Vapor Pressure from the database.  No value could be calculated.  One or more UNIFAC parameters are missing.  Therefore, infinite dilution activity coefficient can not be determined by UNIFAC."
ErrorMsg(-11) = "Problem with the equation for Liquid Density from the database.  No value could be calculated."
ErrorMsg(-12) = "No liquid density is available in the database."
ErrorMsg(-13) = "Liquid density from group contribution at the operating T can't be calculated because molar volume at the normal boiling point is not available."
ErrorMsg(-14) = "Molar Volume at the operating temperature cannot be calculated from the database because Liquid Density is not available in the database."
ErrorMsg(-15) = "Molar Volume at the operating temperature can not be calculated from group contribution method because Liquid Density is not available from group contribution method."
ErrorMsg(-16) = "Normal boiling point is not available in the database."
ErrorMsg(-17) = "Refractive index is not available in the database"
ErrorMsg(-18) = "Problem with calculating aqueous solubility.  Solubility algorithm failed to converge after IMAX iterations.  It's possible the compound is infinitely miscible."
ErrorMsg(-19) = "Problem with calculating aqueous solubility.  Division underflow occurred in Newton's algorithm.  Solubility can not be calculated in this case."
ErrorMsg(-20) = "Problem with calculating aqueous solubility."
ErrorMsg(-21) = "Problem with calculating aqueous solubility."
ErrorMsg(-22) = "Aqueous Solubility is not available in database."
ErrorMsg(-23) = "Problem with calculating octanol water partition coefficient."
ErrorMsg(-24) = "Problem with calculating octanol water partition coefficient."
ErrorMsg(-25) = "Problem with calculating octanol water partition coefficient."
ErrorMsg(-26) = "Problem with calculating octanol water partition coefficient."
ErrorMsg(-27) = "Problem with calculating octanol water partition coefficient."
ErrorMsg(-28) = "Problem with calculating octanol water partition coefficient."
ErrorMsg(-29) = "Problem with calculating octanol water partition coefficient."
ErrorMsg(-30) = "Problem with calculating octanol water partition coefficient."
ErrorMsg(-31) = "Octanol water partition coefficient is not available in the database."
ErrorMsg(-32) = "Can not calculate liquid diffusivity from the Hayduk & Laudie correlation because molar volume at the normal boiling point is unavailable."
ErrorMsg(-33) = "Can not calculate liquid diffusivity from the Wilke-Chang correlation because molar volume at the normal boiling point is not available."
ErrorMsg(-34) = "Can not calculate gas diffusivity from the Wilke-Lee Modification of the Hirschfelder-Bird-Spotz method because molar volume at the normal boiling point is unavailable."
ErrorMsg(-35) = "Unable to regress data points for Henry's constant because the number of Henry's constants in the database is less than 2."
ErrorMsg(-36) = "No UNIFAC parameter sets are available for this compound."
ErrorMsg(-37) = "Temperature is out of the valid temperature range for the DIPPR801 Liquid Density equation.  Therefore, liquid density can not be obtained from DIPPR801."
ErrorMsg(-38) = "Henry's Constant cannot be calculated from UNIFAC because vapor pressure is unavailable."
ErrorMsg(-39) = "Henry's Constant cannot be calculated from UNIFAC because infinite dilution activity coefficient is unavailable."
ErrorMsg(-40) = "Henry's Constant cannot be calculated from UNIFAC because neither vapor pressure nor infinite dilution activity coefficient is available."
ErrorMsg(-41) = "The routine to fit the UNIFAC curve with a data point for Henry's constant cannot be used in this case."
ErrorMsg(-42) = "Molecular Weight is not currently available in the StEPP database."
ErrorMsg(-43) = "Liquid Density from the database cannot be calculated in the proper units of kg/m3 because Molecular Weight is not available.  Therefore, liquid density is unavailable from the database."
ErrorMsg(-44) = "Aqueous Solubility is unavailable in the StEPP database.  Consequently, it is not possible to calculate a value from UNIFAC at the database T."
ErrorMsg(-45) = "The routine to fit the UNIFAC curve with a data point for Aqueous Solubility cannot be used in this case."
ErrorMsg(-46) = "Octanol Water Partition Coefficient is unavailable in the StEPP database.  Consequently, it is not possible to calculate a value from UNIFAC at the database T."
ErrorMsg(-47) = "Can not calculate Liquid Diffusivity from the method of Polson because molecular weight is unavailable."
ErrorMsg(-48) = "Can not calculate gas diffusivity from the Wilke-Lee Modification of the Hirschfelder-Bird-Spotz method because normal boiling point is unavailable."
ErrorMsg(-49) = "Can not calculate gas diffusivity from the Wilke-Lee Modification of the Hirschfelder-Bird-Spotz method because molecular weight is unavailable."
ErrorMsg(-50) = "Can not calculate gas diffusivity from the Wilke-Lee Modification of the Hirschfelder-Bird-Spotz method because molar volume at the normal boiling point and normal boiling point are unavailable."
ErrorMsg(-51) = "Can not calculate gas diffusivity from the Wilke-Lee Modification of the Hirschfelder-Bird-Spotz method because molar volume at the normal boiling point and molecular weight are unavailable."
ErrorMsg(-52) = "Can not calculate gas diffusivity from the Wilke-Lee Modification of the Hirschfelder-Bird-Spotz method because normal boiling point and molecular weight are unavailable."
ErrorMsg(-53) = "Can not calculate gas diffusivity from the Wilke-Lee Modification of the Hirschfelder-Bird-Spotz method because molar volume at the normal boiling point, normal boiling point, and molecular weight are unavailable."
ErrorMsg(-54) = "Can not calculate Henry's Constant from current Vapor Pressure and Activity Coefficient values."
ErrorMsg(-55) = "Can not calculate Molar Volume at Operating T, Molecular Weight is unavailable."
ErrorMsg(-100) = "This routine has not been implemented yet."
ErrorMsg(-200) = "Error while performing calculation in FORTRAN routines."

End Sub

Attribute VB_Name = "FileOptMod"
'This module will handle File Menu Options such
'as Print, Save, Open, etc.

Global FileName As String
Global OldFileName As String
Global Const FILEID_STEPP = "StEPP Contaminant File"   'File Identifier for a StEPP Contaminant Design File
Global JustLoadedFile As Integer   'Tells if a StEPP Design File has just been loaded for use in displaying information with cboSelectContaminant Click Event
Global Stepp_ClientProgram  As String

Sub LoadFileStEPP(FileName As String)
Dim Ctl As Control
Set Ctl = contam_prop_form.CommonDialog1

    On Error Resume Next
'    contam_prop_form!CMDialog1.DefaultExt = "stp"
'    contam_prop_form!CMDialog1.Filter = "StEPP Files (*.stp)|*.stp"
'    contam_prop_form!CMDialog1.DialogTitle = "Load StEPP Contaminant File"
'    contam_prop_form!CMDialog1.flags = OFN_FILEMUSTEXIST Or OFN_PATHMUSTEXIST
'    contam_prop_form!CMDialog1.CancelError = True
'    contam_prop_form!CMDialog1.Action = 1
'    FileName$ = contam_prop_form!CMDialog1.FileName
    Ctl.DefaultExt = "stp"
    Ctl.Filter = "StEPP Files (*.stp)|*.stp"
    Ctl.DialogTitle = "Load StEPP Contaminant File"
    Ctl.flags = OFN_FILEMUSTEXIST Or OFN_PATHMUSTEXIST
    Ctl.CancelError = True
    Ctl.Action = 1
    FileName$ = Ctl.FileName
    If Err = 32755 Then   'Cancel selected by user
       FileName$ = ""
    End If

End Sub

Sub LoadStEPPDesign(OverrideFilename As String)
    Dim FileID As String, msg As String
    Dim i As Integer
    Dim NamePlusCAS As String

    contam_prop_form!cmdSelectContaminant.SetFocus

    If (OverrideFilename <> "") Then
      FileName$ = OverrideFilename
    Else
      Call LoadFileStEPP(FileName)
    End If
    
    If FileName$ <> "" Then
       FileID = ""
       Open FileName$ For Random As #1 Len = Len(phprop)
       On Error Resume Next
       Get #1, 1, FileID
       If FileID <> FILEID_STEPP Then
          msg = "Invalid StEPP Design File"
          MsgBox msg, 48, "Error"
          Close #1
          Exit Sub
       End If
       
       Get #1, 2, NumSelectedChemicals

       contam_prop_form!cboSelectContaminant.Clear
       contam_prop_form!cboSelectContaminant.Enabled = True

       For i = 1 To NumSelectedChemicals
           Get #1, i + 2, PropContaminant(i)
           If (SteppLink_SpecifiedPressure <> "") Then
             PropContaminant(i).OperatingPressure = CDbl(SteppLink_SpecifiedPressure)
           End If
           If (SteppLink_SpecifiedTemperature <> "") Then
             PropContaminant(i).OperatingTemperature = CDbl(SteppLink_SpecifiedTemperature)
           End If
       Next i
       
       For i = 1 To NumSelectedChemicals
           NamePlusCAS = " " & Trim$(Str$(PropContaminant(i).CASNumber)) & "  " & Trim$(PropContaminant(i).Name)
           contam_prop_form!cboSelectContaminant.AddItem NamePlusCAS
       Next i

       PreviouslySelectedIndex = -1
       JustLoadedFile = True
       phprop = PropContaminant(1)

       contam_prop_form!cboSelectContaminant.ListIndex = 0
       contam_prop_form!mnuFile(4).Enabled = True
       contam_prop_form!mnuFile(5).Enabled = True
       contam_prop_form!mnuFile(7).Enabled = True
       contam_prop_form!cmdUnselectContaminant.Enabled = True

       Close #1
    
    End If

End Sub

Sub SaveFileStEPP(FileName As String)
Dim Ctl As Control
Set Ctl = contam_prop_form.CommonDialog1

    On Error Resume Next
'    contam_prop_form!CMDialog1.DefaultExt = "stp"
'    contam_prop_form!CMDialog1.Filter = "StEPP Files (*.stp)|*.stp"
'    contam_prop_form!CMDialog1.DialogTitle = "Save StEPP Contaminant File"
'    contam_prop_form!CMDialog1.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
'    contam_prop_form!CMDialog1.CancelError = True
'    contam_prop_form!CMDialog1.Action = 2
'    FileName$ = contam_prop_form!CMDialog1.FileName
    Ctl.DefaultExt = "stp"
    Ctl.Filter = "StEPP Files (*.stp)|*.stp"
    Ctl.DialogTitle = "Save StEPP Contaminant File"
    Ctl.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
    Ctl.CancelError = True
    Ctl.Action = 2
    FileName$ = Ctl.FileName
    If Err = 32755 Then   'Cancel selected by user
       FileName$ = ""
    End If

End Sub

Sub SaveStEPPDesign()
    Dim i As Integer
    Dim FileID As String

    If FileName$ = "" Then
       Call SaveFileStEPP(FileName)
    End If

    If FileName$ <> "" Then
       FileID = FILEID_STEPP


       PropContaminant(PreviouslySelectedIndex) = phprop

       Open FileName$ For Random As #1 Len = Len(phprop)
       
       Put #1, 1, FileID
       Put #1, 2, NumSelectedChemicals
      
       For i = 1 To NumSelectedChemicals
           Put #1, i + 2, PropContaminant(i)
       Next i

       Close #1
       contam_prop_form!mnuFile(4).Enabled = True

    Else   'Cancel Selected by user
       FileName$ = OldFileName$
    End If
End Sub

'Sub XOLD_ini_initializethisprogram(SpecifiedProgramType As String)
'Dim infotype As String
'Dim defaultresult As String
'Dim returnvalue As String * 125
'Dim storage As String * 144
'Dim newdata As String
'Dim defaultnumber As Long, valid As Long, string_size As Long
'Dim f As Integer, i As Integer, Value As Integer
'Dim temp As String
'
'  'Set global variable to specified program type
'  INI_ProgramType = Trim$(SpecifiedProgramType)
'
'  'get windows directory and look for adsim.ini
'  Value = GetWindowsDirectory(ByVal storage, ByVal Len(storage))
'  INI_WindowsDir = Trim$(Left$(storage, Value))
'
'  'if does not exist, create ini file
'  'INI_FileName = INI_WindowsDir & "\" & INI_ProgramType & ".ini"
'  INI_FileName = Global_fpath_dir_CPAS & "\DBASE\" & INI_ProgramType & ".ini"
'
'
'  If (Dir(INI_FileName)) = "" Then
'    '======>  Program Specified Initialization!  <======
'    f = FreeFile
'    Open INI_FileName For Output As f
'    Print #f, "[stepp]"
'    Print #f, "app_path="
'    Print #f, "has_seen_disclaimer=0"
'    Print #f, "has_seen_steppinfo=0"
'    Print #f, "oldfile1="
'    Print #f, "oldfile2="
'    Print #f, "oldfile3="
'    Print #f, "oldfile4="
'
'    Close #f
'  End If
'
'  'temp = ini_getsetting(INI_FileName, INI_ProgramType, "app_path")
'  temp = INI_Getsetting("app_path")
'
'  'if incorrect path set with programs current path being used now
'  If ((StrComp(temp, App.Path) <> 0) Or (temp = "")) Then
'    Call INI_PutSetting("app_path", Trim$(App.Path))
'  End If
'
'  ChDir App.Path
'
'End Sub

Attribute VB_Name = "INIFILES"
Option Explicit

Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
Declare Function GetPrivateProfileInt Lib "kernel32" Alias "GetPrivateProfileIntA" (ByVal lpApplicationName As String, ByVal lpKeyName As String, ByVal nDefault As Long, ByVal lpFileName As String) As Long
Declare Function GetSystemDirectory Lib "kernel32" Alias "GetSystemDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long
Declare Function GetWindowsDirectory Lib "kernel32" Alias "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long
Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long

Global fn_OldFileList As String           'full name including path
Global Const fn_INI_name = "STEPP.INI"     'non-full name NOT including Windows path

  'OldFiles(i,j):
  '     i = menu code
  '     j = file within that menu (file 1,2,3, or 4, where
  '         file 1 is the most recently accessed file)
Global OldFiles(1 To 5, 1 To 4) As String





Const INIFILES_declarations_end = 0


Function GetWindowsDir() As String
Dim Value As Integer
Dim storage As String * 144
  Value = GetWindowsDirectory(ByVal storage, ByVal Len(storage))
  GetWindowsDir = Trim$(Left$(storage, Value))
End Function


Function GetWindowsTempDir() As String
Dim retstr As String
  retstr = Trim$(Environ$("TEMP"))
  If (retstr = "") Then retstr = Trim$(Environ$("TMP"))
  'IF NEITHER THE TEMP OR TMP ENVIRONMENT VARIABLES EXIST
  'THEN WE USE THE WINDOWS DIRECTORY AS THE TEMPORARY
  'FILE PATH.
  If (retstr = "") Then
    retstr = Trim$(GetWindowsDir())
  End If
  If (Right$(retstr, 1) = "\") Then
    'REMOVE TRAILING BACKSLASH.
    retstr = Left$(retstr, Len(retstr) - 1)
  End If
  GetWindowsTempDir = retstr
End Function


Sub ini_putsetting0(fn_ini As String, ini_header As String, INI_VarName As String, ini_newsetting As String)
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpString As String
Dim lpFileName As String
Dim valid As Integer
  lpApplicationName = ini_header
  lpKeyName = INI_VarName
  lpString = ini_newsetting
  lpFileName = fn_ini
  valid = WritePrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpString, ByVal lpFileName)
End Sub
Sub INI_PutSetting(INI_VarName As String, NewSetting As String)
  Call ini_putsetting0(fn_OldFileList, _
      "UserSettings", INI_VarName, NewSetting)
End Sub


Function INI_GetSetting00(fn_ini As String, ini_header As String, INI_VarName As String) As String
  INI_GetSetting00 = INI_GetSetting0(fn_ini, ini_header, INI_VarName)
End Function
Function INI_GetSetting0(fn_ini As String, ini_header As String, INI_VarName As String) As String
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpszDefault As String
Dim lpReturnedString As String * 200
Dim nSize As Integer
Dim lpFileName As String

Dim BytesCopied As Integer
Dim temp As String

  lpApplicationName = ini_header
  lpKeyName = INI_VarName
  lpszDefault = ""
  lpReturnedString = ""
  nSize = Len(lpReturnedString)
  lpFileName = fn_ini

  BytesCopied = GetPrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpszDefault, ByVal lpReturnedString, ByVal nSize, ByVal lpFileName)
  temp = Left$(Trim$(lpReturnedString), BytesCopied)
  INI_GetSetting0 = temp

End Function
Function INI_Getsetting(INI_VarName As String) As String
  INI_Getsetting = _
      INI_GetSetting0(fn_OldFileList, "UserSettings", INI_VarName)
End Function


Sub OldFileList_Populate( _
    num_menu As Integer, _
    menu0 As Menu, _
    menu1 As Menu, menu2 As Menu, _
    menu3 As Menu, menu4 As Menu)
  OldFiles(num_menu, 1) = INI_GetSetting0(fn_OldFileList, "old_files", _
      "old_file(" & Trim$(Str$(num_menu)) & ",1)")
  OldFiles(num_menu, 2) = INI_GetSetting0(fn_OldFileList, "old_files", _
      "old_file(" & Trim$(Str$(num_menu)) & ",2)")
  OldFiles(num_menu, 3) = INI_GetSetting0(fn_OldFileList, "old_files", _
      "old_file(" & Trim$(Str$(num_menu)) & ",3)")
  OldFiles(num_menu, 4) = INI_GetSetting0(fn_OldFileList, "old_files", _
      "old_file(" & Trim$(Str$(num_menu)) & ",4)")
  Call OldFileList_UpdateMenu(num_menu, menu0, menu1, menu2, menu3, menu4)
End Sub
Sub OldFileList_Promote( _
    fn_newfile As String, _
    num_menu As Integer, _
    menu0 As Menu, menu1 As Menu, menu2 As Menu, _
    menu3 As Menu, menu4 As Menu)
Dim i As Integer
Dim Found As Integer
  'IF NOT IN CURRENT LIST, SHIFT 1-3 DOWN TO 2-4 AND REPLACE 1.
  'IF IN CURRENT LIST, SAVE, SHIFT OTHERS DOWN, AND MOVE TO 1.
  fn_newfile = LCase$(fn_newfile)
  Found = -1
  For i = 1 To 4
    If (Trim$(LCase$(fn_newfile)) = Trim$(LCase$(OldFiles(num_menu, i)))) Then
      Found = i
      Exit For
    End If
  Next i
  If (Found = -1) Then
    For i = 4 To 2 Step -1
      OldFiles(num_menu, i) = OldFiles(num_menu, i - 1)
    Next i
    OldFiles(num_menu, 1) = fn_newfile
  Else
    For i = Found To 2 Step -1
      OldFiles(num_menu, i) = OldFiles(num_menu, i - 1)
    Next i
    OldFiles(num_menu, 1) = fn_newfile
  End If
  'UPDATE MENU:
  Call OldFileList_UpdateMenu(num_menu, menu0, menu1, menu2, menu3, menu4)
  'UPDATE INI FILE:
  For i = 1 To 4
    Call ini_putsetting0(fn_OldFileList, _
        "old_files", _
        "old_file(" & Trim$(Str$(num_menu)) & "," & Trim$(Str$(i)) & ")", _
        OldFiles(num_menu, i))
  Next i
End Sub
Sub OldFileList_UpdateMenu(num_menu As Integer, _
    menu0 As Menu, _
    menu1 As Menu, menu2 As Menu, _
    menu3 As Menu, menu4 As Menu)
Dim found_at_least_one As Integer
Dim i As Integer
Dim mnu As Menu
  found_at_least_one = False
  For i = 1 To 4
    If (i = 1) Then Set mnu = menu1
    If (i = 2) Then Set mnu = menu2
    If (i = 3) Then Set mnu = menu3
    If (i = 4) Then Set mnu = menu4
    If (OldFiles(num_menu, i) <> "") Then
      found_at_least_one = True
      mnu.Caption = "&" & Trim$(Str$(i)) & " - " & OldFiles(num_menu, i)
      mnu.Visible = True
    Else
      mnu.Visible = False
    End If
  Next i
  If (Not found_at_least_one) Then
    menu0.Visible = False
  Else
    menu0.Visible = True
  End If
End Sub
Option Explicit

'allows for *.ini calls
Declare Function GetPrivateProfileInt% Lib "Kernel" (ByVal lpApplicationName$, ByVal lpKeyName$, ByVal nDefault%, ByVal lpFileName$)
Declare Function GetPrivateProfileString% Lib "Kernel" (ByVal lpApplicationName$, ByVal lpKeyName As Any, ByVal lpDefault$, ByVal lpReturnedString$, ByVal nSize%, ByVal lpFileName$)
Declare Function WritePrivateProfileString% Lib "Kernel" (ByVal lpApplicationName$, ByVal lpKeyName$, ByVal lpString$, ByVal lplFileName$)

Declare Function GetWindowsDirectory Lib "kernel" (ByVal lpbuffer$, ByVal nSize%) As Integer

Global INI_ProgramType As String
Global INI_FileName As String

Function GetWindowsDir () As String
Dim Value As Integer
Dim storage As String * 144

  Value = GetWindowsDirectory(ByVal storage, ByVal Len(storage))
  GetWindowsDir = Trim$(Left$(storage, Value))

End Function

Function ini_getsetting (INI_FILE As String, INI_SpecifiedProgramType As String, INI_VariableName As String) As String

  'NOTE: THE FOLLOWING ARE DUMMY VARIABLES:
  '    - INI_FILE
  '    - INI_SpecifiedProgramType
  ini_getsetting = INI_GetSetting00(INI_FileName, INI_ProgramType, INI_VariableName)

'Dim lpApplicationName As String
'Dim lpKeyName As String
'Dim lpszDefault As String
'Dim lpReturnedString As String * 200
'Dim nSize As Integer
'Dim lpFileName As String
'
'Dim BytesCopied As Integer
'Dim temp As String
'
'  lpApplicationName = INI_SpecifiedProgramType
'  lpKeyName = INI_VariableName
'  lpszDefault = ""
'  lpReturnedString = ""
'  nSize = Len(lpReturnedString)
'  lpFileName = INI_FILE
'
'  BytesCopied = GetPrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpszDefault, ByVal lpReturnedString, ByVal nSize, ByVal lpFileName)
'  temp = Trim$(Left$(lpReturnedString, BytesCopied))
'  ini_getsetting = temp
'
End Function

Function INI_GetSetting00 (use_Filename As String, use_Section As String, use_VarName As String)
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpszDefault As String
Dim lpReturnedString As String * 200
Dim nSize As Integer
Dim lpFileName As String

Dim BytesCopied As Integer
Dim temp As String

  'lpApplicationName = INI_SpecifiedProgramType
  'lpKeyName = INI_VariableName
  lpszDefault = ""
  lpReturnedString = ""
  nSize = Len(lpReturnedString)
  'lpFileName = INI_WindowsDir & "\" & INI_SpecifiedProgramType & ".ini"
  BytesCopied = GetPrivateProfileString(ByVal use_Section, ByVal use_VarName, ByVal lpszDefault, ByVal lpReturnedString, ByVal nSize, ByVal use_Filename)
  temp = Left$(Trim$(lpReturnedString), BytesCopied)
  INI_GetSetting00 = temp
  
End Function

Sub ini_putsetting (INI_VariableName As String, INI_NewSetting As String)
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpString As String
Dim lpFileName As String

Dim valid As Integer

  lpApplicationName = INI_ProgramType
  lpKeyName = INI_VariableName
  lpString = INI_NewSetting
  lpFileName = INI_FileName

  valid = WritePrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpString, ByVal lpFileName)

End Sub

Attribute VB_Name = "INI_File_Mod"
Option Explicit

'allows for adsim.ini calls
Declare Function GetPrivateProfileInt% Lib "kernel" (ByVal lpApplicationName$, ByVal lpKeyName$, ByVal nDefault%, ByVal lpFileName$)
Declare Function GetPrivateProfileString% Lib "kernel" (ByVal lpApplicationName$, ByVal lpKeyName As Any, ByVal lpDefault$, ByVal lpReturnedString$, ByVal nSize%, ByVal lpFileName$)
Declare Function WritePrivateProfileString% Lib "kernel" (ByVal lpApplicationName$, ByVal lpKeyName$, ByVal lpString$, ByVal lplFileName$)

Declare Function GetWindowsDirectory Lib "kernel" (ByVal lpbuffer$, ByVal nSize%) As Integer
Declare Function GetSystemDirectory Lib "kernel" (ByVal lpbuffer$, ByVal nSize%) As Integer


'Global variables:
Global INI_WindowsDir As String
Global INI_ProgramType As String
Global INI_FileName As String

Function GetWindowsDir() As String
Dim storage As String * 144
Dim Value As Integer

  Value = GetWindowsDirectory(ByVal storage, ByVal Len(storage))
  GetWindowsDir = Trim$(Left$(storage, Value))

End Function

Function GetWindowsSystemDir() As String
Dim Value As Integer
Dim storage As String * 144

  Value = GetSystemDirectory(ByVal storage, ByVal Len(storage))
  GetWindowsSystemDir = Trim$(Left$(storage, Value))

End Function

Function INI_Getsetting(INI_VariableName As String) As String
'Dim lpApplicationName As String
'Dim lpKeyName As String
'Dim lpszDefault As String
'Dim lpReturnedString As String * 200
'Dim nSize As Integer
'Dim lpFileName As String
'
'Dim BytesCopied As Integer
'Dim temp As String
'
'  lpApplicationName = INI_ProgramType
'  lpKeyName = INI_VariableName
'  lpszDefault = ""
'  lpReturnedString = ""
'  nSize = Len(lpReturnedString)
'  lpFileName = INI_FileName
'
'  BytesCopied = GetPrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpszDefault, ByVal lpReturnedString, ByVal nSize, ByVal lpFileName)
'  temp = Trim$(Left$(lpReturnedString, BytesCopied))
'  INI_GetSetting = temp

  'ini_getsetting = INI_GetSetting0(INI_ProgramType, INI_VariableName)
  On Error Resume Next
  INI_Getsetting = Trim$(INI_GetSetting00(INI_FileName, AppProgramKey, INI_VariableName))

End Function

Function INI_GetSetting0(INI_SpecifiedProgramType As String, INI_VariableName As String) As String
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpszDefault As String
Dim lpReturnedString As String * 200
Dim nSize As Integer
Dim lpFileName As String

Dim BytesCopied As Integer
Dim temp As String

  On Error Resume Next
  lpApplicationName = INI_SpecifiedProgramType
  lpKeyName = INI_VariableName
  lpszDefault = ""
  lpReturnedString = ""
  nSize = Len(lpReturnedString)
  lpFileName = INI_WindowsDir & "\" & INI_SpecifiedProgramType & ".ini"
  
  BytesCopied = GetPrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpszDefault, ByVal lpReturnedString, ByVal nSize, ByVal lpFileName)
  temp = Trim$(Left$(lpReturnedString, BytesCopied))
  INI_GetSetting0 = temp

End Function

Function INI_GetSetting00(use_Filename As String, use_Section As String, use_VarName As String)
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpszDefault As String
Dim lpReturnedString As String * 200
Dim nSize As Integer
Dim lpFileName As String

Dim BytesCopied As Integer
Dim temp As String

  On Error Resume Next
  'lpApplicationName = INI_SpecifiedProgramType
  'lpKeyName = INI_VariableName
  lpszDefault = ""
  lpReturnedString = ""
  nSize = Len(lpReturnedString)
  'lpFileName = INI_WindowsDir & "\" & INI_SpecifiedProgramType & ".ini"
  BytesCopied = GetPrivateProfileString(ByVal use_Section, ByVal use_VarName, ByVal lpszDefault, ByVal lpReturnedString, ByVal nSize, ByVal use_Filename)
  temp = Left$(Trim$(lpReturnedString), BytesCopied)
  INI_GetSetting00 = temp
  
End Function

Sub ini_initializethisprogram(SpecifiedProgramType As String)
'Dim programtype As String
Dim infotype As String
Dim defaultresult As String
Dim returnvalue As String * 125
'dim ini_location As String
'ReDim appnames(3) As String
Dim storage As String * 144
Dim newdata As String
Dim defaultnumber As Long, valid As Long, string_size As Long
Dim f As Integer, I As Integer, Value As Integer
Dim temp As String

  'Set global variable to specified program type
  INI_ProgramType = Trim$(SpecifiedProgramType)

  'get windows directory and look for adsim.ini
  Value = GetWindowsDirectory(ByVal storage, ByVal Len(storage))
  INI_WindowsDir = Trim$(Left$(storage, Value))

  'if does not exist, create ini file
  'INI_FileName = INI_WindowsDir & "\" & INI_ProgramType & ".ini"
  
  'SELECT INI FILENAME DIRECTORY.
  If (fileexists(Global_fpath_dir_CPAS & "\DBASE")) Then
    'USE THE DBASE DIRECTORY.
    INI_FileName = Global_fpath_dir_CPAS & "\DBASE\" & INI_ProgramType & ".ini"
  Else
    'VB3 IS FLAKY ABOUT LONG FILENAMES.
    'THEREFORE, PUT THE INI FILE INTO THE WINDOWS DIRECTORY.
    INI_FileName = GetWindowsDir() & "\" & INI_ProgramType & ".ini"
  End If

  On Error Resume Next
  If (Dir(INI_FileName)) = "" Then
    '======>  Program Specified Initialization!  <======
    f = FreeFile
    Open INI_FileName For Output As f
    Print #f, "[asap]"
    Print #f, "app_path="
    Print #f, "has_seen_disclaimer=0"
    Print #f, "oldfile1="
    Print #f, "oldfile2="
    Print #f, "oldfile3="
    Print #f, "oldfile4="

  'appnames(1) = "[adsim]"
  'appnames(2) = "[asap]"
  'appnames(3) = "[stepp]"
  '
  'For i% = 1 To 3
  '  Print #f, appnames(i)
  '  Write #f,
  '  Print #f, "has_seen_disclaimer=0"
  '  Write #f,
  '  Print #f, "oldfile1="
  '  Write #f,
  '  Print #f, "oldfile2="
  '  Write #f,
  '  Print #f, "oldfile3="
  '  Write #f,
  '  Print #f, "oldfile4="
  '  Write #f,
  '  Print #f, "path="
  '  Write #f,
  'Next i%
    Close #f
  End If

'setup variables for ini call
'programtype = "stepp" '**change to name of program
'ini_location = windowsdir
'defaultresult = ""
'infotype = "app_path"
'string_size = Len(returnvalue)
'returnvalue = ""
'value = GetPrivateProfileString(ByVal INI_ProgramType, ByVal infotype, ByVal defaultresult, ByVal returnvalue, ByVal string_size, ByVal INI_FileName)
'temp = Trim$(Left$(returnvalue, value))
  temp = INI_Getsetting("app_path")

  'if incorrect path set with programs current path being used now
  If ((StrComp(temp, App.Path) <> 0) Or (temp = "")) Then
    'newdata = Trim$(app.Path)
    'valid = WritePrivateProfileString(ByVal INI_ProgramType, ByVal infotype, ByVal newdata, ByVal INI_FileName)
    Call ini_putsetting("app_path", Trim$(App.Path))
  End If

  ChDir App.Path

End Sub

Sub ini_putsetting(INI_VariableName As String, INI_NewSetting As String)
Dim lpApplicationName As String
Dim lpKeyName As String
Dim lpString As String
Dim lpFileName As String

Dim valid As Integer

  On Error Resume Next
  lpApplicationName = INI_ProgramType
  lpKeyName = INI_VariableName
  lpString = INI_NewSetting
  lpFileName = INI_FileName

  valid = WritePrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpString, ByVal lpFileName)

End Sub

Attribute VB_Name = "InitialMod"
'This module contains routines used for initialization of
'various items

Sub InitializeBIPdbHierarchy()

' "UNIFAC Binary Interaction Parameter Database Hierarchy for Activity Coefficient"
       BIP_dbHierarchy.ActivityCoefficient(1) = 3  '  Environmental
       BIP_dbHierarchy.ActivityCoefficient(2) = 1  '  Original UNIFAC VLE
       BIP_dbHierarchy.ActivityCoefficient(3) = 2  '  UNIFAC LLE
       
' "UNIFAC Binary Interaction Parameter Database Hierarchy for Aqueous Solubility"
       BIP_dbHierarchy.AqueousSolubility(1) = 2  '    UNIFAC LLE
       BIP_dbHierarchy.AqueousSolubility(2) = 3  '    Environmental
       BIP_dbHierarchy.AqueousSolubility(3) = 1  '    Original UNIFAC VLE
       
' "UNIFAC Binary Interaction Parameter Database Hierarchy for Octanol Water Partition Coefficient"
       BIP_dbHierarchy.OctWaterPartCoeff(1) = 2  '    UNIFAC LLE
       BIP_dbHierarchy.OctWaterPartCoeff(2) = 1  '    Original UNIFAC VLE

End Sub

Sub InitializeCurrentSelections()

    phprop.VaporPressure.CurrentSelection.choice = 0
    phprop.ActivityCoefficient.CurrentSelection.choice = 0
    phprop.HenrysConstant.CurrentSelection.choice = 0
    phprop.MolecularWeight.CurrentSelection.choice = 0
    phprop.BoilingPoint.CurrentSelection.choice = 0
    phprop.LiquidDensity.CurrentSelection.choice = 0
    phprop.MolarVolume.operatingT.CurrentSelection.choice = 0
    phprop.MolarVolume.BoilingPoint.CurrentSelection.choice = 0
    phprop.RefractiveIndex.CurrentSelection.choice = 0
    phprop.AqueousSolubility.CurrentSelection.choice = 0
    phprop.OctWaterPartCoeff.CurrentSelection.choice = 0
    phprop.LiquidDiffusivity.CurrentSelection.choice = 0
    phprop.GasDiffusivity.CurrentSelection.choice = 0
    phprop.WaterDensity.CurrentSelection.choice = 0
    phprop.WaterViscosity.CurrentSelection.choice = 0
    phprop.WaterSurfaceTension.CurrentSelection.choice = 0
    phprop.AirDensity.CurrentSelection.choice = 0
    phprop.AirViscosity.CurrentSelection.choice = 0

End Sub

Sub InitializeHierarchy()

    hie.VaporPressure(1).hierarchy = 3
    hie.VaporPressure(1).source = "Database"
    hie.VaporPressure(2).hierarchy = 4
    hie.VaporPressure(2).source = "Input"
    
    hie.ActivityCoefficient(1).hierarchy = 5
    
    hie.HenrysConstant(1).hierarchy = 7
    hie.HenrysConstant(1).source = "Regression of Data Pts"
    hie.HenrysConstant(2).hierarchy = 8
    hie.HenrysConstant(2).source = "Fit of UNIFAC w/Data Pt"
    hie.HenrysConstant(3).hierarchy = 9
    hie.HenrysConstant(3).source = "UNIFAC at Operating T"
    hie.HenrysConstant(4).hierarchy = 10
    hie.HenrysConstant(4).source = "Database"
    hie.HenrysConstant(5).hierarchy = 11
    hie.HenrysConstant(5).source = "UNIFAC at Database T's"
    hie.HenrysConstant(6).hierarchy = 12
    hie.HenrysConstant(6).source = "Input"
    
    hie.MolecularWeight(1).hierarchy = 13
    hie.MolecularWeight(1).source = "Database"
    hie.MolecularWeight(2).hierarchy = 14
    hie.MolecularWeight(2).source = "Group Contribution"
    hie.MolecularWeight(3).hierarchy = 15
    hie.MolecularWeight(3).source = "Input"
    
    hie.BoilingPoint(1).hierarchy = 16
    hie.BoilingPoint(1).source = "Database"
    hie.BoilingPoint(2).hierarchy = 17
    hie.BoilingPoint(2).source = "Input"
    
    hie.MolarVolumeBoilingPoint(1).hierarchy = 21
    hie.MolarVolumeBoilingPoint(1).source = "Group Contribution"
    hie.MolarVolumeBoilingPoint(2).hierarchy = 22
    hie.MolarVolumeBoilingPoint(2).source = "Input"
    
    hie.LiquidDensity(1).hierarchy = 18
    hie.LiquidDensity(1).source = "Database"
    hie.LiquidDensity(2).hierarchy = 19
    hie.LiquidDensity(2).source = "Group Contribution"
    hie.LiquidDensity(3).hierarchy = 20
    hie.LiquidDensity(3).source = "Input"
    
    hie.MolarVolumeOperatingT(1).hierarchy = 23
    hie.MolarVolumeOperatingT(1).source = "Database"
    hie.MolarVolumeOperatingT(2).hierarchy = 24
    hie.MolarVolumeOperatingT(2).source = "Group Contribution"
    hie.MolarVolumeOperatingT(3).hierarchy = 25
    hie.MolarVolumeOperatingT(3).source = "Input"
    
    hie.RefractiveIndex(1).hierarchy = 26
    hie.RefractiveIndex(1).source = "Database"
    hie.RefractiveIndex(2).hierarchy = 27
    hie.RefractiveIndex(2).source = "Input"
    
    hie.AqueousSolubility(1).hierarchy = 28
    hie.AqueousSolubility(1).source = "Fit"
    hie.AqueousSolubility(2).hierarchy = 29
    hie.AqueousSolubility(2).source = "UNIFAC at Operating T"
    hie.AqueousSolubility(3).hierarchy = 30
    hie.AqueousSolubility(3).source = "Database"
    hie.AqueousSolubility(4).hierarchy = 31
    hie.AqueousSolubility(4).source = "UNIFAC at Database T"
    hie.AqueousSolubility(5).hierarchy = 32
    hie.AqueousSolubility(5).source = "Input"
    
    hie.OctWaterPartCoeff(1).hierarchy = 35
    hie.OctWaterPartCoeff(1).source = "UNIFAC at Operating T"
    hie.OctWaterPartCoeff(2).hierarchy = 33
    hie.OctWaterPartCoeff(2).source = "Database"
    hie.OctWaterPartCoeff(3).hierarchy = 34
    hie.OctWaterPartCoeff(3).source = "UNIFAC at Database T"
    hie.OctWaterPartCoeff(4).hierarchy = 36
    hie.OctWaterPartCoeff(4).source = "Input"
    
    hie.LiquidDiffusivityMWTlt1000(1).hierarchy = 38
    hie.LiquidDiffusivityMWTlt1000(1).source = "Hayduk & Laudie"
    hie.LiquidDiffusivityMWTlt1000(2).hierarchy = 39
    hie.LiquidDiffusivityMWTlt1000(2).source = "Wilke-Chang"
    hie.LiquidDiffusivityMWTlt1000(3).hierarchy = 37
    hie.LiquidDiffusivityMWTlt1000(3).source = "Polson"
    hie.LiquidDiffusivityMWTlt1000(4).hierarchy = 40
    hie.LiquidDiffusivityMWTlt1000(4).source = "Input"
    
    hie.LiquidDiffusivityMWTgt1000(1).hierarchy = 37
    hie.LiquidDiffusivityMWTgt1000(1).source = "Polson"
    hie.LiquidDiffusivityMWTgt1000(2).hierarchy = 38
    hie.LiquidDiffusivityMWTgt1000(2).source = "Hayduk & Laudie"
    hie.LiquidDiffusivityMWTgt1000(3).hierarchy = 39
    hie.LiquidDiffusivityMWTgt1000(3).source = "Wilke-Chang"
    hie.LiquidDiffusivityMWTgt1000(4).hierarchy = 40
    hie.LiquidDiffusivityMWTgt1000(4).source = "Input"
    
    hie.GasDiffusivity(1).hierarchy = 41
    hie.GasDiffusivity(1).source = "Wilke-Lee"
    hie.GasDiffusivity(2).hierarchy = 42
    hie.GasDiffusivity(2).source = "Input"
    
    hie.WaterDensity(1).hierarchy = 43
    hie.WaterDensity(1).source = "Correlation"
    hie.WaterDensity(2).hierarchy = 44
    hie.WaterDensity(2).source = "Input"
    
    hie.WaterViscosity(1).hierarchy = 45
    hie.WaterViscosity(1).source = "Correlation"
    hie.WaterViscosity(2).hierarchy = 46
    hie.WaterViscosity(2).source = "Input"
    
    hie.WaterSurfaceTension(1).hierarchy = 47
    hie.WaterSurfaceTension(1).source = "Correlation"
    hie.WaterSurfaceTension(2).hierarchy = 48
    hie.WaterSurfaceTension(2).source = "Input"
    
    hie.AirDensity(1).hierarchy = 49
    hie.AirDensity(1).source = "Correlation"
    hie.AirDensity(2).hierarchy = 50
    hie.AirDensity(2).source = "Input"
    
    hie.AirViscosity(1).hierarchy = 51
    hie.AirViscosity(1).source = "Correlation"
    hie.AirViscosity(2).hierarchy = 52
    hie.AirViscosity(2).source = "Input"

End Sub

Sub InitializeHilights()
    hilight.VaporPressure.PreviousIndex = -1
    hilight.ActivityCoefficient.PreviousIndex = -1
    hilight.HenrysConstant.PreviousIndex = -1
    hilight.MolecularWeight.PreviousIndex = -1
    hilight.BoilingPoint.PreviousIndex = -1
    hilight.LiquidDensity.PreviousIndex = -1
    hilight.MolarVolumeOperatingT.PreviousIndex = -1
    hilight.MolarVolumeBoilingPoint.PreviousIndex = -1
    hilight.RefractiveIndex.PreviousIndex = -1
    hilight.AqueousSolubility.PreviousIndex = -1
    hilight.OctWaterPartCoeff.PreviousIndex = -1
    hilight.LiquidDiffusivity.PreviousIndex = -1
    hilight.GasDiffusivity.PreviousIndex = -1
    hilight.WaterDensity.PreviousIndex = -1
    hilight.WaterViscosity.PreviousIndex = -1
    hilight.WaterSurfaceTension.PreviousIndex = -1
    hilight.AirDensity.PreviousIndex = -1
    hilight.AirViscosity.PreviousIndex = -1

End Sub

Sub InitializePROPandHAVEAVAILABLEArrays()

    For I = 1 To NUMBER_OF_PROPERTIES
        HaveProperty(I) = False
    Next I

    For I = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
        PROPAVAILABLE(I) = False
    Next I

End Sub

Sub InitializeUserInputs()
'*** This subroutine will initialize the input variables for all
'*** the properties.  It will be needed to successfully transfer from
'*** chemical to chemical

    '*** Vapor Pressure
    phprop.VaporPressure.input.Value = -1#
    phprop.VaporPressure.input.temperature = -1E+25

    '*** Activity Coefficient
    phprop.ActivityCoefficient.input.Value = -1#
    phprop.ActivityCoefficient.input.temperature = -1E+25

    '*** Henry's Constant
    phprop.HenrysConstant.input.Value = -1#
    phprop.HenrysConstant.input.temperature = -1E+25

    '*** Molecular Weight
    phprop.MolecularWeight.input.Value = -1#

    '*** Normal Boiling Point
    phprop.BoilingPoint.input.Value = -1E+25

    '*** Liquid Density
    phprop.LiquidDensity.input.Value = -1#
    phprop.LiquidDensity.input.temperature = -1E+25

    '*** Molar Volume at Operating Temperature
    phprop.MolarVolume.operatingT.input.Value = -1#
    phprop.MolarVolume.operatingT.input.temperature = -1E+25

    '*** Molar Volume at Normal Boiling Point
    phprop.MolarVolume.BoilingPoint.input.Value = -1#
    phprop.MolarVolume.BoilingPoint.input.temperature = -1E+25

    '*** Refractive Index
    phprop.RefractiveIndex.input.Value = -1#

    '*** Aqueous Solubility
    phprop.AqueousSolubility.input.Value = -1#
    phprop.AqueousSolubility.input.temperature = -1E+25

    '*** Octanol Water Partition Coefficient
    phprop.OctWaterPartCoeff.input.Value = -1E+25
    phprop.OctWaterPartCoeff.input.temperature = -1E+25

    '*** Liquid Diffusivity
    phprop.LiquidDiffusivity.input.Value = -1#
    phprop.LiquidDiffusivity.input.temperature = -1E+25

    '*** Gas Diffusivity
    phprop.GasDiffusivity.input.Value = -1#
    phprop.GasDiffusivity.input.temperature = -1E+25

    '*** Water Density
    phprop.WaterDensity.input.Value = -1#
    phprop.WaterDensity.input.temperature = -1E+25

    '*** Water Viscosity
    phprop.WaterViscosity.input.Value = -1#
    phprop.WaterViscosity.input.temperature = -1E+25

    '*** Water Surface Tension
    phprop.WaterSurfaceTension.input.Value = -1#
    phprop.WaterSurfaceTension.input.temperature = -1E+25

    '*** Air Density
    phprop.AirDensity.input.Value = -1#
    phprop.AirDensity.input.temperature = -1E+25

    '*** Air Viscosity
    phprop.AirViscosity.input.Value = -1#
    phprop.AirViscosity.input.temperature = -1E+25

End Sub

Attribute VB_Name = "LastFewMod"


Type LastFewFilesType
  WhichApp As Integer
  WhichForm As Integer
  MenuIDNum_LastFewStartsAt As Integer
  MenuIDNum_FinalSeparator As Integer
  FileNames(1 To 4) As String
  INI_VariablePrefix As String
End Type

Global Current_LastFewFilesRec As LastFewFilesType

Global Const LASTFEW_WHICHAPP_STEPP = 1
Global Const LASTFEW_WHICHAPP_ASAP = 2
Global Const LASTFEW_WHICHAPP_ADSIM = 3

Global Const LASTFEW_STEPP_contam_prop_form = 101
Global Const LASTFEW_ASAP_frmPTADScreen1 = 201
Global Const LASTFEW_ASAP_frmPTADScreen2 = 202
Global Const LASTFEW_ASAP_frmBubble_DESIGN = 203
Global Const LASTFEW_ASAP_frmBubble_RATING = 204
Global Const LASTFEW_ASAP_frmSurface_DESIGN = 205
Global Const LASTFEW_ASAP_frmSurface_RATING = 206
Global Const LASTFEW_ADSIM_frmPFPSDM = 301

Sub LastFewFiles_ChangeCaption(MenuItemID As Integer, ChangeTo As String)

  Call LastFewFiles_ChangeSomething(MenuItemID, "c", ChangeTo, 0)

End Sub

Sub LastFewFiles_ChangeSomething(MenuItemID As Integer, ChangeWhat As String, StrParam1 As String, IntParam1 As Integer)
Dim mm As Menu

  Select Case Current_LastFewFilesRec.WhichApp
    Case LASTFEW_WHICHAPP_STEPP
      Select Case Current_LastFewFilesRec.WhichForm
        Case LASTFEW_STEPP_contam_prop_form
          Set mm = contam_prop_form!mnuFile(MenuItemID)
      End Select
    'Case LASTFEW_WHICHAPP_ASAP
    '  Select Case Current_LastFewFilesRec.WhichForm
    '    Case LASTFEW_ASAP_frmPTADScreen1
    '      Set mm = frmPTADScreen1!mnuFile(MenuItemID)
    '    Case LASTFEW_ASAP_frmPTADScreen2
    '      Set mm = frmPTADScreen2!mnuFile(MenuItemID)
    '    Case LASTFEW_ASAP_frmBubble_DESIGN
    '      Set mm = frmBubble!mnuFile(MenuItemID)
    '    Case LASTFEW_ASAP_frmBubble_RATING
    '      Set mm = frmBubble!mnuFile(MenuItemID)
    '    Case LASTFEW_ASAP_frmSurface_DESIGN
    '      Set mm = frmSurface!mnuFile(MenuItemID)
    '    Case LASTFEW_ASAP_frmSurface_RATING
    '      Set mm = frmSurface!mnuFile(MenuItemID)
    '  End Select
    'Case LASTFEW_WHICHAPP_ADSIM
    '  Select Case Current_LastFewFilesRec.WhichForm
    '    Case LASTFEW_ADSIM_frmPFPSDM
    '      Set mm = frmPFPSDM!mnuFileItem(MenuItemID)
    '  End Select
  End Select

  Call LastFewFiles_ChangeSomething0(mm, ChangeWhat, StrParam1, IntParam1)

End Sub

Sub LastFewFiles_ChangeSomething0(mm As Menu, ChangeWhat As String, StrParam1 As String, IntParam1 As Integer)

  If (UCase$(ChangeWhat) = "C") Then
    mm.Caption = StrParam1
  ElseIf (UCase$(ChangeWhat) = "V") Then
    mm.Visible = IntParam1
  Else
    'Do nothing.
  End If

End Sub

Sub LastFewFiles_ChangeVisibility(MenuItemID As Integer, ChangeTo As Integer)

  Call LastFewFiles_ChangeSomething(MenuItemID, "v", "", ChangeTo)

End Sub

Sub LastFewFiles_DisplayList()
Dim I As Integer
Dim J As Integer
Dim NumVisible As Integer
Dim NewCaption As String

  NumVisible = 0
  For I = 1 To 4
    J = Current_LastFewFilesRec.MenuIDNum_LastFewStartsAt + I - 1
    If (Current_LastFewFilesRec.FileNames(I) <> "") Then
      NewCaption = "&" & Trim$(Str$(I)) & " " & Current_LastFewFilesRec.FileNames(I)
      Call LastFewFiles_ChangeCaption(J, NewCaption)

      'Current_LastFewFilesRec.FileNames(i))
      Call LastFewFiles_ChangeVisibility(J, True)
      NumVisible = NumVisible + 1
    Else
      Call LastFewFiles_ChangeCaption(J, "")
      Call LastFewFiles_ChangeVisibility(J, False)
    End If
  Next I
  
  If (NumVisible = 0) Then
    Call LastFewFiles_ChangeVisibility(Current_LastFewFilesRec.MenuIDNum_FinalSeparator, False)
  Else
    Call LastFewFiles_ChangeVisibility(Current_LastFewFilesRec.MenuIDNum_FinalSeparator, True)
  End If

End Sub

Sub LastFewFiles_InitializeList(WhichApp As Integer, WhichForm As Integer)
Dim I As Integer
Dim thisvarname As String

  Current_LastFewFilesRec.WhichApp = WhichApp
  Current_LastFewFilesRec.WhichForm = WhichForm
  Current_LastFewFilesRec.MenuIDNum_LastFewStartsAt = 191
  Current_LastFewFilesRec.MenuIDNum_FinalSeparator = 199

  Select Case WhichApp
    Case LASTFEW_WHICHAPP_STEPP
      Select Case WhichForm
        Case LASTFEW_STEPP_contam_prop_form
          Current_LastFewFilesRec.INI_VariablePrefix = "MAIN"
      End Select
    Case LASTFEW_WHICHAPP_ASAP
      Select Case WhichForm
        Case LASTFEW_ASAP_frmPTADScreen1
          Current_LastFewFilesRec.INI_VariablePrefix = "PTAD1"
        Case LASTFEW_ASAP_frmPTADScreen2
          Current_LastFewFilesRec.INI_VariablePrefix = "PTAD2"
        Case LASTFEW_ASAP_frmBubble_DESIGN
          Current_LastFewFilesRec.INI_VariablePrefix = "BUB1"
        Case LASTFEW_ASAP_frmBubble_RATING
          Current_LastFewFilesRec.INI_VariablePrefix = "BUB2"
        Case LASTFEW_ASAP_frmSurface_DESIGN
          Current_LastFewFilesRec.INI_VariablePrefix = "SUR1"
        Case LASTFEW_ASAP_frmSurface_RATING
          Current_LastFewFilesRec.INI_VariablePrefix = "SUR2"
      End Select
    Case LASTFEW_WHICHAPP_ADSIM
      Select Case WhichForm
        Case LASTFEW_ADSIM_frmPFPSDM
          Current_LastFewFilesRec.INI_VariablePrefix = "MAIN"
      End Select
  End Select

  For I = 1 To 4
    thisvarname = Current_LastFewFilesRec.INI_VariablePrefix & "_OldFile" & Trim$(Str$(I))
    'Current_LastFewFilesRec.FileNames(i) = Trim$(INI_Getsetting(INI_FileName, INI_ProgramType, thisvarname))
    Current_LastFewFilesRec.FileNames(I) = Trim$(INI_Getsetting(thisvarname))
  Next I

  'Update display from internal memory.
  Call LastFewFiles_DisplayList

End Sub

Sub LastFewFiles_MoveFilenameToTop(fn As String)
Dim found As Integer
Dim I As Integer
Dim fn_this As String
Dim thisvarname As String

  found = 0
  For I = 1 To 4
    fn_this = Trim$(Current_LastFewFilesRec.FileNames(I))
    If (fn_this <> "") Then
      If (UCase$(fn_this) = UCase$(fn)) Then
        found = I
        Exit For
      End If
    End If
  Next I

  If (found <> 0) Then
    For I = found - 1 To 1 Step -1
      Current_LastFewFilesRec.FileNames(I + 1) = Current_LastFewFilesRec.FileNames(I)
    Next I
  Else
    For I = 3 To 1 Step -1
      Current_LastFewFilesRec.FileNames(I + 1) = Current_LastFewFilesRec.FileNames(I)
    Next I
  End If
  Current_LastFewFilesRec.FileNames(1) = UCase$(Trim$(fn))

  'Update display from internal memory.
  Call LastFewFiles_DisplayList

  'Update the .INI file.
  For I = 1 To 4
    thisvarname = Current_LastFewFilesRec.INI_VariablePrefix & "_OldFile" & Trim$(Str$(I))
    Call ini_putsetting(thisvarname, UCase$(Trim$(Current_LastFewFilesRec.FileNames(I))))
  Next I

End Sub

Attribute VB_Name = "LaunchFileVia"
Option Explicit

Global Const OSTYPE_WIN95 = 1
Global Const OSTYPE_WINNT = 2

Global Const LAUNCHFILEVIA_IS_DEBUG_MODE_ON = False






Const LaunchFileVia_declarations_end = True


'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaStartMethod_0( _
    fn_Dir As String, _
    fn_File As String, _
    OSTYPE As Integer) As Boolean
Dim RetVal As Integer
Dim CmdLine As String
    
  On Error GoTo err_LaunchFileViaStartMethod_0
  
  If (Trim$(fn_Dir) <> "") Then
    ChDir Trim$(fn_Dir)
  End If
  Select Case OSTYPE
    Case OSTYPE_WIN95:
      CmdLine = "command.com /c start " & Trim$(fn_File)
    Case OSTYPE_WINNT:
      CmdLine = "cmd /c start " & Trim$(fn_File)
  End Select
  If (LAUNCHFILEVIA_IS_DEBUG_MODE_ON) Then
    MsgBox "CmdLine = `" & CmdLine & "`"
  End If
  RetVal = 0 * Shell(CmdLine, 1)
  
  LaunchFileViaStartMethod_0 = True
  Exit Function
    
exit_err_LaunchFileViaStartMethod_0:
  LaunchFileViaStartMethod_0 = False
  Exit Function
err_LaunchFileViaStartMethod_0:
  Resume exit_err_LaunchFileViaStartMethod_0
End Function


'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaExecMethod( _
    fn_Dir As String, _
    fn_File As String) As Boolean
Dim RetVal As Integer
Dim CmdLine As String
    
  On Error GoTo err_LaunchFileViaExecMethod
  
  If (Trim$(fn_Dir) <> "") Then
    ChDir Trim$(fn_Dir)
    On Error Resume Next
    ChDrive Trim$(fn_Dir)
    On Error GoTo err_LaunchFileViaExecMethod
  End If
  CmdLine = Trim$(fn_File)
  If (LAUNCHFILEVIA_IS_DEBUG_MODE_ON) Then
    MsgBox "CmdLine = `" & CmdLine & "`"
  End If
  'CmdLine = Dir("*.exe")
  
  RetVal = 0 * Shell(CmdLine, 1)
  
  LaunchFileViaExecMethod = True
  Exit Function
    
exit_err_LaunchFileViaExecMethod:
  LaunchFileViaExecMethod = False
  Exit Function
err_LaunchFileViaExecMethod:
  Resume exit_err_LaunchFileViaExecMethod
End Function


'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaStartMethod( _
    fn_Dir As String, _
    fn_File As String) As Boolean
Dim RetValBool As Boolean
  RetValBool = LaunchFileViaStartMethod_0( _
      Trim$(fn_Dir), _
      Trim$(fn_File), _
      OSTYPE_WINNT)
  If (Not RetValBool) Then
    RetValBool = LaunchFileViaStartMethod_0( _
        Trim$(fn_Dir), _
        Trim$(fn_File), _
        OSTYPE_WIN95)
  End If
  LaunchFileViaStartMethod = RetValBool
End Function


'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFile_General( _
    fn_Dir As String, _
    fn_File As String) As Boolean
Dim RetValBool As Boolean
  If (Right$(Trim$(UCase$(fn_File)), 4) = ".EXE") Or _
      (Right$(Trim$(UCase$(fn_File)), 4) = ".COM") Or _
      (Right$(Trim$(UCase$(fn_File)), 4) = ".BAT") Then
    RetValBool = LaunchFileViaExecMethod(fn_Dir, fn_File)
  Else
    RetValBool = LaunchFileViaStartMethod(fn_Dir, fn_File)
  End If
  LaunchFile_General = RetValBool
End Function




Attribute VB_Name = "LicData"
Option Explicit

Global Const AppProgramKey = "STEPP"
Global Const AppCopyrightYears = "1995-1998"
Global Const AppName = "StEPP"
Global AppWillExpire As Integer     'true/false
Global AppExpireYear As Integer
Global AppExpireMonth As Integer
Global AppExpireDay As Integer
Global Global_fpath_dir_CPAS As String

Global Const TURN_LICENSING_OFF = False

'Global Const LICFILE_GetInfoProgram = "MTCHK.EXE"
Global Const LICFILE_GetInfoProgram = "CPASCHK.EXE"
Global Const LICFILE_GetInfoProgramParams = "-GET_INFO"

'Global Const LICFILE_LicName = "ETDOT10.LIC"
Global Const LICFILE_LicName = "CPAS.LIC"
'Global Const LICFILE_NewLicInfo = "MTNEWLIC.X"
'Global Const LICFILE_GoodSerialNumber = "OKNUM.X"
'Global Const LICFILE_BadSerialNumber = "BADNUM.X"
Global Const LICFILE_GoodLicenseFile = "GO.X"
Global Const LICFILE_BadLicenseFile = "EXIT.X"

Type LicFile_Data_Type
  'Z_PROGRAMKEY_ADS As String
  'Z_PROGRAMKEY_ASAP As String
  'Z_PROGRAMKEY_STEPP As String
  Z_SERIALNUMBER As String
  Z_USERNAME As String
  Z_USERCOMPANY As String
  Z_PROGRAMKEY As String
  Z_EXPIRATIONDATE As String
  Z_RELEASETYPE As String
  Z_VERSIONCODE As String
  Z_VERSIONTYPE As String
  'ZZ_LASTEXECUTIONDATE As String
  'ZZ_LASTEXECUTIONTIME As String
End Type
Global lfd As LicFile_Data_Type

Function get_expiration_info() As String
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      get_expiration_info = "No Expiration Date (Student Copy)"
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      get_expiration_info = "No Expiration Date (Professional Copy)"
    Case Else:
      get_expiration_info = "Expires on " & Trim$(Str$(AppExpireMonth)) & "/" & Trim$(Str$(AppExpireDay)) & "/" & Trim$(Str$(AppExpireYear))
  End Select
End Function

Function get_program_version_with_build_info() As String
Dim ver As String
Dim capped As String
  capped = LCase$(Trim$(lfd.Z_RELEASETYPE))
  If (Len(capped) >= 1) Then
    Mid$(capped, 1, 1) = UCase$(Mid$(capped, 1, 1))
  End If
  ver = lfd.Z_VERSIONCODE & " (" & capped & ")"
  'ver = ver & Trim$(App.Major) & "."
  'ver = ver & Trim$(App.Minor) & "."
  'ver = ver & Trim$(App.Revision)
  get_program_version_with_build_info = ver
End Function

Sub LicFileData_Read(return_fpath_dir_CPAS As String)
Dim WinDir As String
Dim fn_CPASCHK As String
Dim CmdLine As String
Dim time_start As Double
Dim fn_GoodLicenseFile As String
Dim fn_BadLicenseFile As String
Dim time_elapsed As Double
Dim f As Integer
Dim RetVal As Integer
Dim copy_z_expirationdate As String
Dim temp As String
Dim fn_CPASDIR_INI As String
Dim fpath_dir_CPAS As String

  'GET CPAS DIRECTORY NAME.
  fn_CPASDIR_INI = App.Path & "\CPASDIR.INI"
  If (Not fileexists(fn_CPASDIR_INI)) Then
    'UNABLE TO READ LICENSE FILE DATA.
    GoTo err_Cant_Read_Licensing_Data
  End If
  temp = Trim$(INI_GetSetting00(fn_CPASDIR_INI, "Directory", "CPASDIR"))
  fpath_dir_CPAS = temp
  return_fpath_dir_CPAS = temp

  'CHECK ON LICENSE FILE.
  WinDir = GetWindowsDir()
  'fn_MTCHK = WinDir & "\" & LICFILE_GetInfoProgram
  fn_CPASCHK = fpath_dir_CPAS & "\DBASE\" & LICFILE_GetInfoProgram
  If (fileexists(fn_CPASCHK)) Then
    'THAT'S OKAY.
  Else
    'UNABLE TO READ LICENSE FILE DATA.
    GoTo err_Cant_Read_Licensing_Data
  End If
  CmdLine = fn_CPASCHK & " " & LICFILE_GetInfoProgramParams
  CmdLine = CmdLine & " " & fpath_dir_CPAS
  CmdLine = CmdLine & " " & AppProgramKey
  'fn_GoodLicenseFile = WinDir & "\" & LICFILE_GoodLicenseFile
  'fn_BadLicenseFile = WinDir & "\" & LICFILE_BadLicenseFile
  fn_GoodLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_GoodLicenseFile
  fn_BadLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_BadLicenseFile
  time_start = Timer
  RetVal = 0 * Shell(CmdLine, 1)
  Do While (1 = 1)
    DoEvents
    If (fileexists(fn_GoodLicenseFile)) Then
      'Kill fn_GoodLicenseFile    'DELETED BELOW.
      DoEvents
      Exit Do
    End If
    If (fileexists(fn_BadLicenseFile)) Then
      Kill fn_BadLicenseFile
      DoEvents
      End
    End If
    time_elapsed = Timer - time_start
    If (time_elapsed > 10#) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  Loop

  'READ IN LICENSE FILE INFO.
  f = FreeFile
  Open fn_GoodLicenseFile For Input As #f
  Line Input #f, lfd.Z_SERIALNUMBER
  Line Input #f, lfd.Z_USERNAME
  Line Input #f, lfd.Z_USERCOMPANY
  Line Input #f, lfd.Z_PROGRAMKEY
  Line Input #f, lfd.Z_EXPIRATIONDATE
  Line Input #f, lfd.Z_RELEASETYPE
  Line Input #f, lfd.Z_VERSIONCODE
  Line Input #f, lfd.Z_VERSIONTYPE
  Close #f
  Kill fn_GoodLicenseFile
  
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      AppWillExpire = False
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      AppWillExpire = False
    Case Else:
      AppWillExpire = True
      copy_z_expirationdate = Trim$(UCase$(lfd.Z_EXPIRATIONDATE))
      copy_z_expirationdate = Parser_RemoveCharacters(" ", copy_z_expirationdate)
      If (Parser_GetNumArgs(",", copy_z_expirationdate) = 3) Then
        Call Parser_GetArg(",", copy_z_expirationdate, 1, temp)
        AppExpireMonth = CInt(Val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 2, temp)
        AppExpireDay = CInt(Val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 3, temp)
        AppExpireYear = CInt(Val(temp))
      End If
  End Select
  
  Exit Sub

err_Cant_Read_Licensing_Data:
  MsgBox "Unable to read licensing data.  You may need to re-install the software.", 48, AppName
  End
End Sub

Sub Parser_GetArg(sepchar As String, inline As String, ArgNum As Integer, RetStr As String)
Dim i As Integer
Dim J As Integer
  RetStr = ""
  J = 1
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      J = J + 1
      If (J > ArgNum) Then Exit For
    Else
      If (J = ArgNum) Then
        RetStr = RetStr + Mid$(inline, i, 1)
      End If
    End If
  Next i
End Sub

Function Parser_GetNumArgs(sepchar As String, inline As String) As Integer
Dim NumArgs As Integer
Dim i As Integer
  NumArgs = 1     'between chr #1 and first separator char.
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      NumArgs = NumArgs + 1
    End If
  Next i
  Parser_GetNumArgs = NumArgs
End Function

Function Parser_RemoveCharacters(remove_char As String, inline As String) As String
Dim RetStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  RetStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (thisc = remove_char) Then ok_append = False
    If (ok_append) Then
      RetStr = RetStr & thisc
    End If
  Next i
  Parser_RemoveCharacters = RetStr
End Function

Function Parser_RemoveDuplicateSeparators(sepchar As String, inline As String) As String
Dim RetStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  RetStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (i > 1) Then
      If (thisc = sepchar) Then
        If (Right$(RetStr, 1) = sepchar) Then
          ok_append = False
        End If
      End If
    End If
    If (ok_append) Then
      RetStr = RetStr & thisc
    End If
  Next i
  Parser_RemoveDuplicateSeparators = RetStr
End Function

'NOTE: THERE IS NO RECURSION CHECKER!  IT IS POSSIBLE
'TO SEND THIS ROUTINE INTO AN INFINITE LOOP WITH
'POORLY CHOSEN PARAMETERS.
Function Parser_ReplaceStrings( _
    InputStr As String, _
    OldStr As String, _
    NewStr As String) As String
'Dim Instr_Result As String
Dim Instr_Result As Integer
Dim WorkingStr As String
Dim Part1 As String
Dim Part2 As String
  WorkingStr = InputStr
  
''temp
'Open "c:\test.out" For Output As #1
'Dim i As Integer
'For i = 1 To Len(WorkingStr)
'  Print #1, Asc(Mid$(WorkingStr, i, 1))
'Next i
'Close #1
'  MsgBox WorkingStr
  
  Do While (1 = 1)
    Instr_Result = InStr(WorkingStr, OldStr)
    If (Instr_Result = 0) Then
      Exit Do
    End If
    If (Instr_Result > 1) Then
      Part1 = Left$(WorkingStr, Instr_Result - 1)
    End If
    If (Instr_Result < Len(WorkingStr) - Len(OldStr) + 1) Then
      Part2 = Right$(WorkingStr, Len(WorkingStr) - Instr_Result - Len(OldStr) + 1)
    End If
    WorkingStr = Part1 & NewStr & Part2
'123456789012
'testingXXout           12-2+1=11       12-8-2+1=3
'testingXXo             10-2+1=9        10-8-2+1=1
'testingXX              9-2+1=8         9-8-2+1=0
'-----------------------------------------------------
'12345678901
'testingXout            12-2+1=11       11-8-1+1=3
'testingXo              10-2+1=9        9-8-1+1=1
'testingX               9-2+1=8         8-8-1+1=0
  Loop
  
'Open "c:\test.out" For Output As #1
'For i = 1 To Len(WorkingStr)
'  Print #1, Asc(Mid$(WorkingStr, i, 1))
'Next i
'Close #1
  
  Parser_ReplaceStrings = WorkingStr
End Function


'Function get_program_version_with_build_info() As String
'Dim ver As String
'Dim capped As String
'  capped = LCase$(Trim$(lfd.Z_RELEASETYPE))
'  If (Len(capped) >= 1) Then
'    Mid$(capped, 1, 1) = UCase$(Mid$(capped, 1, 1))
'  End If
'  ver = lfd.Z_VERSIONCODE & " (" & capped & ")"
'  'ver = ver & Trim$(App.Major) & "."
'  'ver = ver & Trim$(App.Minor) & "."
'  'ver = ver & Trim$(App.Revision)
'  get_program_version_with_build_info = ver
'End Function

Option Explicit

Global Const AppCopyrightYears = "1993-1998"
Global Const AppName = "StEPP"
Global AppWillExpire As Integer     'true/false
Global AppExpireYear As Integer
Global AppExpireMonth As Integer
Global AppExpireDay As Integer




Global Const LICFILE_GetInfoProgram = "MTCHK.EXE"
Global Const LICFILE_GetInfoProgramParams = "-GET_INFO"

Global Const LICFILE_LicName = "ETDOT10.LIC"
'Global Const LICFILE_NewLicInfo = "MTNEWLIC.X"
'Global Const LICFILE_GoodSerialNumber = "OKNUM.X"
'Global Const LICFILE_BadSerialNumber = "BADNUM.X"
Global Const LICFILE_GoodLicenseFile = "GO.X"
Global Const LICFILE_BadLicenseFile = "EXIT.X"

Type LicFile_Data_Type
  Z_EXPIRATIONDATE As String
  'Z_PROGRAMKEY_ADS As String
  'Z_PROGRAMKEY_ASAP As String
  'Z_PROGRAMKEY_STEPP As String
  Z_RELEASETYPE As String
  Z_SERIALNUMBER As String
  Z_USERCOMPANY As String
  Z_USERNAME As String
  Z_VERSIONCODE As String
  Z_VERSIONTYPE As String
  'ZZ_LASTEXECUTIONDATE As String
  'ZZ_LASTEXECUTIONTIME As String
End Type
Global lfd As LicFile_Data_Type

Function get_expiration_info () As String
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("INTERNAL_STUDENT")):
      get_expiration_info = "No Expiration Date (Student Copy)"
    Case Trim$(UCase$("EXTERNAL_WONT_EXPIRE")):
      get_expiration_info = "No Expiration Date (Professional Copy)"
    Case Else:
      get_expiration_info = "Expires on " & Trim$(Str$(AppExpireMonth)) & "/" & Trim$(Str$(AppExpireDay)) & "/" & Trim$(Str$(AppExpireYear))
  End Select
End Function

Function get_program_version_with_build_info () As String
Dim ver As String
Dim capped As String
  capped = LCase$(Trim$(lfd.Z_RELEASETYPE))
  If (Len(capped) >= 1) Then
    Mid$(capped, 1, 1) = UCase$(Mid$(capped, 1, 1))
  End If
  ver = lfd.Z_VERSIONCODE & " (" & capped & ")"
  'ver = ver & Trim$(App.Major) & "."
  'ver = ver & Trim$(App.Minor) & "."
  'ver = ver & Trim$(App.Revision)
  get_program_version_with_build_info = ver
End Function

Sub LicFileData_Read ()
Dim WinDir As String
Dim fn_MTCHK As String
Dim cmdline As String
Dim time_start As Double
Dim fn_GoodLicenseFile As String
Dim fn_BadLicenseFile As String
Dim time_elapsed As Double
Dim f As Integer
Dim retval As Integer
Dim copy_z_expirationdate As String
Dim temp As String

  WinDir = GetWindowsDir()
  fn_MTCHK = WinDir & "\" & LICFILE_GetInfoProgram
  If (fileexists(fn_MTCHK)) Then
    'THAT'S OKAY.
  Else
    'UNABLE TO READ LICENSE FILE DATA.
    GoTo err_Cant_Read_Licensing_Data
  End If
  cmdline = fn_MTCHK & " " & LICFILE_GetInfoProgramParams
  time_start = Timer
  fn_GoodLicenseFile = WinDir & "\" & LICFILE_GoodLicenseFile
  fn_BadLicenseFile = WinDir & "\" & LICFILE_BadLicenseFile
  retval = Shell(cmdline, 1)
  Do While (1 = 1)
    DoEvents
    If (fileexists(fn_GoodLicenseFile)) Then
      'Kill fn_GoodLicenseFile    'DELETED BELOW.
      DoEvents
      Exit Do
    End If
    If (fileexists(fn_BadLicenseFile)) Then
      Kill fn_BadLicenseFile
      DoEvents
      End
    End If
    time_elapsed = Timer - time_start
    If (time_elapsed > 10#) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  Loop

  'READ IN LICENSE FILE INFO.
  f = FreeFile
  Open fn_GoodLicenseFile For Input As #f
  Line Input #f, lfd.Z_EXPIRATIONDATE
  Line Input #f, lfd.Z_RELEASETYPE
  Line Input #f, lfd.Z_SERIALNUMBER
  Line Input #f, lfd.Z_USERCOMPANY
  Line Input #f, lfd.Z_USERNAME
  Line Input #f, lfd.Z_VERSIONCODE
  Line Input #f, lfd.Z_VERSIONTYPE
  Close #f
  Kill fn_GoodLicenseFile
  
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("INTERNAL_STUDENT")):
      AppWillExpire = False
    Case Trim$(UCase$("EXTERNAL_WONT_EXPIRE")):
      AppWillExpire = False
    Case Else:
      AppWillExpire = True
      copy_z_expirationdate = Trim$(UCase$(lfd.Z_EXPIRATIONDATE))
      copy_z_expirationdate = Parser_RemoveCharacters(" ", copy_z_expirationdate)
      If (Parser_GetNumArgs(",", copy_z_expirationdate) = 3) Then
        Call Parser_GetArg(",", copy_z_expirationdate, 1, temp)
        AppExpireMonth = CInt(Val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 2, temp)
        AppExpireDay = CInt(Val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 3, temp)
        AppExpireYear = CInt(Val(temp))
      End If
  End Select
  
  Exit Sub

err_Cant_Read_Licensing_Data:
  MsgBox "Unable to read licensing data.  You may need to re-install the software.", 48, AppName
  End
End Sub

Sub Parser_GetArg (sepchar As String, inline As String, ArgNum As Integer, retStr As String)
Dim i As Integer
Dim j As Integer
  retStr = ""
  j = 1
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      j = j + 1
      If (j > ArgNum) Then Exit For
    Else
      If (j = ArgNum) Then
        retStr = retStr + Mid$(inline, i, 1)
      End If
    End If
  Next i
End Sub

Function Parser_GetNumArgs (sepchar As String, inline As String) As Integer
Dim NumArgs As Integer
Dim i As Integer
  NumArgs = 1     'between chr #1 and first separator char.
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      NumArgs = NumArgs + 1
    End If
  Next i
  Parser_GetNumArgs = NumArgs
End Function

Function Parser_RemoveCharacters (remove_char As String, inline As String) As String
Dim retStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (thisc = remove_char) Then ok_append = False
    If (ok_append) Then
      retStr = retStr & thisc
    End If
  Next i
  Parser_RemoveCharacters = retStr
End Function

Function Parser_RemoveDuplicateSeparators (sepchar As String, inline As String) As String
Dim retStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (i > 1) Then
      If (thisc = sepchar) Then
        If (Right$(retStr, 1) = sepchar) Then
          ok_append = False
        End If
      End If
    End If
    If (ok_append) Then
      retStr = retStr & thisc
    End If
  Next i
  Parser_RemoveDuplicateSeparators = retStr
End Function

Option Explicit

Global Const AppProgramKey = "STEPP"
Global Const AppCopyrightYears = "1993-1998"
Global Const AppName = "StEPP"
Global AppWillExpire As Integer     'true/false
Global AppExpireYear As Integer
Global AppExpireMonth As Integer
Global AppExpireDay As Integer
Global Global_fpath_dir_CPAS As String


'Global Const LICFILE_GetInfoProgram = "MTCHK.EXE"
Global Const LICFILE_GetInfoProgram = "CPASCHK.EXE"
Global Const LICFILE_GetInfoProgramParams = "-GET_INFO"

'Global Const LICFILE_LicName = "ETDOT10.LIC"
Global Const LICFILE_LicName = "CPAS.LIC"
'Global Const LICFILE_NewLicInfo = "MTNEWLIC.X"
'Global Const LICFILE_GoodSerialNumber = "OKNUM.X"
'Global Const LICFILE_BadSerialNumber = "BADNUM.X"
Global Const LICFILE_GoodLicenseFile = "GO.X"
Global Const LICFILE_BadLicenseFile = "EXIT.X"

Type LicFile_Data_Type
  'Z_PROGRAMKEY_ADS As String
  'Z_PROGRAMKEY_ASAP As String
  'Z_PROGRAMKEY_STEPP As String
  Z_SERIALNUMBER As String
  Z_USERNAME As String
  Z_USERCOMPANY As String
  Z_PROGRAMKEY As String
  Z_EXPIRATIONDATE As String
  Z_RELEASETYPE As String
  Z_VERSIONCODE As String
  Z_VERSIONTYPE As String
  'ZZ_LASTEXECUTIONDATE As String
  'ZZ_LASTEXECUTIONTIME As String
End Type
Global lfd As LicFile_Data_Type

Function get_expiration_info () As String
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      get_expiration_info = "No Expiration Date (Student Copy)"
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      get_expiration_info = "No Expiration Date (Professional Copy)"
    Case Else:
      get_expiration_info = "Expires on " & Trim$(Str$(AppExpireMonth)) & "/" & Trim$(Str$(AppExpireDay)) & "/" & Trim$(Str$(AppExpireYear))
  End Select
End Function

Function get_program_version_with_build_info () As String
Dim ver As String
Dim capped As String
  capped = LCase$(Trim$(lfd.Z_RELEASETYPE))
  If (Len(capped) >= 1) Then
    Mid$(capped, 1, 1) = UCase$(Mid$(capped, 1, 1))
  End If
  ver = lfd.Z_VERSIONCODE & " (" & capped & ")"
  'ver = ver & Trim$(App.Major) & "."
  'ver = ver & Trim$(App.Minor) & "."
  'ver = ver & Trim$(App.Revision)
  get_program_version_with_build_info = ver
End Function

Sub LicFileData_Read (return_fpath_dir_CPAS As String)
Dim WinDir As String
Dim fn_CPASCHK As String
Dim CMDLINE As String
Dim time_start As Double
Dim fn_GoodLicenseFile As String
Dim fn_BadLicenseFile As String
Dim time_elapsed As Double
Dim f As Integer
Dim retval As Integer
Dim copy_z_expirationdate As String
Dim temp As String
Dim fn_CPASDIR_INI As String
Dim fpath_dir_CPAS As String

  'GET CPAS DIRECTORY NAME.
  fn_CPASDIR_INI = APP.Path & "\CPASDIR.INI"
  If (Not fileexists(fn_CPASDIR_INI)) Then
    'UNABLE TO READ LICENSE FILE DATA.
    GoTo err_Cant_Read_Licensing_Data
  End If
  temp = Trim$(INI_GetSetting00(fn_CPASDIR_INI, "Directory", "CPASDIR"))
  fpath_dir_CPAS = temp
  return_fpath_dir_CPAS = temp

  'CHECK ON LICENSE FILE.
  WinDir = GetWindowsDir()
  'fn_MTCHK = WinDir & "\" & LICFILE_GetInfoProgram
  fn_CPASCHK = fpath_dir_CPAS & "\DBASE\" & LICFILE_GetInfoProgram
  If (fileexists(fn_CPASCHK)) Then
    'THAT'S OKAY.
  Else
    'UNABLE TO READ LICENSE FILE DATA.
    GoTo err_Cant_Read_Licensing_Data
  End If
  CMDLINE = LICFILE_GetInfoProgram & " " & LICFILE_GetInfoProgramParams
  CMDLINE = CMDLINE & " " & fpath_dir_CPAS
  CMDLINE = CMDLINE & " " & AppProgramKey
  'CMDLINE = fn_CPASCHK & " " & LICFILE_GetInfoProgramParams
  'CMDLINE = CMDLINE & " " & fpath_dir_CPAS
  'CMDLINE = CMDLINE & " " & AppProgramKey
  'fn_GoodLicenseFile = WinDir & "\" & LICFILE_GoodLicenseFile
  'fn_BadLicenseFile = WinDir & "\" & LICFILE_BadLicenseFile
  fn_GoodLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_GoodLicenseFile
  fn_BadLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_BadLicenseFile
  time_start = Timer
  ChDir fpath_dir_CPAS & "\DBASE"
  ChDrive fpath_dir_CPAS & "\DBASE"
  retval = 0 * Shell(CMDLINE, 1)
  ChDir APP.Path
  ChDrive APP.Path
  Do While (1 = 1)
    DoEvents
    If (fileexists(fn_GoodLicenseFile)) Then
      'Kill fn_GoodLicenseFile    'DELETED BELOW.
      DoEvents
      Exit Do
    End If
    If (fileexists(fn_BadLicenseFile)) Then
      Kill fn_BadLicenseFile
      DoEvents
      End
    End If
    time_elapsed = Timer - time_start
    If (time_elapsed > 10#) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  Loop

  'READ IN LICENSE FILE INFO.
  f = FreeFile
  Open fn_GoodLicenseFile For Input As #f
  Line Input #f, lfd.Z_SERIALNUMBER
  Line Input #f, lfd.Z_USERNAME
  Line Input #f, lfd.Z_USERCOMPANY
  Line Input #f, lfd.Z_PROGRAMKEY
  Line Input #f, lfd.Z_EXPIRATIONDATE
  Line Input #f, lfd.Z_RELEASETYPE
  Line Input #f, lfd.Z_VERSIONCODE
  Line Input #f, lfd.Z_VERSIONTYPE
  Close #f
  Kill fn_GoodLicenseFile
  
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      AppWillExpire = False
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      AppWillExpire = False
    Case Else:
      AppWillExpire = True
      copy_z_expirationdate = Trim$(UCase$(lfd.Z_EXPIRATIONDATE))
      copy_z_expirationdate = Parser_RemoveCharacters(" ", copy_z_expirationdate)
      If (Parser_GetNumArgs(",", copy_z_expirationdate) = 3) Then
        Call Parser_GetArg(",", copy_z_expirationdate, 1, temp)
        AppExpireMonth = CInt(Val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 2, temp)
        AppExpireDay = CInt(Val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 3, temp)
        AppExpireYear = CInt(Val(temp))
      End If
  End Select
  
  Exit Sub

err_Cant_Read_Licensing_Data:
  MsgBox "Unable to read licensing data.  You may need to re-install the software.", 48, AppName
  End
End Sub

Sub Parser_GetArg (sepchar As String, inline As String, ArgNum As Integer, retStr As String)
Dim i As Integer
Dim j As Integer
  retStr = ""
  j = 1
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      j = j + 1
      If (j > ArgNum) Then Exit For
    Else
      If (j = ArgNum) Then
        retStr = retStr + Mid$(inline, i, 1)
      End If
    End If
  Next i
End Sub

Function Parser_GetNumArgs (sepchar As String, inline As String) As Integer
Dim NumArgs As Integer
Dim i As Integer
  NumArgs = 1     'between chr #1 and first separator char.
  For i = 1 To Len(inline)
    If (Mid$(inline, i, 1) = sepchar) Then
      NumArgs = NumArgs + 1
    End If
  Next i
  Parser_GetNumArgs = NumArgs
End Function

Function Parser_RemoveCharacters (remove_char As String, inline As String) As String
Dim retStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (thisc = remove_char) Then ok_append = False
    If (ok_append) Then
      retStr = retStr & thisc
    End If
  Next i
  Parser_RemoveCharacters = retStr
End Function

Function Parser_RemoveDuplicateSeparators (sepchar As String, inline As String) As String
Dim retStr As String
Dim i As Integer
Dim ok_append As Integer
Dim thisc As String
  retStr = ""
  For i = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, i, 1)
    If (i > 1) Then
      If (thisc = sepchar) Then
        If (Right$(retStr, 1) = sepchar) Then
          ok_append = False
        End If
      End If
    End If
    If (ok_append) Then
      retStr = retStr & thisc
    End If
  Next i
  Parser_RemoveDuplicateSeparators = retStr
End Function

Attribute VB_Name = "LicdataMod"
Option Explicit

Global Const TURN_LICENSING_OFF = False

Global Const AppProgramKey = "STEPP"
Global Const AppCopyrightYears = "1993-1998"
Global Const AppName = "StEPP"
Global AppWillExpire As Integer     'true/false
Global AppExpireYear As Integer
Global AppExpireMonth As Integer
Global AppExpireDay As Integer
Global Global_fpath_dir_CPAS As String

Global Const OSTYPE_WIN95 = 1
Global Const OSTYPE_WINNT = 2
Global Const LAUNCHFILEVIA_IS_DEBUG_MODE_ON = False

'Global Const LICFILE_GetInfoProgram = "MTCHK.EXE"
Global Const LICFILE_GetInfoProgram = "CPASCHK.EXE"
Global Const LICFILE_GetInfoProgramParams = "-GET_INFO"

'Global Const LICFILE_LicName = "ETDOT10.LIC"
Global Const LICFILE_LicName = "CPAS.LIC"
'Global Const LICFILE_NewLicInfo = "MTNEWLIC.X"
'Global Const LICFILE_GoodSerialNumber = "OKNUM.X"
'Global Const LICFILE_BadSerialNumber = "BADNUM.X"
Global Const LICFILE_GoodLicenseFile = "GO.X"
Global Const LICFILE_BadLicenseFile = "EXIT.X"

Type LicFile_Data_Type
  'Z_PROGRAMKEY_ADS As String
  'Z_PROGRAMKEY_ASAP As String
  'Z_PROGRAMKEY_STEPP As String
  Z_SERIALNUMBER As String
  Z_USERNAME As String
  Z_USERCOMPANY As String
  Z_PROGRAMKEY As String
  Z_EXPIRATIONDATE As String
  Z_RELEASETYPE As String
  Z_VERSIONCODE As String
  Z_VERSIONTYPE As String
  'ZZ_LASTEXECUTIONDATE As String
  'ZZ_LASTEXECUTIONTIME As String
End Type
Global lfd As LicFile_Data_Type

Function get_expiration_info() As String
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      get_expiration_info = "No Expiration Date (Student Copy)"
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      get_expiration_info = "No Expiration Date (Professional Copy)"
    Case Else:
      get_expiration_info = "Expires on " & Trim$(Str$(AppExpireMonth)) & "/" & Trim$(Str$(AppExpireDay)) & "/" & Trim$(Str$(AppExpireYear))
  End Select
End Function

Function get_program_version_with_build_info() As String
Dim ver As String
Dim capped As String
  capped = LCase$(Trim$(lfd.Z_RELEASETYPE))
  If (Len(capped) >= 1) Then
    Mid$(capped, 1, 1) = UCase$(Mid$(capped, 1, 1))
  End If
  ver = lfd.Z_VERSIONCODE & " (" & capped & ")"
  'ver = ver & Trim$(App.Major) & "."
  'ver = ver & Trim$(App.Minor) & "."
  'ver = ver & Trim$(App.Revision)
  get_program_version_with_build_info = ver
End Function

'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaStartMethod(fn_Dir As String, fn_File As String) As Integer
Dim RetValBool As Integer
  RetValBool = LaunchFileViaStartMethod_0(Trim$(fn_Dir), Trim$(fn_File), OSTYPE_WINNT)
  If (Not RetValBool) Then
    RetValBool = LaunchFileViaStartMethod_0(Trim$(fn_Dir), Trim$(fn_File), OSTYPE_WIN95)
  End If
  LaunchFileViaStartMethod = RetValBool
End Function

'RETURNS:
'    TRUE = SUCCEEDED.
'    FALSE = FAILED.
Function LaunchFileViaStartMethod_0(fn_Dir As String, fn_File As String, OSTYPE As Integer) As Integer
Dim RetVal As Integer
Dim cmdline As String
    
  On Error GoTo err_LaunchFileViaStartMethod_0
  
  If (Trim$(fn_Dir) <> "") Then
    ChDir Trim$(fn_Dir)
  End If
  Select Case OSTYPE
    Case OSTYPE_WIN95:
      'CMDLINE = "command.com /c start " & Trim$(fn_File)
      cmdline = "command.com /c " & Trim$(fn_File)
    Case OSTYPE_WINNT:
      'CMDLINE = "cmd /c start " & Trim$(fn_File)
      cmdline = "cmd /c " & Trim$(fn_File)
  End Select
  'If (LAUNCHFILEVIA_IS_DEBUG_MODE_ON) Then
    MsgBox "CmdLine = `" & cmdline & "`"
  'End If
  RetVal = 0 * Shell(cmdline, 1)
  
  LaunchFileViaStartMethod_0 = True
  Exit Function
    
exit_err_LaunchFileViaStartMethod_0:
  LaunchFileViaStartMethod_0 = False
  Exit Function
err_LaunchFileViaStartMethod_0:
  Resume exit_err_LaunchFileViaStartMethod_0
End Function

Sub LicFileData_Read(return_fpath_dir_CPAS As String)
Dim WinDir As String
Dim fn_CPASCHK As String
Dim cmdline As String
Dim time_start As Double
Dim fn_GoodLicenseFile As String
Dim fn_BadLicenseFile As String
Dim time_elapsed As Double
Dim f As Integer
Dim RetVal As Integer
Dim copy_z_expirationdate As String
Dim temp As String
Dim fn_CPASDIR_INI As String
Dim fpath_Dir_CPAS As String
Dim AnyErrors As Integer
Dim CMDLINE0 As String
Dim fn_ResultsFile As String
Dim OLD_fpath_Dir_CPAS As String

  'GET CPAS DIRECTORY NAME.
  fn_CPASDIR_INI = App.Path & "\CPASDIR.INI"
  If (Not fileexists(fn_CPASDIR_INI)) Then
    'UNABLE TO READ LICENSE FILE DATA.
    GoTo err_Cant_Read_Licensing_Data
  End If
  temp = Trim$(INI_GetSetting00(fn_CPASDIR_INI, "Directory", "CPASDIR"))
  fpath_Dir_CPAS = temp
  return_fpath_dir_CPAS = temp

  'CONVERT CPAS DIRECTORY PATH TO SHORT-FILENAME CONVENTION (IF NEEDED).
  ChDir App.Path
  ChDrive App.Path
  CMDLINE0 = "fnconv " & fpath_Dir_CPAS
  fn_ResultsFile = "shortp.x"
  If (fileexists(fn_ResultsFile)) Then
    Kill fn_ResultsFile
  End If
  RetVal = 0 * Shell(CMDLINE0, 1)
  time_start = Timer
  Do While (1 = 1)
    DoEvents
    If (fileexists(fn_ResultsFile)) Then
      'Kill fn_ResultsFile    'DELETED BELOW.
      time_start = Timer
      Do While (time_start = Timer)
        DoEvents
      Loop
      DoEvents
      Exit Do
    End If
    time_elapsed = Timer - time_start
    If (time_elapsed > 10#) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  Loop
  f = FreeFile
  OLD_fpath_Dir_CPAS = fpath_Dir_CPAS
  Open fn_ResultsFile For Input As #f
  Line Input #f, fpath_Dir_CPAS
  Close #f
  Kill fn_ResultsFile

  'CHECK ON LICENSE FILE.
  WinDir = GetWindowsDir()
  'fn_MTCHK = WinDir & "\" & LICFILE_GetInfoProgram
  fn_CPASCHK = fpath_Dir_CPAS & "\DBASE\" & LICFILE_GetInfoProgram
  'fn_CPASCHK = LICFILE_GetInfoProgram
  'If (fileexists(fn_CPASCHK)) Then
  '  'THAT'S OKAY.
  'Else
  '  'UNABLE TO READ LICENSE FILE DATA.
  '  GoTo err_Cant_Read_Licensing_Data
  'End If
  'CmdLine = LICFILE_GetInfoProgram & " " & LICFILE_GetInfoProgramParams
  'CmdLine = CmdLine & " " & fpath_dir_CPAS
  'CmdLine = CmdLine & " " & AppProgramKey
  'CMDLINE = fn_CPASCHK & " " & LICFILE_GetInfoProgramParams
  'CMDLINE = CMDLINE & " " & fpath_dir_CPAS
  'CMDLINE = CMDLINE & " " & AppProgramKey
  cmdline = Chr$(34) & fn_CPASCHK & Chr$(34) & " " & LICFILE_GetInfoProgramParams
  cmdline = cmdline & " " & fpath_Dir_CPAS
  cmdline = cmdline & " " & AppProgramKey
  cmdline = cmdline & " ," & App.Path
  ''''MsgBox CMDLINE
  'fn_GoodLicenseFile = WinDir & "\" & LICFILE_GoodLicenseFile
  'fn_BadLicenseFile = WinDir & "\" & LICFILE_BadLicenseFile
  'fn_GoodLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_GoodLicenseFile
  'fn_BadLicenseFile = fpath_dir_CPAS & "\DBASE\" & LICFILE_BadLicenseFile
  fn_GoodLicenseFile = App.Path & "\" & LICFILE_GoodLicenseFile
  fn_BadLicenseFile = App.Path & "\" & LICFILE_BadLicenseFile
  time_start = Timer
  
  On Error Resume Next
  AnyErrors = False
  ChDir fpath_Dir_CPAS & "\DBASE": If (Err <> 0) Then AnyErrors = True
  ChDrive fpath_Dir_CPAS & "\DBASE": If (Err <> 0) Then AnyErrors = True
  ''''MsgBox cmdline
  RetVal = 0 * Shell(cmdline, 1): If (Err <> 0) Then AnyErrors = True
  On Error GoTo 0
  If (AnyErrors) Then
    If (False = LaunchFileViaStartMethod("", cmdline)) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  End If
  
  Do While (1 = 1)
    DoEvents
    If (fileexists(fn_GoodLicenseFile)) Then
      'Kill fn_GoodLicenseFile    'DELETED BELOW.
      time_start = Timer
      Do While (time_start = Timer)
        DoEvents
      Loop
      DoEvents
      Exit Do
    End If
    If (fileexists(fn_BadLicenseFile)) Then
      Kill fn_BadLicenseFile
      time_start = Timer
      Do While (time_start = Timer)
        DoEvents
      Loop
      DoEvents
      End
    End If
    time_elapsed = Timer - time_start
    If (time_elapsed > 10#) Then
      'UNABLE TO READ LICENSE FILE DATA.
      GoTo err_Cant_Read_Licensing_Data
    End If
  Loop
  ChDir App.Path
  ChDrive App.Path

  'READ IN LICENSE FILE INFO.
  f = FreeFile
  Open fn_GoodLicenseFile For Input As #f
  Line Input #f, lfd.Z_SERIALNUMBER
  Line Input #f, lfd.Z_USERNAME
  Line Input #f, lfd.Z_USERCOMPANY
  Line Input #f, lfd.Z_PROGRAMKEY
  Line Input #f, lfd.Z_EXPIRATIONDATE
  Line Input #f, lfd.Z_RELEASETYPE
  Line Input #f, lfd.Z_VERSIONCODE
  Line Input #f, lfd.Z_VERSIONTYPE
  Close #f
  Kill fn_GoodLicenseFile
  
  Select Case Trim$(UCase$(lfd.Z_VERSIONTYPE))
    Case Trim$(UCase$("VER_INTERNAL_STUDENT")):
      AppWillExpire = False
    Case Trim$(UCase$("VER_WONT_EXPIRE")):
      AppWillExpire = False
    Case Else:
      AppWillExpire = True
      copy_z_expirationdate = Trim$(UCase$(lfd.Z_EXPIRATIONDATE))
      copy_z_expirationdate = Parser_RemoveCharacters(" ", copy_z_expirationdate)
      If (Parser_GetNumArgs(",", copy_z_expirationdate) = 3) Then
        Call Parser_GetArg(",", copy_z_expirationdate, 1, temp)
        AppExpireMonth = CInt(Val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 2, temp)
        AppExpireDay = CInt(Val(temp))
        Call Parser_GetArg(",", copy_z_expirationdate, 3, temp)
        AppExpireYear = CInt(Val(temp))
      End If
  End Select
  
  Exit Sub

err_Cant_Read_Licensing_Data:
  MsgBox "Unable to read licensing data.  You may need to re-install the software.", 48, AppName
  End
End Sub

Sub Parser_GetArg(sepchar As String, inline As String, ArgNum As Integer, RetStr As String)
Dim I As Integer
Dim J As Integer
  RetStr = ""
  J = 1
  For I = 1 To Len(inline)
    If (Mid$(inline, I, 1) = sepchar) Then
      J = J + 1
      If (J > ArgNum) Then Exit For
    Else
      If (J = ArgNum) Then
        RetStr = RetStr + Mid$(inline, I, 1)
      End If
    End If
  Next I
End Sub

Function Parser_GetNumArgs(sepchar As String, inline As String) As Integer
Dim NumArgs As Integer
Dim I As Integer
  NumArgs = 1     'between chr #1 and first separator char.
  For I = 1 To Len(inline)
    If (Mid$(inline, I, 1) = sepchar) Then
      NumArgs = NumArgs + 1
    End If
  Next I
  Parser_GetNumArgs = NumArgs
End Function

Function Parser_RemoveCharacters(remove_char As String, inline As String) As String
Dim RetStr As String
Dim I As Integer
Dim ok_append As Integer
Dim thisc As String
  RetStr = ""
  For I = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, I, 1)
    If (thisc = remove_char) Then ok_append = False
    If (ok_append) Then
      RetStr = RetStr & thisc
    End If
  Next I
  Parser_RemoveCharacters = RetStr
End Function

Function Parser_RemoveDuplicateSeparators(sepchar As String, inline As String) As String
Dim RetStr As String
Dim I As Integer
Dim ok_append As Integer
Dim thisc As String
  RetStr = ""
  For I = 1 To Len(inline)
    ok_append = True
    thisc = Mid$(inline, I, 1)
    If (I > 1) Then
      If (thisc = sepchar) Then
        If (Right$(RetStr, 1) = sepchar) Then
          ok_append = False
        End If
      End If
    End If
    If (ok_append) Then
      RetStr = RetStr & thisc
    End If
  Next I
  Parser_RemoveDuplicateSeparators = RetStr
End Function

Attribute VB_Name = "MainMod"
Option Explicit


'splash_mode: 0 = Continue/Exit window
'             1 = I Agree/I agree, never show again/Exit window
Global splash_mode As Integer

'splash_button_pressed:
'1 = Continue or I Agree
'2 = I agree, never show again
'3 = Exit
Global splash_button_pressed As Integer

Global MAIN_APP_PATH As String

Global Ws1 As Workspace
Global DB_Main As database
Global RS_Main As Recordset




Const MainMod_declarations_end = True


Function get_program_version_with_build_info_VB4() As String
Dim ver As String
  ver = ver & Trim$(App.Major) & "."
  ver = ver & Trim$(App.Minor) & "."
  ver = ver & Trim$(App.Revision)
  get_program_version_with_build_info_VB4 = ver
End Function


Function frmSplash_Run() As Integer
Dim tpath$
Dim tstr$
Dim must_read_disclaimer As Integer

  '''SET UP INI FILE PATH.
  ''tpath$ = GetWindowsDir() & ProgramIniFile$
  
  'SHOW THE CONTINUE/EXIT FRONT WINDOW.
  splash_mode = 0
  splash_button_pressed = 0
  frmSplash.Show 1
  Select Case splash_button_pressed
    Case 1:         'Hit Continue
      'DO NOTHING.
    Case 3:         'Hit Exit
      End
  End Select
    
  'IS THE DISCLAIMER WINDOW STILL ACTIVE?
  must_read_disclaimer = True
  ''tstr$ = INI_GetSetting0(fn_INI_path, "disclaimer", "has_read_disclaimer")
  'tstr$ = INI_GetSetting0(fn_OldFileList, "disclaimer", "has_read_disclaimer")
  'tstr$ = ini_getsetting(INI_FileName, INI_ProgramType, "has_seen_disclaimer")
  tstr$ = INI_Getsetting("has_seen_disclaimer")
  If (tstr$ = "1") Then
    must_read_disclaimer = False
  End If
  
  If (must_read_disclaimer) Then
    'SHOW THE DISCLAIMER WINDOW.
    splash_mode = 1
    splash_button_pressed = 0
    frmSplash.Show 1
    Select Case splash_button_pressed
      Case 1:         'Hit I Agree
        'DO NOTHING.
      Case 2:         'Hit I agree, never show again
        ''Call ini_putsetting0(fn_INI_path, "disclaimer", "has_read_disclaimer", "1")
        'Call ini_putsetting0(fn_OldFileList, "disclaimer", "has_read_disclaimer", "1")
        Call INI_PutSetting("has_seen_disclaimer", "1")
      Case 3:         'Hit Exit
        End
    End Select
  End If

  frmSplash_Run = True

End Function


Sub ChangeDir_Exes()
  ChDrive MAIN_APP_PATH
  ChDir MAIN_APP_PATH & "\EXES"
End Sub
Sub ChangeDir_Main()
  ChDrive MAIN_APP_PATH
  ChDir MAIN_APP_PATH
End Sub


Sub main()
Dim fn_Misc1 As String

  'SET UP MAIN APP PATH VARIABLE.
  If (File_IsExists(App.Path & "\debug_in_vb6.txt")) Then
    'FOR DEBUGGING IN THE VB5 ENVIRONMENT.
    MAIN_APP_PATH = "X:\etdot10\code\stepp\vb6"
    ChDrive MAIN_APP_PATH
    ChDir MAIN_APP_PATH
  Else
    'DO NOTHING.
    MAIN_APP_PATH = App.Path
  End If
  
  'VERIFY THAT PATHS ARE PROPERLY SET UP.
  fn_Misc1 = App.Path & "\dbase\misc1.dat"
  If (File_IsExists(fn_Misc1)) Then
    'DO NOTHING; THIS IS OKAY.
  Else
    Call Show_Error("The file `" & fn_Misc1 & "` is missing.  " & _
        "Therefore the software must have been improperly installed.  " & _
        "Recommendation: Check the `Start In` path specified in the " & _
        "program icon, or else perform a re-install of the software.")
    End
  End If
  
  'READ IN THE LICENSE FILE DATA.
  If (TURN_LICENSING_OFF = False) Then
    Call LicFileData_Read(Global_fpath_dir_CPAS)
  End If
  
  'MISC INITIALIZATIONS.
  ''''Call ini_initializethisprogram("stepp")
  
  If (fileexists(App.Path & "\help\stepp.hlp")) Then App.HelpFile = App.Path & "\help\stepp.hlp"
  
    steppPath = App.Path
    SaveAndLoadPath = App.Path
    Database_Path = App.Path + "\dbase"
    
    'ChDrive Database_Path
    'ChDir Database_Path
    ''' THE ENCRYPTION IS KEPT IN DEMOMODE.BAS
    ''If (SecureDBMode) Then
    ''    On Error GoTo Security_Database
    ''    SetDefaultWorkspace decrypt_string(Encrypted_User_Name), decrypt_string(Encrypted_User_Password)
    ''    On Error Resume Next
    ''End If
    'ChDrive steppPath
    'ChDir steppPath

    Call LoadErrorMessages
    Call InitializeHierarchy
    Call InitializeBIPdbHierarchy

    'Initialize Number of Chemicals currently selected to zero
    NumSelectedChemicals = 0

    '
    ' OPEN THE PASSWORD-PROTECTED MAIN DATABASE.
    '
    Set Ws1 = Workspaces(0)
    'NOTE: THE FOLLOWING OpenDatabase() COMMAND MUST BE
    'SPECIFIED EXACTLY AS-IS, OR ELSE IT WILL FAIL.
    Set DB_Main = _
        Ws1.OpenDatabase(Database_Path + "\stepp_db.mdb", _
              True, _
              False, _
              ";pwd=" & decrypt_string(Encrypted_User_Password))
    
    ''Open the database (Microsoft Access)
    'If (DemoMode) Then
    '    contam_prop_form!Data1.DatabaseName = Database_Path + "\demo_db.mdb"
    'Else
    '    contam_prop_form!Data1.DatabaseName = Database_Path + "\stepp_db.mdb"
    'End If
    'contam_prop_form!Data1.RecordSource = "SELECT * FROM [Names (Master)]"
    'contam_prop_form!Data1.Refresh
  
    read_blist_file


    'Temporarily set initially selected chemical to
    'Carbon Tetrachloride
    contam_prop_form!contam_combo.ListIndex = 5
    contam_prop_form!contam_combo.TopIndex = contam_prop_form!contam_combo.ListIndex
    ''''contam_prop_form!contam_combo.Selected(0) = True
    
    'Load all property forms to save time when SHOWing them later
    Load contam_prop_form

    Load aqsol_form
    Load gas_diff_form
    Load hc_form
    Load Infinite_dilution_form
    Load ldens_form
    Load liquid_diff_form
    Load molar_vol_form
    Load mv_nbp_form
    Load mwt_form
    Load nbp_form
    Load octanol_form
    Load rindex_form
    Load vp_form
    Load frmWaterDensity
    Load frmWaterViscosity
    Load frmWaterSurfaceTension
    Load frmAirDensity
    Load frmAirViscosity


  
  'Call ini_initializethisprogram("asap")
  ''---- Setup helpfiles
  'If (fileexists(app.Path & "\help\asap.hlp")) Then app.HelpFile = app.Path & "\help\asap.hlp"
  'ChDrive app.Path
  'ChDir app.Path
  'SaveAndLoadPath = app.Path
  '
  ''Initialize Default Power Variables
  'Scr1.Power.BlowerEfficiency = 35#
  'Scr1.Power.PumpEfficiency = 80#
  'Scr2.Power.BlowerEfficiency = 35#
  'Scr2.Power.PumpEfficiency = 80#
  '
  'bub.Power.BlowerEfficiency = 35#
  'bub.Power.TankWaterDepth = 4#
  'bub.Power.NumberOfBlowersInEachTank = 1
  '
  'ReadMainPackingDB
  'ReadUserPackingDB
  '
  'NL = Chr$(13) & Chr$(10)

  'LOAD THE SPLASH WINDOW.
  If (frmSplash_Run() = False) Then
    End
  End If
  
  'LOAD THE MAIN WINDOW.
  contam_prop_form.Show
  Exit Sub
  
Security_Database:
Dim temp As String, Error_Code As Integer
  Error_Code = Err
  temp = "Error " & Format$(Error_Code, "0") & " : " & error$(Error_Code)
  If Err = 3024 Then
      MsgBox "The File SYSTEM.MDA is missing.  The database is not accessible.  The program will be terminated."
  Else
      MsgBox "Error while checking the security system.  " & Chr$(13) & temp & Chr$(13) & "The database is not accessible.  The program will be terminated."
  End If

  Resume ExitProgram

ExitProgram:
  End

End Sub


'NOTE: THIS FUNCTION WORKS EQUALLY WELL ON
'EITHER FILES OR DIRECTORIES.
Function File_IsExists(fn As String) As Boolean
Dim Dummy As Long
  On Error GoTo err_File_IsExists
  Dummy = GetAttr(fn)   'TRIGGERS ERROR IF FILE DOES NOT EXIST.
  File_IsExists = True
  Exit Function
exit_err_File_IsExists:
  File_IsExists = False
  Exit Function
err_File_IsExists:
  Resume exit_err_File_IsExists
End Function
Function FileExists0(fn As String) As Boolean
  FileExists0 = File_IsExists(fn)
End Function


Attribute VB_Name = "MDB_Stuff"
Option Explicit





Const MDB_Stuff_declarations_end = True


Function Database_Get_String(rs As Recordset, fn As String) As String
Dim v As Variant
  v = rs(fn)
  If (IsNull(v)) Then
    Database_Get_String = ""
  Else
    Database_Get_String = Trim$(v)
  End If
End Function
Function Database_Get_Double(rs As Recordset, fn As String) As Double
Dim v As Variant
  v = rs(fn)
  If (IsNull(v)) Then
    Database_Get_Double = 0#
  Else
    Database_Get_Double = CDbl(v)
  End If
End Function
Function Database_Get_Integer(rs As Recordset, fn As String) As Integer
Dim v As Variant
  v = rs(fn)
  If (IsNull(v)) Then
    Database_Get_Integer = 0
  Else
    Database_Get_Integer = CInt(v)
  End If
End Function
Function Database_Get_Long(rs As Recordset, fn As String) As Long
Dim v As Variant
  v = rs(fn)
  If (IsNull(v)) Then
    Database_Get_Long = 0
  Else
    Database_Get_Long = CLng(v)
  End If
End Function


Function GetNewPrimaryKey0( _
    db_SourceData As database, _
    tn As String, _
    fn As String) As Long
Dim criteria As String
Dim RS1 As Recordset
Dim keys() As Long
Dim i As Integer
Dim J As Long
Dim keys_count As Integer
Dim Found As Boolean

  'LOAD ALL PRIMARY KEYS INTO MEMORY.
  criteria = "select " & fn & " from [" & tn & "]"
  Set RS1 = _
      db_SourceData.OpenRecordset(criteria)
  RS1.MoveFirst
  RS1.MoveLast
  RS1.MoveFirst
  keys_count = RS1.RecordCount
  ReDim keys(1 To keys_count)
  i = 0
  Do Until RS1.EOF
    i = i + 1
    keys(i) = Database_Get_Long(RS1, fn)
    RS1.MoveNext
  Loop
  RS1.Close
  J = 1
  Do While (1 = 1)
    Found = False
    For i = 1 To keys_count
      If (keys(i) = J) Then
        Found = True
        Exit For
      End If
    Next i
    If (Not Found) Then
      Exit Do
    End If
    J = J + 1
  Loop
  GetNewPrimaryKey0 = J
End Function


Function Database_IsTableExist( _
    Db1 As database, _
    TableName As String) As Boolean
Dim RS1 As Recordset
  On Error GoTo err_Database_IsTableExist
  Set RS1 = Db1.OpenRecordset(TableName)
  Database_IsTableExist = True
  RS1.Close
exit_err_Database_IsTableExist:
  Exit Function
err_Database_IsTableExist:
  Database_IsTableExist = False
  Resume exit_err_Database_IsTableExist
End Function


Function Database_NoRecordsInRecordset( _
    RS1 As Recordset) As Boolean
  On Error GoTo err_Database_NoRecordsInRecordset
  RS1.MoveFirst
  RS1.MoveLast
  RS1.MoveFirst
  Database_NoRecordsInRecordset = False
  Exit Function
exit_err_Database_NoRecordsInRecordset:
  Database_NoRecordsInRecordset = True
  Exit Function
err_Database_NoRecordsInRecordset:
  'ERROR OCCURRED, THEREFORE THERE MUST NOT BE ANY
  'VALID RECORDS WITHIN THIS RECORDSET.
  Resume exit_err_Database_NoRecordsInRecordset
End Function



Attribute VB_Name = "MiscMod"
Option Explicit

Global Const STEPPLINK_STATUS_INACTIVE = 1
Global Const STEPPLINK_STATUS_ACTIVE = 2
Global SteppLink_Status As Integer

Global SteppLink_ClientProgram As String     'ASAP or ADSIM
Global SteppLink_SpecifiedPressure As String
Global SteppLink_SpecifiedTemperature As String
Global SteppLink_fn_done_waitfile As String
Global SteppLink_fn_loadup_waitfile As String
Global SteppLink_fn_properties As String

Global commandparam_numargs As Integer

Sub centerform_relative(x_parent As Form, x_child As Form)

  'Don't attempt if form is minimized or maximized
  If (x_child.WindowState = 0) Then
    x_child.Left = x_parent.Left + (x_parent.Width - x_child.Width) / 2
    x_child.Top = x_parent.Top + (x_parent.Height - x_child.Height) / 2
  End If

End Sub

'Create a temporary file in the path {use_path}.
'Returns the filename {fn_temp}.
'Note: Does not return the path of the temporary file in {fn_temp}!
Sub GetTempFilename(use_path As String, fn_temp As String)
Dim temp As String
Dim trycount As Integer
Dim I As Integer
Dim c As String
Dim nowtime As String

Dim save_path As String
Dim f As Integer

  save_path = CurDir$
  ChDir use_path
  ChDrive use_path

  nowtime = Time$
  temp = Left$(Time$, 2) + Mid$(Time$, 4, 2) + Right$(Time$, 2) + ".___"
  trycount = 0
  I = 1
  Do While (1 = 1)
    If (Dir(temp) = "") Then Exit Do
    trycount = trycount + 1
    'if (trycount > 40) then
    I = I + 1
    If (I >= 7) Then
      I = 1
    End If
    c = Mid$(temp, I, 1)
    If ((c >= "0") And (c <= "8")) Then
      Mid$(temp, I, 1) = Chr$(Asc(c) + 1)
    ElseIf ((c >= "A") And (c <= "Y")) Then
      Mid$(temp, I, 1) = Chr$(Asc(c) + 1)
    ElseIf (c = "9") Then
      Mid$(temp, I, 1) = "A"
    ElseIf (c = "Z") Then
      Mid$(temp, I, 1) = "0"
    End If
  Loop

  fn_temp = temp

  f = FreeFile
  Open fn_temp For Output As #f
  Close #f
  ChDir save_path
  ChDrive save_path

End Sub

Sub parsedargs_getarg(sepchar As String, inline As String, ArgNum As Integer, RetStr As String)
Dim I As Integer
Dim J As Integer

  RetStr = ""
  J = 1
  For I = 1 To Len(inline)
    If (Mid$(inline, I, 1) = sepchar) Then
      J = J + 1
      If (J > ArgNum) Then Exit For
    Else
      If (J = ArgNum) Then
        RetStr = RetStr + Mid$(inline, I, 1)
      End If
    End If
  Next I

End Sub

Function ParsedArgs_GetNum(sepchar As String, inline As String) As Integer
Dim NumArgs As Integer
Dim I As Integer

  NumArgs = 1     'between chr #1 and first separator char.
  For I = 1 To Len(inline)
    If (Mid$(inline, I, 1) = sepchar) Then
      NumArgs = NumArgs + 1
    End If
  Next I

  ParsedArgs_GetNum = NumArgs

End Function

Sub SteppLink_AddItemToClipboard(StrDesc As String, StrData As String, cliptext As String)
Dim vb3CrLf As String
  vb3CrLf = Chr$(13) & Chr$(10)
  cliptext = cliptext & StrDesc
  cliptext = cliptext & vb3CrLf
  cliptext = cliptext & StrData
  cliptext = cliptext & vb3CrLf
End Sub

Function SteppLink_GetPropertyForOutput(pnum As Integer) As String
Dim S As String
  S = contam_prop_form.lblContaminantProperties(pnum)
  If (Trim$(UCase$(S)) = "NOT AVAILABLE") Then
    S = "UNAVAILABLE"
  Else
    'DO NOTHING.
  End If
  SteppLink_GetPropertyForOutput = S
End Function

Sub SteppLink_OutputProperty(fp As Integer, pnum As Integer, pname As String, punits As String)
Dim s1 As String
Dim s2 As String
Dim s3 As String
Dim S As String
  s1 = pname
  s2 = punits
  S = SteppLink_GetPropertyForOutput(pnum)
  Write #fp, s1, s2, S
End Sub

Attribute VB_Name = "MiscUI"
Option Explicit




Const MiscUI_declarations_end = True


'Sub CalcStatus_Set(NewVal As Boolean)
'  If (NewVal) Then
'    Call GenericStatus_Set("Calculating -- please wait.")
'  Else
'    Call GenericStatus_Set("")
'  End If
'End Sub
'Sub GenericStatus_Set(fn_Text As String)
'  frmMain.sspanel_Status = fn_Text
'End Sub
'Sub DirtyStatus_Set(NewVal As Boolean)
'  If (NewVal) Then
'    frmMain.sspanel_Dirty = "Data Changed"
'    frmMain.sspanel_Dirty.ForeColor = QBColor(12)
'  Else
'    frmMain.sspanel_Dirty = "Unchanged"
'    frmMain.sspanel_Dirty.ForeColor = QBColor(0)
'  End If
'End Sub
'Sub DirtyStatus_Set_Current()
'  Call DirtyStatus_Set(Project_Is_Dirty)
'End Sub
'Sub DirtyStatus_Throw()
'  Project_Is_Dirty = True
'  Call DirtyStatus_Set_Current
'End Sub


Sub frmMain_Close_All_Windows()
Dim ifc%
Dim i%
  On Error Resume Next
  ifc% = Forms.Count - 1
  For i% = ifc% To 0 Step -1
    'If (Forms(i%).name <> "frmMain") And _
       (Forms(i%).name <> "frmProgress") Then
    If (Forms(i%).Name <> "frmMain") Then
      Unload Forms(i%)
    End If
  Next i%
End Sub
Sub Close_All_Windows()
Dim ifc%
Dim i%
  On Error Resume Next
  ifc% = Forms.Count - 1
  For i% = ifc% To 0 Step -1
    'If (Forms(i%).name <> "frmMain") And _
       (Forms(i%).name <> "frmProgress") Then
    'If (Forms(i%).Name <> "frmMain") Then
      Unload Forms(i%)
    'End If
  Next i%
End Sub


Sub CenterOnScreen(frm_to_center As Form)
  frm_to_center.Left = (Screen.Width - frm_to_center.Width) / 2
  frm_to_center.Top = (Screen.Height - frm_to_center.Height) / 2
End Sub
Sub CenterOnForm(frm_to_center As Form, frm As Form)
  frm_to_center.Left = frm.Left + (frm.Width - frm_to_center.Width) / 2
  frm_to_center.Top = frm.Top + (frm.Height - frm_to_center.Height) / 2
End Sub


Sub Show_Message00(msg As String, flags As Integer, WinTitle As String)
  MsgBox msg, flags, WinTitle
End Sub
Sub Show_Message0(msg As String, flags As Integer)
  Call Show_Message00(msg, vbInformation, App.Title)
End Sub
Sub Show_Message(msg As String)
  Call Show_Message0(msg, vbInformation)
End Sub
Sub Show_Error(msg As String)
  Beep
  Call Show_Message0(msg, vbExclamation)
End Sub
Sub Show_Trapped_Error(subname As String)
  Call Show_Error("An error #" & Trim$(Str$(Err)) & _
      " has occurred in routine " & Trim$(subname) & _
      ": `" & Trim$(error$) & "`.  Ending this operation.")
End Sub


Sub Launch_Notepad(fn_edit As String)
Dim CmdLine As String
Dim RetVal As Integer
  CmdLine = "notepad " & fn_edit
  RetVal = 0 * Shell(CmdLine, 3)
End Sub

Option Explicit
Declare Sub ACCALL Lib "c:\stepp\stepp.dll" (ActivityCoefficient As Double, ACShortSource As Long, ACLongSource As Long, ACError As Long, ACTEMP As Double, OperatingTemp As Double, FGRPError As Long, MaxUnifacGroups As Long, MS As Long, BinaryInteractionParameterDatabase As Long)

Function CalcGamma (OptT As Double, cas As String, BIP As Long)
   Dim gamma As Double
   Dim gammaSS As Long
   Dim gammaLS As Long
   Dim gammaErr As Long
   Dim gammaTemp As Double
   Dim FGRPErr As Long
   Dim MX As Long
   Dim i As Integer
   Dim j As Integer
   Static MST(10, 10, 2) As Long
   Static grp(10) As Long
   Static num(10) As Long
    
   Dim db As database
   Dim ss As snapshot
   Dim sql As String

   Set db = OpenDatabase("c:\pearls\pearl_db.mdb")
   sql = "select * from Properties where CAS = " & cas
   Set ss = db.CreateSnapshot(sql)

   MX = ss("mx")
   grp(1) = ss("g1")
   num(1) = ss("n1")
   grp(2) = ss("g2")
   num(2) = ss("n2")
   grp(3) = ss("g3")
   num(3) = ss("n3")
   grp(4) = ss("g4")
   num(4) = ss("n4")
   grp(5) = ss("g5")
   num(5) = ss("n5")
   grp(6) = ss("g6")
   num(6) = ss("n6")
   grp(7) = ss("g7")
   num(7) = ss("n7")
   grp(8) = ss("g8")
   num(8) = ss("n8")
   grp(9) = ss("g9")
   num(9) = ss("n9")
   grp(10) = ss("g10")
   num(10) = ss("n10")
   ss.Close
   db.Close
   
   For i = 1 To 10
      For j = 1 To 10
         MST(i, j, 1) = 0
         MST(i, j, 2) = 0
      Next j
   Next i

   For i = 1 To 10
      MST(2, i, 1) = grp(i)
      MST(2, i, 2) = num(i)
   Next i

   gamma = 0     'Returned Value for Kow
   gammaSS = 0   'Not Important
   gammaLS = 0   'Not Important
   gammaErr = 0  'Not Important
   gammaTemp = 0 'Returned Temperature
   FGRPErr = 0   'Not Important

   On Error GoTo fuckup:
   Call ACCALL(gamma, gammaSS, gammaLS, gammaErr, gammaTemp, OptT, FGRPErr, MX, MST(1, 1, 1), BIP)

   CalcGamma = gamma

fuckup:

   MsgBox "Error has occurred in DLLL...Exiting", 48, "ERROR"
   Exit Function

End Function

Attribute VB_Name = "NumCheckMod"
Global Temp_Text As String

Function HaveNumber(Value As Double) As Integer

    If Value > 0# Then HaveNumber = True Else HaveNumber = False

End Function

Function HaveNumber2(Value As Double) As Integer

' This subroutine was added to allow negative values to be entered in the
' user input section for the following properties :

     HaveNumber2 = True

End Function

Function HaveTemp(Value As Double) As Integer
   If Value > -250# Then HaveTemp = True Else HaveTemp = False
End Function

Sub NumberCheck(KeyAscii As Integer)
    If (KeyAscii > Asc("9") Or KeyAscii < Asc("0")) And KeyAscii <> Asc(".") And KeyAscii <> 8 And KeyAscii <> Asc("E") And KeyAscii <> Asc("e") And KeyAscii <> Asc("-") And KeyAscii <> Asc("+") Then
       KeyAscii = 0
       Beep
    End If

End Sub

Sub TextGetFocus(txt As TextBox, Temp_Text As String)
    Temp_Text = txt.Text
    txt.SelStart = 0
    txt.SelLength = Len(txt.Text)

End Sub

Sub TextHandleError(IsError As Integer, txt As TextBox, Temp_Text As String)
    Dim Dummy As Double
    Dim I As Integer

    IsError = False

    On Error GoTo ErrorHandler
       Dummy = CDbl(txt.Text)
'       If Dummy < 0# Then GoTo NegativeNumberError
       If IsError Then txt.SetFocus
       GoTo ContinueSub

ErrorHandler:
    IsError = True
    'frmAirWaterProperties.Print "Error Occurred"
    MsgBox "Incorrect Value Will Be Replaced By Previous Value", , "Invalid Data Error"
    txt.Text = Temp_Text
    If txt.Text = "" Then
       txt.SetFocus
       Exit Sub
    Else
       Resume
    End If


NegativeNumberError:
    IsError = True
    txt.Text = Temp_Text
    txt.SetFocus

ContinueSub:

End Sub

Sub TextNumberChanged(ValueChanged As Integer, txt As TextBox, Temp_Text As String)
    Dim Dummy1 As Double, Dummy2 As Double

    ValueChanged = True
    If Temp_Text = "" Then Exit Sub
    Dummy1 = CDbl(txt.Text)
    Dummy2 = CDbl(Temp_Text)
    If txt.Text = Temp_Text Then ValueChanged = False
    If Abs(Dummy1 - Dummy2) < TOLERANCE Then ValueChanged = False

End Sub

Sub TextStringChanged(ValueChanged As Integer, txt As TextBox, Temp_Text As String)
    
    ValueChanged = True
    If txt.Text = Temp_Text Then ValueChanged = False

End Sub

Attribute VB_Name = "PropTranMod"
'Option Explicit
''allows for *.ini calls
'Declare Function GetPrivateProfileInt% Lib "kernel" (ByVal lpApplicationName$, ByVal lpKeyName$, ByVal nDefault%, ByVal lpFileName$)
'Declare Function GetPrivateProfileString% Lib "kernel" (ByVal lpApplicationName$, ByVal lpKeyName As Any, ByVal lpDefault$, ByVal lpReturnedString$, ByVal nSize%, ByVal lpFileName$)
'Declare Function WritePrivateProfileString% Lib "kernel" (ByVal lpApplicationName$, ByVal lpKeyName$, ByVal lpString$, ByVal lplFileName$)
'
'Declare Function GetWindowsDirectory Lib "kernel" (ByVal lpBuffer$, ByVal nSize%) As Integer
'
''window handle functions
'Declare Function IsWindowVisible Lib "USER" (ByVal hWnd As Integer) As Integer
'Declare Function GetDesktopWindow Lib "USER" () As Integer
'Declare Function GetWindow Lib "USER" (ByVal hWnd As Integer, ByVal wCmd As Integer) As Integer
'Declare Function GetWindowText Lib "USER" (ByVal hWnd As Integer, ByVal lpString As String, ByVal aint As Integer) As Integer
'Declare Function SetFocusAPI Lib "USER" Alias "SetFocus" (ByVal hWnd As Integer) As Integer
'
''PropFind record for each chemical to be transfered
'Type PropFind_Transfer_Record
'    Name As String * 50
'    VaporPressure As Double
'    IDAC As Double
'    HenrysConstant As Double
'    MolecularWeight As Double
'    NBP As Double
'    LiquidDensity As Double
'    MolarVol_OPT As Double
'    MolarVol_NBP As Double
'    RefractiveIndex As Double
'    AqueousSolubility As Double
'    OctanolWaterPartCoeff As Double
'    LiquidDiffusivity As Double
'    GasDiffusivity As Double
'
'    WaterDensity As Double
'    WaterViscosity As Double
'    WaterSurfaceTension As Double
'    AirDensity As Double
'    AirViscosity As Double
'
'End Type
'
''windows constants
'Global Const GW_CHILD = 5
'Global Const GW_OWNER = 4
'Global Const GW_HWNDNEXT = 2
'
'
''Global variables:
'Global INI_WindowsDir As String
'Global INI_ProgramType As String
'Global INI_FileName As String
'
'Global CallingProgram As String
'Global CallingAppFullname As String
'Global INI_TransferFile As String
'
'Global TransferMode As Integer
'Global propfind_hwnd As Integer
'Global TransferFilePath  As String
'
'Dim transfer_record As PropFind_Transfer_Record
'
'Function ActivateProgram(apptitle As String) As Integer
'    Dim hWnd, ret As Integer
'    Dim wtitle As String * 256
'    Dim tmpstr$
'    Dim fview_try_cnt As Integer
'    Dim fview_hwnd As Integer
'    Dim fview_title As String
''  GET THE DESKTOP WINDOW HANDLE
'hWnd = GetDesktopWindow()
'
''  GET THE DESKTOPS FIRST CHILD.  THAT WILL BE THE
''  FIRST WINDOW IN THE TASK LIST
'hWnd = GetWindow(hWnd, GW_CHILD)
'
''  LOOP UNTIL YOU FIND THE WINDOW HANDLE THAT YOU WANT
'Do While (hWnd <> 0)
'    ret = GetWindowText(hWnd, wtitle, 256)
'    tmpstr$ = Left$(wtitle, ret)
'
''  MAKING SURE WINDOW IS VISIBLE AND TOP WINDOW.
''  GETS RID OF ALL THE NON ESSENTIAL WINDOWS IN THE LIST
'    If (IsWindowVisible(hWnd) <> 0) And (GetWindow(hWnd, GW_OWNER) = 0) Then
'        If (InStr(1, tmpstr$, apptitle, 1) <> 0) Then
'            fview_try_cnt = 0
'            fview_hwnd = hWnd
'            fview_title = tmpstr$
'            ActivateProgram = True
'
'            'okay now that you found the window give it focus!
'            hWnd = SetFocusAPI(fview_hwnd)
'
'            Exit Function
'        End If
'    End If
'    hWnd = GetWindow(hWnd, GW_HWNDNEXT)
'Loop
'
'ActivateProgram = False
'
'End Function
'
'Function ExecutePropFindProgram() As Integer
'Dim response As String
'
''okay so since it does not exist find it
'response = INI_Getsetting_PropTranMod(INI_TransferFile, "PropTran", "ProgramPath")
'
''run program and store handle of program
'propfind_hwnd = Shell(response, 1)
'
'If propfind_hwnd = 0 Then
'    ExecutePropFindProgram = True
'Else
'    ExecutePropFindProgram = False
'End If
'
'End Function
'
''Function GetWindowsDir() As String
''Dim Value As Integer
''Dim storage As String * 144
''
''  Value = GetWindowsDirectory(ByVal storage, ByVal Len(storage))
''  GetWindowsDir = Trim$(Left$(storage, Value))
''
''End Function
'
'Function INI_Getsetting_PropTranMod(INI_FILE As String, INI_SpecifiedProgramType As String, INI_VariableName As String) As String
'Dim lpApplicationName As String
'Dim lpKeyName As String
'Dim lpszDefault As String
'Dim lpReturnedString As String * 200
'Dim nSize As Integer
'Dim lpFileName As String
'
'Dim BytesCopied As Integer
'Dim temp As String
'
'  lpApplicationName = INI_SpecifiedProgramType
'  lpKeyName = INI_VariableName
'  lpszDefault = ""
'  lpReturnedString = ""
'  nSize = Len(lpReturnedString)
'  lpFileName = INI_FILE
'
'  BytesCopied = GetPrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpszDefault, ByVal lpReturnedString, ByVal nSize, ByVal lpFileName)
'  temp = Trim$(Left$(lpReturnedString, BytesCopied))
'  INI_Getsetting_PropTranMod = temp
'
'End Function
'
'Sub INI_PutSetting_PropTranMod(INI_VariableName As String, ini_newsetting As String)
'Dim lpApplicationName As String
'Dim lpKeyName As String
'Dim lpString As String
'Dim lpFileName As String
'
'Dim valid As Integer
'
'  lpApplicationName = INI_ProgramType
'  lpKeyName = INI_VariableName
'  lpString = ini_newsetting
'  lpFileName = INI_FileName
'
'  valid = WritePrivateProfileString(ByVal lpApplicationName, ByVal lpKeyName, ByVal lpString, ByVal lpFileName)
'
'End Sub
'
'Function ReadPropFindRecord(FileName$) As Integer
'    Dim FileNum As Integer
'    Dim i As Integer
'
'If (Not fileexists(FileName$)) Then
'    ReadPropFindRecord = False
'    Exit Function
'End If
'
'FileNum = FreeFile
'Open FileName$ For Binary Access Read As FileNum
'  For i = 1 To NumSelectedChemicals
'    Get #FileNum, 1024 * i, transfer_record(i)
'  Next i
'Close FileNum
'
'ReadPropFindRecord = True
'
'End Function
'
'Sub SaveTransferFile(FileName$)
'    Dim i As Integer
'
'ReDim transfer_record(NumSelectedChemicals)
'
'For i = 1 To NumSelectedChemicals
'
'    transfer_record(i) = PropContaminant(i)
'
'Next i
'
'Call WritePropFindRecord(FileName$)
'
'End Sub
'
'Sub WritePropFindRecord(FileName$)
'    Dim FileNum As Integer
'
'FileNum = FreeFile
'Open FileName$ For Binary Access Read As FileNum
'
'  For i = 1 To NumSelectedChemicals
'    Get #FileNum, 1024 * i, transfer_record(i)
'  Next i
'
'Close FileNum
'
'End Sub
'
Attribute VB_Name = "SteppVarMod"
'This module contains the declaration of the variables and structures needed
'in the StEPP program.  It also contains type declarations for the user-defined types.
'It also contains CONSTANTS for the PROPERTIES AVAILABLE that are used with the
'PROPAVAILABLE and HAVEPROPERTY arrays.


Global Const NC = 2
Global Database_Path  As String

Global Const NDCONSTANT = 10
Global Const Maxchemical = 20    '/* Maximum no. of occurrences of any chemical
                          '                               in the database */
Global Const MAXNAME = 40        '/* Maximum length of a chemical name */
Global Const MAXFORMULA = 14     '/* Maximum length of a chemical formula */

Global Const ND = 10
Global Const NUMBER_OF_PROPERTIES_AVAILABLE = 75      'Corresponds to PROPAVAILABLE array and PROPERTIES AVAILABLE AND SOURCES set of constants
Global Const NUMBER_OF_PROPERTIES = 20                'Corresponds to HAVEPROPERTY array and PROPERTIES AVAILABLE set of constants
Global Const MAXSELECTEDCHEMICALS = 10 '* Maximum no. of chemicals user is allowed to select

'****************************************************
'       Set of Constants:  PROPERTIES AVAILABLE AND SOURCES
'                          Corresponds to PROPAVAILABLE array
'
Global Const OPERATING_PRESSURE = 1
Global Const OPERATING_TEMPERATURE = 2
Global Const VAPOR_PRESSURE_DATABASE = 3
Global Const VAPOR_PRESSURE_INPUT = 4
Global Const ACTIVITY_COEFFICIENT_UNIFAC = 5
Global Const ACTIVITY_COEFFICIENT_INPUT = 6
Global Const HENRYS_CONSTANT_REGRESS = 7
Global Const HENRYS_CONSTANT_FIT = 8
Global Const HENRYS_CONSTANT_OPT_UNIFAC = 9
Global Const HENRYS_CONSTANT_DATABASE = 10
Global Const HENRYS_CONSTANT_UNIFAC = 11
Global Const HENRYS_CONSTANT_INPUT = 12
Global Const MOLECULAR_WEIGHT_DATABASE = 13
Global Const MOLECULAR_WEIGHT_UNIFAC = 14
Global Const MOLECULAR_WEIGHT_INPUT = 15
Global Const BOILING_POINT_DATABASE = 16
Global Const BOILING_POINT_INPUT = 17
Global Const LIQUID_DENSITY_DATABASE = 18
Global Const LIQUID_DENSITY_UNIFAC = 19
Global Const LIQUID_DENSITY_INPUT = 20
Global Const MOLAR_VOLUME_NBP_UNIFAC = 21
Global Const MOLAR_VOLUME_NBP_INPUT = 22
Global Const MOLAR_VOLUME_OPT_DATABASE = 23
Global Const MOLAR_VOLUME_OPT_UNIFAC = 24
Global Const MOLAR_VOLUME_OPT_INPUT = 25
Global Const REFRACTIVE_INDEX_DATABASE = 26
Global Const REFRACTIVE_INDEX_INPUT = 27
Global Const AQUEOUS_SOLUBILITY_FIT = 28
Global Const AQUEOUS_SOLUBILITY_OPT_UNIFAC = 29
Global Const AQUEOUS_SOLUBILITY_DATABASE = 30
Global Const AQUEOUS_SOLUBILITY_DBT_UNIFAC = 31
Global Const AQUEOUS_SOLUBILITY_INPUT = 32
Global Const OCT_WATER_PART_COEFF_DB = 33
Global Const OCT_WATER_PART_COEFF_DBT_UNIFAC = 34
Global Const OCT_WATER_PART_COEFF_OPT_UNIFAC = 35
Global Const OCT_WATER_PART_COEFF_INPUT = 36
Global Const LIQUID_DIFFUSIVITY_POLSON = 37
Global Const LIQUID_DIFFUSIVITY_HAYDUKLAUDIE = 38
Global Const LIQUID_DIFFUSIVITY_WILKECHANG = 39
Global Const LIQUID_DIFFUSIVITY_INPUT = 40
Global Const GAS_DIFFUSIVITY_WILKELEE = 41
Global Const GAS_DIFFUSIVITY_INPUT = 42
Global Const WATER_DENSITY_CORRELATION = 43
Global Const WATER_DENSITY_INPUT = 44
Global Const WATER_VISCOSITY_CORRELATION = 45
Global Const WATER_VISCOSITY_INPUT = 46
Global Const WATER_SURF_TENSION_CORRELATION = 47
Global Const WATER_SURF_TENSION_INPUT = 48
Global Const AIR_DENSITY_CORRELATION = 49
Global Const AIR_DENSITY_INPUT = 50
Global Const AIR_VISCOSITY_CORRELATION = 51
Global Const AIR_VISCOSITY_INPUT = 52

'    Set of Constants:  PROPERTIES AVAILABLE
'                       Corresponds to HAVEPROPERTY array

Global Const VAPOR_PRESSURE = 3
Global Const ACTIVITY_COEFFICIENT = 4
Global Const HENRYS_CONSTANT = 5
Global Const MOLECULAR_WEIGHT = 6
Global Const BOILING_POINT = 7
Global Const LIQUID_DENSITY = 8
Global Const MOLAR_VOLUME_BOILING_POINT = 9
Global Const MOLAR_VOLUME_OPT = 10
Global Const REFRACTIVE_INDEX = 11
Global Const AQUEOUS_SOLUBILITY = 12
Global Const OCT_WATER_PART_COEFF = 13
Global Const LIQUID_DIFFUSIVITY = 14
Global Const GAS_DIFFUSIVITY = 15
Global Const WATER_DENSITY = 16
Global Const WATER_VISCOSITY = 17
Global Const WATER_SURFACE_TENSION = 18
Global Const AIR_DENSITY = 19
Global Const AIR_VISCOSITY = 20

'****************************************************

Global Const BIP_DB_ORIGINAL_UNIFAC_VLE = 1     'Corresponds to MDL = 1 in FORTRAN code
Global Const BIP_DB_UNIFAC_LLE = 2              'Corresponds to MDL = 2 in FORTRAN code
Global Const BIP_DB_ENVIRONMENTAL = 3           'Corresponds to MDL = 3 in FORTRAN code


Type CurrentSelectionType
   choice As Long     'Choice corresponding to properties available and sources
   source As Long     'Source corresponding to short list of sources
   Value As Double
End Type

Type sourceType
        short As Long
        long As Long
End Type

Type temperatureType
        temperature As Double
End Type

Type temperatureRangeType
        minimumT As Double
        maximumT As Double
End Type

Type VPsuperfundType
        Value As Double
        temperature As Double
End Type

Type informationType
        Value As Double
        source As sourceType
        error As Long
        equation As Long
        temperature As Double
End Type

Type databaseType
        database As informationType
End Type

Type unifacType
        UNIFAC As informationType
End Type

Type inputType
        input As informationType
End Type

Type databaseUnifacInputType
        database As informationType
        UNIFAC As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type unifacInputType
        UNIFAC As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type databaseInputType
        database As informationType
        input As informationType
End Type

Type VPintermediary
        Value As Double
        ncoeffs As Long
        source As sourceType
        error As Long
        equation As Long
        temperature As Double
        minimumT As Double
        maximumT As Double
        antoineA As Double
        antoineB As Double
        antoineC As Double
        antoineD As Double
        antoineE As Double
        superfund As VPsuperfundType
End Type

Type vaporPressureType
        database As VPintermediary
        antoineA As Double
        antoineB As Double
        antoineC As Double
        antoineD As Double
        antoineE As Double
        minimumT As Double
        maximumT As Double
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type activityCoefficientType
        UNIFAC As informationType
        input As informationType
        BinaryInteractionParameterDBAvailable(1 To 3) As Long  'Array storing whether a particular UNIFAC parameter set is a valid choice for a compound.  Initialized to True and then set to False if this particular choice is unavailable.  Indexing corresponds to hierarchy.
        PreviousBinaryInteractionParameterDB As Long
        BinaryInteractionParameterDatabase As Long
        CurrentSelection As CurrentSelectionType
End Type

Type henrysConstantType
        RTI As informationType
        operatingT As unifacType
        regress As informationType
        fit As unifacType
        NumberOfDatabaseHenrysConstants As Long
        database(1 To Maxchemical) As informationType
        chosenDatabaseIndex As Long
        UNIFAC(1 To Maxchemical) As informationType
        chosenUNIFACIndex As Long
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type molecularWeightType
        database As informationType
        UNIFAC As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type boilingPointType
        database As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type liquidDensityType
        dbase_n_coeffs As Long
        dbase_coeffA As Double
        dbase_coeffB As Double
        dbase_coeffC As Double
        dbase_coeffD As Double
        dbase_minT As Double
        dbase_maxT As Double
        database As informationType
        UNIFAC As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type molarVolumeType
        operatingT As databaseUnifacInputType
        BoilingPoint As unifacInputType
End Type

Type refractiveIndexType
        database As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type aqueousSolubilityType
        fit As unifacType
        operatingT As unifacType
        database As informationType
        UNIFAC As informationType
        input As informationType
        BinaryInteractionParameterDBAvailable(1 To 3) As Long  'Array storing whether a particular UNIFAC parameter set is a valid choice for a compound.  Initialized to True and then set to False if this particular choice is unavailable.  Indexing corresponds to hierarchy.
        PreviousBinaryInteractionParameterDB As Long
        BinaryInteractionParameterDatabase As Long
        CurrentSelection As CurrentSelectionType
End Type

Type octWaterPartCoeffType
        database As informationType
        operatingT As unifacType
        databaseT As unifacType
        input As informationType
        BinaryInteractionParameterDBAvailable(1 To 3) As Long  'Array storing whether a particular UNIFAC parameter set is a valid choice for a compound.  Initialized to True and then set to False if this particular choice is unavailable.  Indexing corresponds to hierarchy.
        PreviousBinaryInteractionParameterDB As Long
        BinaryInteractionParameterDatabase As Long
        CurrentSelection As CurrentSelectionType
End Type

Type liquidDiffusivityType
        polson As informationType
        haydukLaudie As informationType
        wilkeChang As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type gasDiffusivityType
        wilkeLee As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type waterDensityType
        correlation As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type waterViscosityType
        correlation As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type waterSurfaceTensionType
        correlation As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type airDensityType
        correlation As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type

Type airViscosityType
        correlation As informationType
        input As informationType
        CurrentSelection As CurrentSelectionType
End Type
                                                                                                 
Type phpr    'PHPR --> PHysical PRoperties:  structure to hold physical properties
        CASNumber As Long
        Name As String * 42
        formula As String * 14
        OperatingPressure As Double
        OperatingTemperature As Double
        VaporPressure As vaporPressureType
        ActivityCoefficient As activityCoefficientType
        HenrysConstant As henrysConstantType
        MolecularWeight As molecularWeightType
        BoilingPoint As boilingPointType
        LiquidDensity As liquidDensityType
        MolarVolume As molarVolumeType
        RefractiveIndex As refractiveIndexType
        AqueousSolubility As aqueousSolubilityType
        OctWaterPartCoeff As octWaterPartCoeffType
        LiquidDiffusivity As liquidDiffusivityType
        GasDiffusivity As gasDiffusivityType
        WaterDensity As waterDensityType
        WaterViscosity As waterViscosityType
        WaterSurfaceTension As waterSurfaceTensionType
        AirDensity As airDensityType
        AirViscosity As airViscosityType
        NumberofRingsinCompound As Long
        MaximumUnifacGroups As Long
        MS(1 To 10, 1 To 10, 1 To 2) As Long
        XMW(1 To ND) As Double
        HaveProperty(1 To NUMBER_OF_PROPERTIES) As Long
        PROPAVAILABLE(1 To NUMBER_OF_PROPERTIES_AVAILABLE)  As Long
End Type



Global FGRPErrorFlag As Long     'Error flag corresponding to FORTRAN routine called FGRPCALL

Type inp     'INP --> structure to read values from database into
        CASNumber As Long
        Name As String * 42
        formula As String * 14
        MolecularWeight As Double
        '/* field for whether molecular weights have been double checked goes here */
        HenrysConstant(1 To Maxchemical) As Double
        HenrysConstantTemperature(1 To Maxchemical) As Double
        HenrysConstantSource As Long
        VaporPressureSuperfund As Double
        VaporPressureSuperfundTemperature As Double
        LiquidDensityEquation As Long
        LiquidDensityNumberCoefficients As Long
        LiquidDensityCoefficientA As Double
        LiquidDensityCoefficientB As Double
        LiquidDensityCoefficientC As Double
        LiquidDensityCoefficientD As Double
        LiquidDensityMinimumT As Double
        LiquidDensityMaximumT As Double
        LiquidDensitySource As Long
        VaporPressureDatabaseEquation As Long
        VaporPressureNumberCoefficients As Long
        VaporPressureAntoineA As Double
        VaporPressureAntoineB As Double
        VaporPressureAntoineC As Double
        VaporPressureAntoineD As Double
        VaporPressureAntoineE As Double
        VaporPressureMinimumT As Double
        VaporPressureMaximumT As Double
        VaporPressureSource As Long
        NumberofRingsinCompound As Long
        MaximumUnifacGroups As Long
        MS(1 To 10, 1 To 10, 1 To 2) As Long
        AqueousSolubility As Double
        AqueousSolubilityTemperature As Double
        AqueousSolubilitySource As Long
        OctWaterPartCoeff As Double
        OctWaterPartCoeffTemperature As Double
        OctWaterPartCoeffSource As Long
        BoilingPoint As Double
        BoilingPointSource As Long
        RefractiveIndex As Double
        RefractiveIndexSource As Long
        OperatingTemperature As Double
        NumberOfDatabaseHenrysConstants As Long
End Type
      

Type StrippingContaminantProperties
     Name As String
     MolecularWeight As Double
     HenrysConstant As Double
     MolarVolume As Double
     NormalBoilingPoint As Double
     LiquidDiffusivity As Double
     GasDiffusivity As Double
End Type


'********  Set up hierarchy structure and selected structure for properties  ********

Type HierarchyType
     hierarchy As Long
     source As String
End Type


'****  This structure will contain the hierarchy for properties
'****  and also the currently selected properties for StEPP.
'****  Note that the values assigned to these variables correspond
'****  to the global constants given above
'****     e.g. ACTIVITY_COEFFICIENT_UNIFAC = 5
'****          MOLAR_VOLUME_OPT_UNIFAC = 24  etc.

Type HierarchyChoices
     VaporPressure(1 To 2) As HierarchyType
     ActivityCoefficient(1 To 2) As HierarchyType
     HenrysConstant(1 To 6) As HierarchyType
     MolecularWeight(1 To 3) As HierarchyType
     BoilingPoint(1 To 2) As HierarchyType
     LiquidDensity(1 To 3) As HierarchyType
     MolarVolumeBoilingPoint(1 To 2)  As HierarchyType
     MolarVolumeOperatingT(1 To 3) As HierarchyType
     RefractiveIndex(1 To 2) As HierarchyType
     AqueousSolubility(1 To 5) As HierarchyType
     OctWaterPartCoeff(1 To 4) As HierarchyType
     LiquidDiffusivityMWTlt1000(1 To 4) As HierarchyType
     LiquidDiffusivityMWTgt1000(1 To 4) As HierarchyType
     GasDiffusivity(1 To 2) As HierarchyType
     WaterDensity(1 To 2) As HierarchyType
     WaterViscosity(1 To 2) As HierarchyType
     WaterSurfaceTension(1 To 2) As HierarchyType
     AirDensity(1 To 2) As HierarchyType
     AirViscosity(1 To 2) As HierarchyType
End Type

'*** This structure will store the hierarchy for properties relating
'*** to choice of UNIFAC Binary interaction parameter database

Type BIP_DB_Hierarchy_Type
     ActivityCoefficient(1 To 3) As Long
     AqueousSolubility(1 To 3) As Long
     OctWaterPartCoeff(1 To 2) As Long
End Type


'*** This structure will be used to store the indexes for the
'*** previously selected values on the property forms for use
'*** when a user clicks on a new property

Type HighlightingSelectedValue
     PreviousIndex As Integer
End Type

Type HighlightProperties
     VaporPressure As HighlightingSelectedValue
     ActivityCoefficient As HighlightingSelectedValue
     HenrysConstant As HighlightingSelectedValue
     MolecularWeight As HighlightingSelectedValue
     BoilingPoint As HighlightingSelectedValue
     LiquidDensity As HighlightingSelectedValue
     MolarVolumeBoilingPoint As HighlightingSelectedValue
     MolarVolumeOperatingT As HighlightingSelectedValue
     RefractiveIndex As HighlightingSelectedValue
     AqueousSolubility As HighlightingSelectedValue
     OctWaterPartCoeff As HighlightingSelectedValue
     LiquidDiffusivity As HighlightingSelectedValue
     GasDiffusivity As HighlightingSelectedValue
     WaterDensity As HighlightingSelectedValue
     WaterViscosity As HighlightingSelectedValue
     WaterSurfaceTension As HighlightingSelectedValue
     AirDensity As HighlightingSelectedValue
     AirViscosity As HighlightingSelectedValue
End Type



Global dbinput As inp   'input structure for chemical to store properties as they are read from the database



Global phprop As phpr '/* physical properties structure */
Global hie As HierarchyChoices '* default hierarchy structure *

Global hilight As HighlightProperties '* current highlighted value on each form *

Global HaveProperty(1 To NUMBER_OF_PROPERTIES)   As Long
Global PROPAVAILABLE(1 To NUMBER_OF_PROPERTIES_AVAILABLE)  As Long

Global Find_String As String

Global PropContaminant(1 To MAXSELECTEDCHEMICALS) As phpr
Global NumSelectedChemicals As Integer

Global PreviouslySelectedIndex  'Index of item in cboSelectContaminant selected previously

Global steppPath As String      'Path where StEPP is stored
Global SaveAndLoadPath As String   'Path where user has specified for saving and loading

Global BIP_dbHierarchy As BIP_DB_Hierarchy_Type  'Hierarchy for UNIFAC parameter set
Global UserSelectedTheUnifacBIPDBAqSol As Integer      'Boolean variable telling if user has selected this or if it is to be done by the program according to hierarchy
Global UserSelectedTheUnifacBIPDBActCoeff As Integer   'Boolean variable telling if user has selected this or if it is to be done by the program according to hierarchy
Global UserSelectedTheUnifacBIPDBKow As Integer        'Boolean variable telling if user has selected this or if it is to be done by the program according to hierarchy

Attribute VB_Name = "UnitsMod"
'*** This module will store routines for switching between
'*** SI and English Units

Global Const SIUnits = 0
Global Const EnglishUnits = 1
Global CurrentUnits As Integer

'Array to hold current Units for each property
Global Units(1 To NUMBER_OF_PROPERTIES) As String

Sub BuildEnglishLabels()
'*** This subroutine will place labels appropriate to English Units
'*** on to the forms used in the program and place the units of each property into
'*** an array called UNITS

     '*** Main Form:  contam_prop_form
     contam_prop_form!lblOperatingConditions(0).Caption = "Pressure (psi)"
     contam_prop_form!lblOperatingConditions(1).Caption = "Temperature (F)"
     contam_prop_form.lblContaminantPropertiesLabel(0).Caption = "Vapor Pressure (psi)"
     contam_prop_form.lblContaminantPropertiesLabel(1).Caption = "Infinite Dilution Activity Coeff. (-)"
     contam_prop_form.lblContaminantPropertiesLabel(2).Caption = "Henry's Constant (-)"
     contam_prop_form.lblContaminantPropertiesLabel(3).Caption = "Molecular Weight (lb/lb-mol)"
     contam_prop_form.lblContaminantPropertiesLabel(4).Caption = "Normal Boiling Point (NBP) (F)"
     contam_prop_form.lblContaminantPropertiesLabel(5).Caption = "Liquid Density (lb/ft3)"
     contam_prop_form.lblContaminantPropertiesLabel(6).Caption = "Molar Volume at Op. T (ft3/lb-mol)"
     contam_prop_form.lblContaminantPropertiesLabel(7).Caption = "Molar Volume at NBP (ft3/lb-mol)"
     contam_prop_form.lblContaminantPropertiesLabel(8).Caption = "Refractive Index @77 F"
     contam_prop_form.lblContaminantPropertiesLabel(9).Caption = "Aqueous Solubility (PPMw)"
     contam_prop_form.lblContaminantPropertiesLabel(10).Caption = "log Octanol Water Part. Coeff. (-)"
     contam_prop_form.lblContaminantPropertiesLabel(11).Caption = "Liquid Diffusivity (ft2/s)"
     contam_prop_form.lblContaminantPropertiesLabel(12).Caption = "Gas Diffusivity (ft2/s)"
     contam_prop_form.lblAirWaterPropertiesLabel(0).Caption = "Water Density (lb/ft3)"
     contam_prop_form.lblAirWaterPropertiesLabel(1).Caption = "Water Viscosity (lb/ft/s)"
     contam_prop_form.lblAirWaterPropertiesLabel(2).Caption = "Water Surface Tension (lbf/ft)"
     contam_prop_form.lblAirWaterPropertiesLabel(3).Caption = "Air Density (lb/ft3)"
     contam_prop_form.lblAirWaterPropertiesLabel(4).Caption = "Air Viscosity (lb/ft/s)"

     '*** Vapor Pressure Form (vp_form)
     vp_form!lblCurrentInformation(0).Caption = "Value (psi)"
     vp_form!lblVPLabel.Caption = "Vapor Pressure (psi)"
     vp_form!lblVPTempLabel.Caption = "Temp. (F)"
     vp_form!lblVPminTLabel.Caption = "Tmin (F)"
     vp_form!lblVPmaxTLabel.Caption = "Tmax (F)"

     '*** Infinite Dilution Activity Coefficient form (vp_form)
     infinite_dilution_form!lblCurrentInformation(0).Caption = "Value (-)"
     infinite_dilution_form!lblACLabel.Caption = "Activity Coefficient (-)"
     infinite_dilution_form!lblACTempLabel.Caption = "Temp. (F)"

     '*** Henry's Constant form (hc_form)
     hc_form!lblCurrentInformation(0).Caption = "Value (-)"
     hc_form!lblHCLabel.Caption = "Henry's Constant (-)"
     hc_form!lblHCTempLabel.Caption = "Temp. (F)"
     hc_form!lblHCminTLabel.Caption = "Tmin (F)"
     hc_form!lblHCmaxTLabel.Caption = "Tmax (F)"

     '*** Molecular Weight Form
     mwt_form!lblCurrentInformation(0).Caption = "Value (lb/lb-mol)"
     mwt_form!lblMWTLabel.Caption = "Molecular Weight (lb/lb-mol)"

     '*** Normal Boiling Point form (nbp_form)
     nbp_form!lblCurrentInformation(0).Caption = "Value (F)"
     nbp_form!lblNBPLabel.Caption = "Normal Boiling Point (F)"

     '*** Liquid Density form (ldens_form)
     ldens_form!lblCurrentInformation(0).Caption = "Value (lb/ft3)"
     ldens_form!lblLDensLabel.Caption = "Liq. Dens (lb/ft3)"
     ldens_form!lblLDensTempLabel.Caption = "Temp (F)"
     ldens_form!lblLDensminTLabel.Caption = "Tmin (F)"
     ldens_form!lblLDensmaxTLabel.Caption = "Tmax (F)"

     '*** Molar Volume at Operating Temperature form (molar_vol_form)
     molar_vol_form!lblCurrentInformation(0).Caption = "Value (ft3/lb-mol)"
     molar_vol_form!lblMVOpTLabel.Caption = "Molar Vol." + Chr$(13) + "(ft3/lb-mol)"
     molar_vol_form!lblMVOpTTempLabel.Caption = "Temp. (F)"
     molar_vol_form!lblMVOpTminTLabel.Caption = "Tmin (F)"
     molar_vol_form!lblMVOpTMaxTLabel.Caption = "Tmax (F)"

     '*** Molar Volume at Normal Boiling Point form (mv_nbp_form)
     mv_nbp_form!lblCurrentInformation(0).Caption = "Value (ft3/lb-mol)"
     mv_nbp_form!lblMVNBPLabel.Caption = "Molar Vol. (ft3/lb-mol)"
     mv_nbp_form!lblMVNBPTempLabel = "Temp. (F)"

     '*** Refractive Index form (rindex_form)
     rindex_form!lblCurrentInformation(0).Caption = "Value (-)"
     rindex_form!lblRefIndexLabel.Caption = "Refractive Index @77 F"

     '*** Aqueous Solubility Form (aqsol_form)
     aqsol_form!lblCurrentInformation(0).Caption = "Value (PPMw)"
     aqsol_form!lblAqSolLabel.Caption = "Aqueous Sol. (PPMw)"
     aqsol_form!lblAqSolTempLabel.Caption = "Temp. (F)"

    '*** Octanol Water Partition Coefficient form (octanol_form)
    octanol_form!lblCurrentInformation(0).Caption = "Value of log Kow (-)"
    octanol_form!lblKowLabel.Caption = "log Kow (-)"
    octanol_form!lblKowTempLabel.Caption = "Temp. (F)"

    '*** Liquid Diffusivity Form (liquid_diff_form)
    liquid_diff_form!lblCurrentInformation(0).Caption = "Value (ft2/s)"
    liquid_diff_form!lblLiqDiffLabel.Caption = "Liquid Diff. (ft2/s)"
    liquid_diff_form!lblLiqDiffTempLabel.Caption = "Temp. (F)"

    '*** Gas Diffusivity Form (gas_diff_form)
    gas_diff_form!lblCurrentInformation(0).Caption = "Value (ft2/s)"
    gas_diff_form!lblGasDiffLabel.Caption = "Gas Diffusivity" + Chr$(13) + "(ft2/s)"
    gas_diff_form!lblGasDiffTempLabel.Caption = "Temp. (F)"

    '*** Water Density form (frmWaterDensity)
    frmWaterDensity!lblCurrentInformation(0).Caption = "Value (lb/ft3)"
    frmWaterDensity!lblH2ODensLabel.Caption = "H2O Dens. (lb/ft3)"
    frmWaterDensity!lblH2ODensTempLabel.Caption = "Temp. (F)"
    frmWaterDensity!lblH2ODensminTLabel.Caption = "Tmin (F)"
    frmWaterDensity!lblH2ODensmaxTLabel.Caption = "Tmax (F)"

    '*** Water Viscosity form (frmWaterViscosity)
    frmWaterViscosity!lblCurrentInformation(0).Caption = "Value (lb/ft/s)"
    frmWaterViscosity!lblH2OViscLabel.Caption = "H2O Visc." + Chr$(13) + "(lb/ft/s)"
    frmWaterViscosity!lblH2OViscTempLabel.Caption = "Temp. (F)"
    frmWaterViscosity!lblH2OViscminTLabel.Caption = "Tmin (F)"
    frmWaterViscosity!lblH2OViscmaxTLabel.Caption = "Tmax (F)"

    '*** Water Surface Tension form (frmWaterSurfaceTension)
    frmWaterSurfaceTension!lblCurrentInformation(0).Caption = "Value (lbf/ft)"
    frmWaterSurfaceTension!lblH2OSTLabel.Caption = "Surf. Tens." + Chr$(13) + "(lbf/ft)"
    frmWaterSurfaceTension!lblH2OSTTempLabel.Caption = "Temp. (F)"
    frmWaterSurfaceTension!lblH2OSTminTLabel.Caption = "Tmin (F)"
    frmWaterSurfaceTension!lblH2OSTmaxTLabel.Caption = "Tmax (F)"

    '*** Air Density form (frmAirDensity)
    frmAirDensity!lblCurrentInformation(0).Caption = "Value (lb/ft3)"
    frmAirDensity!lblAirDensLabel.Caption = "Air Dens." + Chr$(13) + "(lb/ft3)"
    frmAirDensity!lblAirDensTempLabel.Caption = "Temp. (F)"
    frmAirDensity!lblAirDensminTLabel.Caption = "Tmin (F)"
    frmAirDensity!lblAirDensmaxTLabel.Caption = "Tmax (F)"

    '*** Air Viscosity form (frmAirViscosity)
    frmAirViscosity!lblCurrentInformation(0).Caption = "Value (lb/ft/s)"
    frmAirViscosity!lblAirViscLabel.Caption = "Air Visc." + Chr$(13) + "(lb/ft/s)"
    frmAirViscosity!lblAirViscTempLabel.Caption = "Temp. (F)"
    frmAirViscosity!lblAirViscminTLabel.Caption = "Tmin (F)"
    frmAirViscosity!lblAirViscmaxTLabel.Caption = "Tmax (F)"

    Call CreateUnitsArrayEnglish

End Sub

Sub BuildSILabels()

'*** This subroutine will place labels on all the forms
'*** corresponding to SI Units

     '*** Main Form:  contam_prop_form
     contam_prop_form!lblOperatingConditions(0).Caption = "Pressure (Pa)"
     contam_prop_form!lblOperatingConditions(1).Caption = "Temperature (C)"
     contam_prop_form.lblContaminantPropertiesLabel(0).Caption = "Vapor Pressure (Pa)"
     contam_prop_form.lblContaminantPropertiesLabel(1).Caption = "Infinite Dilution Activity Coeff. (-)"
     contam_prop_form.lblContaminantPropertiesLabel(2).Caption = "Henry's Constant (-)"
     contam_prop_form.lblContaminantPropertiesLabel(3).Caption = "Molecular Weight (kg/kmol)"
     contam_prop_form.lblContaminantPropertiesLabel(4).Caption = "Normal Boiling Point (NBP) (C)"
     contam_prop_form.lblContaminantPropertiesLabel(5).Caption = "Liquid Density (kg/m3)"
     contam_prop_form.lblContaminantPropertiesLabel(6).Caption = "Molar Volume at Op. T (m3/kmol)"
     contam_prop_form.lblContaminantPropertiesLabel(7).Caption = "Molar Volume at NBP (m3/kmol)"
     contam_prop_form.lblContaminantPropertiesLabel(8).Caption = "Refractive Index @25 C"
     contam_prop_form.lblContaminantPropertiesLabel(9).Caption = "Aqueous Solubility (PPMw)"
     contam_prop_form.lblContaminantPropertiesLabel(10).Caption = "log Octanol Water Part. Coeff. (-)"
     contam_prop_form.lblContaminantPropertiesLabel(11).Caption = "Liquid Diffusivity (m2/s)"
     contam_prop_form.lblContaminantPropertiesLabel(12).Caption = "Gas Diffusivity (m2/s)"
     contam_prop_form.lblAirWaterPropertiesLabel(0).Caption = "Water Density (kg/m3)"
     contam_prop_form.lblAirWaterPropertiesLabel(1).Caption = "Water Viscosity (kg/m/s)"
     contam_prop_form.lblAirWaterPropertiesLabel(2).Caption = "Water Surface Tension (N/m)"
     contam_prop_form.lblAirWaterPropertiesLabel(3).Caption = "Air Density (kg/m3)"
     contam_prop_form.lblAirWaterPropertiesLabel(4).Caption = "Air Viscosity (kg/m/s)"

     '*** Vapor Pressure Form (vp_form)
     vp_form!lblCurrentInformation(0).Caption = "Value (Pa)"
     vp_form!lblVPLabel.Caption = "Vapor Pressure (Pa)"
     vp_form!lblVPTempLabel.Caption = "Temp. (C)"
     vp_form!lblVPminTLabel.Caption = "Tmin (C)"
     vp_form!lblVPmaxTLabel.Caption = "Tmax (C)"

     '*** Infinite Dilution Activity Coefficient form (vp_form)
     infinite_dilution_form!lblCurrentInformation(0).Caption = "Value (-)"
     infinite_dilution_form!lblACLabel.Caption = "Activity Coefficient (-)"
     infinite_dilution_form!lblACTempLabel.Caption = "Temp. (C)"

     '*** Henry's Constant form (hc_form)
     hc_form!lblCurrentInformation(0).Caption = "Value (-)"
     hc_form!lblHCLabel.Caption = "Henry's Constant (-)"
     hc_form!lblHCTempLabel.Caption = "Temp. (C)"
     hc_form!lblHCminTLabel.Caption = "Tmin (C)"
     hc_form!lblHCmaxTLabel.Caption = "Tmax (C)"

     '*** Molecular Weight Form
     mwt_form!lblCurrentInformation(0).Caption = "Value (kg/kmol)"
     mwt_form!lblMWTLabel.Caption = "Molecular Weight (kg/kmol)"

     '*** Normal Boiling Point form (nbp_form)
     nbp_form!lblCurrentInformation(0).Caption = "Value (C)"
     nbp_form!lblNBPLabel.Caption = "Normal Boiling Point (C)"

     '*** Liquid Density form (ldens_form)
     ldens_form!lblCurrentInformation(0).Caption = "Value (kg/m3)"
     ldens_form!lblLDensLabel.Caption = "Liq. Dens (kg/m3)"
     ldens_form!lblLDensTempLabel.Caption = "Temp (C)"
     ldens_form!lblLDensminTLabel.Caption = "Tmin (C)"
     ldens_form!lblLDensmaxTLabel.Caption = "Tmax (C)"

     '*** Molar Volume at Operating Temperature form (molar_vol_form)
     molar_vol_form!lblCurrentInformation(0).Caption = "Value (m3/kmol)"
     molar_vol_form!lblMVOpTLabel.Caption = "Molar Vol." + Chr$(13) + "(m3/kmol)"
     molar_vol_form!lblMVOpTTempLabel.Caption = "Temp. (C)"
     molar_vol_form!lblMVOpTminTLabel.Caption = "Tmin (C)"
     molar_vol_form!lblMVOpTMaxTLabel.Caption = "Tmax (C)"

     '*** Molar Volume at Normal Boiling Point form (mv_nbp_form)
     mv_nbp_form!lblCurrentInformation(0).Caption = "Value (m3/kmol)"
     mv_nbp_form!lblMVNBPLabel.Caption = "Molar Vol. (m3/kmol)"
     mv_nbp_form!lblMVNBPTempLabel = "Temp. (C)"

     '*** Refractive Index form (rindex_form)
     rindex_form!lblCurrentInformation(0).Caption = "Value (-)"
     rindex_form!lblRefIndexLabel.Caption = "Refractive Index @25 C"

     '*** Aqueous Solubility Form (aqsol_form)
     aqsol_form!lblCurrentInformation(0).Caption = "Value (PPMw)"
     aqsol_form!lblAqSolLabel.Caption = "Aqueous Sol. (PPMw)"
     aqsol_form!lblAqSolTempLabel.Caption = "Temp. (C)"

    '*** Octanol Water Partition Coefficient form (octanol_form)
    octanol_form!lblCurrentInformation(0).Caption = "Value of log Kow (-)"
    octanol_form!lblKowLabel.Caption = "log Kow (-)"
    octanol_form!lblKowTempLabel.Caption = "Temp. (C)"

    '*** Liquid Diffusivity Form (liquid_diff_form)
    liquid_diff_form!lblCurrentInformation(0).Caption = "Value (m2/s)"
    liquid_diff_form!lblLiqDiffLabel.Caption = "Liquid Diff. (m2/s)"
    liquid_diff_form!lblLiqDiffTempLabel.Caption = "Temp. (C)"

    '*** Gas Diffusivity Form (gas_diff_form)
    gas_diff_form!lblCurrentInformation(0).Caption = "Value (m2/s)"
    gas_diff_form!lblGasDiffLabel.Caption = "Gas Diffusivity" + Chr$(13) + "(m2/s)"
    gas_diff_form!lblGasDiffTempLabel.Caption = "Temp. (C)"

    '*** Water Density form (frmWaterDensity)
    frmWaterDensity!lblCurrentInformation(0).Caption = "Value (kg/m3)"
    frmWaterDensity!lblH2ODensLabel.Caption = "H2O Dens. (kg/m3)"
    frmWaterDensity!lblH2ODensTempLabel.Caption = "Temp. (C)"
    frmWaterDensity!lblH2ODensminTLabel.Caption = "Tmin (C)"
    frmWaterDensity!lblH2ODensmaxTLabel.Caption = "Tmax (C)"

    '*** Water Viscosity form (frmWaterViscosity)
    frmWaterViscosity!lblCurrentInformation(0).Caption = "Value (kg/m/s)"
    frmWaterViscosity!lblH2OViscLabel.Caption = "H2O Visc." + Chr$(13) + "(kg/m/s)"
    frmWaterViscosity!lblH2OViscTempLabel.Caption = "Temp. (C)"
    frmWaterViscosity!lblH2OViscminTLabel.Caption = "Tmin (C)"
    frmWaterViscosity!lblH2OViscmaxTLabel.Caption = "Tmax (C)"

    '*** Water Surface Tension form (frmWaterSurfaceTension)
    frmWaterSurfaceTension!lblCurrentInformation(0).Caption = "Value (N/m)"
    frmWaterSurfaceTension!lblH2OSTLabel.Caption = "Surf. Tens." + Chr$(13) + "(N/m)"
    frmWaterSurfaceTension!lblH2OSTTempLabel.Caption = "Temp. (C)"
    frmWaterSurfaceTension!lblH2OSTminTLabel.Caption = "Tmin (C)"
    frmWaterSurfaceTension!lblH2OSTmaxTLabel.Caption = "Tmax (C)"

    '*** Air Density form (frmAirDensity)
    frmAirDensity!lblCurrentInformation(0).Caption = "Value (kg/m3)"
    frmAirDensity!lblAirDensLabel.Caption = "Air Dens." + Chr$(13) + "(kg/m3)"
    frmAirDensity!lblAirDensTempLabel.Caption = "Temp. (C)"
    frmAirDensity!lblAirDensminTLabel.Caption = "Tmin (C)"
    frmAirDensity!lblAirDensmaxTLabel.Caption = "Tmax (C)"

    '*** Air Viscosity form (frmAirViscosity)
    frmAirViscosity!lblCurrentInformation(0).Caption = "Value (kg/m/s)"
    frmAirViscosity!lblAirViscLabel.Caption = "Air Visc." + Chr$(13) + "(kg/m/s)"
    frmAirViscosity!lblAirViscTempLabel.Caption = "Temp. (C)"
    frmAirViscosity!lblAirViscminTLabel.Caption = "Tmin (C)"
    frmAirViscosity!lblAirViscmaxTLabel.Caption = "Tmax (C)"

    Call CreateUnitsArraySI

End Sub

Sub CreateUnitsArrayEnglish()

'Place the Units into an array called units
    Units(OPERATING_PRESSURE) = "psi"
    Units(OPERATING_TEMPERATURE) = "F"
    Units(VAPOR_PRESSURE) = "psi"
    Units(ACTIVITY_COEFFICIENT) = "(-)"
    Units(HENRYS_CONSTANT) = "(-)"
    Units(MOLECULAR_WEIGHT) = "lbm/lbm-mol"
    Units(BOILING_POINT) = "F"
    Units(LIQUID_DENSITY) = "lbm/ft3"
    Units(MOLAR_VOLUME_BOILING_POINT) = "ft3/lbm-mol"
    Units(MOLAR_VOLUME_OPT) = "ft3/lbm-mol"
    Units(REFRACTIVE_INDEX) = "(-)"
    Units(AQUEOUS_SOLUBILITY) = "PPMw"
    Units(OCT_WATER_PART_COEFF) = "(-)"
    Units(LIQUID_DIFFUSIVITY) = "ft2/sec"
    Units(GAS_DIFFUSIVITY) = "ft2/sec"
    Units(WATER_DENSITY) = "lbm/ft3"
    Units(WATER_VISCOSITY) = "lbm/ft/sec"
    Units(WATER_SURFACE_TENSION) = "lbf/ft"
    Units(AIR_DENSITY) = "lbm/ft3"
    Units(AIR_VISCOSITY) = "lbm/ft/sec"

End Sub

Sub CreateUnitsArraySI()

'Place the Units into an array called units
    Units(OPERATING_PRESSURE) = "Pa"
    Units(OPERATING_TEMPERATURE) = "C"
    Units(VAPOR_PRESSURE) = "Pa"
    Units(ACTIVITY_COEFFICIENT) = "(-)"
    Units(HENRYS_CONSTANT) = "(-)"
    Units(MOLECULAR_WEIGHT) = "kg/kmol"
    Units(BOILING_POINT) = "C"
    Units(LIQUID_DENSITY) = "kg/m3"
    Units(MOLAR_VOLUME_BOILING_POINT) = "m3/kmol"
    Units(MOLAR_VOLUME_OPT) = "m3/kmol"
    Units(REFRACTIVE_INDEX) = "(-)"
    Units(AQUEOUS_SOLUBILITY) = "PPMw"
    Units(OCT_WATER_PART_COEFF) = "(-)"
    Units(LIQUID_DIFFUSIVITY) = "m2/sec"
    Units(GAS_DIFFUSIVITY) = "m2/sec"
    Units(WATER_DENSITY) = "kg/m3"
    Units(WATER_VISCOSITY) = "kg/m/sec"
    Units(WATER_SURFACE_TENSION) = "N/m"
    Units(AIR_DENSITY) = "kg/m3"
    Units(AIR_VISCOSITY) = "kg/m/sec"

End Sub

Sub GetUnits()

    '*** Place appropriate labels on to forms
    If CurrentUnits = SIUnits Then
       Call BuildSILabels
    ElseIf CurrentUnits = EnglishUnits Then
       Call BuildEnglishLabels
    End If

End Sub

Attribute VB_Name = "ValidateMod"
Option Explicit

Global Const vfSendFocus = 1
Global Const vfReturnFocus = 2

Global glBackColor As Long
Global glForeColor As Long





Const ValidateMod_declarations_end = True


Sub GotFocus_Handle(frm As Form, Ctl As Control, OriginalValue As String)
  If TypeOf Ctl Is TextBox Then
    '
    ' Select entire text string
    '
    OriginalValue = Ctl.Text
    Ctl.SelStart = 0
    Ctl.SelLength = Len(OriginalValue)
    '
    ' Set light blue background
    '
    glBackColor = Ctl.BackColor
    glForeColor = Ctl.ForeColor
    Ctl.BackColor = &HFFFF00
    Ctl.ForeColor = &H80000008
  End If
'  If (frmMainMenu!VFocus1.ActiveControl = 0) Then
'    frmMainMenu!VFocus1.ActiveControl = ctl.hWnd
'    If TypeOf ctl Is TextBox Then
'      '-- Select entire text string
'      OriginalValue = ctl.Text
'      ctl.SelStart = 0
'      ctl.SelLength = Len(OriginalValue)
'
'      '-- Set light blue background
'      glBackColor = ctl.BackColor
'      glForeColor = ctl.ForeColor
'      ctl.BackColor = &HFFFF00
'      ctl.ForeColor = &H80000008
'    End If
'  End If
End Sub

Sub LostFocus_Handle(frm As Form, Ctl As Control, ValidationOK As Integer)
  If TypeOf Ctl Is TextBox Then
    'Ctl.BackColor = glBackColor
    'Ctl.ForeColor = glForeColor
    'FORCE TO BLACK TEXT ON WHITE BACKGROUND.
    Ctl.BackColor = QBColor(15)
    Ctl.ForeColor = QBColor(0)
  End If
'  If (ValidationOK) Then
'    frmMainMenu!VFocus1.FocusAction = vfSendFocus
'  Else
'    frmMainMenu!VFocus1.FocusAction = vfReturnFocus
'  End If
'  frmMainMenu!VFocus1.ActiveControl = 0
'
'  If TypeOf Ctl Is TextBox Then
'    Ctl.BackColor = glBackColor
'    Ctl.ForeColor = glForeColor
'  End If
End Sub

Function LostFocus_IsEvil(frm As Form, Ctl As Control)
  LostFocus_IsEvil = False
'  If (frmMainMenu!VFocus1.ActiveControl = Ctl.hWnd) Then
'    LostFocus_IsEvil = False
'  Else
'    LostFocus_IsEvil = True
'  End If
End Function


'Sub GotFocus_Handle(frm As Form, Ctl As Control, OriginalValue As String)
'
'  If (contam_prop_form!VFocus1.ActiveControl = 0) Then
'    contam_prop_form!VFocus1.ActiveControl = Ctl.hWnd
'    If TypeOf Ctl Is TextBox Then
'      '-- Select entire text string
'      OriginalValue = Ctl.Text
'      Ctl.SelStart = 0
'      Ctl.SelLength = Len(OriginalValue)
'
'      '-- Set light blue background
'      glBackColor = Ctl.BackColor
'      glForeColor = Ctl.ForeColor
'      Ctl.BackColor = &HFFFF00
'      Ctl.ForeColor = &H80000008
'    End If
'  End If
'
'End Sub
'
'Sub LostFocus_Handle(frm As Form, Ctl As Control, ValidationOK As Integer)
'
'  If (ValidationOK) Then
'    contam_prop_form!VFocus1.FocusAction = vfSendFocus
'  Else
'    contam_prop_form!VFocus1.FocusAction = vfReturnFocus
'  End If
'  contam_prop_form!VFocus1.ActiveControl = 0
'
'  If TypeOf Ctl Is TextBox Then
'    Ctl.BackColor = glBackColor
'    Ctl.ForeColor = glForeColor
'  End If
'
'End Sub
'
'Function LostFocus_IsEvil(frm As Form, Ctl As Control)
'
'  If (contam_prop_form!VFocus1.ActiveControl = Ctl.hWnd) Then
'    LostFocus_IsEvil = False
'  Else
'    LostFocus_IsEvil = True
'  End If
'
'End Function

Attribute VB_Name = "VBConstMod"
''''''''''''''''''''''''''''
' Visual Basic global constant file. This file can be loaded
' into a code module.
'
' Some constants are commented out because they have
' duplicates (e.g., NONE appears several places).
'
' If you are updating a Visual Basic application written with
' an older version, you should replace your global constants
' with the constants in this file.
'
''''''''''''''''''''''''''''

' General

' Clipboard formats
Global Const CF_LINK = &HBF00
Global Const CF_TEXT = 1
Global Const CF_BITMAP = 2
Global Const CF_METAFILE = 3
Global Const CF_DIB = 8
Global Const CF_PALETTE = 9

' DragOver
Global Const ENTER = 0
Global Const LEAVE = 1
Global Const OVER = 2

' Drag (controls)
Global Const CANCEL = 0
Global Const BEGIN_DRAG = 1
Global Const END_DRAG = 2

' Show parameters
Global Const MODAL = 1
Global Const MODELESS = 0

' Arrange Method
' for MDI Forms
Global Const CASCADE = 0
Global Const TILE_HORIZONTAL = 1
Global Const TILE_VERTICAL = 2
Global Const ARRANGE_ICONS = 3

'ZOrder Method
Global Const BRINGTOFRONT = 0
Global Const SENDTOBACK = 1

' Key Codes
Global Const KEY_LBUTTON = &H1
Global Const KEY_RBUTTON = &H2
Global Const KEY_CANCEL = &H3
Global Const KEY_MBUTTON = &H4    ' NOT contiguous with L & RBUTTON
Global Const KEY_BACK = &H8
Global Const KEY_TAB = &H9
Global Const KEY_CLEAR = &HC
Global Const KEY_RETURN = &HD
Global Const KEY_SHIFT = &H10
Global Const KEY_CONTROL = &H11
Global Const KEY_MENU = &H12
Global Const KEY_PAUSE = &H13
Global Const KEY_CAPITAL = &H14
Global Const KEY_ESCAPE = &H1B
Global Const KEY_SPACE = &H20
Global Const KEY_PRIOR = &H21
Global Const KEY_NEXT = &H22
Global Const KEY_END = &H23
Global Const KEY_HOME = &H24
Global Const KEY_LEFT = &H25
Global Const KEY_UP = &H26
Global Const KEY_RIGHT = &H27
Global Const KEY_DOWN = &H28
Global Const KEY_SELECT = &H29
Global Const KEY_PRINT = &H2A
Global Const KEY_EXECUTE = &H2B
Global Const KEY_SNAPSHOT = &H2C
Global Const KEY_INSERT = &H2D
Global Const KEY_DELETE = &H2E
Global Const KEY_HELP = &H2F

' KEY_A thru KEY_Z are the same as their ASCII equivalents: 'A' thru 'Z'
' KEY_0 thru KEY_9 are the same as their ASCII equivalents: '0' thru '9'

Global Const KEY_NUMPAD0 = &H60
Global Const KEY_NUMPAD1 = &H61
Global Const KEY_NUMPAD2 = &H62
Global Const KEY_NUMPAD3 = &H63
Global Const KEY_NUMPAD4 = &H64
Global Const KEY_NUMPAD5 = &H65
Global Const KEY_NUMPAD6 = &H66
Global Const KEY_NUMPAD7 = &H67
Global Const KEY_NUMPAD8 = &H68
Global Const KEY_NUMPAD9 = &H69
Global Const KEY_MULTIPLY = &H6A
Global Const KEY_ADD = &H6B
Global Const KEY_SEPARATOR = &H6C
Global Const KEY_SUBTRACT = &H6D
Global Const KEY_DECIMAL = &H6E
Global Const KEY_DIVIDE = &H6F
Global Const KEY_F1 = &H70
Global Const KEY_F2 = &H71
Global Const KEY_F3 = &H72
Global Const KEY_F4 = &H73
Global Const KEY_F5 = &H74
Global Const KEY_F6 = &H75
Global Const KEY_F7 = &H76
Global Const KEY_F8 = &H77
Global Const KEY_F9 = &H78
Global Const KEY_F10 = &H79
Global Const KEY_F11 = &H7A
Global Const KEY_F12 = &H7B
Global Const KEY_F13 = &H7C
Global Const KEY_F14 = &H7D
Global Const KEY_F15 = &H7E
Global Const KEY_F16 = &H7F

Global Const KEY_NUMLOCK = &H90

' Variant VarType tags

Global Const V_EMPTY = 0
Global Const V_NULL = 1
Global Const V_INTEGER = 2
Global Const V_LONG = 3
Global Const V_SINGLE = 4
Global Const V_DOUBLE = 5
Global Const V_CURRENCY = 6
Global Const V_DATE = 7
Global Const V_STRING = 8


' Event Parameters

' ErrNum (LinkError)
Global Const WRONG_FORMAT = 1
Global Const DDE_SOURCE_CLOSED = 6
Global Const TOO_MANY_LINKS = 7
Global Const DATA_TRANSFER_FAILED = 8

' QueryUnload
Global Const FORM_CONTROLMENU = 0
Global Const FORM_CODE = 1
Global Const APP_WINDOWS = 2
Global Const APP_TASKMANAGER = 3
Global Const FORM_MDIFORM = 4

' Properties

' Colors
Global Const BLACK = &H0&
Global Const RED = &HFF&
Global Const GREEN = &HFF00&
Global Const YELLOW = &HFFFF&
Global Const BLUE = &HFF0000
Global Const MAGENTA = &HFF00FF
Global Const CYAN = &HFFFF00
Global Const WHITE = &HFFFFFF

' System Colors
Global Const SCROLL_BARS = &H80000000           ' Scroll-bars gray area.
Global Const DESKTOP = &H80000001               ' Desktop.
Global Const ACTIVE_TITLE_BAR = &H80000002      ' Active window caption.
Global Const INACTIVE_TITLE_BAR = &H80000003    ' Inactive window caption.
Global Const MENU_BAR = &H80000004              ' Menu background.
Global Const WINDOW_BACKGROUND = &H80000005     ' Window background.
Global Const WINDOW_FRAME = &H80000006          ' Window frame.
Global Const MENU_TEXT = &H80000007             ' Text in menus.
Global Const WINDOW_TEXT = &H80000008           ' Text in windows.
Global Const TITLE_BAR_TEXT = &H80000009        ' Text in caption, size box, scroll-bar arrow box..
Global Const ACTIVE_BORDER = &H8000000A         ' Active window border.
Global Const INACTIVE_BORDER = &H8000000B       ' Inactive window border.
Global Const APPLICATION_WORKSPACE = &H8000000C ' Background color of multiple document interface (MDI) applications.
Global Const HIGHLIGHT = &H8000000D             ' Items selected item in a control.
Global Const HIGHLIGHT_TEXT = &H8000000E        ' Text of item selected in a control.
Global Const BUTTON_FACE = &H8000000F           ' Face shading on command buttons.
Global Const BUTTON_SHADOW = &H80000010         ' Edge shading on command buttons.
Global Const GRAY_TEXT = &H80000011             ' Grayed (disabled) text.  This color is set to 0 if the current display driver does not support a solid gray color.
Global Const BUTTON_TEXT = &H80000012           ' Text on push buttons.

' Enumerated Types

' Align (picture box)
Global Const NONE = 0
Global Const ALIGN_TOP = 1
Global Const ALIGN_BOTTOM = 2

' Alignment
Global Const LEFT_JUSTIFY = 0  ' 0 - Left Justify
Global Const RIGHT_JUSTIFY = 1 ' 1 - Right Justify
Global Const CENTER = 2        ' 2 - Center

' BorderStyle (form)
'Global Const NONE = 0          ' 0 - None
Global Const FIXED_SINGLE = 1   ' 1 - Fixed Single
Global Const SIZABLE = 2        ' 2 - Sizable (Forms only)
Global Const FIXED_DOUBLE = 3   ' 3 - Fixed Double (Forms only)

' BorderStyle (Shape and Line)
'Global Const TRANSPARENT = 0    '0 - Transparent
'Global Const SOLID = 1          '1 - Solid
'Global Const DASH = 2         ' 2 - Dash
'Global Const DOT = 3          ' 3 - Dot
'Global Const DASH_DOT = 4     ' 4 - Dash-Dot
'Global Const DASH_DOT_DOT = 5 ' 5 - Dash-Dot-Dot
'Global Const INSIDE_SOLID = 6 ' 6 - Inside Solid

' MousePointer
Global Const DEFAULT = 0        ' 0 - Default
Global Const ARROW = 1          ' 1 - Arrow
Global Const CROSSHAIR = 2      ' 2 - Cross
Global Const IBEAM = 3          ' 3 - I-Beam
Global Const ICON_POINTER = 4   ' 4 - Icon
Global Const SIZE_POINTER = 5   ' 5 - Size
Global Const SIZE_NE_SW = 6     ' 6 - Size NE SW
Global Const SIZE_N_S = 7       ' 7 - Size N S
Global Const SIZE_NW_SE = 8     ' 8 - Size NW SE
Global Const SIZE_W_E = 9       ' 9 - Size W E
Global Const UP_ARROW = 10      ' 10 - Up Arrow
Global Const HOURGLASS = 11     ' 11 - Hourglass
Global Const NO_DROP = 12       ' 12 - No drop

' DragMode
Global Const MANUAL = 0    ' 0 - Manual
Global Const AUTOMATIC = 1 ' 1 - Automatic

' DrawMode
Global Const BLACKNESS = 1      ' 1 - Blackness
Global Const NOT_MERGE_PEN = 2  ' 2 - Not Merge Pen
Global Const MASK_NOT_PEN = 3   ' 3 - Mask Not Pen
Global Const NOT_COPY_PEN = 4   ' 4 - Not Copy Pen
Global Const MASK_PEN_NOT = 5   ' 5 - Mask Pen Not
Global Const INVERT = 6         ' 6 - Invert
Global Const XOR_PEN = 7        ' 7 - Xor Pen
Global Const NOT_MASK_PEN = 8   ' 8 - Not Mask Pen
Global Const MASK_PEN = 9       ' 9 - Mask Pen
Global Const NOT_XOR_PEN = 10   ' 10 - Not Xor Pen
Global Const NOP = 11           ' 11 - Nop
Global Const MERGE_NOT_PEN = 12 ' 12 - Merge Not Pen
Global Const COPY_PEN = 13      ' 13 - Copy Pen
Global Const MERGE_PEN_NOT = 14 ' 14 - Merge Pen Not
Global Const MERGE_PEN = 15     ' 15 - Merge Pen
Global Const WHITENESS = 16     ' 16 - Whiteness

' DrawStyle
Global Const SOLID = 0        ' 0 - Solid
Global Const DASH = 1         ' 1 - Dash
Global Const DOT = 2          ' 2 - Dot
Global Const DASH_DOT = 3     ' 3 - Dash-Dot
Global Const DASH_DOT_DOT = 4 ' 4 - Dash-Dot-Dot
Global Const INVISIBLE = 5    ' 5 - Invisible
Global Const INSIDE_SOLID = 6 ' 6 - Inside Solid

' FillStyle
' Global Const SOLID = 0           ' 0 - Solid
Global Const TRANSPARENT = 1       ' 1 - Transparent
Global Const HORIZONTAL_LINE = 2   ' 2 - Horizontal Line
Global Const VERTICAL_LINE = 3     ' 3 - Vertical Line
Global Const UPWARD_DIAGONAL = 4   ' 4 - Upward Diagonal
Global Const DOWNWARD_DIAGONAL = 5 ' 5 - Downward Diagonal
Global Const CROSS = 6             ' 6 - Cross
Global Const DIAGONAL_CROSS = 7    ' 7 - Diagonal Cross

' LinkMode (forms and controls)
' Global Const NONE = 0         ' 0 - None
Global Const LINK_SOURCE = 1    ' 1 - Source (forms only)
Global Const LINK_AUTOMATIC = 1 ' 1 - Automatic (controls only)
Global Const LINK_MANUAL = 2    ' 2 - Manual (controls only)
Global Const LINK_NOTIFY = 3    ' 3 - Notify (controls only)

' LinkMode (kept for VB1.0 compatibility, use new constants instead)
Global Const HOT = 1    ' 1 - Hot (controls only)
Global Const SERVER = 1 ' 1 - Server (forms only)
Global Const COLD = 2   ' 2 - Cold (controls only)


' ScaleMode
Global Const USER = 0        ' 0 - User
Global Const TWIPS = 1       ' 1 - Twip
Global Const POINTS = 2      ' 2 - Point
Global Const PIXELS = 3      ' 3 - Pixel
Global Const CHARACTERS = 4  ' 4 - Character
Global Const INCHES = 5      ' 5 - Inch
Global Const MILLIMETERS = 6 ' 6 - Millimeter
Global Const CENTIMETERS = 7 ' 7 - Centimeter

' ScrollBar
' Global Const NONE     = 0 ' 0 - None
Global Const HORIZONTAL = 1 ' 1 - Horizontal
Global Const VERTICAL = 2   ' 2 - Vertical
Global Const BOTH = 3       ' 3 - Both

' Shape
Global Const SHAPE_RECTANGLE = 0
Global Const SHAPE_SQUARE = 1
Global Const SHAPE_OVAL = 2
Global Const SHAPE_CIRCLE = 3
Global Const SHAPE_ROUNDED_RECTANGLE = 4
Global Const SHAPE_ROUNDED_SQUARE = 5

' WindowState
Global Const NORMAL = 0    ' 0 - Normal
Global Const MINIMIZED = 1 ' 1 - Minimized
Global Const MAXIMIZED = 2 ' 2 - Maximized

' Check Value
Global Const UNCHECKED = 0 ' 0 - Unchecked
Global Const CHECKED = 1   ' 1 - Checked
Global Const GRAYED = 2    ' 2 - Grayed

' Shift parameter masks
Global Const SHIFT_MASK = 1
Global Const CTRL_MASK = 2
Global Const ALT_MASK = 4

' Button parameter masks
Global Const LEFT_BUTTON = 1
Global Const RIGHT_BUTTON = 2
Global Const MIDDLE_BUTTON = 4

' Function Parameters
' MsgBox parameters
Global Const MB_OK = 0                 ' OK button only
Global Const MB_OKCANCEL = 1           ' OK and Cancel buttons
Global Const MB_ABORTRETRYIGNORE = 2   ' Abort, Retry, and Ignore buttons
Global Const MB_YESNOCANCEL = 3        ' Yes, No, and Cancel buttons
Global Const MB_YESNO = 4              ' Yes and No buttons
Global Const MB_RETRYCANCEL = 5        ' Retry and Cancel buttons

Global Const MB_ICONSTOP = 16          ' Critical message
Global Const MB_ICONQUESTION = 32      ' Warning query
Global Const MB_ICONEXCLAMATION = 48   ' Warning message
Global Const MB_ICONINFORMATION = 64   ' Information message

Global Const MB_APPLMODAL = 0          ' Application Modal Message Box
Global Const MB_DEFBUTTON1 = 0         ' First button is default
Global Const MB_DEFBUTTON2 = 256       ' Second button is default
Global Const MB_DEFBUTTON3 = 512       ' Third button is default
Global Const MB_SYSTEMMODAL = 4096      'System Modal

' MsgBox return values
Global Const IDOK = 1                  ' OK button pressed
Global Const IDCANCEL = 2              ' Cancel button pressed
Global Const IDABORT = 3               ' Abort button pressed
Global Const IDRETRY = 4               ' Retry button pressed
Global Const IDIGNORE = 5              ' Ignore button pressed
Global Const IDYES = 6                 ' Yes button pressed
Global Const IDNO = 7                  ' No button pressed

' SetAttr, Dir, GetAttr functions
Global Const ATTR_NORMAL = 0
Global Const ATTR_READONLY = 1
Global Const ATTR_HIDDEN = 2
Global Const ATTR_SYSTEM = 4
Global Const ATTR_VOLUME = 8
Global Const ATTR_DIRECTORY = 16
Global Const ATTR_ARCHIVE = 32

'Grid
'ColAlignment,FixedAlignment Properties
Global Const GRID_ALIGNLEFT = 0
Global Const GRID_ALIGNRIGHT = 1
Global Const GRID_ALIGNCENTER = 2

'Fillstyle Property
Global Const GRID_SINGLE = 0
Global Const GRID_REPEAT = 1


'Data control
'Error event Response arguments
Global Const DATA_ERRCONTINUE = 0
Global Const DATA_ERRDISPLAY = 1

'Editmode property values
Global Const DATA_EDITNONE = 0
Global Const DATA_EDITMODE = 1
Global Const DATA_EDITADD = 2

' Options property values
Global Const DATA_DENYWRITE = &H1
Global Const DATA_DENYREAD = &H2
Global Const DATA_READONLY = &H4
Global Const DATA_APPENDONLY = &H8
Global Const DATA_INCONSISTENT = &H10
Global Const DATA_CONSISTENT = &H20
Global Const DATA_SQLPASSTHROUGH = &H40


'Validate event Action arguments
Global Const DATA_ACTIONCANCEL = 0
Global Const DATA_ACTIONMOVEFIRST = 1
Global Const DATA_ACTIONMOVEPREVIOUS = 2
Global Const DATA_ACTIONMOVENEXT = 3
Global Const DATA_ACTIONMOVELAST = 4
Global Const DATA_ACTIONADDNEW = 5
Global Const DATA_ACTIONUPDATE = 6
Global Const DATA_ACTIONDELETE = 7
Global Const DATA_ACTIONFIND = 8
Global Const DATA_ACTIONBOOKMARK = 9
Global Const DATA_ACTIONCLOSE = 10
Global Const DATA_ACTIONUNLOAD = 11


'OLE Control
'Actions
Global Const OLE_CREATE_EMBED = 0
Global Const OLE_CREATE_NEW = 0           'from ole1 control
Global Const OLE_CREATE_LINK = 1
Global Const OLE_CREATE_FROM_FILE = 1     'from ole1 control
Global Const OLE_COPY = 4
Global Const OLE_PASTE = 5
Global Const OLE_UPDATE = 6
Global Const OLE_ACTIVATE = 7
Global Const OLE_CLOSE = 9
Global Const OLE_DELETE = 10
Global Const OLE_SAVE_TO_FILE = 11
Global Const OLE_READ_FROM_FILE = 12
Global Const OLE_INSERT_OBJ_DLG = 14
Global Const OLE_PASTE_SPECIAL_DLG = 15
Global Const OLE_FETCH_VERBS = 17
Global Const OLE_SAVE_TO_OLE1FILE = 18

'OLEType
Global Const OLE_LINKED = 0
Global Const OLE_EMBEDDED = 1
Global Const OLE_NONE = 3

'OLETypeAllowed
Global Const OLE_EITHER = 2

'UpdateOptions
Global Const OLE_AUTOMATIC = 0
Global Const OLE_FROZEN = 1
Global Const OLE_MANUAL = 2

'AutoActivate modes
'Note that OLE_ACTIVATE_GETFOCUS only applies to objects that
'support "inside-out" activation.  See related Verb notes below.
Global Const OLE_ACTIVATE_MANUAL = 0
Global Const OLE_ACTIVATE_GETFOCUS = 1
Global Const OLE_ACTIVATE_DOUBLECLICK = 2

'SizeModes
Global Const OLE_SIZE_CLIP = 0
Global Const OLE_SIZE_STRETCH = 1
Global Const OLE_SIZE_AUTOSIZE = 2

'DisplayTypes
Global Const OLE_DISPLAY_CONTENT = 0
Global Const OLE_DISPLAY_ICON = 1

'Update Event Constants
Global Const OLE_CHANGED = 0
Global Const OLE_SAVED = 1
Global Const OLE_CLOSED = 2
Global Const OLE_RENAMED = 3

'Special Verb Values
Global Const VERB_PRIMARY = 0
Global Const VERB_SHOW = -1
Global Const VERB_OPEN = -2
Global Const VERB_HIDE = -3
Global Const VERB_INPLACEUIACTIVATE = -4
Global Const VERB_INPLACEACTIVATE = -5
'The last two verbs are for objects that support "inside-out" activation,
'meaning they can be edited in-place, and that they support being left
'inplace-active even when the input focus moves to another control or form.
'These objects actually have 2 levels of being active.  "InPlace Active"
'means that the object is ready for the user to click inside it and start
'working with it.  "InPlace UI-Active" means that, in addition, if the object
'has any other UI associated with it, such as floating palette windows,
'that those windows are visible and ready for use.  Any number of objects
'can be "InPlace Active" at a time, although only one can be
'"InPlace UI-Active".

'You can cause an object to move to either one of states programmatically by
'setting the Verb property to the appropriate verb and setting
'Action=OLE_ACTIVATE.

'Also, if you set AutoActivate = OLE_ACTIVATE_GETFOCUS, the server will
'automatically be put into "InPlace UI-Active" state when the user clicks
'on or tabs into the control.

'VerbFlag Bit Masks
Global Const VERBFLAG_GRAYED = &H1
Global Const VERBFLAG_DISABLED = &H2
Global Const VERBFLAG_CHECKED = &H8
Global Const VERBFLAG_SEPARATOR = &H800

'MiscFlag Bits - OR these together as desired for special behaviors

'MEMSTORAGE causes the control to use memory to store the object while
'           it is loaded.  This is faster than the default (disk-tempfile),
'           but can consume a lot of memory for objects whose data takes
'           up a lot of space, such as the bitmap for a paint program.
Global Const OLE_MISCFLAG_MEMSTORAGE = &H1

'DISABLEINPLACE overrides the control's default behavior of allowing
'           in-place activation for objects that support it.  If you
'           are having problems activating an object inplace, you can
'           force it to always activate in a separate window by setting this
'           bit
Global Const OLE_MISCFLAG_DISABLEINPLACE = &H2

'Common Dialog Control
'Action Property
Global Const DLG_FILE_OPEN = 1
Global Const DLG_FILE_SAVE = 2
Global Const DLG_COLOR = 3
Global Const DLG_FONT = 4
Global Const DLG_PRINT = 5
Global Const DLG_HELP = 6

'File Open/Save Dialog Flags
Global Const OFN_READONLY = &H1&
Global Const OFN_OVERWRITEPROMPT = &H2&
Global Const OFN_HIDEREADONLY = &H4&
Global Const OFN_NOCHANGEDIR = &H8&
Global Const OFN_SHOWHELP = &H10&
Global Const OFN_NOVALIDATE = &H100&
Global Const OFN_ALLOWMULTISELECT = &H200&
Global Const OFN_EXTENSIONDIFFERENT = &H400&
Global Const OFN_PATHMUSTEXIST = &H800&
Global Const OFN_FILEMUSTEXIST = &H1000&
Global Const OFN_CREATEPROMPT = &H2000&
Global Const OFN_SHAREAWARE = &H4000&
Global Const OFN_NOREADONLYRETURN = &H8000&

'Color Dialog Flags
Global Const CC_RGBINIT = &H1&
Global Const CC_FULLOPEN = &H2&
Global Const CC_PREVENTFULLOPEN = &H4&
Global Const CC_SHOWHELP = &H8&

'Fonts Dialog Flags
Global Const CF_SCREENFONTS = &H1&
Global Const CF_PRINTERFONTS = &H2&
Global Const CF_BOTH = &H3&
Global Const CF_SHOWHELP = &H4&
Global Const CF_INITTOLOGFONTSTRUCT = &H40&
Global Const CF_USESTYLE = &H80&
Global Const CF_EFFECTS = &H100&
Global Const CF_APPLY = &H200&
Global Const CF_ANSIONLY = &H400&
Global Const CF_NOVECTORFONTS = &H800&
Global Const CF_NOSIMULATIONS = &H1000&
Global Const CF_LIMITSIZE = &H2000&
Global Const CF_FIXEDPITCHONLY = &H4000&
Global Const CF_WYSIWYG = &H8000&         'must also have CF_SCREENFONTS & CF_PRINTERFONTS
Global Const CF_FORCEFONTEXIST = &H10000
Global Const CF_SCALABLEONLY = &H20000
Global Const CF_TTONLY = &H40000
Global Const CF_NOFACESEL = &H80000
Global Const CF_NOSTYLESEL = &H100000
Global Const CF_NOSIZESEL = &H200000

'Printer Dialog Flags
Global Const PD_ALLPAGES = &H0&
Global Const PD_SELECTION = &H1&
Global Const PD_PAGENUMS = &H2&
Global Const PD_NOSELECTION = &H4&
Global Const PD_NOPAGENUMS = &H8&
Global Const PD_COLLATE = &H10&
Global Const PD_PRINTTOFILE = &H20&
Global Const PD_PRINTSETUP = &H40&
Global Const PD_NOWARNING = &H80&
Global Const PD_RETURNDC = &H100&
Global Const PD_RETURNIC = &H200&
Global Const PD_RETURNDEFAULT = &H400&
Global Const PD_SHOWHELP = &H800&
Global Const PD_USEDEVMODECOPIES = &H40000
Global Const PD_DISABLEPRINTTOFILE = &H80000
Global Const PD_HIDEPRINTTOFILE = &H100000

'Help Constants
Global Const HELP_CONTEXT = &H1           'Display topic in ulTopic
Global Const HELP_QUIT = &H2              'Terminate help
Global Const HELP_INDEX = &H3             'Display index
Global Const HELP_CONTENTS = &H3
Global Const HELP_HELPONHELP = &H4        'Display help on using help
Global Const HELP_SETINDEX = &H5          'Set the current Index for multi index help
Global Const HELP_SETCONTENTS = &H5
Global Const HELP_CONTEXTPOPUP = &H8
Global Const HELP_FORCEFILE = &H9
Global Const HELP_KEY = &H101             'Display topic for keyword in offabData
Global Const HELP_COMMAND = &H102
Global Const HELP_PARTIALKEY = &H105      'call the search engine in winhelp

'Error Constants
Global Const CDERR_DIALOGFAILURE = -32768

Global Const CDERR_GENERALCODES = &H7FFF
Global Const CDERR_STRUCTSIZE = &H7FFE
Global Const CDERR_INITIALIZATION = &H7FFD
Global Const CDERR_NOTEMPLATE = &H7FFC
Global Const CDERR_NOHINSTANCE = &H7FFB
Global Const CDERR_LOADSTRFAILURE = &H7FFA
Global Const CDERR_FINDRESFAILURE = &H7FF9
Global Const CDERR_LOADRESFAILURE = &H7FF8
Global Const CDERR_LOCKRESFAILURE = &H7FF7
Global Const CDERR_MEMALLOCFAILURE = &H7FF6
Global Const CDERR_MEMLOCKFAILURE = &H7FF5
Global Const CDERR_NOHOOK = &H7FF4

'Added for CMDIALOG.VBX
Global Const CDERR_CANCEL = &H7FF3
Global Const CDERR_NODLL = &H7FF2
Global Const CDERR_ERRPROC = &H7FF1
Global Const CDERR_ALLOC = &H7FF0
Global Const CDERR_HELP = &H7FEF

Global Const PDERR_PRINTERCODES = &H6FFF
Global Const PDERR_SETUPFAILURE = &H6FFE
Global Const PDERR_PARSEFAILURE = &H6FFD
Global Const PDERR_RETDEFFAILURE = &H6FFC
Global Const PDERR_LOADDRVFAILURE = &H6FFB
Global Const PDERR_GETDEVMODEFAIL = &H6FFA
Global Const PDERR_INITFAILURE = &H6FF9
Global Const PDERR_NODEVICES = &H6FF8
Global Const PDERR_NODEFAULTPRN = &H6FF7
Global Const PDERR_DNDMMISMATCH = &H6FF6
Global Const PDERR_CREATEICFAILURE = &H6FF5
Global Const PDERR_PRINTERNOTFOUND = &H6FF4

Global Const CFERR_CHOOSEFONTCODES = &H5FFF
Global Const CFERR_NOFONTS = &H5FFE

Global Const FNERR_FILENAMECODES = &H4FFF
Global Const FNERR_SUBCLASSFAILURE = &H4FFE
Global Const FNERR_INVALIDFILENAME = &H4FFD
Global Const FNERR_BUFFERTOOSMALL = &H4FFC

Global Const FRERR_FINDREPLACECODES = &H3FFF
Global Const CCERR_CHOOSECOLORCODES = &H2FFF

