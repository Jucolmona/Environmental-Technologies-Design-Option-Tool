CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     MODULE NAME: PSDM12
C
C     DESCRIPTION: THIS PROGRAM PERFORMS THE PORE AND SURFACE
C         DIFFUSION MODEL (PSDM) CALCULATIONS.
C
C     PLATFORM: MICROSOFT FORTRAN POWERSTATION V4.0
C
C     HISTORY:
C         1998-SEP-02 - OMAN - CONVERTED DLL FORTRAN CODE FOR USE AS
C                              AN EXE CONNECTED TO THE ADDESIGNS FRONT-END.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                              *
C234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
C-----789012345678901234567890123456789012345678901234567890123456789012CCCCCCCC-----------------

      PROGRAM PSDM12
      IMPLICIT NONE
C
C------ COMMON VARIABLES.
C
      INCLUDE 'COMMON.FI'
C
C------ PARAMETERS TO CALCULATION MODULE.
C
C...INPUTS...:
      INTEGER*2 Numb
      DOUBLE PRECISION Chemicals(MXCOMP,16)
      DOUBLE PRECISION Ads_Prop(4)
      DOUBLE PRECISION C_Prop(3)
      DOUBLE PRECISION TT(3)
      INTEGER*2 MXX
      INTEGER*2 NXX
      INTEGER*4 N_PW
      INTEGER*2 NinI
      DOUBLE PRECISION TinI(MAXPTS)
      DOUBLE PRECISION CinI(MXCOMP,MAXPTS)
C..."INTERNAL" INPUTS...:
      INTEGER*2 NumBed
C      INTEGER*2 TELL_PSDM_SPECIAL_OUTPUT
C...OUTPUTS...:
      DOUBLE PRECISION VARS1(15)
      DOUBLE PRECISION VARS2(MXCOMP,19)
      INTEGER*2 NITP
      DOUBLE PRECISION T(MAXPTS,2)
      DOUBLE PRECISION CPVB(MXCOMP,MAXPTS)
      INTEGER*2 NFLAG
C
C------ EXTRA INPUTS TO FRONT.FOR CODE.
C
      INTEGER TotalAxialElementCount
C
C------ LOCAL VARIABLES.
C
      DOUBLE PRECISION VERSION_CHECK
      DOUBLE PRECISION EOFTESTMARKER
      INTEGER I
      INTEGER J
      INTEGER K
      DOUBLE PRECISION EPS_ERROR_CRITERIA
      PARAMETER (EPS_ERROR_CRITERIA=0.0005)
      CHARACTER*200 DummyStr1
C
C------ START OF CODE.
C
C
C------ READ PATH FILE.
C
      OPEN(UNIT=11,FILE='PSDM1.IN',STATUS='OLD')
      READ(11,*) FN_IN_MAIN
      READ(11,*) FN_OUT_SUCCESSFLAG
      READ(11,*) FN_OUT_MAIN
      READ(11,*) FN_OUT_CVST
	CLOSE(11)
C
C------ READ MAIN INPUT FILE.
C
      OPEN(UNIT=11,FILE=FN_IN_MAIN,STATUS='OLD')
      READ(11,*) VERSION_CHECK
      IF (DABS((VERSION_CHECK+0.000001D0)/
     &    1.00D0-1.00D0).LE.0.001D0) THEN
C
C------ VERSION CHECK SUCCESSFUL; DO NOTHING.
C      
      ELSE
        PRINT *, 'INVALID INPUT FILE FORMAT (VERSION CODE).'
        CALL TERMINATE_MODEL
      ENDIF
      READ(11,*) Numb
      DO I=1,Numb
        DO J=1,16
          READ(11,*) Chemicals(I,J)
        ENDDO      
      ENDDO
      DO I=1,4
        READ(11,*) Ads_Prop(I)
      ENDDO
      DO I=1,3
        READ(11,*) C_Prop(I)
      ENDDO
      DO I=1,3
        READ(11,*) TT(I)
      ENDDO
      READ(11,*) MXX
      READ(11,*) NXX
      READ(11,*) TotalAxialElementCount
      TotalAxialElementCount_Copy = TotalAxialElementCount
      READ(11,*) N_PW
      READ(11,*) NinI
      READ(11,*) DummyStr1
      DO I=1,NinI
        READ(11,*) TinI(I)
      ENDDO
      READ(11,*) DummyStr1
      DO I=1,Numb
        DO J=1,NinI
          READ(11,*) CinI(I,J)
        ENDDO
      ENDDO
      READ(11,*) EOFTESTMARKER
      IF (DABS((EOFTESTMARKER+0.000001D0)/
     &    123456.0D0-1.0D0).LE.0.001D0) THEN
C
C------ EOF TEST MARKER CHECK SUCCESSFUL; DO NOTHING.
C      
      ELSE
        PRINT *, 'INVALID INPUT FILE FORMAT (EOF MARKER).'
        CALL TERMINATE_MODEL
      ENDIF
      CLOSE(11)
C
C------ CALL THE CALCULATION ROUTINE.
C
C------ THIS FRONT-END TAKES OVER SOME OF THE MULTIPLE
C...... AXIAL ELEMENT CODE FROM THE VISUAL BASIC FRONT-END.
C      
C--- RECALCULATE LENGTH AND WEIGHT BASED
C... ON THE NUMBER OF AXIAL ELEMENTS.
C
      ADS_PROP(1) = ADS_PROP(1) / DBLE(TotalAxialElementCount)
      ADS_PROP(3) = ADS_PROP(3) / DBLE(TotalAxialElementCount)
C
C--- FOR >1 AXIAL ELEMENTS, CHANGE FIRST OUTPUT TIME TO
C... A VERY SMALL NUMBER (1.0E-8).
C
      IF (TotalAxialElementCount.GT.1) THEN
        TT(2) = 1.0D-8
      ENDIF
C
C--- MAIN LOOP FOR AXIAL ELEMENT CALCULATIONS.
C
      DO I=1, TotalAxialElementCount
        IF (ALLOW_SCREENIO.EQ.1) THEN
          PRINT *, ' '
          PRINT *,'PERFORMING CALCULATIONS FOR AXIAL ELEMENT ', I
        ENDIF
        NumBed = I
C        IF (I.EQ.TotalAxialElementCount) THEN
C          TELL_PSDM_SPECIAL_OUTPUT = 1
C        ELSE
C          TELL_PSDM_SPECIAL_OUTPUT = 0
C        ENDIF
        CALL PSDM(Numb,Chemicals,Ads_Prop,C_Prop,TT,
     &    MXX,NXX,N_PW,NinI,TinI,CinI,NumBed,
     &    VARS1,VARS2,NITP,T,CPVB,NFLAG)
        IF (NFLAG.NE.0) THEN
          GOTO 9010
        ENDIF
        IF (I.LT.TotalAxialElementCount) THEN
          NINI = NITP
          DO J=1, NITP
            TINI(J) = T(J,1)
            DO K=1, NUMB
              IF (CPVB(K,J).LT.EPS_ERROR_CRITERIA) THEN
                CINI(K,J) = EPS_ERROR_CRITERIA
              ELSE
C.............. CONVERT FROM DIMENSIONLESS (C/Co) TO ug/L.
                CINI(K,J) = CPVB(K,J) * CHEMICALS(K,2)
              ENDIF
            ENDDO
          ENDDO
        ENDIF
      ENDDO
C
C------ WRITE SUCCESS FLAG OUTPUT FILE.
C
9010  OPEN(UNIT=12,FILE=FN_OUT_SUCCESSFLAG)
      WRITE(12,*) 'NFLAG, ERROR FLAG FOR PSDM MODEL:'
      WRITE(12,*) NFLAG
      CLOSE(12)
C
C------ WRITE MAIN OUTPUT FILE.
C
      OPEN(UNIT=12,FILE=FN_OUT_MAIN)
      WRITE(12,*) 'VARS1, VARIOUS OUTPUT VARIABLES:'
      DO I=1,15
        WRITE(12,*) VARS1(I)
      ENDDO
      WRITE(12,*) 'VARS2, VARIOUS OUTPUT VARIABLES:'
      DO I=1,NUMB
        DO J=1,19
          WRITE(12,*) VARS2(I,J)
        ENDDO
      ENDDO
      WRITE(12,*) 'NFLAG, ERROR FLAG FOR PSDM MODEL:'      
      WRITE(12,*) NFLAG
      WRITE(12,*) 'EOFTESTMARKER:'
      WRITE(12,*) 123456.0D0
      CLOSE(12)
C
C------ WRITE C-VS-T OUTPUT FILE.
C
      OPEN(UNIT=12,FILE=FN_OUT_CVST)
      WRITE(12,*) 'NITP, NUMBER OF OUTPUT POINTS:'
      WRITE(12,*) NITP
      WRITE(12,*) 'T(I,1), TIME PROFILE FOR CPVB() ARRAY, minutes:'
      DO I=1,NITP
        WRITE(12,*) T(I,1)
      ENDDO
      WRITE(12,*) 'CPVB(I,J), DIMENSIONLESS CONC. PROFILE, '
     &  // 'C/Co, dimless:'
      DO I=1,NUMB
        DO J=1,NITP
          WRITE(12,*) CPVB(I,J)
        ENDDO
      ENDDO
      WRITE(12,*) 'EOFTESTMARKER:'
      WRITE(12,*) 123456.0D0
      CLOSE(12)
C
C------ END OF PROGRAM.
C
      END


      SUBROUTINE TERMINATE_MODEL
      IMPLICIT NONE
CC------ COMMON VARIABLES.
C      INCLUDE 'COMMON.FI'
      PAUSE 'Press Enter to terminate model.'
      STOP
      RETURN
	END

