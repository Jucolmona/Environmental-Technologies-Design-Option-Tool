VERSION 5.00
Object = "{0BA686C6-F7D3-101A-993E-0000C0EF6F5E}#1.0#0"; "THREED32.OCX"
Begin VB.Form frmAbout 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "About"
   ClientHeight    =   4560
   ClientLeft      =   3045
   ClientTop       =   2775
   ClientWidth     =   5640
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form2"
   LockControls    =   -1  'True
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   4560
   ScaleWidth      =   5640
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      Cancel          =   -1  'True
      Caption         =   "&OK"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   345
      Left            =   4200
      TabIndex        =   8
      Top             =   3240
      Width           =   1365
   End
   Begin VB.PictureBox picIcon 
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   555
      Left            =   150
      Picture         =   "About.frx":0000
      ScaleHeight     =   555
      ScaleWidth      =   615
      TabIndex        =   7
      Top             =   330
      Width           =   615
   End
   Begin Threed.SSPanel SSPanel1 
      Height          =   1065
      Left            =   60
      TabIndex        =   15
      Top             =   1860
      Width           =   5505
      _Version        =   65536
      _ExtentX        =   9710
      _ExtentY        =   1879
      _StockProps     =   15
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Begin VB.Label lblSerialNumber 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BackStyle       =   0  'Transparent
         Caption         =   "{Z_SERIALNUMBER}"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   225
         Left            =   90
         TabIndex        =   19
         Top             =   750
         Width           =   5325
         WordWrap        =   -1  'True
      End
      Begin VB.Label lblUserName 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BackStyle       =   0  'Transparent
         Caption         =   "{Z_USERNAME}"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   225
         Left            =   90
         TabIndex        =   18
         Top             =   90
         Width           =   5325
      End
      Begin VB.Label lblUserCompany 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BackStyle       =   0  'Transparent
         Caption         =   "{Z_USERCOMPANY}"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   225
         Left            =   90
         TabIndex        =   17
         Top             =   300
         Width           =   5325
      End
      Begin VB.Label Label1 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BackStyle       =   0  'Transparent
         Caption         =   "Serial Number:"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   225
         Left            =   90
         TabIndex        =   16
         Top             =   510
         Width           =   1065
      End
   End
   Begin VB.Label lblVersionInfo 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "(Build Code XX)"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   5
      Left            =   1260
      TabIndex        =   20
      Top             =   1350
      Width           =   4215
   End
   Begin VB.Label lblWarning 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "extent possible under law."
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   5
      Left            =   60
      TabIndex        =   14
      Top             =   4290
      Width           =   3975
   End
   Begin VB.Label lblWarning 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "penalties, and will be prosecuted to the maximum"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   4
      Left            =   60
      TabIndex        =   13
      Top             =   4080
      Width           =   3975
   End
   Begin VB.Label lblWarning 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "portion of it, may result in severe civil and criminal"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   3
      Left            =   60
      TabIndex        =   12
      Top             =   3870
      Width           =   3975
   End
   Begin VB.Label lblWarning 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "reproduction or distribution of this program, or any"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   2
      Left            =   60
      TabIndex        =   11
      Top             =   3660
      Width           =   3975
   End
   Begin VB.Label lblWarning 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "copyright law and international treaties.  Unauthorized"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   1
      Left            =   60
      TabIndex        =   10
      Top             =   3450
      Width           =   3975
   End
   Begin VB.Label lblWarning 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "Warning: This computer program is protected by"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   0
      Left            =   60
      TabIndex        =   9
      Top             =   3240
      Width           =   3975
   End
   Begin VB.Line Line1 
      BorderWidth     =   2
      X1              =   60
      X2              =   5550
      Y1              =   3090
      Y2              =   3090
   End
   Begin VB.Label lbldesc 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "This program is licensed to:"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   0
      Left            =   60
      TabIndex        =   6
      Top             =   1620
      Width           =   4215
   End
   Begin VB.Label lblVersionInfo 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "Houghton, Michigan"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   4
      Left            =   1260
      TabIndex        =   5
      Top             =   1140
      Width           =   4215
   End
   Begin VB.Label lblVersionInfo 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "Michigan Technological University"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   3
      Left            =   1260
      TabIndex        =   4
      Top             =   930
      Width           =   4215
   End
   Begin VB.Label lblVersionInfo 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "{copyright info}"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   2
      Left            =   1260
      TabIndex        =   3
      Top             =   720
      Width           =   4215
   End
   Begin VB.Label lblVersionInfo 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "{expiration info}"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   1
      Left            =   1260
      TabIndex        =   2
      Top             =   510
      Width           =   4215
   End
   Begin VB.Label lblVersionInfo 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "{version info}"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Index           =   0
      Left            =   1260
      TabIndex        =   1
      Top             =   300
      Width           =   4215
   End
   Begin VB.Label lblProgramName 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "{AppName}"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   225
      Left            =   1260
      TabIndex        =   0
      Top             =   90
      Width           =   4215
   End
End
Attribute VB_Name = "frmAbout"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit


Private Sub cmdOK_Click()
  Unload Me
End Sub

Private Sub Form_Load()
  Me.Left = (Screen.Width - Me.Width) / 2
  Me.Top = (Screen.Height - Me.Height) / 2
  
  'VARIOUS LABELS.
  lblProgramName.Caption = AppName
  lblVersionInfo(0).Caption = "Version " & get_program_version_with_build_info()
  lblVersionInfo(1).Caption = get_expiration_info()
  lblVersionInfo(2).Caption = "Copyright " & AppCopyrightYears
  lblUserName.Caption = Trim$(lfd.Z_USERNAME)
  lblUserCompany.Caption = Trim$(lfd.Z_USERCOMPANY)
  lblSerialNumber.Caption = Trim$(lfd.Z_SERIALNUMBER)
  'lblSerialNumber.Caption = "WWWWWW-WWWWW-WWWWW-WWWWW-WWWWW"
  lblVersionInfo(5).Caption = "(Build Code " & get_program_version_with_build_info_VB4 & ")"

End Sub

VERSION 5.00
Begin VB.Form frmAirDensity 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Air Density"
   ClientHeight    =   3585
   ClientLeft      =   675
   ClientTop       =   1530
   ClientWidth     =   8505
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   3585
   ScaleWidth      =   8505
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   240
      TabIndex        =   3
      Top             =   2880
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   2
      Top             =   2400
      Width           =   255
   End
   Begin VB.TextBox txtAirDensitymaximumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   7320
      TabIndex        =   7
      Text            =   "not visible"
      Top             =   2880
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtAirDensityminimumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   6120
      TabIndex        =   6
      Text            =   "not visible"
      Top             =   2880
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtAirDensityTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   4920
      TabIndex        =   5
      Top             =   2880
      Width           =   975
   End
   Begin VB.TextBox txtAirDensityValue 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   3240
      TabIndex        =   4
      Top             =   2880
      Width           =   1455
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Air Density"
      Height          =   615
      Left            =   4860
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.Label lblAirDensitymaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   7320
      TabIndex        =   23
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblAirDensityminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6120
      TabIndex        =   22
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblAirDensityTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4920
      TabIndex        =   21
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblAirDensityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   3240
      TabIndex        =   20
      Top             =   2400
      Width           =   1452
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   1
      Left            =   600
      TabIndex        =   19
      Top             =   2880
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Ideal Gas Law"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   0
      Left            =   600
      TabIndex        =   18
      Top             =   2400
      Width           =   2415
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Air Density Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   17
      Top             =   240
      Width           =   4095
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   16
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   15
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   14
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   13
      Top             =   720
      Width           =   2295
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Label lblAirDensminTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmin"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   6120
      TabIndex        =   12
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblAirDensmaxTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmax"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   7320
      TabIndex        =   11
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblAirDensTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   4920
      TabIndex        =   10
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblAirDensLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Air Dens."
      ForeColor       =   &H00000000&
      Height          =   400
      Left            =   3240
      TabIndex        =   9
      Top             =   1750
      Width           =   1455
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   600
      TabIndex        =   8
      Top             =   1800
      Width           =   2415
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   1695
      Left            =   120
      Top             =   1680
      Width           =   8295
   End
   Begin VB.Line Line2 
      X1              =   120
      X2              =   8400
      Y1              =   2160
      Y2              =   2160
   End
End
Attribute VB_Name = "frmAirDensity"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastAirDensInputValue As String
Dim PastAirDensInputTemp As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.AirDensity.CurrentSelection.choice
       Case AIR_DENSITY_CORRELATION
          SelectedOption = 1
       Case AIR_DENSITY_INPUT
          SelectedOption = 2
          txtairdensityvalue(1).Text = PastAirDensInputValue
          txtairdensitytemperature(1).Text = PastAirDensInputTemp
       Case Else
          frmAirDensity.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    frmAirDensity.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 2
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = AIR_DENSITY_CORRELATION
       Case 2
          If Not PROPAVAILABLE(AIR_DENSITY_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtairdensityvalue(1).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = AIR_DENSITY_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.AirDensity.CurrentSelection.choice Then
       phprop.AirDensity.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayAirDensityMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = AIR_DENSITY_INPUT Then
       Call DisplayAirDensityMainScreen(ValueToDisplayIndex)
    End If

    frmAirDensity.Hide
End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastAirDensInputValue = txtairdensityvalue(1).Text
    PastAirDensInputTemp = txtairdensitytemperature(1).Text
End Sub

Private Sub Form_Load()

    If (DemoMode) Then cmdok.Enabled = False

  Call centerform_relative(contam_prop_form, Me)

End Sub

Private Sub lblAirDensitymaximumT_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblAirDensityminimumT_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblAirDensityTemperature_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblAirDensityValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub
    
    Select Case Index
       Case 0  'Ideal Gas Law
          ErrorFlag = phprop.AirDensity.correlation.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, "Air - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, "Air - Warning"
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.AirDensity.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.AirDensity.PreviousIndex
    hilight.AirDensity.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtAirDensitymaximumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtairdensitymaximumT(Index), Temp_Text)

End Sub

Private Sub txtAirDensitymaximumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 1 Then keyascii = 0
End Sub

Private Sub txtAirDensitymaximumT_LostFocus(Index As Integer)
Dim ConversionFactor As Double
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtairdensitymaximumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtairdensitymaximumT(Index), flag_ok)

End Sub

Private Sub txtAirDensityminimumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtairdensityminimumT(Index), Temp_Text)

End Sub

Private Sub txtAirDensityminimumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtairdensityminimumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtairdensityminimumT(Index), flag_ok)

End Sub

Private Sub txtAirDensityTemperature_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtairdensitytemperature(Index), Temp_Text)

    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtAirDensityTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtAirDensityTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtairdensitytemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtairdensitytemperature(Index).Text = "" Then
       phprop.AirDensity.input.temperature = -1E+25
       Call LostFocus_Handle(Me, txtairdensitytemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtairdensitytemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtairdensitytemperature(Index).Text)) Then
          txtairdensitytemperature(Index).Text = Temp_Text
          txtairdensitytemperature(Index).SetFocus
          Call LostFocus_Handle(Me, txtairdensitytemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtairdensitytemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.AirDensity.input.temperature = CDbl(txtairdensitytemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtairdensitytemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.AirDensity.input.temperature = SIValue
          End If

          
       Else
          Call LostFocus_Handle(Me, txtairdensitytemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
  Call LostFocus_Handle(Me, txtairdensitytemperature(Index), flag_ok)

End Sub

Private Sub txtAirDensityValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtairdensityvalue(Index), Temp_Text)

    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
       
End Sub

Private Sub txtAirDensityValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txtairdensitytemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtAirDensityValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtairdensityvalue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtairdensityvalue(Index).Text = "" Then
       phprop.AirDensity.input.Value = -1#
       PROPAVAILABLE(AIR_DENSITY_INPUT) = False
       Call LostFocus_Handle(Me, txtairdensityvalue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtairdensityvalue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtairdensityvalue(Index).Text)) Then
          txtairdensityvalue(Index).Text = Temp_Text
          Call LostFocus_Handle(Me, txtairdensityvalue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtairdensityvalue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.AirDensity.input.Value = CDbl(txtairdensityvalue(Index).Text)
          Else
             EnglishValue = CDbl(txtairdensityvalue(Index).Text)
             Call ADENENSI(SIValue, EnglishValue)
             phprop.AirDensity.input.Value = SIValue
          End If
          
          PROPAVAILABLE(AIR_DENSITY_INPUT) = True
       Else
          Call LostFocus_Handle(Me, txtairdensityvalue(Index), flag_ok)
          Exit Sub
       End If
    End If
'    txtAirDensityValue(Index).SetFocus
  Call LostFocus_Handle(Me, txtairdensityvalue(Index), flag_ok)

End Sub

VERSION 5.00
Begin VB.Form frmAirViscosity 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Air Viscosity"
   ClientHeight    =   3510
   ClientLeft      =   945
   ClientTop       =   3555
   ClientWidth     =   8445
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form2"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   3510
   ScaleWidth      =   8445
   Begin VB.TextBox txtAirViscositymaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFFFF&
      Height          =   285
      Index           =   1
      Left            =   7320
      TabIndex        =   7
      Text            =   "not visible"
      Top             =   2880
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtAirViscosityminimumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   6120
      TabIndex        =   6
      Text            =   "not visible"
      Top             =   2880
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtAirViscosityTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   4920
      TabIndex        =   5
      Top             =   2880
      Width           =   975
   End
   Begin VB.TextBox txtAirViscosityValue 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   3300
      TabIndex        =   4
      Top             =   2880
      Width           =   1455
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   240
      TabIndex        =   3
      Top             =   2880
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   2
      Top             =   2400
      Width           =   255
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Air Viscosity"
      Height          =   615
      Left            =   4920
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.Label lblAirViscositymaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   7320
      TabIndex        =   23
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblAirViscosityminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6120
      TabIndex        =   22
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblAirViscosityTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4920
      TabIndex        =   21
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblAirViscosityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   3240
      TabIndex        =   20
      Top             =   2400
      Width           =   1452
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   1
      Left            =   600
      TabIndex        =   19
      Top             =   2880
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Cummins, et. al. (1983)"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   0
      Left            =   600
      TabIndex        =   18
      Top             =   2400
      Width           =   2415
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Air Viscosity Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   17
      Top             =   240
      Width           =   4095
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   16
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   15
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   14
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   13
      Top             =   720
      Width           =   2295
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Label lblAirViscminTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmin"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   6120
      TabIndex        =   12
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblAirViscmaxTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmax"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   7320
      TabIndex        =   11
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblAirViscTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   4920
      TabIndex        =   10
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblAirViscLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Air Visc."
      ForeColor       =   &H00000000&
      Height          =   400
      Left            =   3240
      TabIndex        =   9
      Top             =   1750
      Width           =   1455
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   600
      TabIndex        =   8
      Top             =   1800
      Width           =   2415
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   1695
      Left            =   120
      Top             =   1680
      Width           =   8295
   End
   Begin VB.Line Line2 
      X1              =   120
      X2              =   8400
      Y1              =   2160
      Y2              =   2160
   End
End
Attribute VB_Name = "frmAirViscosity"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastAirViscInputValue As String
Dim PastAirViscInputTemp As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.AirViscosity.CurrentSelection.choice
       Case AIR_VISCOSITY_CORRELATION
          SelectedOption = 1
       Case AIR_VISCOSITY_INPUT
          SelectedOption = 2
          txtairviscosityvalue(1).Text = PastAirViscInputValue
          txtairviscosityTemperature(1).Text = PastAirViscInputTemp
       Case Else
          frmAirViscosity.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    frmAirViscosity.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 2
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = AIR_VISCOSITY_CORRELATION
       Case 2
          If Not PROPAVAILABLE(AIR_VISCOSITY_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtairviscosityvalue(1).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = AIR_VISCOSITY_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.AirViscosity.CurrentSelection.choice Then
       phprop.AirViscosity.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayAirViscosityMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = AIR_VISCOSITY_INPUT Then
       Call DisplayAirViscosityMainScreen(ValueToDisplayIndex)
    End If

    frmAirViscosity.Hide
End Sub

Private Sub Form_Activate()
    PastAirViscInputValue = txtairviscosityvalue(1).Text
    PastAirViscInputTemp = txtairviscosityTemperature(1).Text

  Call centerform_relative(contam_prop_form, Me)

End Sub

Private Sub Form_Load()

    If (DemoMode) Then cmdok.Enabled = False

  Call centerform_relative(contam_prop_form, Me)

End Sub

Private Sub lblAirViscositymaximumT_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblAirViscosityminimumT_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblAirViscosityTemperature_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblAirViscosityValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
    
    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0  'Correlation from Cummins and Westrick (1983)
          ErrorFlag = phprop.AirViscosity.correlation.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, "Air - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, "Air - Warning"
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer
    
    SourceIndex = Index - 1
    If SourceIndex = hilight.AirViscosity.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.AirViscosity.PreviousIndex
    hilight.AirViscosity.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtAirViscositymaximumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtairviscositymaximumT(Index), Temp_Text)


End Sub

Private Sub txtAirViscositymaximumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 1 Then keyascii = 0
End Sub

Private Sub txtAirViscositymaximumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtairviscositymaximumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtairviscositymaximumT(Index), flag_ok)

End Sub

Private Sub txtAirViscosityminimimumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 1 Then keyascii = 0
End Sub

Private Sub txtAirViscosityminimumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtairviscosityminimumT(Index), Temp_Text)


End Sub

Private Sub txtAirViscosityminimumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtairviscosityminimumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtairviscosityminimumT(Index), flag_ok)


End Sub

Private Sub txtAirViscosityTemperature_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtairviscosityTemperature(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
    

End Sub

Private Sub txtAirViscosityTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)

End Sub

Private Sub txtAirViscosityTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtairviscosityTemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtairviscosityTemperature(Index).Text = "" Then
       phprop.AirViscosity.input.temperature = -1E+25
       Call LostFocus_Handle(Me, txtairviscosityTemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtairviscosityTemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtairviscosityTemperature(Index).Text)) Then
          txtairviscosityTemperature(Index).Text = Temp_Text
          txtairviscosityTemperature(Index).SetFocus
          Call LostFocus_Handle(Me, txtairviscosityTemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtairviscosityTemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.AirViscosity.input.temperature = CDbl(txtairviscosityTemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtairviscosityTemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.AirViscosity.input.temperature = SIValue
          End If
          
       Else
          Call LostFocus_Handle(Me, txtairviscosityTemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
  Call LostFocus_Handle(Me, txtairviscosityTemperature(Index), flag_ok)

End Sub

Private Sub txtAirViscosityValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtairviscosityvalue(Index), Temp_Text)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AirViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If


End Sub

Private Sub txtAirViscosityValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txtairviscosityTemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtAirViscosityValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtairviscosityvalue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtairviscosityvalue(Index).Text = "" Then
       phprop.AirViscosity.input.Value = -1#
       PROPAVAILABLE(AIR_VISCOSITY_INPUT) = False
       Call LostFocus_Handle(Me, txtairviscosityvalue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtairviscosityvalue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtairviscosityvalue(Index).Text)) Then
          txtairviscosityvalue(Index).Text = Temp_Text
          txtairviscosityvalue(Index).SetFocus
           Call LostFocus_Handle(Me, txtairviscosityvalue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtairviscosityvalue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.AirViscosity.input.Value = CDbl(txtairviscosityvalue(Index).Text)
          Else
             EnglishValue = CDbl(txtairviscosityvalue(Index).Text)
             Call AVISENSI(SIValue, EnglishValue)
             phprop.AirViscosity.input.Value = SIValue
          End If
          
          PROPAVAILABLE(AIR_VISCOSITY_INPUT) = True
       Else
  Call LostFocus_Handle(Me, txtairviscosityvalue(Index), flag_ok)
          Exit Sub
       End If
    End If
  Call LostFocus_Handle(Me, txtairviscosityvalue(Index), flag_ok)

End Sub

VERSION 5.00
Begin VB.Form frmAlias 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "List of Synonyms"
   ClientHeight    =   4545
   ClientLeft      =   2655
   ClientTop       =   3900
   ClientWidth     =   7080
   ControlBox      =   0   'False
   LinkTopic       =   "Form1"
   LockControls    =   -1  'True
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   4545
   ScaleWidth      =   7080
   ShowInTaskbar   =   0   'False
   Begin VB.TextBox txtinput 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   120
      TabIndex        =   0
      Text            =   " "
      Top             =   450
      Width           =   6850
   End
   Begin VB.CommandButton cmdSearch 
      Appearance      =   0  'Flat
      Caption         =   "&Search"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   120
      TabIndex        =   3
      TabStop         =   0   'False
      Top             =   810
      Width           =   6850
   End
   Begin VB.Data Data1 
      Appearance      =   0  'Flat
      Caption         =   "Data1"
      Connect         =   "Access"
      DatabaseName    =   ""
      DefaultCursorType=   0  'DefaultCursor
      DefaultType     =   2  'UseODBC
      Exclusive       =   0   'False
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   315
      Left            =   2400
      Options         =   0
      ReadOnly        =   0   'False
      RecordsetType   =   1  'Dynaset
      RecordSource    =   ""
      Top             =   4050
      Visible         =   0   'False
      Width           =   1140
   End
   Begin VB.CommandButton exit 
      Appearance      =   0  'Flat
      Caption         =   "&Cancel"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   5280
      TabIndex        =   2
      TabStop         =   0   'False
      Top             =   4050
      Width           =   1695
   End
   Begin VB.CommandButton cmdok 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "&OK"
      Enabled         =   0   'False
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   120
      TabIndex        =   1
      TabStop         =   0   'False
      Top             =   4050
      Width           =   1695
   End
   Begin VB.ListBox vlstoutput 
      Height          =   1620
      Left            =   120
      TabIndex        =   7
      TabStop         =   0   'False
      Top             =   2310
      Width           =   6825
   End
   Begin VB.Label Label1 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "Please enter the string you want to search for in the synonyms database:"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Left            =   120
      TabIndex        =   6
      Top             =   180
      Width           =   6855
   End
   Begin VB.Label lblhits 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "No. of Hits:"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Left            =   120
      TabIndex        =   5
      Top             =   1290
      Width           =   6855
   End
   Begin VB.Label lblinfo 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   $"Alias.frx":0000
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   615
      Left            =   120
      TabIndex        =   4
      Top             =   1650
      Width           =   6855
   End
End
Attribute VB_Name = "frmAlias"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Dim DB_Alias As database
Dim RS_Alias As Recordset




Const frmAlias_declarations_end = True


Private Sub cmdOK_Click()
Dim SearchString As String
Dim NewString As String
Dim Q As String
Dim Name_To_Find As String
Dim Response As Integer
Dim X As Integer
Dim i As Integer
Dim CasNumber As String
  On Error GoTo err_cmdOK_Click
  Me.MousePointer = 11
  SearchString = vlstoutput.List(vlstoutput.ListIndex)
  '
  ' GET NAME OF ALIAS.
  '
  NewString = UCase$(Trim$(Right$(SearchString, Len(SearchString) - 8)))
  '
  ' GET CAS NUMBER.
  '
  CasNumber = Trim$(Left$(SearchString, 8))
  SearchString = CasNumber
  '
  ' GET ALL RECORDS THAT MATCH THIS CAS NUMBER, SORTING BY IupacName.
  '
  Set RS_Alias = DB_Alias.OpenRecordset( _
      "select * from synonyms where [cas] = " & _
      Trim$(SearchString) & _
      " and [IupacName]=true")
  RS_Alias.MoveFirst
  RS_Alias.MoveLast
  RS_Alias.MoveFirst
  '
  ' FIRST ITEM _SHOULD_ BE THE IUPAC NAME.
  '
  RS_Alias.MoveFirst
  SearchString = Database_Get_String(RS_Alias, "name")
  For i = 0 To 461
    If (Trim$(Left$(contam_prop_form.contam_combo.List(i), 8)) = CasNumber) Then
      contam_prop_form.contam_combo.ListIndex = i
      contam_prop_form.lblSelectedContaminant = contam_prop_form.contam_combo.List(i)
      contam_prop_form.cboSelectContaminant = contam_prop_form.contam_combo.List(i)
      Call addtolist(i)
      Exit For
    End If
  Next i
  Me.MousePointer = 0
  Unload Me
  Exit Sub
err_cmdOK_Click:
  Me.MousePointer = 0
  Call Show_Trapped_Error("cmdOK_Click")
  Resume bail_out
bail_out:


'
' OLD CODE HERE:
' ==============
'
'Dim SearchString As String, NewString As String, Q  As String
'Dim Name_To_Find As String
'Dim Response As Integer
'Dim X As Integer, i  As Integer
'
'On Error GoTo a_bad_record
'
'Me.MousePointer = 11
'
'SearchString = vlstoutput.List(vlstoutput.ListIndex)
'
''get name of alias
'NewString = UCase(Trim(Right(SearchString, Len(SearchString) - 8)))
'
''get cas number
'SearchString = Trim(Left(SearchString, 8))
'
''get all of that cas number and sort by If iupac name
'Data1.RecordSource = "select * from synonyms where [cas] = " & Trim$(SearchString) & " and [IupacName]=true"
'
'Data1.Refresh
'
' 'first item is iupac name
' Data1.Recordset.MoveFirst
' SearchString = Data1.Recordset("name")
'
'For i = 0 To 461
' If (Trim(Left(contam_prop_form.contam_combo.List(i), 8)) = CStr(Data1.Recordset("cas"))) Then
'          Data1.DatabaseName = Database_Path + "\stepp_db.mdb"
'    'ChDrive App.Path
'    'ChDir App.Path
'    Call ChangeDir_Main
'    contam_prop_form.contam_combo.ListIndex = i
'    contam_prop_form.lblSelectedContaminant = contam_prop_form.contam_combo.List(i)
'    contam_prop_form.cboSelectContaminant = contam_prop_form.contam_combo.List(i)
'
'    Call addtolist(i)
'    i = 462
' End If
'
'Next i
'
'Me.MousePointer = 0
'Unload Me
'Exit Sub
'
'a_bad_record:
'Me.MousePointer = 0
'MsgBox "Error in the database. The chemical selected does not have a iupac name"
'Resume bail_out
'
'bail_out:
End Sub


Private Sub cmdSearch_Click()
Dim Encrypted_User_Name As String
Dim Encrypted_User_Password As String
Dim Response As Integer
Dim Q As String
Dim s As String

  On Error GoTo err_cmdSearch_Click
  If (Trim(txtinput) = "") Then
    Call Show_Error("You must enter a non-blank search string.")
    Exit Sub
  End If
  Me.MousePointer = 11
  '
  ' GET ALL RECORDS THAT MATCH THIS CAS NUMBER, SORTING BY IupacName.
  '
  Q = Chr$(34)
  Set RS_Alias = DB_Alias.OpenRecordset( _
      "select * from synonyms where [name] like " & Q & _
      "*" & Trim$(txtinput.Text) & "*" & Q & " order by name")
  RS_Alias.MoveFirst
  RS_Alias.MoveLast
  RS_Alias.MoveFirst
  If RS_Alias.EOF Then
    Call Show_Message("No records matching that criteria were found.")
    lblhits.Caption = "No. of Hits: 0"
    vlstoutput.Enabled = False
    Me.MousePointer = 0
    cmdok.Enabled = False
    vlstoutput.Clear
    lblinfo.Caption = "CAS #: " & Chr$(13) & "Synonym: " & Chr$(13) & " IUPAC Name: "
    Exit Sub
  End If
  vlstoutput.Enabled = True
  cmdok.Enabled = True
  vlstoutput.Clear
  RS_Alias.MoveFirst
  Do While Not RS_Alias.EOF
    s = Trim$(Str$(Database_Get_Long(RS_Alias, "cas"))) & "    " & Database_Get_String(RS_Alias, "name")
    If (Database_Get_Integer(RS_Alias, "IupacName") = True) Then
      s = s & " (*IUPAC NAME*)"
    End If
    vlstoutput.AddItem s
    RS_Alias.MoveNext
  Loop
  Me.MousePointer = 0
  lblhits.Caption = "No. of Hits: " & vlstoutput.ListCount
  Call GetNewData
  Exit Sub
  
  'DB: alias.mdb
  'table: synonyms
  'goal: search for 'text1.text'
  
err_cmdSearch_Click:
  Call Show_Trapped_Error("cmdSearch_Click")
  Resume QuitOut
QuitOut:
  Unload Me

'
' OLD CODE HERE:
' ==============
'
'Dim Encrypted_User_Name As String
'Dim Encrypted_User_Password As String
'Dim response As Integer
'Dim Q As String
'Dim s As String
'
'If (Trim(txtinput) = "") Then
'  Call Show_Error("You must enter a non-blank search string.")
'  Exit Sub
'  'response = MsgBox("This will select all possible synonyms and may take some time, Continue?", MB_ICONQUESTION + MB_YESNO, "Stepp")
'  'If (response = 7) Then
'  '  lblhits.Caption = "No. of Hits: 0"
'  '  ME.MOUSEPOINTER = 0
'  '  vlstoutput.Clear
'  '  lblinfo.Caption = "CAS #: " & Chr$(13) & "Synonym: " & Chr$(13) & " IUPAC Name: "
'  '  Exit Sub
'  'End If
'End If
'
'ME.MOUSEPOINTER = 11
'
''On Error GoTo Database_error
'On Error GoTo err_cmdSearch_Click
'
'Database_Path = App.Path + "\dbase"
'
''ChDrive Database_Path
''ChDir Database_Path
'Data1.DatabaseName = Database_Path + "\alias.mdb"
'SetDefaultWorkspace "victor t. hart", "frieda4wisc836"
'
''---
''Data1.DatabaseName = Database_Path + "\alias.mdb"
''---
''Data1.DatabaseName = Database_Path + "\alias.mdb" & ";pwd=frieda836"
''---
''Data1.DatabaseName = Database_Path + "\alias.mdb"
''Data1.Connect = "pwd=frieda836"
''---
''Set Data1.database = _
''      OpenDatabase(Database_Path + "\alias.mdb", True, False, _
''      ";pwd=" & "frieda836")
''---
''Data1.Exclusive = True
''Data1.DatabaseName = Database_Path + "\alias.mdb" & ";pwd=frieda836"
''---
''Data1.DatabaseName = Database_Path + "\alias.mdb"
''Data1.Exclusive = True
''Data1.ReadOnly = False
''Data1.Connect = "pwd=frieda836"
'
'
'Data1.Refresh
'
' 'Data1.DatabaseName = "alias.mdb"
' Q = Chr$(34)
' Data1.RecordSource = "select * from synonyms where [name] like " & Q & "*" & Trim$(txtinput.Text) & "*" & Q & " order by name"
'
' Data1.Refresh
'
' If Data1.Recordset.EOF Then
'    MsgBox "no data fitting that criteria was found"
'    lblhits.Caption = "No. of Hits: 0"
'    vlstoutput.Enabled = False
'    ME.MOUSEPOINTER = 0
'    cmdok.Enabled = False
'    vlstoutput.Clear
'    lblinfo.Caption = "CAS #: " & Chr$(13) & "Synonym: " & Chr$(13) & " IUPAC Name: "
'
'    Exit Sub
' Else
'
'  vlstoutput.Enabled = True
'  cmdok.Enabled = True
'  vlstoutput.Clear
'
'  Data1.Recordset.MoveFirst
'  Do While Not Data1.Recordset.EOF
'    s = Data1.Recordset("cas") & "    " & Data1.Recordset("name")
'    If (Data1.Recordset("IupacName") = True) Then s = s & " (*IUPAC NAME*)"
'    vlstoutput.AddItem s
'    Data1.Recordset.MoveNext
'  Loop
' End If
'
'  ME.MOUSEPOINTER = 0
'  lblhits.Caption = "No. of Hits: " & vlstoutput.ListCount
'
'  getnewdata
'
'Exit Sub
'
''DB: alias.mdb
''table: synonyms
''goal: search for 'text1.text'
'
'err_cmdSearch_Click:
'  Call Show_Trapped_Error("cmdSearch_Click")
'  Resume QuitOut
''Database_error:
''Dim temp As String, Error_Code As Integer
''    Error_Code = Err
''    temp = "Error " & Format$(Error_Code, "0") & " : " & error$(Error_Code)
''    'err.description
''    MsgBox Err.Description
''    If Err = 3024 Then
''       MsgBox "The File SYSTEM.MDA is missing.  The database is not accessible.  " & _
''       "The program will be terminated."
''    Else
''       MsgBox "Error while checking the security system.  " & _
''       Chr$(13) & temp & Chr$(13) & _
''       "The database is not accessible.  The program will be terminated."
''    End If
''
''    ME.MOUSEPOINTER = 0
''    Resume QuitOut
'QuitOut:
'   Unload Me
End Sub


Private Sub exit_Click()
  Unload Me
End Sub


Private Sub Form_Load()
  Call centerform_relative(contam_prop_form, Me)
  'NOTE: THE FOLLOWING OpenDatabase() COMMAND MUST BE
  'SPECIFIED EXACTLY AS-IS, OR ELSE IT WILL FAIL.
  Set DB_Alias = _
      ws1.OpenDatabase(Database_Path + "\alias.mdb", _
            True, _
            False, _
            ";pwd=" & decrypt_string(Encrypted_User_Password))
End Sub
Private Sub Form_Unload(Cancel As Integer)
  'Data1.DatabaseName = Database_Path + "\stepp_db.mdb"
  'ChDrive App.Path
  'ChDir App.Path
  Call ChangeDir_Main
End Sub


Private Sub GetNewData()
Dim SearchString As String
Dim NewString As String
Dim Q As String
Dim Name_To_Find As String
Dim Response As Integer
Dim X As Integer
Dim i As Integer

  On Error GoTo err_GetNewData
  Me.MousePointer = 11
  If (vlstoutput.ListIndex = -1) Then vlstoutput.ListIndex = 0
  SearchString = vlstoutput.List(vlstoutput.ListIndex)
  '
  ' GET NAME OF ALIAS.
  '
  NewString = UCase$(Trim$(Right$(SearchString, Len(SearchString) - 8)))
  '
  ' GET CAS NUMBER.
  '
  SearchString = Trim$(Left$(SearchString, 8))
  '
  ' GET ALL RECORDS THAT MATCH THIS CAS NUMBER, SORTING BY IupacName.
  '
  Set RS_Alias = DB_Alias.OpenRecordset( _
      "select * from synonyms where [cas] = " & _
      Trim$(SearchString) & _
      " and [IupacName]=true")
  RS_Alias.MoveFirst
  RS_Alias.MoveLast
  RS_Alias.MoveFirst
  '
  ' FIRST ITEM _SHOULD_ BE THE IUPAC NAME.
  '
  RS_Alias.MoveFirst
  SearchString = Database_Get_String(RS_Alias, "name")
  If (Len(SearchString) >= 40) Then SearchString = (Left$(SearchString, 40))
  If (Len(NewString) >= 40) Then NewString = (Left$(NewString, 40))
  '
  ' DISPLAY THE INFO.
  '
  lblinfo.Caption = _
      "CAS #: " & Trim$(Str$(Database_Get_Long(RS_Alias, "cas"))) & vbCrLf & _
      "Synonym: " & LCase$(NewString) & vbCrLf & _
      " IUPAC Name: " & LCase$(CStr(SearchString))
  Me.MousePointer = 0
  Exit Sub
BailOut:
  Exit Sub
err_GetNewData:
  Me.MousePointer = 0
  Call Show_Trapped_Error("GetNewData")
  Resume BailOut


'
' OLD CODE HERE:
' ==============
'
'Dim searchstring As String, newstring As String, Q  As String
'Dim name_to_find As String
'Dim response As Integer
'Dim X As Integer, i  As Integer
'
'On Error GoTo bad_record
'
'ME.MOUSEPOINTER = 11
'
'If (vlstoutput.ListIndex = -1) Then vlstoutput.ListIndex = 0
'
'searchstring = vlstoutput.List(vlstoutput.ListIndex)
'
''get name of alias
'newstring = UCase(Trim(Right(searchstring, Len(searchstring) - 8)))
'
''get cas number
'searchstring = Trim(Left(searchstring, 8))
'
''get all of that cas number and sort by If iupac name
'Data1.RecordSource = "select * from synonyms where [cas] = " & Trim$(searchstring) & " and [IupacName]=true"
'
'Data1.Refresh
'
' 'first item is iupac name
' Data1.Recordset.MoveFirst
' searchstring = Data1.Recordset("name")
'
' If (Len(searchstring) >= 40) Then searchstring = (Left(searchstring, 40))
' If (Len(newstring) >= 40) Then newstring = (Left(newstring, 40))
'
' 'remove and replace with code starting stepp run
'  lblinfo.Caption = "CAS #: " & Data1.Recordset("cas") & Chr$(13) & "Synonym: " & newstring & Chr$(13) & " IUPAC Name: " & UCase(CStr(searchstring))
'ME.MOUSEPOINTER = 0
'Exit Sub
'
'bad_record:
'ME.MOUSEPOINTER = 0
'MsgBox "Error in the database. The chemical selected does not have a iupac name"
'Resume bailout
'
'bailout:
End Sub


Private Sub txtinput_KeyPress(KeyAscii As Integer)
  If KeyAscii = 13 Then
    Call cmdSearch_Click
  End If
End Sub


Private Sub vlstoutput_Click()
  Call GetNewData
End Sub


Private Sub vlstoutput_DblClick()
  Call cmdOK_Click
End Sub


VERSION 5.00
Begin VB.Form aqsol_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Aqueous Solubility"
   ClientHeight    =   5670
   ClientLeft      =   960
   ClientTop       =   1470
   ClientWidth     =   8850
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   5670
   ScaleWidth      =   8850
   Begin VB.ComboBox cboUNIFACParameterSet 
      Appearance      =   0  'Flat
      Height          =   288
      Left            =   3720
      Style           =   2  'Dropdown List
      TabIndex        =   7
      Top             =   5160
      Width           =   4932
   End
   Begin VB.TextBox txtAqSolTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   4
      Left            =   6480
      TabIndex        =   9
      Top             =   4320
      Width           =   975
   End
   Begin VB.TextBox txtAqueousSolubilityValue 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   4
      Left            =   4440
      TabIndex        =   8
      Top             =   4320
      Width           =   1815
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   5
      Left            =   1560
      TabIndex        =   6
      Top             =   4320
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   4
      Left            =   1560
      TabIndex        =   5
      Top             =   3840
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   3
      Left            =   1560
      TabIndex        =   4
      Top             =   3360
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   1560
      TabIndex        =   3
      Top             =   2880
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   1560
      TabIndex        =   2
      Top             =   2400
      Width           =   255
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   5040
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Aqueous Solubility"
      Height          =   615
      Left            =   5040
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.Shape Shape2 
      BorderWidth     =   2
      Height          =   492
      Left            =   120
      Top             =   5040
      Width           =   8652
   End
   Begin VB.Label Label2 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC Group Interaction Database:"
      ForeColor       =   &H80000008&
      Height          =   252
      Left            =   240
      TabIndex        =   31
      Top             =   5160
      Width           =   3252
   End
   Begin VB.Label lblAqSolTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   3
      Left            =   6480
      TabIndex        =   30
      Top             =   3840
      Width           =   975
   End
   Begin VB.Label lblAqSolTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   6480
      TabIndex        =   29
      Top             =   3360
      Width           =   972
   End
   Begin VB.Label lblAqSolTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   6480
      TabIndex        =   28
      Top             =   2880
      Width           =   972
   End
   Begin VB.Label lblAqSolTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6480
      TabIndex        =   27
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblAqueousSolubilityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   3
      Left            =   4440
      TabIndex        =   26
      Top             =   3840
      Width           =   1812
   End
   Begin VB.Label lblAqueousSolubilityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   4440
      TabIndex        =   25
      Top             =   3360
      Width           =   1812
   End
   Begin VB.Label lblAqueousSolubilityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   4440
      TabIndex        =   24
      Top             =   2880
      Width           =   1812
   End
   Begin VB.Label lblAqueousSolubilityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4440
      TabIndex        =   23
      Top             =   2400
      Width           =   1812
   End
   Begin VB.Line Line2 
      X1              =   1440
      X2              =   7560
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   3132
      Left            =   1440
      Top             =   1680
      Width           =   6132
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   4
      Left            =   1920
      TabIndex        =   22
      Top             =   4320
      Width           =   2292
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC at Database T"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   3
      Left            =   1920
      TabIndex        =   21
      Top             =   3840
      Width           =   2292
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Database"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   1920
      TabIndex        =   20
      Top             =   3360
      Width           =   2292
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC Fit with Data Pt."
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   1920
      TabIndex        =   19
      Top             =   2400
      Width           =   2292
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC at Operating T"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   1920
      TabIndex        =   18
      Top             =   2880
      Width           =   2292
   End
   Begin VB.Label lblAqSolTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   6480
      TabIndex        =   17
      Top             =   1800
      Width           =   972
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   1920
      TabIndex        =   16
      Top             =   1800
      Width           =   2292
   End
   Begin VB.Label lblAqSolLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Aqueous Sol."
      ForeColor       =   &H00000000&
      Height          =   400
      Left            =   4440
      TabIndex        =   15
      Top             =   1750
      Width           =   1812
   End
   Begin VB.Line Line1 
      X1              =   360
      X2              =   4680
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1332
      Left            =   360
      Top             =   120
      Width           =   4332
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   2280
      TabIndex        =   14
      Top             =   720
      Width           =   2292
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   2280
      TabIndex        =   13
      Top             =   1080
      Width           =   2292
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   480
      TabIndex        =   12
      Top             =   1080
      Width           =   1572
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   480
      TabIndex        =   11
      Top             =   720
      Width           =   1572
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Aqueous Solubility Information"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   480
      TabIndex        =   10
      Top             =   240
      Width           =   4092
   End
End
Attribute VB_Name = "aqsol_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastAqSolInputValue As String
Dim PastAqSolInputTemp As String
Dim EFlag As Integer

Private Sub cboUNIFACParameterSet_Click()

    If aqsol_form!cboUNIFACParameterSet.ListCount = 1 Then Exit Sub

    Select Case aqsol_form!cboUNIFACParameterSet.ListIndex
       Case 0   'Original UNIFAC VLE
            If phprop.AqueousSolubility.BinaryInteractionParameterDatabase <> 1 Then
               If phprop.AqueousSolubility.BinaryInteractionParameterDBAvailable(1) = False Then
                  MsgBox "Original UNIFAC VLE not available to calculate aqueous solubility for this compound.", MB_ICONSTOP, "Data Not Available"
                  aqsol_form!cboUNIFACParameterSet.ListIndex = phprop.AqueousSolubility.PreviousBinaryInteractionParameterDB - 1
                  Exit Sub
               End If
               phprop.AqueousSolubility.PreviousBinaryInteractionParameterDB = phprop.AqueousSolubility.BinaryInteractionParameterDatabase
               phprop.AqueousSolubility.BinaryInteractionParameterDatabase = 1
               UserSelectedTheUnifacBIPDBAqSol = True
               Screen.MousePointer = 11   'Hourglass
               Call CalculateAqueousSolubility
               Screen.MousePointer = 0    'Arrow
            End If
       Case 1   'UNIFAC LLE
               If phprop.AqueousSolubility.BinaryInteractionParameterDBAvailable(2) = False Then
                  MsgBox "UNIFAC LLE not available to calculate aqueous solubility for this compound.", MB_ICONSTOP, "Data Not Available"
                  aqsol_form!cboUNIFACParameterSet.ListIndex = phprop.AqueousSolubility.PreviousBinaryInteractionParameterDB - 1
                  Exit Sub
               End If
            If phprop.AqueousSolubility.BinaryInteractionParameterDatabase <> 2 Then
               phprop.AqueousSolubility.PreviousBinaryInteractionParameterDB = phprop.AqueousSolubility.BinaryInteractionParameterDatabase
               phprop.AqueousSolubility.BinaryInteractionParameterDatabase = 2
               UserSelectedTheUnifacBIPDBAqSol = True
               Screen.MousePointer = 11  'hourglass
               Call CalculateAqueousSolubility
               Screen.MousePointer = 0   'arrow
            End If
       Case 2   'Environmental VLE
               If phprop.AqueousSolubility.BinaryInteractionParameterDBAvailable(3) = False Then
                  MsgBox "Environmental VLE not available to calculate aqueous solubility for this compound.", MB_ICONSTOP, "Data Not Available"
                  aqsol_form!cboUNIFACParameterSet.ListIndex = phprop.AqueousSolubility.PreviousBinaryInteractionParameterDB - 1
                  Exit Sub
               End If
            If phprop.AqueousSolubility.BinaryInteractionParameterDatabase <> 3 Then
               phprop.AqueousSolubility.PreviousBinaryInteractionParameterDB = phprop.AqueousSolubility.BinaryInteractionParameterDatabase
               phprop.AqueousSolubility.BinaryInteractionParameterDatabase = 3
               UserSelectedTheUnifacBIPDBAqSol = True
               Screen.MousePointer = 11    'Hourglass
               Call CalculateAqueousSolubility
               Screen.MousePointer = 0     'Arrow
            End If
    End Select

End Sub

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.AqueousSolubility.CurrentSelection.choice
       Case AQUEOUS_SOLUBILITY_FIT
          SelectedOption = 1
       Case AQUEOUS_SOLUBILITY_OPT_UNIFAC
          SelectedOption = 2
       Case AQUEOUS_SOLUBILITY_DATABASE
          SelectedOption = 3
       Case AQUEOUS_SOLUBILITY_DBT_UNIFAC
          SelectedOption = 4
       Case AQUEOUS_SOLUBILITY_INPUT
          SelectedOption = 5
          txtaqueoussolubilityValue(4).Text = PastAqSolInputValue
          txtaqSoltemperature(4).Text = PastAqSolInputTemp
       Case Else
          aqsol_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    aqsol_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 5
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = AQUEOUS_SOLUBILITY_FIT
       Case 2
          ValueToDisplayIndex = AQUEOUS_SOLUBILITY_OPT_UNIFAC
       Case 3
          ValueToDisplayIndex = AQUEOUS_SOLUBILITY_DATABASE
       Case 4
          ValueToDisplayIndex = AQUEOUS_SOLUBILITY_DBT_UNIFAC
       Case 5
          If Not PROPAVAILABLE(AQUEOUS_SOLUBILITY_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtaqueoussolubilityValue(4).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = AQUEOUS_SOLUBILITY_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.AqueousSolubility.CurrentSelection.choice Then
       phprop.AqueousSolubility.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayAqueousSolubilityMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = AQUEOUS_SOLUBILITY_INPUT Then
       Call DisplayAqueousSolubilityMainScreen(ValueToDisplayIndex)
    End If

    aqsol_form.Hide
End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastAqSolInputValue = txtaqueoussolubilityValue(4).Text
    PastAqSolInputTemp = txtaqSoltemperature(4).Text

       aqsol_form!cboUNIFACParameterSet.Clear
       aqsol_form!cboUNIFACParameterSet.AddItem "Original UNIFAC VLE"
       aqsol_form!cboUNIFACParameterSet.AddItem "UNIFAC LLE"
       aqsol_form!cboUNIFACParameterSet.AddItem "Environmental VLE"
       If Not aqsol_form!cboUNIFACParameterSet.Enabled Then aqsol_form!cboUNIFACParameterSet.Enabled = True
    
    Select Case phprop.AqueousSolubility.BinaryInteractionParameterDatabase
       Case 1
            aqsol_form!cboUNIFACParameterSet.ListIndex = 0
       Case 2
            aqsol_form!cboUNIFACParameterSet.ListIndex = 1
       Case 3
            aqsol_form!cboUNIFACParameterSet.ListIndex = 2
       Case 0
            aqsol_form!cboUNIFACParameterSet.Clear
            aqsol_form!cboUNIFACParameterSet.AddItem "UNIFAC Solubility Calculation Not Possible"
            aqsol_form!cboUNIFACParameterSet.ListIndex = 0
            aqsol_form!cboUNIFACParameterSet.Enabled = False
    End Select
    
End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)

    If (DemoMode) Then cmdok.Enabled = False

    EFlag = False


End Sub

Private Sub lblAqSolTemperature_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AqueousSolubility.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblAqueousSolubilityValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    
    Dim ErrorFlag As Integer
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AqueousSolubility.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0  'Source = UNIFAC Fit with a Data Point
          ErrorFlag = phprop.AqueousSolubility.fit.UNIFAC.error
       Case 1  'Source = UNIFAC at Operating T
          ErrorFlag = phprop.AqueousSolubility.operatingT.UNIFAC.error
       Case 2  'Source = Database
          ErrorFlag = phprop.AqueousSolubility.database.error
       Case 3  'Source = UNIFAC at Database T
          ErrorFlag = phprop.AqueousSolubility.UNIFAC.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AqueousSolubility.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
    
End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer
    
    SourceIndex = Index - 1
    If SourceIndex = hilight.AqueousSolubility.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.AqueousSolubility.PreviousIndex
    hilight.AqueousSolubility.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtAqSolTemperature_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtaqSoltemperature(Index), Temp_Text)

    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AqueousSolubility.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub txtAqSolTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       For i = 1 To 4
          Option1(i).Enabled = True
       Next i
       cboUNIFACParameterSet.Enabled = True
       EFlag = False
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtAqSolTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtaqSoltemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtaqSoltemperature(Index).Text = "" Then
       phprop.AqueousSolubility.input.temperature = -1E+25
       Call LostFocus_Handle(Me, txtaqSoltemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtaqSoltemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtaqSoltemperature(Index).Text)) Then
          txtaqSoltemperature(Index).Text = Temp_Text
          txtaqSoltemperature(Index).SetFocus
          Call LostFocus_Handle(Me, txtaqSoltemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtaqSoltemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.AqueousSolubility.input.temperature = CDbl(txtaqSoltemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtaqSoltemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.AqueousSolubility.input.temperature = SIValue
          End If

          
       Else
          Call LostFocus_Handle(Me, txtaqSoltemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
  Call LostFocus_Handle(Me, txtaqSoltemperature(Index), flag_ok)

End Sub

Private Sub txtAqueousSolubilityValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtaqueoussolubilityValue(Index), Temp_Text)

    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.AqueousSolubility.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtAqueousSolubilityValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txtaqSoltemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)

End Sub

Private Sub txtAqueousSolubilityValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtaqueoussolubilityValue(Index))) Then
     Exit Sub
   End If

   flag_ok = True
    If txtaqueoussolubilityValue(Index).Text = "" Then
       phprop.AqueousSolubility.input.Value = -1#
       PROPAVAILABLE(AQUEOUS_SOLUBILITY_INPUT) = False
       Call LostFocus_Handle(Me, txtaqueoussolubilityValue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtaqueoussolubilityValue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtaqueoussolubilityValue(Index).Text)) Then
          txtaqueoussolubilityValue(Index).Text = Temp_Text
          txtaqueoussolubilityValue(Index).SetFocus
          Call LostFocus_Handle(Me, txtaqueoussolubilityValue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtaqueoussolubilityValue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.AqueousSolubility.input.Value = CDbl(txtaqueoussolubilityValue(Index).Text)
          Else
             EnglishValue = CDbl(txtaqueoussolubilityValue(Index).Text)
             Call AQSENSI(SIValue, EnglishValue)
             phprop.AqueousSolubility.input.Value = SIValue
          End If

          
          PROPAVAILABLE(AQUEOUS_SOLUBILITY_INPUT) = True
       Else
          Call LostFocus_Handle(Me, txtaqueoussolubilityValue(Index), flag_ok)
          Exit Sub
       End If
    End If
  Call LostFocus_Handle(Me, txtaqueoussolubilityValue(Index), flag_ok)


End Sub

VERSION 5.00
Object = "{0BA686C6-F7D3-101A-993E-0000C0EF6F5E}#1.0#0"; "THREED32.OCX"
Object = "{F9043C88-F6F2-101A-A3C9-08002B2F49FB}#1.1#0"; "Comdlg32.ocx"
Begin VB.Form contam_prop_form 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "StEPP - Software to Estimate Physical Properties"
   ClientHeight    =   6795
   ClientLeft      =   1920
   ClientTop       =   1800
   ClientWidth     =   9480
   Icon            =   "contam_prop.frx":0000
   LinkTopic       =   "Form1"
   LockControls    =   -1  'True
   MaxButton       =   0   'False
   ScaleHeight     =   6795
   ScaleWidth      =   9480
   Begin Threed.SSFrame SSFrame1 
      Height          =   615
      Left            =   840
      TabIndex        =   53
      Top             =   6060
      Visible         =   0   'False
      Width           =   4545
      _Version        =   65536
      _ExtentX        =   8017
      _ExtentY        =   1085
      _StockProps     =   14
      Caption         =   "Invisible"
      ForeColor       =   255
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Begin MSComDlg.CommonDialog CommonDialog1 
         Left            =   3060
         Top             =   120
         _ExtentX        =   847
         _ExtentY        =   847
         _Version        =   327681
      End
      Begin VB.Data Data1_OLD 
         Caption         =   "Data1_OLD"
         Connect         =   "Access"
         DatabaseName    =   ""
         DefaultCursorType=   0  'DefaultCursor
         DefaultType     =   2  'UseODBC
         Exclusive       =   0   'False
         Height          =   360
         Left            =   900
         Options         =   0
         ReadOnly        =   0   'False
         RecordsetType   =   1  'Dynaset
         RecordSource    =   ""
         Top             =   180
         Visible         =   0   'False
         Width           =   1995
      End
      Begin MSComDlg.CommonDialog CommonDialog2 
         Left            =   3540
         Top             =   120
         _ExtentX        =   847
         _ExtentY        =   847
         _Version        =   327681
      End
   End
   Begin Threed.SSFrame fraOperatingConditions 
      Height          =   975
      Left            =   60
      TabIndex        =   0
      Top             =   60
      Width           =   4575
      _Version        =   65536
      _ExtentX        =   8064
      _ExtentY        =   1714
      _StockProps     =   14
      Caption         =   "Operating Conditions:"
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.22
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Begin VB.TextBox txtOperatingTemperature 
         Appearance      =   0  'Flat
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   285
         Left            =   3240
         TabIndex        =   6
         Top             =   600
         Width           =   1215
      End
      Begin VB.TextBox txtOperatingPressure 
         Appearance      =   0  'Flat
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   285
         Left            =   3240
         TabIndex        =   5
         Top             =   240
         Width           =   1215
      End
      Begin VB.Label lblOperatingConditions 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Temperature"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   1
         Left            =   150
         TabIndex        =   8
         Top             =   600
         Width           =   3015
      End
      Begin VB.Label lblOperatingConditions 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Pressure"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   0
         Left            =   120
         TabIndex        =   7
         Top             =   240
         Width           =   3015
      End
   End
   Begin Threed.SSFrame fraAvailableContaminants 
      Height          =   2355
      Left            =   60
      TabIndex        =   1
      Top             =   1110
      Width           =   4575
      _Version        =   65536
      _ExtentX        =   8064
      _ExtentY        =   4149
      _StockProps     =   14
      Caption         =   "Available Contaminants:"
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.24
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Begin VB.ListBox contam_combo 
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   1230
         Left            =   120
         TabIndex        =   13
         Top             =   270
         Width           =   4335
      End
      Begin VB.CommandButton cmdSearch 
         Appearance      =   0  'Flat
         Caption         =   "Find Next Occurrence"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   255
         Index           =   1
         Left            =   2280
         TabIndex        =   12
         Top             =   1590
         Width           =   2175
      End
      Begin VB.CommandButton cmdSearch 
         Appearance      =   0  'Flat
         Caption         =   "Find"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   255
         Index           =   0
         Left            =   120
         TabIndex        =   11
         Top             =   1590
         Width           =   2175
      End
      Begin VB.CommandButton cmdSelectContaminant 
         Appearance      =   0  'Flat
         Caption         =   "Select Current Contaminant"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   375
         Left            =   1320
         TabIndex        =   10
         Top             =   1890
         Width           =   3135
      End
      Begin VB.CommandButton cmdSynonyms 
         Appearance      =   0  'Flat
         Caption         =   "Synonyms"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   375
         Left            =   120
         TabIndex        =   9
         Top             =   1890
         Width           =   1215
      End
   End
   Begin Threed.SSFrame fraSelectedContaminants 
      Height          =   2475
      Left            =   60
      TabIndex        =   2
      Top             =   3540
      Width           =   4575
      _Version        =   65536
      _ExtentX        =   8070
      _ExtentY        =   4366
      _StockProps     =   14
      Caption         =   "Selected Contaminants:"
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Begin VB.CommandButton cmdUnselectContaminant 
         Appearance      =   0  'Flat
         Caption         =   "Unselect Current Contaminant"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   375
         Left            =   120
         TabIndex        =   15
         Top             =   1980
         Width           =   4335
      End
      Begin VB.ComboBox cboSelectContaminant 
         Appearance      =   0  'Flat
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   1350
         Left            =   120
         Style           =   1  'Simple Combo
         TabIndex        =   14
         Top             =   360
         Width           =   4335
      End
   End
   Begin Threed.SSFrame fraContaminantProperties 
      Height          =   4092
      Left            =   4770
      TabIndex        =   3
      Top             =   60
      Width           =   4572
      _Version        =   65536
      _ExtentX        =   8064
      _ExtentY        =   7218
      _StockProps     =   14
      Caption         =   "Properties of the Contaminant:"
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.24
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Begin VB.Label lblSelectedContaminant 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Left            =   240
         TabIndex        =   42
         Top             =   420
         Width           =   4095
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Gas Diffusivity"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   12
         Left            =   120
         TabIndex        =   41
         Top             =   3720
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Liquid Diffusivity"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   11
         Left            =   120
         TabIndex        =   40
         Top             =   3480
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "log Octanol Water Part. Coeff."
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   10
         Left            =   120
         TabIndex        =   39
         Top             =   3240
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Aqueous Solubility"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   9
         Left            =   120
         TabIndex        =   38
         Top             =   3000
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Refractive Index"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   8
         Left            =   120
         TabIndex        =   37
         Top             =   2760
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Molar Volume @ NBP"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   7
         Left            =   120
         TabIndex        =   36
         Top             =   2520
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Molar Volume @ Op.T"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   6
         Left            =   120
         TabIndex        =   35
         Top             =   2280
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Liquid Density"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   5
         Left            =   120
         TabIndex        =   34
         Top             =   2040
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Normal Boiling Point"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   4
         Left            =   120
         TabIndex        =   33
         Top             =   1800
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Molecular Weight"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   3
         Left            =   120
         TabIndex        =   32
         Top             =   1560
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Henry's Constant"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   2
         Left            =   120
         TabIndex        =   31
         Top             =   1320
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Infinite Dilution Activity Coeff."
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   1
         Left            =   120
         TabIndex        =   30
         Top             =   1080
         Width           =   3000
      End
      Begin VB.Label lblContaminantPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Vapor Pressure"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   0
         Left            =   120
         TabIndex        =   29
         Top             =   840
         Width           =   3000
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   12
         Left            =   3240
         TabIndex        =   28
         Top             =   3720
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   11
         Left            =   3240
         TabIndex        =   27
         Top             =   3480
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   10
         Left            =   3240
         TabIndex        =   26
         Top             =   3240
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   9
         Left            =   3240
         TabIndex        =   25
         Top             =   3000
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   8
         Left            =   3240
         TabIndex        =   24
         Top             =   2760
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   7
         Left            =   3240
         TabIndex        =   23
         Top             =   2520
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   6
         Left            =   3240
         TabIndex        =   22
         Top             =   2280
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   5
         Left            =   3240
         TabIndex        =   21
         Top             =   2040
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   4
         Left            =   3240
         TabIndex        =   20
         Top             =   1800
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   3
         Left            =   3240
         TabIndex        =   19
         Top             =   1560
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   2
         Left            =   3240
         TabIndex        =   18
         Top             =   1320
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   1
         Left            =   3240
         TabIndex        =   17
         Top             =   1080
         Width           =   1215
      End
      Begin VB.Label lblContaminantProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   0
         Left            =   3240
         TabIndex        =   16
         Top             =   840
         Width           =   1215
      End
   End
   Begin Threed.SSFrame fraAirWaterProperties 
      Height          =   1755
      Left            =   4770
      TabIndex        =   4
      Top             =   4260
      Width           =   4575
      _Version        =   65536
      _ExtentX        =   8064
      _ExtentY        =   3090
      _StockProps     =   14
      Caption         =   "Properties of Air and Water:"
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.24
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Begin VB.Label lblAirWaterProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   4
         Left            =   3240
         TabIndex        =   52
         Top             =   1380
         Width           =   1215
      End
      Begin VB.Label lblAirWaterProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   3
         Left            =   3240
         TabIndex        =   51
         Top             =   1140
         Width           =   1215
      End
      Begin VB.Label lblAirWaterProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   2
         Left            =   3240
         TabIndex        =   50
         Top             =   900
         Width           =   1215
      End
      Begin VB.Label lblAirWaterProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   1
         Left            =   3240
         TabIndex        =   49
         Top             =   660
         Width           =   1215
      End
      Begin VB.Label lblAirWaterPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Air Viscosity"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   4
         Left            =   120
         TabIndex        =   48
         Top             =   1380
         Width           =   3000
      End
      Begin VB.Label lblAirWaterPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Air Density"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   3
         Left            =   120
         TabIndex        =   47
         Top             =   1140
         Width           =   3000
      End
      Begin VB.Label lblAirWaterPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Water Surface Tension"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   2
         Left            =   120
         TabIndex        =   46
         Top             =   900
         Width           =   3000
      End
      Begin VB.Label lblAirWaterPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Water Viscosity"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   1
         Left            =   120
         TabIndex        =   45
         Top             =   660
         Width           =   3000
      End
      Begin VB.Label lblAirWaterProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   0
         Left            =   3240
         TabIndex        =   44
         Top             =   420
         Width           =   1215
      End
      Begin VB.Label lblAirWaterPropertiesLabel 
         Alignment       =   1  'Right Justify
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BackStyle       =   0  'Transparent
         Caption         =   "Water Density"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   0
         Left            =   120
         TabIndex        =   43
         Top             =   420
         Width           =   3000
      End
   End
   Begin VB.Menu mnuFileMenu 
      Caption         =   "&File"
      Begin VB.Menu mnuFile 
         Caption         =   "&New"
         Index           =   0
      End
      Begin VB.Menu mnuFile 
         Caption         =   "&Open ..."
         Index           =   1
      End
      Begin VB.Menu mnuFile 
         Caption         =   "- (INVISIBLE)"
         Index           =   3
         Visible         =   0   'False
      End
      Begin VB.Menu mnuFile 
         Caption         =   "&Save"
         Index           =   4
      End
      Begin VB.Menu mnuFile 
         Caption         =   "Save &As ..."
         Index           =   5
      End
      Begin VB.Menu mnuFile 
         Caption         =   "-"
         Index           =   6
      End
      Begin VB.Menu mnuFile 
         Caption         =   "&Print ..."
         Index           =   7
      End
      Begin VB.Menu mnuFile 
         Caption         =   "Select Printer ..."
         Index           =   8
      End
      Begin VB.Menu mnuFile 
         Caption         =   "-"
         Index           =   9
      End
      Begin VB.Menu mnuFile 
         Caption         =   "&1 Old File #1"
         Index           =   191
         Visible         =   0   'False
      End
      Begin VB.Menu mnuFile 
         Caption         =   "&2 Old File #2"
         Index           =   192
         Visible         =   0   'False
      End
      Begin VB.Menu mnuFile 
         Caption         =   "&3 Old File #3"
         Index           =   193
         Visible         =   0   'False
      End
      Begin VB.Menu mnuFile 
         Caption         =   "&4 Old File #4"
         Index           =   194
         Visible         =   0   'False
      End
      Begin VB.Menu mnuFile 
         Caption         =   "-"
         Index           =   199
         Visible         =   0   'False
      End
      Begin VB.Menu mnuFile 
         Caption         =   "E&xit"
         Index           =   200
      End
   End
   Begin VB.Menu mnuUnitsMenu 
      Caption         =   "&Units"
      Begin VB.Menu mnuUnits 
         Caption         =   "&Standard International (SI)"
         Index           =   0
      End
      Begin VB.Menu mnuUnits 
         Caption         =   "&English"
         Index           =   1
      End
   End
   Begin VB.Menu mnuOptions 
      Caption         =   "&Options"
      Index           =   10
      Begin VB.Menu mnuOptionsItem 
         Caption         =   "Create Export File for AdDesignS/ASAP"
         Index           =   10
      End
      Begin VB.Menu mnuOptionsItem 
         Caption         =   "Copy to Clipboard for AdDesignS/ASAP"
         Index           =   20
      End
   End
   Begin VB.Menu mnuOptionsEtcMenu 
      Caption         =   "&OptionsOld"
      Visible         =   0   'False
      Begin VB.Menu export 
         Caption         =   "Create Export File for AdDesignS/ASAP"
      End
      Begin VB.Menu mnuOptionsEtc 
         Caption         =   "Modify &Hierarchy"
         Enabled         =   0   'False
         Index           =   0
         Visible         =   0   'False
      End
      Begin VB.Menu mnuAboutMenu 
         Caption         =   "&About"
         Visible         =   0   'False
      End
      Begin VB.Menu mnuAbout 
         Caption         =   "&StEPP Version 1.00"
         Index           =   0
         Visible         =   0   'False
      End
      Begin VB.Menu mnuAbout 
         Caption         =   "The &Authors"
         Index           =   1
         Visible         =   0   'False
      End
      Begin VB.Menu mnuAbout 
         Caption         =   "&Programming Support"
         Index           =   2
         Visible         =   0   'False
      End
      Begin VB.Menu mnuAbout 
         Caption         =   "&Obtaining Additional Information"
         Index           =   3
         Visible         =   0   'False
      End
   End
   Begin VB.Menu mnuHelp 
      Caption         =   "&Help"
      Index           =   0
      Begin VB.Menu frmHelpIndex 
         Caption         =   "&Online Help ..."
         Index           =   10
      End
      Begin VB.Menu frmHelpIndex 
         Caption         =   "&Online Manual ..."
         Index           =   20
      End
      Begin VB.Menu frmHelpIndex 
         Caption         =   "-"
         Index           =   25
      End
      Begin VB.Menu frmHelpIndex 
         Caption         =   "View Version History ..."
         Index           =   30
      End
      Begin VB.Menu frmHelpIndex 
         Caption         =   "View Disclaimer ..."
         Index           =   40
      End
      Begin VB.Menu frmHelpIndex 
         Caption         =   "Technical Assistance Provided By ..."
         Index           =   50
      End
      Begin VB.Menu frmHelpIndex 
         Caption         =   "-"
         Index           =   98
      End
      Begin VB.Menu frmHelpIndex 
         Caption         =   "&About ..."
         Index           =   99
      End
   End
End
Attribute VB_Name = "contam_prop_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
''''Option Explicit

Dim contam_prop_form_ActivatedYet As Integer





Const contam_prop_form_declarations_end = True


Private Sub BlankTextBoxesPressure()
    'Blank text boxes that are recalculated when Pressure changes
  
    lblContaminantProperties(12).Caption = ""

End Sub

Private Sub BlankTextBoxesTemp()
    'Blank text boxes that are recalculated when T changes
    Dim i As Integer
  
    lblContaminantProperties(0).Caption = ""
    If phprop.ActivityCoefficient.BinaryInteractionParameterDatabase > 0 Then lblContaminantProperties(1).Caption = ""
    lblContaminantProperties(2).Caption = ""
    lblContaminantProperties(5).Caption = ""
    lblContaminantProperties(6).Caption = ""
    If phprop.AqueousSolubility.BinaryInteractionParameterDatabase > 0 Then lblContaminantProperties(9).Caption = ""
    If phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase > 0 Then lblContaminantProperties(10).Caption = ""
    lblContaminantProperties(11).Caption = ""
    lblContaminantProperties(12).Caption = ""

    For i = 0 To 4
        lblAirWaterProperties(i).Caption = ""
    Next i

End Sub

Private Sub cboSelectContaminant_Click()
    Dim ContaminantName As String, Ch As String, LastName As String
    Dim hc_database_value As String * 40
    Dim hc_database_temp As String
    Dim hc_string As String
    Dim hc_unifac_value As String * 40
    Dim hc_unifac_temp As String
    Dim SIValue As Double, EnglishValue As Double

    If cboSelectContaminant.ListIndex = -1 Then Exit Sub

    ContaminantName = cboSelectContaminant.Text
    ContaminantName = Right$(ContaminantName, Len(ContaminantName) - 1)
    Ch = Left$(ContaminantName, 1)
    

    While Ch <> " "
      
       ContaminantName = Right$(ContaminantName, Len(ContaminantName) - 1)
       Ch = Left$(ContaminantName, 1)
    Wend
    ContaminantName = Right$(ContaminantName, Len(ContaminantName) - 1)

    lblSelectedContaminant.Caption = ContaminantName
'    If (cboSelectContaminant.ListCount < 2) Then Exit Sub

    If JustLoadedFile Then
       For i = 1 To NUMBER_OF_PROPERTIES
           HaveProperty(i) = phprop.HaveProperty(i)
       Next i
       For i = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
           PROPAVAILABLE(i) = phprop.PROPAVAILABLE(i)
       Next i
       Call InitializeHilights

       If CurrentUnits = SIUnits Then
          txtOperatingPressure.Text = Str$(phprop.OperatingPressure)
          txtOperatingTemperature.Text = Str$(phprop.OperatingTemperature)
       Else
          SIValue = phprop.OperatingPressure
          Call PRESSCNV(EnglishValue, SIValue)
          txtOperatingPressure.Text = Str$(EnglishValue)

          SIValue = phprop.OperatingTemperature
          Call TEMPCNV(EnglishValue, SIValue)
          txtOperatingTemperature.Text = Str$(EnglishValue)
       End If

       Call DisplayAllProperties

       PreviouslySelectedIndex = cboSelectContaminant.ListIndex + 1
       JustLoadedFile = False
       Exit Sub
    End If

    If PropContaminant(cboSelectContaminant.ListIndex + 1).CasNumber <> phprop.CasNumber Then
       For i = 1 To NUMBER_OF_PROPERTIES
           phprop.HaveProperty(i) = HaveProperty(i)
       Next i
       For i = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
           phprop.PROPAVAILABLE(i) = PROPAVAILABLE(i)
       Next i
       If PreviouslySelectedIndex > 0 Then
          PropContaminant(PreviouslySelectedIndex) = phprop
       End If

       phprop = PropContaminant(cboSelectContaminant.ListIndex + 1)
       For i = 1 To NUMBER_OF_PROPERTIES
           HaveProperty(i) = phprop.HaveProperty(i)
       Next i
       For i = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
           PROPAVAILABLE(i) = phprop.PROPAVAILABLE(i)
       Next i
       Call InitializeHilights

       If CurrentUnits = SIUnits Then
          txtOperatingPressure.Text = Str$(phprop.OperatingPressure)
          txtOperatingTemperature.Text = Str$(phprop.OperatingTemperature)
       Else
          SIValue = phprop.OperatingPressure
          Call PRESSCNV(EnglishValue, SIValue)
          txtOperatingPressure.Text = Str$(EnglishValue)

          SIValue = phprop.OperatingTemperature
          Call TEMPCNV(EnglishValue, SIValue)
          txtOperatingTemperature.Text = Str$(EnglishValue)
       End If

       Call DisplayAllProperties

       PreviouslySelectedIndex = cboSelectContaminant.ListIndex + 1
    End If

End Sub

Private Sub cboSelectContaminant_KeyPress(KeyAscii As Integer)
    KeyAscii = 0
End Sub

Private Sub cmdCancel_Click()
    End
End Sub

Private Sub cmdSearch_Click(Index As Integer)
    Dim contam_combo_index As Integer

    Select Case Index
       Case 0
          frmStringS.Show 1
          If Find_String <> "" Then
             Screen.MousePointer = 11  'HourGlass
             Call Search_String(-1)
             Screen.MousePointer = 0   'Arrow
          End If
       Case 1
          If Find_String <> "" Then
             contam_combo_index = contam_combo.ListIndex
             Screen.MousePointer = 11  'HourGlass
             Call Search_String(contam_combo_index)
             Screen.MousePointer = 0   'Arrow
          End If

    End Select

End Sub

Private Sub cmdSelectContaminant_Click()
    Dim i As Integer, J As Integer
    Dim msg$, Response As Integer

''''' RETURNS FALSE IF THE CHEMICAL CAN CONTINUE ON
''''' ALWAYS RETURNS FALSE IF NOT IN DEMOMODE CHECK DEMOMODE.BAS
''''    If (demo_check_chemicals(contam_combo)) Then Exit Sub

    If NumSelectedChemicals = MAXSELECTEDCHEMICALS Then
       msg$ = "The maximum number of contaminants that can be selected at a time in the StEPP program is " & Str$(MAXSELECTEDCHEMICALS) & ".  Therefore, you may not select this chemical unless you Unselect a contaminant you selected previously or begin the program again."
       MsgBox msg$, MB_ICONSTOP, "Too Many Contaminants Selected"
       Exit Sub
    End If

    Screen.MousePointer = 11   'Hourglass

    Update_Fields (contam_combo.ListIndex)

    If NumSelectedChemicals = 0 Then
       contam_prop_form!mnuFile(4).Enabled = True
       contam_prop_form!mnuFile(5).Enabled = True
       contam_prop_form!mnuFile(7).Enabled = True
       contam_prop_form!cmdUnselectContaminant.Enabled = True
    End If

    For i = 0 To cboSelectContaminant.ListCount - 1
        If Trim$(cboSelectContaminant.List(i)) = Trim$(contam_combo.List(contam_combo.ListIndex)) Then
           msg$ = "There is already a contaminant named "
           msg$ = msg$ + contam_combo.List(contam_combo.ListIndex) + " selected. "
           msg$ = msg$ + Chr$(13) + Chr$(13)
           msg$ = msg$ + "Do you wish to reinitialize it to default properties by selecting it now?"
           Response = MsgBox(msg$, MB_ICONQUESTION + MB_YESNO, "Contaminant Already Selected")
           If Response = IDYES Then
              If Trim$(contam_combo.List(contam_combo.ListIndex)) <> Trim$(cboSelectContaminant.Text) Then  'If contaminant currently selected is not the one being replaced then update its values before performing calculations
                 For J = 1 To NUMBER_OF_PROPERTIES
                     phprop.HaveProperty(J) = HaveProperty(J)
                 Next J
                 For J = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
                     phprop.PROPAVAILABLE(J) = PROPAVAILABLE(J)
                 Next J
                 PropContaminant(PreviouslySelectedIndex) = phprop
              End If

              cboSelectContaminant.RemoveItem i
              For J = i + 2 To NumSelectedChemicals
                  PropContaminant(J - 1) = PropContaminant(J)
              Next J
              NumSelectedChemicals = NumSelectedChemicals - 1
              Exit For
           Else
              Screen.MousePointer = 0   'Arrow
              Exit Sub
           End If
        End If
    Next i

    cboSelectContaminant.AddItem contam_combo.List(contam_combo.ListIndex)
    lblSelectedContaminant.Caption = Trim$(dbinput.Name)

    'Update the contaminant selected prior to the new one if necessary
    If PreviouslySelectedIndex >= 0 Then
       For J = 1 To NUMBER_OF_PROPERTIES
           phprop.HaveProperty(J) = HaveProperty(J)
       Next J
       For J = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
           phprop.PROPAVAILABLE(J) = PROPAVAILABLE(J)
       Next J
       PropContaminant(PreviouslySelectedIndex) = phprop
    End If

'* initialize binary interaction parameter database choices
    phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = BIP_dbHierarchy.ActivityCoefficient(1)
    phprop.AqueousSolubility.BinaryInteractionParameterDatabase = BIP_dbHierarchy.AqueousSolubility(1)
    phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase = BIP_dbHierarchy.OctWaterPartCoeff(1)
    For i = 1 To 3
        phprop.ActivityCoefficient.BinaryInteractionParameterDBAvailable(i) = True
        phprop.AqueousSolubility.BinaryInteractionParameterDBAvailable(i) = True
        If i <> 3 Then phprop.OctWaterPartCoeff.BinaryInteractionParameterDBAvailable(i) = True
    Next i
    UserSelectedTheUnifacBIPDBActCoeff = False
    UserSelectedTheUnifacBIPDBAqSol = False
    UserSelectedTheUnifacBIPDBKow = False

'* Set Current Selections to None
    Call InitializeCurrentSelections

    NumSelectedChemicals = NumSelectedChemicals + 1
    Call InitializeHilights
    Call InitializePROPandHAVEAVAILABLEArrays
    Call InitializeUserInputs

    Call BlankAllTextBoxes
    frmWaitForCalculations.Show
    frmWaitForCalculations.Refresh

' THIS IS HERE TO MAKE SURE THAT THE CURRENT DIRECTORY IS WITH THE FORTRAN DLL
' FILES.   THE DIFFERENT *.DAT FILES THAT ARE USED BY THE FORTRAN DLLS MUST BE THERE
'    msg$ = CurDir$
'    ChDrive app.path
'    ChDir app.path + "\dlls"

    Call DoCalculationForThisContaminant

' RETURNING TO WHERE WE WERE BEFORE
'    ChDrive msg$
'    ChDir msg$

    phprop.AqueousSolubility.PreviousBinaryInteractionParameterDB = phprop.AqueousSolubility.BinaryInteractionParameterDatabase
    
    If NumSelectedChemicals > 0 Then cboSelectContaminant.Enabled = True

    frmWaitForCalculations.Hide
    cboSelectContaminant.ListIndex = cboSelectContaminant.ListCount - 1
    cboSelectContaminant.SetFocus
  
    Screen.MousePointer = 0   'Arrow

End Sub

'Private Sub cmdSteppLink_Click(Index As Integer)
'Dim f As Integer
'Dim i As Integer
'Dim this_name As String
'Dim this_cas As String
'Dim temp1 As String
'
'  If (Index = 0) Then
'    If cboSelectContaminant.ListCount = 0 Then
'      MsgBox "No chemicals were selected for transfer!  Choose 'Cancel' if you want to abort.", MB_ICONEXCLAMATION, Application_Name
'      Exit Sub
'    End If
'  End If
'
'  Select Case Index
'    Case 0
'      '---- Output property file
'      Call GetTempFilename(CStr(App.Path), SteppLink_fn_properties)
'      SteppLink_fn_properties = App.Path & "\" & SteppLink_fn_properties
''MsgBox "Outputting to `" & SteppLink_fn_properties & "` ..."
'      f = FreeFile
'      Open SteppLink_fn_properties For Output As #f
'      For i = 0 To cboSelectContaminant.ListCount - 1
'        cboSelectContaminant.ListIndex = i
'        temp1 = LTrim$(cboSelectContaminant.List(cboSelectContaminant.ListIndex))
'        Call parsedargs_getarg(" ", temp1, 1, this_cas)
'        this_name = Trim$(lblSelectedContaminant)
'        Write #f, "Chemical", this_name, this_cas
'        Call SteppLink_OutputProperty(f, 0, "VaporPressure", "Pa")
'        Call SteppLink_OutputProperty(f, 1, "ActivityCoefficient", "-")
'        Call SteppLink_OutputProperty(f, 2, "HenrysConstant", "-")
'        Call SteppLink_OutputProperty(f, 3, "MolecularWeight", "kg/kmol")
'        Call SteppLink_OutputProperty(f, 4, "NormalBoilingPoint", "C")
'        Call SteppLink_OutputProperty(f, 5, "LiquidDensity", "kg/m3")
'        Call SteppLink_OutputProperty(f, 6, "MolarVolumeAtOpT", "m3/kmol")
'        Call SteppLink_OutputProperty(f, 7, "MolarVolumeAtNBP", "m3/kmol")
'        Call SteppLink_OutputProperty(f, 8, "RefractiveIndex", "-")
'        Call SteppLink_OutputProperty(f, 9, "AqueousSolubility", "PPMw")
'        Call SteppLink_OutputProperty(f, 10, "LogKOW", "-")
'        Call SteppLink_OutputProperty(f, 11, "LiquidDiffusivity", "m2/s")
'        Call SteppLink_OutputProperty(f, 12, "GasDiffusivity", "m2/s")
'      Next i
'      Write #f, "END_OF_FILE", "", ""
'      Close #f
'
'      '---- Re-create wait-file to signal Client of successful link
'      f = FreeFile
''MsgBox "Outputting to `" & SteppLink_fn_done_waitfile & "` ..."
'      Open SteppLink_fn_done_waitfile For Output As #f
'      Print #f, "OK"
'      Print #f, SteppLink_fn_properties
'      Close #f
'    Case 1
'      f = FreeFile
''MsgBox "Outputting to `" & SteppLink_fn_done_waitfile & "` ..."
'      Open SteppLink_fn_done_waitfile For Output As #f
'      Print #f, "CANCEL"
'      Close #f
'  End Select
'
'  Select Case Index
'    Case 0        'Use contaminants in {Client}
'      dde_stepplink_status.Text = "complete"
'      SteppLink_Status = STEPPLINK_STATUS_INACTIVE
'    Case 1        'Cancel StEPP-{Client} link
'      dde_stepplink_status.Text = "cancel"
'      SteppLink_Status = STEPPLINK_STATUS_INACTIVE
'  End Select
'
'  '---- Various screen-related B.S. for closing the link
'  cmdSteppLink(0).Visible = False
'  cmdSteppLink(1).Visible = False
'  txtOperatingPressure.Enabled = True
'  txtOperatingTemperature.Enabled = True
'  SteppLink_SpecifiedPressure = ""
'  SteppLink_SpecifiedTemperature = ""
'  If (frmstepinfo.Visible) Then
'    '-- Ensure they don't click "never show again" without clicking OK
'    frmstepinfo.chkdisplay = False
'    Unload frmstepinfo
'  End If
'
'  '---- Minimize StEPP
'  contam_prop_form.WindowState = 1
'
'End Sub

Private Sub cmdSynonyms_Click()
frmAlias.Show

End Sub

Private Sub cmdUnselectContaminant_Click()
    
  Call Do_UnselectCurrentContaminant(False)

  If NumSelectedChemicals = 0 Then
     cboSelectContaminant.Enabled = False
     mnuFile(4).Enabled = False
     mnuFile(5).Enabled = False
     mnuFile(7).Enabled = False
  End If
  
End Sub

Private Sub Command1_Click()

  SteppLink_SpecifiedPressure = InputBox("Specify forcing pressure.")
  SteppLink_SpecifiedTemperature = InputBox("Specify forcing temperature.")


Call Update_P_and_T_StEPPLink

End Sub

Private Sub Command3D1_Click()
    End
End Sub

Private Sub contam_combo_Click()
'    TempIndex = contam_combo.ListIndex
    'call eliminated during restructuring of database
    'by F. Gobin
'    update_fields (contam_combo.ListIndex)
    
End Sub

Private Sub contam_combo_DblClick()

cmdSelectContaminant_Click

End Sub

Private Sub contam_combo_KeyPress(KeyAscii As Integer)

    If KeyAscii = 13 Then
'       KeyAscii = 0
'       cmdSelectContaminant.SetFocus
    Else
       KeyAscii = 0
    End If

End Sub

'Private Sub dde_msg_Change()
'Dim X As Integer
'Dim response As String
'Dim params As String
'Dim NumParams As Integer
'
'  On Error GoTo err_dde_msg
'
'  If (StrComp(dde_msg.Text, "querynumcomp") = 0) Then
'
'    'NOTE: This is an OLD StEPP Link command, preserved only for backward compatibility
'    'Set dde_numcomp to the number of components currently selected.
'
'    dde_numcomp.Text = Trim$(Str$(cboSelectContaminant.ListCount))
'
'  ElseIf (StrComp(Left$(dde_msg.Text, 14), "querycompname ") = 0) Then
'
'    'NOTE: This is an OLD StEPP Link command, preserved only for backward compatibility
'    'Set dde_thiscompname to the component name requested.
'
'    X = CInt(Trim$(Right$(dde_msg.Text, Len(dde_msg.Text) - 14)))
'    If (X < 0) Or (X > cboSelectContaminant.ListCount - 1) Then
'      GoTo err_dde_msg_OutOfBounds
'    End If
'    dde_thiscompname.Text = cboSelectContaminant.List(X)
'
'  ElseIf (StrComp(Left$(dde_msg.Text, 12), "displaycomp ") = 0) Then
'
'    'NOTE: This is an OLD StEPP Link command, preserved only for backward compatibility
'    'Display the properties of the component requested.
'
'    X = CInt(Trim$(Right$(dde_msg.Text, Len(dde_msg.Text) - 12)))
'    If (X < 0) Or (X > cboSelectContaminant.ListCount - 1) Then
'      GoTo err_dde_msg_OutOfBounds
'    End If
'    cboSelectContaminant.ListIndex = X
'
'  ElseIf (StrComp(Left$(dde_msg.Text, 16), "stepplink_begin ") = 0) Then
'
'    'Begin a StEPP-Client link if one is not currently in progress.
'    'PARAMETERS: stepplink_begin {Stepp_ClientProgram} {fn_done_waitfile} {PRESSURE_in_Pa} {TEMPERATURE_in_C}
'
'    If (SteppLink_Status = STEPPLINK_STATUS_ACTIVE) Then
'      'Do nothing.
'    ElseIf (SteppLink_Status = STEPPLINK_STATUS_INACTIVE) Then
'
'      'Set statuses to ACTIVE.
'      SteppLink_Status = STEPPLINK_STATUS_ACTIVE
'      dde_stepplink_status.Text = "active"
'
'      ''Force removal of all selected contaminants (if any).
'      'Do
'      '  If (cboSelectContaminant.ListCount = 0) Then Exit Do
'      '  cboSelectContaminant.ListIndex = 0
'      '  Call Do_UnselectCurrentContaminant(True)
'      'Loop Until (1 <> 1)
'
'
'      'Parse parameters.
'      params = Trim$(Mid$(dde_msg.Text, 17, Len(dde_msg.Text) - 16))
'      NumParams = ParsedArgs_GetNum(" ", params)
'      If (NumParams >= 1) Then
'        'Find out which client program it is (ASAP or ADSIM).
'        Call parsedargs_getarg(" ", params, 1, SteppLink_ClientProgram)
'        Stepp_ClientProgram = SteppLink_ClientProgram
'      End If
'      If (NumParams >= 2) Then
'        'Set filename of waitfile {fn_done_waitfile}.
'        Call parsedargs_getarg(" ", params, 2, SteppLink_fn_done_waitfile)
'      Else
'        SteppLink_fn_done_waitfile = ""
'      End If
'      If (NumParams >= 3) Then
'        'Set pressure to that specified by the client.
'        Call parsedargs_getarg(" ", params, 3, SteppLink_SpecifiedPressure)
'        txtOperatingPressure = SteppLink_SpecifiedPressure
'        phprop.OperatingPressure = CDbl(SteppLink_SpecifiedPressure)
'        txtOperatingPressure.Enabled = False
'      Else
'        SteppLink_SpecifiedPressure = ""
'      End If
'      If (NumParams >= 4) Then
'        'Set temperature to that specified by the client.
'        Call parsedargs_getarg(" ", params, 4, SteppLink_SpecifiedTemperature)
'        txtOperatingTemperature = SteppLink_SpecifiedTemperature
'        dbinput.OperatingTemperature = CDbl(SteppLink_SpecifiedTemperature)
'         phprop.OperatingTemperature = CDbl(SteppLink_SpecifiedTemperature)
'        txtOperatingTemperature.Enabled = False
'      Else
'        SteppLink_SpecifiedTemperature = ""
'      End If
'
'      '''MsgBox "Specified P & T = " & SteppLink_SpecifiedPressure & ", " & SteppLink_SpecifiedTemperature, MB_ICONEXCLAMATION, "StEPP"
'
'      '----- Tell Client program that the message is confirmed.
'      dde_msg.Text = ""
'
'      '----- Update P & T of all current contaminants if necessary.
'      Call Update_P_and_T_StEPPLink
'
'
''MsgBox "test point A"
'      'Set up OK and Cancel buttons for StEPP Link.
'      cmdSteppLink(0).Caption = "Use these contaminants in " & SteppLink_ClientProgram
'      cmdSteppLink(1).Caption = "Cancel StEPP-" & SteppLink_ClientProgram & " link"
'      cmdSteppLink(0).Visible = True
'      cmdSteppLink(1).Visible = True
'
''MsgBox "test point b"
'      'Convert to SI units if necessary.
'      Call mnuunits_click(0)
'
''MsgBox "test point c"
'      'Restore StEPP to visibility if minimized (or maximized).
'      If (contam_prop_form.WindowState <> 0) Then
'        contam_prop_form.WindowState = 0
'      End If
'
''MsgBox "test point d"
'      'Delete waitfile to signal client that I have recognized their request
'      'MsgBox "About to delete `" & SteppLink_fn_done_waitfile & "` ..."
'      If (SteppLink_fn_done_waitfile <> "") Then
'        If (Dir(SteppLink_fn_done_waitfile) <> "") Then
'          Kill SteppLink_fn_done_waitfile
'        End If
'      End If
'
''MsgBox "test point e"
'      'Display the StEPP Link Instructions if necessary.
'      'response = ini_getsetting(INI_FileName, INI_ProgramType, "has_seen_steppinfo")
'      response = INI_Getsetting("has_seen_steppinfo")
'      If (response <> "1") Then
'        frmstepinfo.Show
'        frmstepinfo.Command1.SetFocus
'      End If
'
''MsgBox "test point f"
'    Else
'      'Do nothing.
'    End If
'
'  ElseIf (StrComp(Left$(dde_msg.Text, 16), "stepplink_cancel") = 0) Then
'
'    'Cancel a StEPP-Client link if one is in progress.
'
'    If (SteppLink_Status = STEPPLINK_STATUS_ACTIVE) Then
'      'Set statuses to INACTIVE.
'      SteppLink_Status = STEPPLINK_STATUS_INACTIVE
'      dde_stepplink_status.Text = "inactive"
'
'      'Turn off StEPP-Client link buttons.
'      cmdSteppLink(0).Visible = False
'      cmdSteppLink(1).Visible = False
'
'    ElseIf (SteppLink_Status = STEPPLINK_STATUS_INACTIVE) Then
'      'Do nothing.
'    Else
'      'Do nothing.
'    End If
'
'  End If
'
'  dde_msg.Text = ""
'
'
'
'exit_dde_msg:
'  On Error GoTo 0
'  Exit Sub
'
'err_dde_msg_OutOfBounds:
'  MsgBox "Error in DDE communication--index out of bounds.", MB_ICONSTOP, "StEPP"
'  GoTo exit_dde_msg
'
'err_dde_msg:
'  MsgBox "Error in DDE communication.", MB_ICONSTOP, "StEPP"
'  Resume exit_dde_msg
'
'End Sub

Private Sub Do_UnselectCurrentContaminant(ForceIt As Integer)
Dim NumRemovedChemical As Integer
Dim i As Integer

  'NOTE: The variable ForceIt is not currently used.
  'If any code is ever added to prompt the user if
  'they are "sure" they want to unselect the current
  'contaminant, you MUST NOT put up a prompt if
  'ForceIt is set to True.  -ejo, 6/15/96
  
  Screen.MousePointer = 11   'Hourglass

  NumRemovedChemical = cboSelectContaminant.ListIndex + 1
  For i = (NumRemovedChemical + 1) To NumSelectedChemicals
    PropContaminant(i - 1) = PropContaminant(i)
  Next i
  NumSelectedChemicals = NumSelectedChemicals - 1

  cboSelectContaminant.RemoveItem cboSelectContaminant.ListIndex

  If NumSelectedChemicals > 0 Then
    PreviouslySelectedIndex = -1
    cboSelectContaminant.ListIndex = 0
  Else
    cmdUnselectContaminant.Enabled = False
    Call BlankAllTextBoxes
  End If

  Screen.MousePointer = 0   'arrow

End Sub

Private Sub ExportFileGeneration_GetText(cliptext As String)
Dim f As Integer
Dim i As Integer
Dim index0 As Integer
Dim this_name As String
Dim this_cas As String
Dim temp1 As String
Dim ExportFile As String
'Dim cliptext As String
Dim vb3CrLf As String
      
  'get chemical selected from "selected contaminants and see if valid
  index0 = cboSelectContaminant.ListCount
  If (index0 = 0) Then
    MsgBox "No chemicals were selected for export!", MB_ICONEXCLAMATION, "StEPP"
    Exit Sub
  End If
  
  ''******** add box to choose file type
  'On Error Resume Next
  'contam_prop_form!CMDialog1.Filename = ""
  'contam_prop_form!CMDialog1.DefaultExt = "exp"
  'contam_prop_form!CMDialog1.Filter = "StEPP export Files (*.exp)|*.exp"
  'contam_prop_form!CMDialog1.DialogTitle = "Save StEPP export File"
  'contam_prop_form!CMDialog1.Flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
  'contam_prop_form!CMDialog1.CancelError = True
  'contam_prop_form!CMDialog1.Action = 2
  'ExportFile = contam_prop_form!CMDialog1.Filename
  'contam_prop_form!CMDialog1.Filename = ""
  'If Err = 32755 Then   'Cancel selected by user
  '  Exit Sub
  'End If

  'CONVERT TO SI UNITS IF REQUIRED.
  If (Not mnuUnits(0).CHECKED) Then
    'mnuUnits(1).Checked = False
    'mnuUnits(0).Checked = True
    Call mnuunits_click(0)
    DoEvents
  End If

  'SET UP TEXT TO BE COPIED TO CLIPBOARD.
  vb3CrLf = Chr$(13) & Chr$(10)
  cliptext = "1234567890:START_OF_STEPP_CLIPBOARD_EXPORT"
  cliptext = cliptext & vb3CrLf
  Call SteppLink_AddItemToClipboard("Operating Pressure, Pa", Trim$(Str$(phprop.OperatingPressure)), cliptext)
  Call SteppLink_AddItemToClipboard("Operating Pressure, degC", Trim$(Str$(phprop.OperatingTemperature)), cliptext)
  Call SteppLink_AddItemToClipboard("Number Components On Clipboard", Trim$(Str$(cboSelectContaminant.ListCount)), cliptext)
  For i = 0 To cboSelectContaminant.ListCount - 1
    cboSelectContaminant.ListIndex = i
    temp1 = LTrim$(cboSelectContaminant.List(cboSelectContaminant.ListIndex))
    Call parsedargs_getarg(" ", temp1, 1, this_cas)
    this_name = Trim$(lblSelectedContaminant)
    Call SteppLink_AddItemToClipboard("Chemical Name, -", this_name, cliptext)
    Call SteppLink_AddItemToClipboard("Chemical CAS, -", this_cas, cliptext)
    Call SteppLink_AddItemToClipboard("VaporPressure, Pa", SteppLink_GetPropertyForOutput(0), cliptext)
    Call SteppLink_AddItemToClipboard("ActivityCoefficient, -", SteppLink_GetPropertyForOutput(1), cliptext)
    Call SteppLink_AddItemToClipboard("HenrysConstant, -", SteppLink_GetPropertyForOutput(2), cliptext)
    Call SteppLink_AddItemToClipboard("MolecularWeight, kg/kmol", SteppLink_GetPropertyForOutput(3), cliptext)
    Call SteppLink_AddItemToClipboard("NormalBoilingPoint, C", SteppLink_GetPropertyForOutput(4), cliptext)
    Call SteppLink_AddItemToClipboard("LiquidDensity, kg/m3", SteppLink_GetPropertyForOutput(5), cliptext)
    Call SteppLink_AddItemToClipboard("MolarVolumeAtOpT, m3/kmol", SteppLink_GetPropertyForOutput(6), cliptext)
    Call SteppLink_AddItemToClipboard("MolarVolumeAtNBP, m3/kmol", SteppLink_GetPropertyForOutput(7), cliptext)
    Call SteppLink_AddItemToClipboard("RefractiveIndex, -", SteppLink_GetPropertyForOutput(8), cliptext)
    Call SteppLink_AddItemToClipboard("AqueousSolubility, PPMw", SteppLink_GetPropertyForOutput(9), cliptext)
    Call SteppLink_AddItemToClipboard("LogKOW, -", SteppLink_GetPropertyForOutput(10), cliptext)
    Call SteppLink_AddItemToClipboard("LiquidDiffusivity, m2/s", SteppLink_GetPropertyForOutput(11), cliptext)
    Call SteppLink_AddItemToClipboard("GasDiffusivity, m2/s", SteppLink_GetPropertyForOutput(12), cliptext)
  Next i
  cliptext = cliptext & "1234567890:END_OF_STEPP_CLIPBOARD_EXPORT"
  cliptext = cliptext & vb3CrLf

End Sub

Private Sub Form_Activate()
Dim Response As String

  If (Not contam_prop_form_ActivatedYet) Then
    Call LastFewFiles_InitializeList(LASTFEW_WHICHAPP_STEPP, LASTFEW_STEPP_contam_prop_form)
    contam_prop_form_ActivatedYet = True
  End If

End Sub

Private Sub Form_Load()

  Me.Top = (Screen.Height - Me.Height) / 2
  Me.Left = (Screen.Width - Me.Width) / 2
  
  'The following line MUST BE HERE, and NOT in setup_form,
  'otherwise it will be reset every time there is a
  'file operation, which is stupid.
  SteppLink_Status = STEPPLINK_STATUS_INACTIVE

  'Set up the main form.
  Call setup_form

End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
Dim Response As Integer
Dim msg As String


If (SteppLink_Status = STEPPLINK_STATUS_ACTIVE) Then
    msg = "In order to leave StEPP please click either the 'Cancel StEPP link' or"
    msg = msg + " the 'Use these contaminants' button below."
    MsgBox msg, MB_ICONEXCLAMATION, "StEPP"
   Cancel = True
    Screen.MousePointer = 0
    Exit Sub
End If

            Response = MsgBox("Save current data?", MB_ICONQUESTION + MB_YESNOCANCEL, "StEPP")
            If Response = IDCANCEL Then
              Screen.MousePointer = 0
              Cancel = True
              Exit Sub
            End If
            If Response = IDYES Then
              'ChDrive SaveAndLoadPath
              'ChDir SaveAndLoadPath
              Call ChangeDir_Main
              Call SaveStEPPDesign
              'Add this file to the last-few-files list if necessary.
              Call LastFewFiles_MoveFilenameToTop(FileName$)
              SaveAndLoadPath = CurDir$
              'ChDrive steppPath
              'ChDir steppPath
              Call ChangeDir_Main
            End If

End Sub

Private Sub Form_Unload(Cancel As Integer)

End
End Sub

Private Sub frmHelpIndex_Click(Index As Integer)
Dim msg As String
Dim fn_This As String
  Select Case Index
'    Case 10:      'CONTENTS.
'      ' Msg = "In the near future, an online help system similar "
'      ' Msg = Msg + "in format to online help systems for other Windows "
'      ' Msg = Msg + "applications will be implemented here." & Chr$(13) & Chr$(13)
'      ' Msg = Msg + "It will explain the correlations and parameter "
'      ' Msg = Msg + "estimation techniques used to obtain the properties "
'      ' Msg = Msg + "available in StEPP.  It will also detail general "
'      ' Msg = Msg + "explanations of how to manipulate this Windows-based "
'      ' Msg = Msg + "program."
'      ' MsgBox Msg, MB_ICONINFORMATION, "Online Help System"
'      SendKeys "{F1}", True
    Case 10:      'ONLINE HELP.
      fn_This = MAIN_APP_PATH & "\help\stepp.hlp"
      If (fileexists(fn_This) = False) Then
        Call Show_Message("The file `" & fn_This & "` is missing.")
        Exit Sub
      End If
      Call LaunchFile_General("", fn_This)
      'Call LaunchFile_General("", MAIN_APP_PATH & "\help\stepp.hlp")
    Case 20:      'ONLINE MANUAL.
      fn_This = MAIN_APP_PATH & "\help\stepp.pdf"
      If (fileexists(fn_This) = False) Then
        Call Show_Message("The file `" & fn_This & "` is missing.")
        Exit Sub
      End If
      Call LaunchFile_General("", fn_This)
      'Call LaunchFile_General("", MAIN_APP_PATH & "\help\stepp.pdf")
    Case 30:      'VIEW VERSION HISTORY.
      fn_This = App.Path & "\dbase\readme.txt"
      If (fileexists(fn_This) = False) Then
        Call Show_Message("The file `" & fn_This & "` is missing.")
        Exit Sub
      End If
      Call Launch_Notepad(fn_This)
    Case 40:      'VIEW DISCLAIMER.
      'SHOW THE DISCLAIMER WINDOW.
      splash_mode = 101
      splash_button_pressed = 0
      frmSplash.Show 1
    Case 50:      'TECHNICAL ASSISTANCE PROVIDED BY.
      'frmAbout2.Show 1
      frmTechnicalAssistance.Show 1
    Case 99:      'ABOUT.
      frmAbout.Show 1
  End Select
End Sub

Private Sub InitializeCurrentSelectionsTemp()

End Sub

Private Sub lblAirWaterProperties_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)

    If lblAirWaterProperties(Index).Caption = "" Then
       Exit Sub
    End If

    If Button = 1 Then 'left mouse button click so show appropriate form
       Select Case Index
          Case 0   'Water Density
               frmWaterDensity.Show 1
          Case 1   'Water Viscosity
               frmWaterViscosity.Show 1
          Case 2   'Water Surface Tension
               frmWaterSurfaceTension.Show 1
          Case 3   'Air Density
               frmAirDensity.Show 1
          Case 4   'Air Viscosity
               frmAirViscosity.Show 1
       End Select
    End If

    If Button = 2 Then 'right mouse button click so display appropriate message
       Select Case Index
          Case 0   'Water Density
               If lblAirWaterProperties(0).Caption = "Not Available" Then
                  msg = "Water Density is not available from StEPP."
                  MsgBox msg, MB_ICONINFORMATION, "Water - Data Unavailable"
               Else
                  Select Case phprop.WaterDensity.CurrentSelection.choice
                     Case WATER_DENSITY_CORRELATION
                        msg = "The currently selected Water Density is from a Polynomial Fit of Data Given in McCabe and Smith (1986).  For more detailed information about Water Density, click the left mouse button on the Water Density label or value on this screen."
                     Case WATER_DENSITY_INPUT
                        msg = "The currently selected Water Density is from User Input.  For more detailed information about Water Density, click the left mouse button on the Water Density label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, "Water - Water Density Info."
               End If
               
          Case 1   'Water Viscosity
               If lblAirWaterProperties(1).Caption = "Not Available" Then
                  msg = "Water Viscosity is not available from StEPP."
                  MsgBox msg, MB_ICONINFORMATION, "Water - Data Unavailable"
               Else
                  Select Case phprop.WaterViscosity.CurrentSelection.choice
                     Case WATER_VISCOSITY_CORRELATION
                        msg = "The currently selected Water Viscosity is from a Correlation Presented in Reid, Prausnitz, and Poling (1987).  For more detailed information about Water Viscosity, click the left mouse button on the Water Viscosity label or value on this screen."
                     Case WATER_VISCOSITY_INPUT
                        msg = "The currently selected Water Viscosity is from User Input.  For more detailed information about Water Viscosity, click the left mouse button on the Water Viscosity label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, "Water - Water Viscosity Info."
               End If
               
          Case 2   'Water Surface Tension
               If lblAirWaterProperties(2).Caption = "Not Available" Then
                  msg = "Water Surface Tension is not available from StEPP."
                  MsgBox msg, MB_ICONINFORMATION, "Water - Data Unavailable"
               Else
                  Select Case phprop.WaterSurfaceTension.CurrentSelection.choice
                     Case WATER_SURF_TENSION_CORRELATION
                        msg = "The currently selected Water Surface Tension is from a Correlation Presented in Cummins and Westrick (1983).  For more detailed information about Water Surface Tension, click the left mouse button on the Water Surface Tension label or value on this screen."
                     Case WATER_SURF_TENSION_INPUT
                        msg = "The currently selected Water Surface Tension is from User Input.  For more detailed information about Water Surface Tension, click the left mouse button on the Water Surface Tension label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, "Water - Water Surface Tension Info."
               End If
               
          Case 3   'Air Density
               If lblAirWaterProperties(3).Caption = "Not Available" Then
                  msg = "Air Density is not available from StEPP."
                  MsgBox msg, MB_ICONINFORMATION, "Air - Data Unavailable"
               Else
                  Select Case phprop.AirDensity.CurrentSelection.choice
                     Case AIR_DENSITY_CORRELATION
                        msg = "The currently selected Air Density is from the Ideal Gas Law.  For more detailed information about Air Density, click the left mouse button on the Air Density label or value on this screen."
                     Case AIR_DENSITY_INPUT
                        msg = "The currently selected Air Density is from User Input.  For more detailed information about Air Density, click the left mouse button on the Air Density label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, "Air - Air Density Info."
               End If
              
          Case 4   'Air Viscosity
               If lblAirWaterProperties(4).Caption = "Not Available" Then
                  msg = "Air Viscosity is not available from StEPP."
                  MsgBox msg, MB_ICONINFORMATION, "Air - Data Unavailable"
               Else
                  Select Case phprop.AirViscosity.CurrentSelection.choice
                     Case AIR_VISCOSITY_CORRELATION
                        msg = "The currently selected Air Viscosity is from a Correlation Presented in Cummins and Westrick (1983).  For more detailed information about Air Viscosity, click the left mouse button on the Air Viscosity label or value on this screen."
                     Case AIR_VISCOSITY_INPUT
                        msg = "The currently selected Air Viscosity is from User Input.  For more detailed information about Air Viscosity, click the left mouse button on the Air Viscosity label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, "Air - Air Viscosity Info."
               End If
               
       End Select
    End If


End Sub

Private Sub lblAirWaterPropertiesLabel_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)

    Call lblAirWaterProperties_MouseDown(Index, Button, Shift, X, Y)

End Sub

Private Sub lblContaminantProperties_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim msg As String

    If lblContaminantProperties(Index).Caption = "" Then
       Exit Sub
    End If

    If Button = 1 Then 'left mouse button click so show appropriate form
       Select Case Index
          Case 0   'Vapor Pressure
               vp_form.Show 1
          Case 1   'Infinite Dilution Activity Coefficient
               Infinite_dilution_form.Show 1
          Case 2   'Henry's Constant
               hc_form.Show 1
          Case 3   'Molecular Weight
               mwt_form.Show 1
          Case 4   'Normal Boiling Point
               nbp_form.Show 1
          Case 5   'Liquid Density
               ldens_form.Show 1
          Case 6   'Molar Volume at Temperature of Interest
               molar_vol_form.Show 1
          Case 7   'Molar Volume at Normal Boiling Point
               mv_nbp_form.Show 1
          Case 8   'Refractive Index
               rindex_form.Show 1
          Case 9   'Aqueous Solubility
               aqsol_form.Show 1
          Case 10  'Octanol Water Partition Coefficient
               octanol_form.Show 1
          Case 11  'Liquid Diffusivity
               liquid_diff_form.Show 1
          Case 12  'Gas Diffusivity
               gas_diff_form.Show 1
       End Select
    End If

    If Button = 2 Then 'right mouse button click so display appropriate message
       Select Case Index
          Case 0   'Vapor Pressure
               If lblContaminantProperties(0).Caption = "Not Available" Then
                  msg = "Vapor Pressure is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.VaporPressure.CurrentSelection.choice
                     Case VAPOR_PRESSURE_DATABASE
                        msg = "The currently selected Vapor Pressure is from the StEPP database.  For more detailed information about Vapor Pressure, click the left mouse button on the Vapor Pressure label or value on this screen."
                     Case VAPOR_PRESSURE_INPUT
                        msg = "The currently selected Vapor Pressure is from user input.  For more detailed information about Vapor Pressure, click the left mouse button on the Vapor Pressure label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Vapor Pressure Info."
               End If
          Case 1   'Infinite Dilution Activity Coefficient
               If lblContaminantProperties(1).Caption = "Not Available" Then
                  msg = "Infinite Dilution Activity Coefficient is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.ActivityCoefficient.CurrentSelection.choice
                     Case ACTIVITY_COEFFICIENT_UNIFAC
                        msg = "The currently selected Infinite Dilution Activity Coefficient is from UNIFAC.  For more detailed information about Activity Coefficient, click the left mouse button on the Activity Coefficient label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Activity Coefficient Info."
               End If
          Case 2   'Henry's Constant
               If lblContaminantProperties(2).Caption = "Not Available" Then
                  msg = "Henry's Constant is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.HenrysConstant.CurrentSelection.choice
                     Case HENRYS_CONSTANT_REGRESS
                        msg = "The currently selected Henry's Constant is from a Regression of Data Points in the StEPP database.  For more detailed information about Henry's Constant, click the left mouse button on the Henry's Constant label or value on this screen."
                     Case HENRYS_CONSTANT_FIT
                        msg = "The currently selected Henry's Constant is from a UNIFAC Fit with a Data Point.  For more detailed information about Henry's Constant, click the left mouse button on the Henry's Constant label or value on this screen."
                     Case HENRYS_CONSTANT_OPT_UNIFAC
                        msg = "The currently selected Henry's Constant is from UNIFAC at the Operating Temperature.  For more detailed information about Henry's Constant, click the left mouse button on the Henry's Constant label or value on this screen."
                     Case HENRYS_CONSTANT_DATABASE
                        msg = "The currently selected Henry's Constant is from the StEPP Database.  For more detailed information about Henry's Constant, click the left mouse button on the Henry's Constant label or value on this screen."
                     Case HENRYS_CONSTANT_UNIFAC
                        msg = "The currently selected Henry's Constant is from UNIFAC at a Temperature Corresponding to a Database Value.  For more detailed information about Henry's Constant, click the left mouse button on the Henry's Constant label or value on this screen."
                     Case HENRYS_CONSTANT_INPUT
                        msg = "The currently selected Henry's Constant is from User Input.  For more detailed information about Henry's Constant, click the left mouse button on the Henry's Constant label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Henry's Constant Info."
               End If
          Case 3   'Molecular Weight
               If lblContaminantProperties(3).Caption = "Not Available" Then
                  msg = "Molecular Weight is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.MolecularWeight.CurrentSelection.choice
                     Case MOLECULAR_WEIGHT_DATABASE
                        msg = "The currently selected Molecular Weight is from the StEPP Database.  For more detailed information about Molecular Weight, click the left mouse button on the Molecular Weight label or value on this screen."
                     Case MOLECULAR_WEIGHT_UNIFAC
                        msg = "The currently selected Molecular Weight is from Group Contribution Method.  For more detailed information about Molecular Weight, click the left mouse button on the Molecular Weight label or value on this screen."
                     Case MOLECULAR_WEIGHT_INPUT
                        msg = "The currently selected Molecular Weight is from User Input.  For more detailed information about Molecular Weight, click the left mouse button on the Molecular Weight label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Molecular Weight Info."
               End If
              
          Case 4   'Normal Boiling Point
               If lblContaminantProperties(4).Caption = "Not Available" Then
                  msg = "Normal Boiling Point is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.BoilingPoint.CurrentSelection.choice
                     Case BOILING_POINT_DATABASE
                        msg = "The currently selected Normal Boiling Point is from the StEPP Database.  For more detailed information about Normal Boiling Point, click the left mouse button on the Normal Boiling Point label or value on this screen."
                     Case BOILING_POINT_INPUT
                        msg = "The currently selected Normal Boiling Point is from User Input.  For more detailed information about Normal Boiling Point, click the left mouse button on the Normal Boiling Point label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Boiling Point Info."
               End If
              
          Case 5   'Liquid Density
               If lblContaminantProperties(5).Caption = "Not Available" Then
                  msg = "Liquid Density is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.LiquidDensity.CurrentSelection.choice
                     Case LIQUID_DENSITY_DATABASE
                        msg = "The currently selected Liquid Density is from the StEPP database.  For more detailed information about Liquid Density, click the left mouse button on the Liquid Density label or value on this screen."
                     Case LIQUID_DENSITY_UNIFAC
                        msg = "The currently selected Liquid Density is from Group Contribution Method.  For more detailed information about Liquid Density, click the left mouse button on the Liquid Density label or value on this screen."
                     Case LIQUID_DENSITY_INPUT
                        msg = "The currently selected Liquid Density is from User Input.  For more detailed information about Liquid Density, click the left mouse button on the Liquid Density label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Liquid Density Info."
               End If
              
          Case 6   'Molar Volume at Temperature of Interest
               If lblContaminantProperties(6).Caption = "Not Available" Then
                  msg = "Molar Volume at the Operating Temperature is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.MolarVolume.operatingT.CurrentSelection.choice
                     Case MOLAR_VOLUME_OPT_DATABASE
                        msg = "The currently selected Molar Volume at the Operating Temperature is from the StEPP database.  For more detailed information about Molar Volume at the Operating Temperature, click the left mouse button on the Molar Volume label or value on this screen."
                     Case MOLAR_VOLUME_OPT_UNIFAC
                        msg = "The currently selected Molar Volume at the Operating Temperature is from Group Contribution Method.  For more detailed information about Molar Volume at the Operating Temperature, click the left mouse button on the Molar Volume label or value on this screen."
                     Case MOLAR_VOLUME_OPT_INPUT
                        msg = "The currently selected Molar Volume at the Operating Temperature is from User Input.  For more detailed information about Molar Volume at the Operating Temperature, click the left mouse button on the Molar Volume label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Molar Volume Info."
               End If
             
          Case 7   'Molar Volume at Normal Boiling Point
               If lblContaminantProperties(7).Caption = "Not Available" Then
                  msg = "Molar Volume at the Normal Boiling Point is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.MolarVolume.BoilingPoint.CurrentSelection.choice
                     Case MOLAR_VOLUME_NBP_UNIFAC
                        msg = "The currently selected Molar Volume at the Normal Boiling Point is from Schroeder's Method.  For more detailed information about Molar Volume at the Normal Boiling Point, click the left mouse button on the Molar Volume label or value on this screen."
                     Case MOLAR_VOLUME_NBP_INPUT
                        msg = "The currently selected Molar Volume at the Normal Boiling Point is from User Input.  For more detailed information about Molar Volume at the Normal Boiling Point, click the left mouse button on the Molar Volume label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Molar Volume Info."
               End If
             
          Case 8   'Refractive Index
               If lblContaminantProperties(8).Caption = "Not Available" Then
                  msg = "Refractive Index is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.RefractiveIndex.CurrentSelection.choice
                     Case REFRACTIVE_INDEX_DATABASE
                        msg = "The currently selected Refractive Index is from the StEPP database.  For more detailed information about Refractive Index, click the left mouse button on the Refractive Index label or value on this screen."
                     Case REFRACTIVE_INDEX_INPUT
                        msg = "The currently selected Refractive Index is from User Input.  For more detailed information about Refractive Index, click the left mouse button on the Refractive Index label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Refractive Index Info."
               End If
            
          Case 9   'Aqueous Solubility
               If lblContaminantProperties(9).Caption = "Not Available" Then
                  msg = "Aqueous Solubility is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.AqueousSolubility.CurrentSelection.choice
                     Case AQUEOUS_SOLUBILITY_FIT
                        msg = "The currently selected Aqueous Solubility is from a Fit of the UNIFAC Curve with a Data Point.  For more detailed information about Aqueous Solubility, click the left mouse button on the Aqueous Solubility label or value on this screen."
                     Case AQUEOUS_SOLUBILITY_OPT_UNIFAC
                        msg = "The currently selected Aqueous Solubility is from a UNIFAC at the Operating Temperature.  For more detailed information about Aqueous Solubility, click the left mouse button on the Aqueous Solubility label or value on this screen."
                     Case AQUEOUS_SOLUBILITY_DATABASE
                        msg = "The currently selected Aqueous Solubility is from the StEPP database.  For more detailed information about Aqueous Solubility, click the left mouse button on the Aqueous Solubility label or value on this screen."
                     Case AQUEOUS_SOLUBILITY_DBT_UNIFAC
                        msg = "The currently selected Aqueous Solubility is from UNIFAC at a temperature corresponding to a point in the StEPP database.  For more detailed information about Aqueous Solubility, click the left mouse button on the Aqueous Solubility label or value on this screen."
                     Case AQUEOUS_SOLUBILITY_INPUT
                        msg = "The currently selected Aqueous Solubility is from User Input.  For more detailed information about Aqueous Solubility, click the left mouse button on the Aqueous Solubility label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Aqueous Solubility Info."
               End If
              
          Case 10  'Octanol Water Partition Coefficient
               If lblContaminantProperties(10).Caption = "Not Available" Then
                  msg = "Octanol Water Partition Coefficient is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.OctWaterPartCoeff.CurrentSelection.choice
                     Case OCT_WATER_PART_COEFF_DB
                        msg = "The currently selected Octanol Water Partition Coefficient is from the StEPP database.  For more detailed information about Octanol Water Partition Coefficient, click the left mouse button on the Octanol Water Partition Coefficient label or value on this screen."
                     Case OCT_WATER_PART_COEFF_DBT_UNIFAC
                        msg = "The currently selected Octanol Water Partition Coefficient is from UNIFAC at a temperature corresponding to a point in the StEPP database.  For more detailed information about Octanol Water Partition Coefficient, click the left mouse button on the Octanol Water Partition Coefficient label or value on this screen."
                     Case OCT_WATER_PART_COEFF_OPT_UNIFAC
                        msg = "The currently selected Octanol Water Partition Coefficient is from UNIFAC at the Operating Temperature.  For more detailed information about Octanol Water Partition Coefficient, click the left mouse button on the Octanol Water Partition Coefficient label or value on this screen."
                     Case OCT_WATER_PART_COEFF_INPUT
                        msg = "The currently selected Octanol Water Partition Coefficient is from User Input.  For more detailed information about Octanol Water Partition Coefficient, click the left mouse button on the Octanol Water Partition Coefficient label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Oct. Water Part. Coeff. Info."
               End If
           
          Case 11  'Liquid Diffusivity
               If lblContaminantProperties(11).Caption = "Not Available" Then
                  msg = "Liquid Diffusivity is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.LiquidDiffusivity.CurrentSelection.choice
                     Case LIQUID_DIFFUSIVITY_POLSON
                        msg = "The currently selected Liquid Diffusivity is from the Polson Correlation.  For more detailed information about Liquid Diffusivity, click the left mouse button on the Liquid Diffusivity label or value on this screen."
                     Case LIQUID_DIFFUSIVITY_HAYDUKLAUDIE
                        msg = "The currently selected Liquid Diffusivity is from the Hayduk and Laudie Correlation.  For more detailed information about Liquid Diffusivity, click the left mouse button on the Liquid Diffusivity label or value on this screen."
                     Case LIQUID_DIFFUSIVITY_WILKECHANG
                        msg = "The currently selected Liquid Diffusivity is from the Wilke-Chang Correlation.  For more detailed information about Liquid Diffusivity, click the left mouse button on the Liquid Diffusivity label or value on this screen."
                     Case LIQUID_DIFFUSIVITY_INPUT
                        msg = "The currently selected Liquid Diffusivity is from User Input.  For more detailed information about Liquid Diffusivity, click the left mouse button on the Liquid Diffusivity label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Liquid Diffusivity Info."
               End If
            
          Case 12  'Gas Diffusivity
               If lblContaminantProperties(12).Caption = "Not Available" Then
                  msg = "Gas Diffusivity is not available from StEPP for this chemical."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
               Else
                  Select Case phprop.GasDiffusivity.CurrentSelection.choice
                     Case GAS_DIFFUSIVITY_WILKELEE
                        msg = "The currently selected Gas Diffusivity is from the Wilke-Lee Modification of the Hirschfelder-Bird-Spotz Method.  For more detailed information about Gas Diffusivity, click the left mouse button on the Gas Diffusivity label or value on this screen."
                     Case GAS_DIFFUSIVITY_INPUT
                        msg = "The currently selected Gas Diffusivity is from User Input.  For more detailed information about Gas Diffusivity, click the left mouse button on the Gas Diffusivity label or value on this screen."
                  End Select
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Gas Diffusivity Info."
               End If
              
       End Select
         
    End If

End Sub

Private Sub lblContaminantPropertiesLabel_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    
    Call lblContaminantProperties_MouseDown(Index, Button, Shift, X, Y)
End Sub

Private Sub mnuAbout_Click(Index As Integer)
    Dim msg As String

    Select Case Index
       Case 0
          msg = "StEPP - Software to Estimate Physical Properties" & Chr$(13) & Chr$(13)
          msg = msg + "Version 1.00" & Chr$(13)
          msg = msg + "Copyright 1993, 1996" + Chr$(13)
          msg = msg + "Center for Clean Industrial and Treatment Technologies" & Chr$(13)
          msg = msg + "Michigan Technological University" & Chr$(13)
          msg = msg + "June 1, 1996" & Chr$(13) & Chr$(13)
'          msg = msg + "FOR PROPOSAL REVIEW ONLY" & Chr$(13)
'          msg = msg + "NOT FOR DISTRIBUTION" & Chr$(13) & Chr$(13)
'          msg = msg + "Status of This Program:  In Development" & Chr$(13) & Chr$(13) & Chr$(13)
          MsgBox msg, MB_ICONINFORMATION, "About StEPP"

'    msg = ""
'    msg = msg + "For further information, contact:" & Chr$(13) & Chr$(13)
'    msg = msg + "Tony Rogers" & Chr$(13)
'    msg = msg + "Dept. of Chemical Engineering" & Chr$(13)
'    msg = msg + "Michigan Technological University" & Chr$(13)
'    msg = msg + "1400 Townsend Drive" & Chr$(13)
'    msg = msg + "Houghton, MI 49931" & Chr$(13)
'    msg = msg + "Phone:  (906) 487-2210" & Chr$(13)
'    msg = msg + "Fax:  (906) 487-3213" & Chr$(13)
'    msg = msg + "E-mail:  tnrogers@mtu.edu" & Chr$(13)
    
       Case 1   'About the Authors
          msg = "David R. Hokanson:  " & Chr$(13)
          msg = msg + "     M.S. Candidate in Civil and Env. Eng." & Chr$(13) & Chr$(13)
          msg = msg + "Michael D. Miller:" & Chr$(13)
          msg = msg + "     M.S. Candidate in Chem. Eng." & Chr$(13) & Chr$(13)
          msg = msg + "Tony N. Rogers:" & Chr$(13)
          msg = msg + "     Asst. Professor of Chem. Eng." & Chr$(13) & Chr$(13)
          msg = msg + "David W. Hand:" & Chr$(13)
          msg = msg + "     Asst. Professor of Civil and Env. Eng." & Chr$(13) & Chr$(13)
          msg = msg + "Fr" & Chr$(233) & "d" & Chr$(233) & "ric Gobin:" & Chr$(13)
          msg = msg + "     Chemical Engineer:  Elf Aquitaine, Inc." & Chr$(13) & Chr$(13)
          msg = msg + "Matthew Buchkowski:" & Chr$(13)
          msg = msg + "     B.S. Candidate in Chem. Eng." & Chr$(13) & Chr$(13)
          msg = msg + "John C. Crittenden:" & Chr$(13)
          msg = msg + "     Presidential Professor of Civil and Env. Eng" & Chr$(13) & Chr$(13)

          MsgBox msg, MB_ICONINFORMATION, "About the Authors"

        Case 2   'About Programming Support for this Product
           'msg = "Programming support for the database used in "
           'msg = msg + "this product was provided by Thomas F. Budd, "
           'msg = msg + "a B.S. Candidate in Computer Science."
            msg = "Richard J. Hossli:  " & Chr$(13)
            msg = msg + "     a Software developer" & Chr$(13) & Chr$(13)
            msg = msg + "Jason E. Mclean:  " & Chr$(13)
            msg = msg + "     a B.S. Candidate in Computer Science" & Chr$(13) & Chr$(13)
            msg = msg + "Eric J. Oman:  " & Chr$(13)
            msg = msg + "     a B.S. Candidate in Chem. Eng" & Chr$(13) & Chr$(13)
            msg = msg + "Thomas F. Budd:  " & Chr$(13)
            msg = msg + "     a B.S. Candidate in Computer Science" & Chr$(13) & Chr$(13)

           MsgBox msg, MB_ICONINFORMATION, "About Programming Support"

        Case 3   'Obtaining Additional Information
           msg = "For product release information when it becomes "
           msg = msg + "available, contact:" & Chr$(13) & Chr$(13)
           msg = msg + "    Dr. David Hand" & Chr$(13)
           msg = msg + "    Dept. of Civil and Env. Eng." & Chr$(13)
           msg = msg + "    Michigan Tech. University" & Chr$(13)
           msg = msg + "    1400 Townsend Drive" & Chr$(13)
           msg = msg + "    Houghton, MI 49931" & Chr$(13)
           msg = msg + "    Phone:   (906) 487-2777" & Chr$(13)
           msg = msg + "    E-mail:  dwhand@mtu.edu" & Chr$(13) & Chr$(13) & Chr$(13)
           msg = msg + "Also feel free to contact Dr. Hand with "
           msg = msg + "any comments, problems, or suggestions related "
           msg = msg + "to the StEPP program."

           MsgBox msg, MB_ICONINFORMATION, "About Obtaining Additional Information"

    End Select

End Sub

Private Sub mnuFile_Click(Index As Integer)
    Dim J As Integer, Response As Integer
    Dim msg As String

    Screen.MousePointer = 11   'Hourglass

    Select Case Index
       Case 0   'New
            Response = MsgBox("Save current data?", MB_ICONQUESTION + MB_YESNOCANCEL, "StEPP")
            If Response = IDCANCEL Then
              Screen.MousePointer = 0
              Exit Sub
            End If
            If Response = IDYES Then
              'ChDrive SaveAndLoadPath
              'ChDir SaveAndLoadPath
              Call ChangeDir_Main
              Call SaveStEPPDesign
              'Add this file to the last-few-files list if necessary.
              Call LastFewFiles_MoveFilenameToTop(FileName$)
              SaveAndLoadPath = CurDir$
              'ChDrive steppPath
              'ChDir steppPath
              Call ChangeDir_Main
            End If

            cboSelectContaminant.Clear
            'For j = 0 To cboSelectContaminant.ListCount - 1
            '  cboSelectContaminant.RemoveItem j
            'Next

            For J = 0 To 12
              lblContaminantProperties(J).Caption = ""
            Next
            
            For J = 0 To 4
              lblAirWaterProperties(J).Caption = ""
            Next

            lblSelectedContaminant.Caption = ""
            NumSelectedChemicals = 0
            Call setup_form

       Case 1   'Open
            Response = MsgBox("Save current data?", MB_ICONQUESTION + MB_YESNOCANCEL, "StEPP")
            If Response = IDCANCEL Then
              Screen.MousePointer = 0
              Exit Sub
            End If
            If Response = IDYES Then
              'ChDrive SaveAndLoadPath
              'ChDir SaveAndLoadPath
              Call ChangeDir_Main
              Call SaveStEPPDesign
              'Add this file to the last-few-files list if necessary.
              Call LastFewFiles_MoveFilenameToTop(FileName$)
              SaveAndLoadPath = CurDir$
              'ChDrive steppPath
              'ChDir steppPath
              Call ChangeDir_Main
            End If
            
            'ChDrive SaveAndLoadPath
            'ChDir SaveAndLoadPath
            Call ChangeDir_Main
            
            Call LoadStEPPDesign("")
       Call Update_P_and_T_StEPPLink
       'If (SteppLink_SpecifiedPressure <> "") Then
       '  Call UpdatePressAllCompounds(CDbl(SteppLink_SpecifiedPressure))
       'End If
       'If (SteppLink_SpecifiedTemperature <> "") Then
       '  Call UpdateTempAllCompounds(CDbl(SteppLink_SpecifiedTemperature))
       'End If
       
            'Add this file to the last-few-files list if necessary.
            Call LastFewFiles_MoveFilenameToTop(FileName$)
            SaveAndLoadPath = CurDir$
            txtOperatingTemperature.SetFocus
            'ChDrive steppPath
            'ChDir steppPath
            Call ChangeDir_Main
       
       Case 4   'Save
                'ChDrive SaveAndLoadPath
                'ChDir SaveAndLoadPath
                Call ChangeDir_Main
                Call SaveStEPPDesign
                'Add this file to the last-few-files list if necessary.
                Call LastFewFiles_MoveFilenameToTop(FileName$)
                SaveAndLoadPath = CurDir$
                'ChDrive steppPath
                'ChDir steppPath
                Call ChangeDir_Main

       Case 5   'Save As
            'ChDrive SaveAndLoadPath
            'ChDir SaveAndLoadPath
            Call ChangeDir_Main
            OldFileName$ = FileName$
            FileName$ = ""
            Call SaveStEPPDesign
            'Add this file to the last-few-files list if necessary.
            Call LastFewFiles_MoveFilenameToTop(FileName$)
            SaveAndLoadPath = CurDir$
            'ChDrive steppPath
            'ChDir steppPath
            Call ChangeDir_Main
       
       Case 7   'Print
            'Place current properties into PropContaminant Structure
           PropContaminant(contam_prop_form!cboSelectContaminant.ListIndex + 1) = phprop

           For J = 1 To NUMBER_OF_PROPERTIES
               PropContaminant(contam_prop_form!cboSelectContaminant.ListIndex + 1).HaveProperty(J) = HaveProperty(J)
           Next J
           For J = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
               PropContaminant(contam_prop_form!cboSelectContaminant.ListIndex + 1).PROPAVAILABLE(J) = PROPAVAILABLE(J)
           Next J

            frmPrint!lblCurrentContaminant.Caption = contam_prop_form!lblSelectedContaminant.Caption
            frmPrint.Show
       
       Case 8   'Select Printer
          On Error GoTo No_Default_Printer
          'CMDialog1.flags = PD_PRINTSETUP
          'CMDialog1.Action = 5
          CommonDialog1.ShowPrinter
       
       Case 200  'Exit
            'NOTE: It is safe to have an "unload me" command here
            'due to the fact that Form_QueryUnload() takes care of checking
            'on (a) asking the user if they want to save their data and
            '(b) telling the user they can't leave before they either
            'cancel or use components in the current StEPP link.
            Unload Me
            Exit Sub
    
    End Select


    If ((Index >= 191) And (Index <= 194)) Then
      'Handle File|Open of a file here.
      'ChDrive SaveAndLoadPath
      'ChDir SaveAndLoadPath
      Call ChangeDir_Main
      If (Dir(Current_LastFewFilesRec.FileNames(Index - 190)) = "") Then
        Beep
        MsgBox "That file has been moved or deleted.", MB_ICONEXCLAMATION, "StEPP"
      Else
            Response = MsgBox("Save current data?", MB_ICONQUESTION + MB_YESNOCANCEL, "StEPP")
            If Response = IDCANCEL Then
              Screen.MousePointer = 0
              Exit Sub
            End If
            If Response = IDYES Then
              'ChDrive SaveAndLoadPath
              'ChDir SaveAndLoadPath
              Call ChangeDir_Main
              Call SaveStEPPDesign
              'Add this file to the last-few-files list if necessary.
              Call LastFewFiles_MoveFilenameToTop(FileName$)
              SaveAndLoadPath = CurDir$
              'ChDrive steppPath
              'ChDir steppPath
              Call ChangeDir_Main
            End If
        
        Call LoadStEPPDesign(Current_LastFewFilesRec.FileNames(Index - 190))
       Call Update_P_and_T_StEPPLink
       'If (SteppLink_SpecifiedPressure <> "") Then
       '  Call UpdatePressAllCompounds(CDbl(SteppLink_SpecifiedPressure))
       'End If
       'If (SteppLink_SpecifiedTemperature <> "") Then
       '  Call UpdateTempAllCompounds(CDbl(SteppLink_SpecifiedTemperature))
       'End If
        
        'Add this file to the last-few-files list if necessary.
        Call LastFewFiles_MoveFilenameToTop(FileName$)
        SaveAndLoadPath = CurDir$
      End If
      'ChDir App.Path
      'ChDrive App.Path
      Call ChangeDir_Main
    End If

    Screen.MousePointer = 0    'Arrow
Exit Sub

No_Default_Printer:
    Screen.MousePointer = 0    'Arrow     'err.description
    If Err = 28663 Then
        'do nothing msg already comes up
    Else
    MsgBox "Error " & Err & " Occured"
       
    End If

Resume Next

End Sub

Private Sub mnuOptionsEtc_Click(Index As Integer)

    Select Case Index
       Case 0   'Modify Hierarchy
'          frmHierarchy.Show 1
    End Select

End Sub

Private Sub mnuOptionsItem_Click(Index As Integer)
Dim f As Integer
Dim i As Integer
Dim index0 As Integer
Dim this_name As String
Dim this_cas As String
Dim temp1 As String
Dim ExportFile As String
Dim cliptext As String
Dim vb3CrLf As String
Dim Ctl As Control
Set Ctl = contam_prop_form.CommonDialog2

  index0 = cboSelectContaminant.ListCount
  If (index0 = 0) Then
    MsgBox "No chemicals were selected for export!", MB_ICONEXCLAMATION, "StEPP"
    Exit Sub
  End If
  
  Select Case Index
    Case 10:
      'get chemical selected from "selected contaminants and see if valid
      On Error Resume Next
'      contam_prop_form!CMDialog1.FileName = ""
'      contam_prop_form!CMDialog1.DefaultExt = "exp"
'      contam_prop_form!CMDialog1.Filter = "StEPP Export Files (*.exp)|*.exp"
'      contam_prop_form!CMDialog1.DialogTitle = "Save StEPP Export File"
'      contam_prop_form!CMDialog1.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
'      contam_prop_form!CMDialog1.CancelError = True
'      contam_prop_form!CMDialog1.Action = 2
'      ExportFile = contam_prop_form!CMDialog1.FileName
'      contam_prop_form!CMDialog1.FileName = ""
      ''''Ctl.FileName = ""
      Ctl.DefaultExt = "exp"
      Ctl.Filter = "StEPP Export Files (*.exp)|*.exp"
      Ctl.DialogTitle = "Save StEPP Export File"
      Ctl.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
      Ctl.CancelError = True
      Ctl.Action = 2
      ExportFile = Ctl.FileName
      ''''Ctl.FileName = ""
      If Err = 32755 Then   'Cancel selected by user
        Exit Sub
      End If
      'GENERATE TEXT TO BE COPIED.
      Call ExportFileGeneration_GetText(cliptext)
      'PERFORM ACTUAL OUTPUT OF FILE.
      f = FreeFile
      Open ExportFile For Output As #f
      Print #f, cliptext
      Close #f
      '
      ' DISPLAY EXPLANATION MESSAGE.
      '
      Call Show_Message("The StEPP export file named `" & ExportFile & _
          "` was successfully generated.")
          

      ''get chemical selected from "selected contaminants and see if valid
      'index0 = cboSelectContaminant.ListCount
      '
      'If (index0 = 0) Then
      '    MsgBox "No chemicals were selected for export!", MB_ICONEXCLAMATION, "StEPP"
      '    Exit Sub
      'End If
      '
      ''******** add box to choose file type
      'On Error Resume Next
      'contam_prop_form!CMDialog1.Filename = ""
      'contam_prop_form!CMDialog1.DefaultExt = "exp"
      'contam_prop_form!CMDialog1.Filter = "StEPP export Files (*.exp)|*.exp"
      'contam_prop_form!CMDialog1.DialogTitle = "Save StEPP export File"
      'contam_prop_form!CMDialog1.Flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
      'contam_prop_form!CMDialog1.CancelError = True
      'contam_prop_form!CMDialog1.Action = 2
      'ExportFile = contam_prop_form!CMDialog1.Filename
      'contam_prop_form!CMDialog1.Filename = ""
      '
      'If Err = 32755 Then   'Cancel selected by user
      '  Exit Sub
      'End If
      '
      ''open file and spew all data on chemical
      'f = FreeFile
      'Open ExportFile For Output As #f
      '
      ''the extra data that will be the check for right file
      'Write #f, "1234567890"
      'Write #f, txtoperatingpressure
      'Write #f, txtOperatingTemperature
      '
      ''spew out the data
      'For i = 0 To cboSelectContaminant.ListCount - 1
      '  cboSelectContaminant.ListIndex = i
      '  temp1 = LTrim$(cboSelectContaminant.List(cboSelectContaminant.ListIndex))
      '  Call parsedargs_getarg(" ", temp1, 1, this_cas)
      '  this_name = Trim$(lblSelectedContaminant)
      '  Write #f, "Chemical", this_name, this_cas
      '  Call SteppLink_OutputProperty(f, 0, "VaporPressure", "Pa")
      '  Call SteppLink_OutputProperty(f, 1, "ActivityCoefficient", "-")
      '  Call SteppLink_OutputProperty(f, 2, "HenrysConstant", "-")
      '  Call SteppLink_OutputProperty(f, 3, "MolecularWeight", "kg/kmol")
      '  Call SteppLink_OutputProperty(f, 4, "NormalBoilingPoint", "C")
      '  Call SteppLink_OutputProperty(f, 5, "LiquidDensity", "kg/m3")
      '  Call SteppLink_OutputProperty(f, 6, "MolarVolumeAtOpT", "m3/kmol")
      '  Call SteppLink_OutputProperty(f, 7, "MolarVolumeAtNBP", "m3/kmol")
      '  Call SteppLink_OutputProperty(f, 8, "RefractiveIndex", "-")
      '  Call SteppLink_OutputProperty(f, 9, "AqueousSolubility", "PPMw")
      '  Call SteppLink_OutputProperty(f, 10, "LogKOW", "-")
      '  Call SteppLink_OutputProperty(f, 11, "LiquidDiffusivity", "m2/s")
      '  Call SteppLink_OutputProperty(f, 12, "GasDiffusivity", "m2/s")
      'Next i
      'Write #f, "END_OF_FILE", "", ""
      'Close #f
      '
      ''go back to correct directory
      '
      'ChDrive steppPath
      'ChDir steppPath
  
    Case 20:
      'GENERATE TEXT TO BE COPIED.
      Call ExportFileGeneration_GetText(cliptext)
      'PERFORM ACTUAL COPY TO CLIPBOARD.
      Clipboard.Clear
      Clipboard.SetText cliptext
      '
      ' DISPLAY EXPLANATION MESSAGE.
      '
      Call Show_Message("The StEPP properties were successfully copied " & _
          "to the clipboard.  They are now available for import into " & _
          "the AdDesignS or ASAP programs.  Warning: If you copy anything " & _
          "else to the clipboard, the property data will be erased.")
  End Select

End Sub

Private Sub mnuunits_click(Index As Integer)
    Dim SIValue As Double
    Dim EnglishValue As Double
    Dim msg As String

    If mnuUnits(Index).CHECKED = True Then Exit Sub

    If (SteppLink_Status = STEPPLINK_STATUS_ACTIVE) Then
      msg = "Cannot perform unit change--the StEPP link requires that properties be kept in SI units."
      MsgBox msg, MB_ICONEXCLAMATION, "StEPP"
      Exit Sub
    End If

    cmdSelectContaminant.SetFocus

    mnuUnits(Index).CHECKED = True
    Select Case Index
       Case 0   'SI Units
          CurrentUnits = SIUnits
          mnuUnits(1).CHECKED = False
       Case 1   'English Units
          CurrentUnits = EnglishUnits
          mnuUnits(0).CHECKED = False
    End Select

    Call GetUnits

    'Convert operating temperature and operating pressure
    Select Case Index
       Case 0   'SI Units
            txtOperatingPressure.Text = Str$(phprop.OperatingPressure)
            txtOperatingTemperature.Text = Str$(phprop.OperatingTemperature)
       Case 1   'English Units
            SIValue = phprop.OperatingPressure
            Call PRESSCNV(EnglishValue, SIValue)
            txtOperatingPressure.Text = Str$(EnglishValue)

            SIValue = phprop.OperatingTemperature
            Call TEMPCNV(EnglishValue, SIValue)
            txtOperatingTemperature.Text = Str$(EnglishValue)
    End Select

    If NumSelectedChemicals = 0 Then Exit Sub

    Call DisplayAllProperties

End Sub

Private Sub Search_String(J As Integer)
    Dim i As Integer, Res As Integer
    For i = J + 1 To contam_combo.ListCount
      Res = InStr(1, contam_combo.List(i), Find_String, 1)
      If Res > 0 Then
        contam_combo.ListIndex = i
        contam_combo.TopIndex = contam_combo.ListIndex
        'contam_combo.Selected(0) = True
        contam_combo.SetFocus
        Exit Sub
      End If
    Next i
    For i = 0 To J
      Res = InStr(1, contam_combo.List(i), Find_String, 1)
      If Res > 0 Then
        contam_combo.ListIndex = i
        contam_combo.TopIndex = contam_combo.ListIndex
        'contam_combo.Selected(0) = True
        contam_combo.SetFocus
        Exit Sub
      End If
    Next i

MsgBox "String not Found", 64, "Warning"
End Sub

Private Sub set_popup_defaults()
    vp_form.Option1(1) = True
    Infinite_dilution_form.Option1(1) = True
    hc_form.Option1(3) = True
    mwt_form.Option1(1) = True
    nbp_form.Option1(1) = True
    ldens_form.Option1(1) = True
    molar_vol_form.Option1(1) = True
    mv_nbp_form.Option1(1) = True
    rindex_form.Option1(1) = True
    aqsol_form.Option1(1) = True
    octanol_form.Option1(1) = True
    liquid_diff_form.Option1(1) = True
    gas_diff_form.Option1(1) = True
End Sub

Private Sub setup_form()
    Dim i As Integer
    Dim arraysize As Integer
    Const chunksize = 1500
    Dim lastcas As Double
    Dim Index As Integer    ' current record position in db
    
    set_popup_defaults
'
' We want the properties window up... not the test one
    
    contam_prop_form.Width = 9600
    contam_prop_form.Height = 7200
'    contam_prop_form.Height = 7200
'    contam_prop_form.Left = 0
'    contam_prop_form.Top = 0
    contam_prop_form.WindowState = 0

    'Center the form on the screen
    If WindowState = 0 Then
       'don't attempt if screen Minimized or Maximized
       Move (Screen.Width - contam_prop_form.Width) / 2, (Screen.Height - contam_prop_form.Height) / 2
    End If
    cmdUnselectContaminant.Enabled = False


'Initialize pressure and temperature

     txtOperatingPressure.Text = "101325"
     txtOperatingTemperature.Text = "25.0"
     phprop.OperatingPressure = CDbl(txtOperatingPressure.Text)
     phprop.OperatingTemperature = CDbl(txtOperatingTemperature.Text)
     dbinput.OperatingTemperature = phprop.OperatingTemperature


'Place labels on to all forms

'     CurrentUnits = ENGLISHUNITS
     CurrentUnits = SIUnits
     mnuUnits(0).CHECKED = True
     Call GetUnits

'Initialize File Name
     FileName$ = ""
     OldFileName$ = ""
     contam_prop_form!mnuFile(4).Enabled = False
     contam_prop_form!mnuFile(5).Enabled = False
     contam_prop_form!mnuFile(7).Enabled = False

'Initialize things on frmPrint
    frmPrint!optDestination(0).Value = True
    frmPrint!optPrintContaminants(0).Value = True
    frmPrint!optPrintProperties(0).Value = True
    For i = 0 To 18
        frmPrint!chkProperties(i).Enabled = False
    Next i

    frmPrint!cboPropertyDescription.AddItem "Print Selected Values Only"
    frmPrint!cboPropertyDescription.AddItem "Print Full Description of Properties"
    frmPrint!cboPropertyDescription.ListIndex = 0

    frmPrint!cboUnits.AddItem "Print Values in SI Units"
    frmPrint!cboUnits.AddItem "Print Values in English Units"
    frmPrint!cboUnits.ListIndex = 0

    PreviouslySelectedIndex = -1

    contam_prop_form_ActivatedYet = False

    cboSelectContaminant.Enabled = False

    '---- Signal client program that StEPP has loaded
    If (SteppLink_fn_loadup_waitfile <> "") Then
      If (Dir(SteppLink_fn_loadup_waitfile) <> "") Then
        Kill SteppLink_fn_loadup_waitfile
      End If
    End If

End Sub

Private Sub txtOperatingPressure_GotFocus()
  Call GotFocus_Handle(Me, txtOperatingPressure, Temp_Text)

End Sub

Private Sub txtOperatingPressure_KeyPress(KeyAscii As Integer)
 
    If KeyAscii = 13 Then
       KeyAscii = 0
       txtOperatingTemperature.SetFocus
       Exit Sub
    End If
    Call NumberCheck(KeyAscii)
    
End Sub

Private Sub txtOperatingPressure_LostFocus()
    Dim i As Integer
    Dim msg As String, Response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim NumContaminantInList As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim NewPressure As Double
    Dim flag_ok As Integer
    Dim NewTemperature As Double

   If (LostFocus_IsEvil(Me, txtOperatingPressure)) Then
     Exit Sub
   End If

   flag_ok = True
    Call TextHandleError(IsError, txtOperatingPressure, Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtOperatingPressure.Text)) Then
          txtOperatingPressure.Text = Temp_Text
          txtOperatingPressure.SetFocus
          Call LostFocus_Handle(Me, txtOperatingPressure, flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtOperatingPressure, Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.OperatingPressure = CDbl(txtOperatingPressure.Text)
          Else
             EnglishValue = CDbl(txtOperatingPressure.Text)
             Call PRESENSI(SIValue, EnglishValue)
             phprop.OperatingPressure = SIValue
          End If
          NewPressure = phprop.OperatingPressure
       Else
         Call LostFocus_Handle(Me, txtOperatingPressure, flag_ok)
         Exit Sub
       End If

       If contam_prop_form!cboSelectContaminant.ListCount = 0 Then
            Call LostFocus_Handle(Me, txtOperatingPressure, flag_ok)
            Exit Sub
       End If

       If HaveNumber(phprop.OperatingPressure) And HaveNumber(phprop.OperatingTemperature) Then
          'If updating pressure is just supposed to update the
          'currently highlighted component then call this routine:
             'Call UpdatePressCurrentCompound

          'If updating pressure is supposed to update ALL
          'currently selected components then call this routine
             
             ''''Call UpdatePressAllCompounds(NewPressure)
             
             'INSTEAD OF CALLING THE PRESSURE UPDATE ROUTINE,
             'THE TEMPERATURE UPDATE ROUTINE IS CALLED.  THE ONLY
             'PRESSURE-DEPENDENT PROPERTIES ARE (I THINK):
             'GAS DIFFUSIVITY AND AIR DENSITY.  UNFORTUNATELY, THE
             'UpdatePressAllCompounds() SUBROUTINE WAS NOT HANDLING
             'THESE UPDATES PROPERLY.  THE UpdateTempAllCompounds()
             'SUBROUTINE SEEMS TO HANDLE THEM PROPERLY.
             '    - ERIC J. OMAN, 6/18/98
             NewTemperature = phprop.OperatingTemperature
             Call UpdateTempAllCompounds(NewTemperature)

       End If
    End If

  Call LostFocus_Handle(Me, txtOperatingPressure, flag_ok)

End Sub

Private Sub txtOperatingTemperature_GotFocus()
  Call GotFocus_Handle(Me, txtOperatingTemperature, Temp_Text)
End Sub

Private Sub txtOperatingTemperature_KeyPress(KeyAscii As Integer)

    If KeyAscii = 13 Then
       KeyAscii = 0
       contam_combo.SetFocus
       Exit Sub
    End If
    
    Call NumberCheck(KeyAscii)

End Sub

Private Sub txtOperatingTemperature_LostFocus()
    Dim NumContaminantInList As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim NewTemperature As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtOperatingTemperature)) Then
     Exit Sub
   End If

   flag_ok = True

    Dim Answer As Integer, Response As Integer
    Dim msg As String, IsError As Integer, ValueChanged As Integer

    Call TextHandleError(IsError, txtOperatingTemperature, Temp_Text)
    If Not IsError Then
       If Not HaveTemp(CDbl(txtOperatingTemperature.Text)) Then
          txtOperatingTemperature.Text = Temp_Text
          txtOperatingTemperature.SetFocus
          Call LostFocus_Handle(Me, txtOperatingTemperature, flag_ok)
          Exit Sub
       End If
       
       Call TextNumberChanged(ValueChanged, txtOperatingTemperature, Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.OperatingTemperature = CDbl(txtOperatingTemperature.Text)
             dbinput.OperatingTemperature = phprop.OperatingTemperature
          Else
             EnglishValue = CDbl(txtOperatingTemperature.Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.OperatingTemperature = SIValue
             dbinput.OperatingTemperature = phprop.OperatingTemperature
          End If
          NewTemperature = phprop.OperatingTemperature
       Else
          Call LostFocus_Handle(Me, txtOperatingTemperature, flag_ok)
          Exit Sub
       End If

       If contam_prop_form!cboSelectContaminant.ListCount = 0 Then
            Call LostFocus_Handle(Me, txtOperatingTemperature, flag_ok)
            Exit Sub
       End If

       If HaveNumber(phprop.OperatingPressure) And HaveTemp(phprop.OperatingTemperature) Then
          
          'If updating temperature is just supposed to update the
          'currently highlighted component then call this routine:
             'Call UpdateTempCurrentCompound

          'If updating temperature is supposed to update ALL
          'currently selected components then call this routine
             Call UpdateTempAllCompounds(NewTemperature)

       End If
    End If
  Call LostFocus_Handle(Me, txtOperatingTemperature, flag_ok)
    
End Sub

'
' NOTE: The Update_Fieldstuff() SUBROUTINE IS NOT CALLED
' FROM ANYWHERE ELSE IN THE ENTIRE PROJECT.
'
'Private Sub Update_Fieldstuff(RecordNo As Integer)
'
'    Dim i As Long
'    Dim j As Long
'    Dim K As Long
'    Dim TempD As Double
'    Dim HC_Count As Long
'    Dim HC_DB_Source As String
'    Dim HC_DB_Value As String * 36
'    Dim HC_DB_Temp As String
'
'    dbinput.CASNumber = db_index(RecordNo + 1)
'
'    '
'    ' OPEN RECORDSET.
'    '
'    Set RS_Main = DB_Main.OpenRecordset( _
'        "SELECT * FROM [Names (Master)] WHERE [Names (Master)].CAS = " & _
'        Format$(dbinput.CASNumber, "0"))
'    RS_Main.MoveFirst
'    RS_Main.MoveLast
'    RS_Main.MoveFirst
'    Set Selection = RS_Main
'    'If (DemoMode) Then
'    '    Data1.DatabaseName = Database_Path + "\demo_db.mdb"
'    'Else
'    '    Data1.DatabaseName = Database_Path + "\stepp_db.mdb"
'    'End If
'    'Data1.RecordSource = "SELECT * FROM [Names (Master)] WHERE [Names (Master)].CAS = " & Format$(dbinput.CASNumber, "0")
'    'Data1.Refresh
'    'Set Selection = Data1.Recordset
'
'    dbinput.Name = Selection(2)
'
'    'Look into the Properties Table ----------------------------------
'
'    '
'    ' OPEN RECORDSET.
'    '
'    Set RS_Main = DB_Main.OpenRecordset( _
'        "SELECT * FROM DIPPR801 WHERE DIPPR801.CAS = " & _
'        Format$(dbinput.CASNumber, "0"))
'    RS_Main.MoveFirst
'    RS_Main.MoveLast
'    RS_Main.MoveFirst
'    Set Selection = RS_Main
'    'Data1.RecordSource = "SELECT * FROM DIPPR801 WHERE DIPPR801.CAS = " & Format$(dbinput.CASNumber, "0")
'    'Data1.Refresh
'    'Set Selection = Data1.Recordset
'
'    If Selection.EOF = False Then
'
'        dbinput.formula = nullcheck(Selection("FORM"))
'        dbinput.MolecularWeight = Selection("MW")
'        dbinput.BoilingPoint = Selection("NBP")
'        dbinput.BoilingPointSource = get_source(nullcheck("DIPPR801"))
'        dbinput.RefractiveIndex = Selection("RI")
'        dbinput.VaporPressureDatabaseEquation = Selection("VPEQN")
'        dbinput.VaporPressureNumberCoefficients = Selection("VPNUM")
'        dbinput.VaporPressureAntoineA = Selection("VPA")
'        dbinput.VaporPressureAntoineB = Selection("VPB")
'        dbinput.VaporPressureAntoineC = Selection("VPC")
'        dbinput.VaporPressureAntoineD = Selection("VPD")
'        dbinput.VaporPressureAntoineE = Selection("VPE")
'        dbinput.VaporPressureMinimumT = Selection("VPTMIN")
'        dbinput.VaporPressureMaximumT = Selection("VPTMAX")
'        dbinput.VaporPressureSource = get_source(nullcheck("DIPPR801"))
'        dbinput.LiquidDensityEquation = Selection("LDNEQN")
'        dbinput.LiquidDensityNumberCoefficients = Selection("LDNNUM")
'        dbinput.LiquidDensityCoefficientA = Selection("LDNA")
'        dbinput.LiquidDensityCoefficientB = Selection("LDNB")
'        dbinput.LiquidDensityCoefficientC = Selection("LDNC")
'        dbinput.LiquidDensityCoefficientD = Selection("LDND")
'        dbinput.LiquidDensityMinimumT = Selection("LDNTMIN")
'        dbinput.LiquidDensityMaximumT = Selection("LDNTMAX")
'        dbinput.LiquidDensitySource = get_source(nullcheck("DIPPR801"))
'
'    Else
'
'        dbinput.MolecularWeight = -1
'        dbinput.BoilingPointSource = -1
'        dbinput.RefractiveIndex = -1
'        dbinput.VaporPressureAntoineA = -1
'        dbinput.VaporPressureDatabaseEquation = -1
'        dbinput.LiquidDensityEquation = -1
'
'    End If
'
'    If dbinput.MolecularWeight = 0 Then
'        dbinput.MolecularWeight = -1
'    End If
'
'    If dbinput.BoilingPoint = 0 Then
'        dbinput.BoilingPointSource = -1
'    End If
'
'    If dbinput.RefractiveIndex = 0 Then
'        dbinput.RefractiveIndex = -1
'    End If
'
'    If dbinput.VaporPressureAntoineA = 0 Then
'        dbinput.VaporPressureAntoineA = -1
'        dbinput.VaporPressureDatabaseEquation = -1
'    End If
'
'    If dbinput.LiquidDensityEquation = 0 Then
'        dbinput.LiquidDensityEquation = -1
'    End If
'
'    If dbinput.VaporPressureAntoineA = -1 Then
'
'        '
'        ' OPEN RECORDSET.
'        '
'        Set RS_Main = DB_Main.OpenRecordset( _
'            "SELECT * FROM [VP Yaws] WHERE [VP Yaws].CAS = " & _
'            Format$(dbinput.CASNumber, "0"))
'        RS_Main.MoveFirst
'        RS_Main.MoveLast
'        RS_Main.MoveFirst
'        Set Selection = RS_Main
'        'Data1.RecordSource = "SELECT * FROM [VP Yaws] WHERE [VP Yaws].CAS = " & Format$(dbinput.CASNumber, "0")
'        'Data1.Refresh
'        'Set Selection = Data1.Recordset
'
'        If Selection.EOF = False Then
'
'            dbinput.VaporPressureNumberCoefficients = 3
'            dbinput.VaporPressureAntoineA = Selection("ANTA")
'            dbinput.VaporPressureAntoineB = Selection("ANTB")
'            dbinput.VaporPressureAntoineC = Selection("ANTC")
'            dbinput.VaporPressureMinimumT = Selection("MINT")
'            dbinput.VaporPressureMaximumT = Selection("MAXT")
'            dbinput.VaporPressureSource = get_source(nullcheck("YAWS"))
'
'        Else
'
'            dbinput.VaporPressureAntoineA = -1
'            dbinput.VaporPressureDatabaseEquation = -1
'
'        End If
'
'    End If
'
'    If dbinput.VaporPressureAntoineA = 0 Then
'        dbinput.VaporPressureAntoineA = -1
'        dbinput.VaporPressureDatabaseEquation = -1
'    End If
'
'    If dbinput.VaporPressureAntoineA = -1 Then
'
'        '
'        ' OPEN RECORDSET.
'        '
'        Set RS_Main = DB_Main.OpenRecordset( _
'            "SELECT * FROM [VP@25 Superfund] WHERE [VP@25 Superfund].CAS = " & _
'            Format$(dbinput.CASNumber, "0"))
'        RS_Main.MoveFirst
'        RS_Main.MoveLast
'        RS_Main.MoveFirst
'        Set Selection = RS_Main
'        'Data1.RecordSource = "SELECT * FROM [VP@25 Superfund] WHERE [VP@25 Superfund].CAS = " & Format$(dbinput.CASNumber, "0")
'        'Data1.Refresh
'        'Set Selection = Data1.Recordset
'
'        If Selection.EOF = False Then
'            dbinput.VaporPressureSuperfund = Selection("VP")
'            dbinput.VaporPressureSuperfundTemperature = 25
'            dbinput.VaporPressureSource = get_source(nullcheck("SUPERFUND"))
'        Else
'            dbinput.VaporPressureSuperfund = -1
'        End If
'
'    End If
'
'    If dbinput.VaporPressureSuperfund = 0 Then
'        dbinput.VaporPressureSuperfund = -1
'    End If
'
'    '
'    ' OPEN RECORDSET.
'    '
'    Set RS_Main = DB_Main.OpenRecordset( _
'        "SELECT * FROM [SB@25 Yaws] WHERE [SB@25 Yaws].CAS = " & _
'        Format$(dbinput.CASNumber, "0"))
'    RS_Main.MoveFirst
'    RS_Main.MoveLast
'    RS_Main.MoveFirst
'    Set Selection = RS_Main
'    'Data1.RecordSource = "SELECT * FROM [SB@25 Yaws] WHERE [SB@25 Yaws].CAS = " & Format$(dbinput.CASNumber, "0")
'    'Data1.Refresh
'    'Set Selection = Data1.Recordset
'
'    If Selection.EOF = False Then
'        dbinput.AqueousSolubility = Selection("Sol")
'        dbinput.AqueousSolubilityTemperature = 25
'        dbinput.AqueousSolubilitySource = get_source(nullcheck("YAWS"))
'    Else
'        dbinput.AqueousSolubility = -1
'    End If
'
'    If dbinput.AqueousSolubility = 0 Then
'
'        '
'        ' OPEN RECORDSET.
'        '
'        Set RS_Main = DB_Main.OpenRecordset( _
'            "SELECT * FROM [SB@25 Superfund] WHERE [SB@25 Superfund].CAS = " & _
'            Format$(dbinput.CASNumber, "0"))
'        RS_Main.MoveFirst
'        RS_Main.MoveLast
'        RS_Main.MoveFirst
'        Set Selection = RS_Main
'        'Data1.RecordSource = "SELECT * FROM [SB@25 Superfund] WHERE [SB@25 Superfund].CAS = " & Format$(dbinput.CASNumber, "0")
'        'Data1.Refresh
'        'Set Selection = Data1.Recordset
'
'        If Selection.EOF = False Then
'            dbinput.AqueousSolubility = Selection("Sol")
'            dbinput.AqueousSolubilityTemperature = 25
'            dbinput.AqueousSolubilitySource = get_source(nullcheck("SUPERFUND"))
'
'        Else
'
'            dbinput.AqueousSolubility = -1
'
'        End If
'
'    End If
'
'    If dbinput.AqueousSolubility = 0 Then
'        dbinput.AqueousSolubility = -1
'    End If
'
'    '
'    ' OPEN RECORDSET.
'    '
'    Set RS_Main = DB_Main.OpenRecordset( _
'        "SELECT * FROM [Kow@25 Superfund] WHERE [Kow@25 Superfund].CAS = " & _
'        Format$(dbinput.CASNumber, "0"))
'    RS_Main.MoveFirst
'    RS_Main.MoveLast
'    RS_Main.MoveFirst
'    Set Selection = RS_Main
'    'Data1.RecordSource = "SELECT * FROM [Kow@25 Superfund] WHERE [Kow@25 Superfund].CAS = " & Format$(dbinput.CASNumber, "0")
'    'Data1.Refresh
'    'Set Selection = Data1.Recordset
'
'    If Selection.EOF = False Then
'        dbinput.OctWaterPartCoeff = Selection("log Kow")
'        dbinput.OctWaterPartCoeffTemperature = 25
'        dbinput.OctWaterPartCoeffSource = get_source(nullcheck("SUPERFUND"))
'    Else
'        dbinput.OctWaterPartCoeff = -1
'    End If
'
'    If dbinput.OctWaterPartCoeff = 0 Then
'        dbinput.OctWaterPartCoeff = -1
'    End If
'
'    '
'    ' OPEN RECORDSET.
'    '
'    Set RS_Main = DB_Main.OpenRecordset( _
'        "SELECT * FROM [Rogers/Miller] WHERE [Rogers/Miller].CAS = " & _
'        Format$(dbinput.CASNumber, "0"))
'    RS_Main.MoveFirst
'    RS_Main.MoveLast
'    RS_Main.MoveFirst
'    Set Selection = RS_Main
'    'Data1.RecordSource = "SELECT * FROM [Rogers/Miller] WHERE [Rogers/Miller].CAS = " & Format$(dbinput.CASNumber, "0")
'    'Data1.Refresh
'    'Set Selection = Data1.Recordset
'
'    If Selection.EOF = False Then
'
'        If Selection("MX") <= 0 Then dbinput.MaximumUnifacGroups = 0
'
'        For i = 1 To NC
'            For j = 1 To 10
'                For K = 1 To 2
'                    dbinput.MS(i, j, K) = 0
'                Next K
'            Next j
'        Next i
'
'        dbinput.NumberofRingsinCompound = Selection("RG")
'        dbinput.MaximumUnifacGroups = Selection("MX")
'
'        For i = 1 To dbinput.MaximumUnifacGroups
'            dbinput.MS(NC, i, 1) = Selection("G" + Trim$(Str$(i)))
'            dbinput.MS(NC, i, 2) = Selection("N" + Trim$(Str$(i)))
'        Next i
'
'    Else
'
'       dbinput.NumberofRingsinCompound = -1
'       dbinput.MaximumUnifacGroups = -1
'
'    End If
'
'    If dbinput.formula = "" Then
'        If Selection.EOF = False Then
'            dbinput.formula = Selection("Formula")
'        End If
'    End If
'
'    HC_Count = 0
'    hc_string = ""
'
'    '
'    ' OPEN RECORDSET.
'    '
'    Set RS_Main = DB_Main.OpenRecordset( _
'        "SELECT * FROM [HC RTI] WHERE [HC RTI].CAS = " & _
'        Format$(dbinput.CASNumber, "0"))
'    RS_Main.MoveFirst
'    RS_Main.MoveLast
'    RS_Main.MoveFirst
'    Set Selection = RS_Main
'    'Data1.RecordSource = "SELECT * FROM [HC RTI] WHERE [HC RTI].CAS = " & Format$(dbinput.CASNumber, "0")
'    'Data1.Refresh
'    'Set Selection = Data1.Recordset
'
'    Do While Not Selection.EOF
'
'        If number(Selection(1)) <> "" Then
'
'            last_hc_string = hc_string
'            HC_DB_Source = "RTI"
'            hc_form!lblDatabase = HC_DB_Source
'            LSet HC_DB_Value = Format$(number(Selection(1)), GetTheFormat(CDbl(number(Selection(1)))))
'            HC_DB_Temp = Format$(number(Selection(2)), GetTheFormat(CDbl(number(Selection(2)))))
'            hc_string = HC_DB_Value + HC_DB_Temp
'
'            If hc_string <> last_hc_string Then
'                HC_Count = HC_Count + 1
'                dbinput.HenrysConstantSource = get_source(nullcheck("RTI"))
'                dbinput.HenrysConstant(HC_Count) = Selection(1)
'                dbinput.HenrysConstantTemperature(HC_Count) = Selection(2)
'            End If
'
'        End If
'
'        Selection.MoveNext
'
'    Loop
'
'    dbinput.NumberOfDatabaseHenrysConstants = HC_Count
'
'    If dbinput.NumberOfDatabaseHenrysConstants = 0 Then
'
'        '
'        ' OPEN RECORDSET.
'        '
'        Set RS_Main = DB_Main.OpenRecordset( _
'            "SELECT * FROM [HC Superfund] WHERE [HC Superfund].CAS = " & _
'            Format$(dbinput.CASNumber, "0"))
'        RS_Main.MoveFirst
'        RS_Main.MoveLast
'        RS_Main.MoveFirst
'        Set Selection = RS_Main
'        'Data1.RecordSource = "SELECT * FROM [HC Superfund] WHERE [HC Superfund].CAS = " & Format$(dbinput.CASNumber, "0")
'        'Data1.Refresh
'        'Set Selection = Data1.Recordset
'
'        Do While Not Selection.EOF
'
'            If number(Selection(1)) <> "" Then
'
'                last_hc_string = hc_string
'                HC_DB_Source = "SUPERFUND"
'                hc_form!lblDatabase = HC_DB_Source
'                LSet HC_DB_Value = Format$(number(Selection(1)), GetTheFormat(CDbl(number(Selection(1)))))
'                HC_DB_Temp = Format$(number(Selection(2)), GetTheFormat(CDbl(number(Selection(2)))))
'                hc_string = HC_DB_Value + HC_DB_Temp
'
'                If hc_string <> last_hc_string Then
'                    HC_Count = HC_Count + 1
'                    dbinput.HenrysConstantSource = get_source(nullcheck("SUPERFUND"))
'                    dbinput.HenrysConstant(HC_Count) = Selection(1)
'                    dbinput.HenrysConstantTemperature(HC_Count) = Selection(2)
'                End If
'
'            End If
'
'            Selection.MoveNext
'
'        Loop
'
'        dbinput.NumberOfDatabaseHenrysConstants = HC_Count
'
'    End If
'
'    If dbinput.NumberOfDatabaseHenrysConstants = 0 Then
'
'        '
'        ' OPEN RECORDSET.
'        '
'        Set RS_Main = DB_Main.OpenRecordset( _
'            "SELECT * FROM [HC Yaws] WHERE [HC Yaws].CAS = " & _
'            Format$(dbinput.CASNumber, "0"))
'        RS_Main.MoveFirst
'        RS_Main.MoveLast
'        RS_Main.MoveFirst
'        Set Selection = RS_Main
'        'Data1.RecordSource = "SELECT * FROM [HC Yaws] WHERE [HC Yaws].CAS = " & Format$(dbinput.CASNumber, "0")
'        'Data1.Refresh
'        'Set Selection = Data1.Recordset
'
'        Do While Not Selection.EOF
'
'            If number(Selection(1)) <> "" Then
'                last_hc_string = hc_string
'                HC_DB_Source = "YAWS"
'                hc_form!lblDatabase = HC_DB_Source
'                LSet HC_DB_Value = Format$(number(Selection(1)), GetTheFormat(CDbl(number(Selection(1)))))
'                HC_DB_Temp = Format$(number(Selection(2)), GetTheFormat(CDbl(number(Selection(2)))))
'                hc_string = HC_DB_Value + HC_DB_Temp
'                If hc_string <> last_hc_string Then
'                    HC_Count = HC_Count + 1
'                    dbinput.HenrysConstantSource = get_source(nullcheck("YAWS"))
'                    dbinput.HenrysConstant(HC_Count) = Selection(1)
'                    dbinput.HenrysConstantTemperature(HC_Count) = Selection(2)
'                End If
'
'            End If
'
'        Selection.MoveNext
'
'        Loop
'
'        dbinput.NumberOfDatabaseHenrysConstants = HC_Count
'
'     End If
'
'     'Convert database Henry's constants to dimensionless units
'
'     If dbinput.NumberOfDatabaseHenrysConstants > 0 Then
'         Call HCDBCONV(dbinput.HenrysConstant(1), dbinput.HenrysConstantTemperature(1), dbinput.NumberOfDatabaseHenrysConstants, dbinput.HenrysConstantSource)
'     End If
'
'End Sub


Private Sub Update_P_and_T_StEPPLink()
Dim i As Integer

  '----- Critical that these lines be here!
  'ChDir App.Path
  'ChDrive App.Path
  Call ChangeDir_Main

  If ((SteppLink_SpecifiedPressure <> "") Or (SteppLink_SpecifiedTemperature <> "")) Then
    If (SteppLink_SpecifiedPressure <> "") Then
      Call UpdatePressAllCompounds(CDbl(SteppLink_SpecifiedPressure))
    End If
    If (SteppLink_SpecifiedTemperature <> "") Then
      Call UpdateTempAllCompounds(CDbl(SteppLink_SpecifiedTemperature))
    End If
  End If

    
    'For i = 1 To cboSelectContaminant.ListCount
    '  cboSelectContaminant.ListIndex = i - 1
    '  If (SteppLink_SpecifiedPressure <> "") Then
    '    If (CDbl(Trim$(txtOperatingPressure)) <> CDbl(Trim$(SteppLink_SpecifiedPressure))) Then
    '      phprop.OperatingPressure = CDbl(SteppLink_SpecifiedPressure)
    '      txtOperatingPressure = SteppLink_SpecifiedPressure
    '      Call UpdatePressCurrentCompound
    '    End If
    '  End If
    '  If (SteppLink_SpecifiedTemperature <> "") Then
    '    If (CDbl(Trim$(txtOperatingTemperature)) <> CDbl(Trim$(SteppLink_SpecifiedTemperature))) Then
    '      phprop.OperatingTemperature = CDbl(SteppLink_SpecifiedTemperature)
    '      txtOperatingTemperature = SteppLink_SpecifiedTemperature
    '      Call UpdateTempCurrentCompound
    '    End If
    '  End If
    'Next i
  
End Sub

Private Sub update_window()


End Sub

Private Sub UpdatePressAllCompounds(NewPressure As Double)
    Dim ii As Integer, origIndex As Integer, i As Integer

      frmWaitForCalculations!Panel3D1.FontSize = 13.8
      frmWaitForCalculations!Panel3D1.Caption = "Performing Calculations" & Chr$(13) & Chr$(13) & Chr$(13) & Chr$(13) & "Please Wait"
      frmWaitForCalculations!Panel3D2.FontSize = 10#
      frmWaitForCalculations!Panel3D2.Visible = True
      frmWaitForCalculations!Panel3D2.Caption = "Updating" & Chr$(13) & "Each Selected Compound"
      frmWaitForCalculations.Show
      frmWaitForCalculations.Refresh

      Screen.MousePointer = 11   'Hourglass

    origIndex = cboSelectContaminant.ListIndex

    For ii = 0 To cboSelectContaminant.ListCount - 1
    cboSelectContaminant.ListIndex = -1
    cboSelectContaminant.ListIndex = ii
    phprop.OperatingPressure = NewPressure
    txtOperatingPressure = Format$(NewPressure, "0.00")


          Call BlankTextBoxesPressure

          Call CalculateGasDiffusivity
          contam_prop_form.Refresh


'*** Place PROPAVAILABLE and HAVEPROPERTY arrays into phprop structure
       For i = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
           phprop.PROPAVAILABLE(i) = PROPAVAILABLE(i)
       Next i
       For i = 1 To NUMBER_OF_PROPERTIES
           phprop.HaveProperty(i) = HaveProperty(i)
       Next i
     
      NumContaminantInList = cboSelectContaminant.ListIndex + 1
      PropContaminant(NumContaminantInList) = phprop
    
    Next ii

    cboSelectContaminant.ListIndex = origIndex

      frmWaitForCalculations.Hide

      frmWaitForCalculations!Panel3D1.FontSize = 13.8
      frmWaitForCalculations!Panel3D1.Caption = "Performing Calculations" & Chr$(13) & Chr$(13) & "Please Wait"
      frmWaitForCalculations!Panel3D2.Visible = False

      Screen.MousePointer = 0    'Arrow

End Sub

Private Sub UpdatePressCurrentCompound()
    Dim i As Integer

'NOTE: THIS SUBROUTINE IS NO LONGER USED ANYWHERE ELSE
'IN THE PROGRAM !!!
Exit Sub
          



          frmWaitForCalculations.Show
          frmWaitForCalculations.Refresh

          Call BlankTextBoxesPressure

          Screen.MousePointer = 11   'Hourglass
          Call CalculateGasDiffusivity
          Screen.MousePointer = 0    'Arrow
          contam_prop_form.Refresh

          frmWaitForCalculations.Hide

'*** Place PROPAVAILABLE and HAVEPROPERTY arrays into phprop structure
     For i = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
         phprop.PROPAVAILABLE(i) = PROPAVAILABLE(i)
     Next i
     For i = 1 To NUMBER_OF_PROPERTIES
         phprop.HaveProperty(i) = HaveProperty(i)
     Next i

          NumContaminantInList = cboSelectContaminant.ListIndex + 1
          PropContaminant(NumContaminantInList) = phprop

End Sub

Private Sub UpdateTempAllCompounds(NewTemperature As Double)
Dim ii As Integer, origIndex As Integer, i As Integer
Dim SIValue As Double
Dim EnglishValue As Double

      frmWaitForCalculations!Panel3D1.FontSize = 13.8
      frmWaitForCalculations!Panel3D1.Caption = "Performing Calculations" & Chr$(13) & Chr$(13) & Chr$(13) & Chr$(13) & "Please Wait"
      frmWaitForCalculations!Panel3D2.FontSize = 10#
      frmWaitForCalculations!Panel3D2.Visible = True
      frmWaitForCalculations!Panel3D2.Caption = "Updating" & Chr$(13) & "Each Selected Compound"
      frmWaitForCalculations.Show
      frmWaitForCalculations.Refresh

      Screen.MousePointer = 11   'Hourglass

    origIndex = cboSelectContaminant.ListIndex

    For ii = 0 To cboSelectContaminant.ListCount - 1
    cboSelectContaminant.ListIndex = -1
    cboSelectContaminant.ListIndex = ii
    phprop.OperatingTemperature = NewTemperature
    
    If CurrentUnits = SIUnits Then
      'DISPLAY TEMPERATURE IN SI UNITS.
      SIValue = NewTemperature
      txtOperatingTemperature.Text = Format$(SIValue, "0.00")
    Else
      'DISPLAY TEMPERATURE IN ENGLISH UNITS.
      SIValue = NewTemperature
      Call TEMPCNV(EnglishValue, SIValue)
      txtOperatingTemperature.Text = Format$(EnglishValue, "0.00")
    End If

      Call BlankTextBoxesTemp

      Call CalculateVaporPressure
      contam_prop_form.Refresh

      If phprop.ActivityCoefficient.BinaryInteractionParameterDatabase > 0 Then
         Call CalculateActivityCoefficient
         contam_prop_form.Refresh
      End If
      
      Call CalculateHenrysConstant
      contam_prop_form.Refresh

      Call CalculateLiquidDensity
      contam_prop_form.Refresh

      Call CalculateMolarVolumeOpT
      contam_prop_form.Refresh

      If phprop.AqueousSolubility.BinaryInteractionParameterDatabase > 0 Then
         Call CalculateAqueousSolubility
         contam_prop_form.Refresh
      End If

      If phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase > 0 Then
         Call CalculateOctWaterPartCoeff
         contam_prop_form.Refresh
      End If

      Call CalculateLiquidDiffusivity
      contam_prop_form.Refresh

      Call CalculateGasDiffusivity
      contam_prop_form.Refresh

      Call CalculateWaterDensity
      contam_prop_form.Refresh

      Call CalculateWaterViscosity
      contam_prop_form.Refresh

      Call CalculateWaterSurfaceTension
      contam_prop_form.Refresh

      Call CalculateAirDensity
      contam_prop_form.Refresh

      Call CalculateAirViscosity
      contam_prop_form.Refresh


'*** Place PROPAVAILABLE and HAVEPROPERTY arrays into phprop structure
       For i = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
           phprop.PROPAVAILABLE(i) = PROPAVAILABLE(i)
       Next i
       For i = 1 To NUMBER_OF_PROPERTIES
           phprop.HaveProperty(i) = HaveProperty(i)
       Next i
     
      NumContaminantInList = cboSelectContaminant.ListIndex + 1
      PropContaminant(NumContaminantInList) = phprop
    
    Next ii

    cboSelectContaminant.ListIndex = origIndex

      frmWaitForCalculations.Hide

      frmWaitForCalculations!Panel3D1.FontSize = 13.8
      frmWaitForCalculations!Panel3D1.Caption = "Performing Calculations" & Chr$(13) & Chr$(13) & "Please Wait"
      frmWaitForCalculations!Panel3D2.Visible = False

      Screen.MousePointer = 0    'Arrow

End Sub

Private Sub UpdateTempCurrentCompound()
    Dim i As Integer


'NOTE: THIS SUBROUTINE IS NO LONGER USED ANYWHERE ELSE
'IN THE PROGRAM !!!
Exit Sub

          
          
          frmWaitForCalculations.Show
          frmWaitForCalculations.Refresh

          Screen.MousePointer = 11   'Hourglass

          Call BlankTextBoxesTemp

          Call CalculateVaporPressure
          contam_prop_form.Refresh

          If phprop.ActivityCoefficient.BinaryInteractionParameterDatabase > 0 Then
             Call CalculateActivityCoefficient
             contam_prop_form.Refresh
          End If
          
          Call CalculateHenrysConstant
          contam_prop_form.Refresh

          Call CalculateLiquidDensity
          contam_prop_form.Refresh

          Call CalculateMolarVolumeOpT
          contam_prop_form.Refresh

          If phprop.AqueousSolubility.BinaryInteractionParameterDatabase > 0 Then
             Call CalculateAqueousSolubility
             contam_prop_form.Refresh
          End If

          If phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase > 0 Then
             Call CalculateOctWaterPartCoeff
             contam_prop_form.Refresh
          End If

          Call CalculateLiquidDiffusivity
          contam_prop_form.Refresh

          Call CalculateGasDiffusivity
          contam_prop_form.Refresh

          Call CalculateWaterDensity
          contam_prop_form.Refresh

          Call CalculateWaterViscosity
          contam_prop_form.Refresh

          Call CalculateWaterSurfaceTension
          contam_prop_form.Refresh

          Call CalculateAirDensity
          contam_prop_form.Refresh

          Call CalculateAirViscosity
          contam_prop_form.Refresh

          frmWaitForCalculations.Hide

          Screen.MousePointer = 0    'Arrow

'*** Place PROPAVAILABLE and HAVEPROPERTY arrays into phprop structure
           For i = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
               phprop.PROPAVAILABLE(i) = PROPAVAILABLE(i)
           Next i
           For i = 1 To NUMBER_OF_PROPERTIES
               phprop.HaveProperty(i) = HaveProperty(i)
           Next i
     
          NumContaminantInList = cboSelectContaminant.ListIndex + 1
          PropContaminant(NumContaminantInList) = phprop

End Sub


VERSION 5.00
Object = "{0BA686C6-F7D3-101A-993E-0000C0EF6F5E}#1.0#0"; "THREED32.OCX"
Begin VB.Form frmExtraDisclaimer 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Disclaimer"
   ClientHeight    =   6795
   ClientLeft      =   3495
   ClientTop       =   2055
   ClientWidth     =   9480
   ControlBox      =   0   'False
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   6795
   ScaleWidth      =   9480
   ShowInTaskbar   =   0   'False
   Begin VB.CommandButton cmdIAgree 
      Appearance      =   0  'Flat
      Caption         =   "I Agree"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   372
      Left            =   90
      TabIndex        =   3
      Top             =   6090
      Width           =   972
   End
   Begin VB.CommandButton cmdExit 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Exit"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   372
      Left            =   8310
      TabIndex        =   2
      Top             =   6090
      Width           =   972
   End
   Begin Threed.SSPanel Panel3D1 
      Height          =   4935
      Left            =   90
      TabIndex        =   0
      Top             =   270
      Width           =   9255
      _Version        =   65536
      _ExtentX        =   16325
      _ExtentY        =   8705
      _StockProps     =   15
      BackColor       =   12632256
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Begin VB.Label lblDisclaimer 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "lblDisclaimer"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   12
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   4575
         Left            =   180
         TabIndex        =   1
         Top             =   180
         Width           =   8865
      End
   End
End
Attribute VB_Name = "frmExtraDisclaimer"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

Private Sub cmdExit_Click()

  Unload Me
  End

End Sub

Private Sub cmdIAgree_Click()

  Unload Me

End Sub

Private Sub Form_Load()
Dim msg As String

  Me.Left = (Screen.Width - Me.Width) / 2
  Me.Top = (Screen.Height - Me.Height) / 2

  msg = "This demonstration version of StEPP is "
  msg = msg & "FOR PROPOSAL EVALUATION ONLY by the "
  msg = msg & "reviewers of:"
  msg = msg & Chr$(13) & Chr$(13)
  msg = msg & "    Vicksburg Consolidated Contracting Office"
  msg = msg & Chr$(13)
  msg = msg & "    U.S. Army Corps of Engineers"
  msg = msg & Chr$(13)
  msg = msg & "    Solicitation No.:  DACW39-98-R-0008"
  msg = msg & Chr$(13)
  msg = msg & "    RFP Title:  Environmental and Ecological Risk Assessment / Modeling"
  msg = msg & Chr$(13)
  msg = msg & Chr$(13)
  msg = msg & "This demonstration version expires on "
  msg = msg & "April 30, 1999 and is NOT for re-sale "
  msg = msg & "or use."
  lblDisclaimer.Caption = msg

End Sub


VERSION 5.00
Begin VB.Form gas_diff_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Gas Diffusivity"
   ClientHeight    =   3570
   ClientLeft      =   2010
   ClientTop       =   1845
   ClientWidth     =   8520
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form5"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   3570
   ScaleWidth      =   8520
   Begin VB.TextBox txtGasDiffTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   6120
      TabIndex        =   5
      Text            =   " "
      Top             =   2880
      Width           =   1215
   End
   Begin VB.TextBox txtGasDiffusivityValue 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   4080
      TabIndex        =   4
      Text            =   " "
      Top             =   2880
      Width           =   1815
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   1080
      TabIndex        =   3
      Top             =   2880
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   1080
      TabIndex        =   2
      Top             =   2400
      Width           =   255
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Gas Diffusivity"
      Height          =   615
      Left            =   4920
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.Label lblGasDiffTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6120
      TabIndex        =   17
      Top             =   2400
      Width           =   1212
   End
   Begin VB.Label lblGasDiffusivityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4080
      TabIndex        =   16
      Top             =   2400
      Width           =   1812
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   1
      Left            =   1440
      TabIndex        =   15
      Top             =   2880
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Wilke-Lee"
      ForeColor       =   &H00000000&
      Height          =   252
      Index           =   0
      Left            =   1440
      TabIndex        =   14
      Top             =   2400
      Width           =   2412
   End
   Begin VB.Line Line2 
      X1              =   960
      X2              =   7440
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   1695
      Left            =   960
      Top             =   1680
      Width           =   6495
   End
   Begin VB.Label lblGasDiffTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   6120
      TabIndex        =   13
      Top             =   1800
      Width           =   1215
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   1440
      TabIndex        =   12
      Top             =   1800
      Width           =   2415
   End
   Begin VB.Label lblGasDiffLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Gas Diffusivity"
      ForeColor       =   &H00000000&
      Height          =   400
      Left            =   4080
      TabIndex        =   11
      Top             =   1750
      Width           =   1815
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   10
      Top             =   720
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   9
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   8
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   7
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Gas Diffusivity Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   6
      Top             =   240
      Width           =   4095
   End
End
Attribute VB_Name = "gas_diff_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastGasDiffInputValue As String
Dim PastGasDiffInputTemp As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.GasDiffusivity.CurrentSelection.choice
       Case GAS_DIFFUSIVITY_WILKELEE
          SelectedOption = 1
       Case GAS_DIFFUSIVITY_INPUT
          SelectedOption = 2
          txtgasdiffusivityvalue(1).Text = PastGasDiffInputValue
          txtgasdifftemperature(1).Text = PastGasDiffInputTemp
       Case Else
          gas_diff_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    gas_diff_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 2
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = GAS_DIFFUSIVITY_WILKELEE
       Case 2
          If Not PROPAVAILABLE(GAS_DIFFUSIVITY_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtgasdiffusivityvalue(1).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = GAS_DIFFUSIVITY_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.GasDiffusivity.CurrentSelection.choice Then
       phprop.GasDiffusivity.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayGasDiffusivityMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = GAS_DIFFUSIVITY_INPUT Then
       Call DisplayGasDiffusivityMainScreen(ValueToDisplayIndex)
    End If

    gas_diff_form.Hide

End Sub

Private Sub Form_Activate()

  Call centerform_relative(contam_prop_form, Me)

    PastGasDiffInputValue = txtgasdiffusivityvalue(1).Text
    PastGasDiffInputTemp = txtgasdifftemperature(1).Text
End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)

    If (DemoMode) Then cmdok.Enabled = False

End Sub

Private Sub lblGasDiffTemperature_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.GasDiffusivity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblGasDiffusivityValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.GasDiffusivity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0  'Source = Wilke-Lee Modification of Hirschfelder-Bird-Spotz Method
          ErrorFlag = phprop.GasDiffusivity.wilkeLee.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.GasDiffusivity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.GasDiffusivity.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.GasDiffusivity.PreviousIndex
    hilight.GasDiffusivity.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtGasDiffTemperature_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtgasdifftemperature(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.GasDiffusivity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtGasDiffTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
    
End Sub

Private Sub txtGasDiffTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtgasdifftemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtgasdifftemperature(Index).Text = "" Then
       phprop.GasDiffusivity.input.temperature = -1E+25
       Call LostFocus_Handle(Me, txtgasdifftemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtgasdifftemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtgasdifftemperature(Index).Text)) Then
          txtgasdifftemperature(Index).Text = Temp_Text
          txtgasdifftemperature(Index).SetFocus
         Call LostFocus_Handle(Me, txtgasdifftemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtgasdifftemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.GasDiffusivity.input.temperature = CDbl(txtgasdifftemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtgasdifftemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.GasDiffusivity.input.temperature = SIValue
          End If

       Else
         Call LostFocus_Handle(Me, txtgasdifftemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
  Call LostFocus_Handle(Me, txtgasdifftemperature(Index), flag_ok)

End Sub

Private Sub txtGasDiffusivityValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtgasdiffusivityvalue(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.GasDiffusivity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub txtGasDiffusivityValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txtgasdifftemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtGasDiffusivityValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtgasdiffusivityvalue(Index))) Then
     Exit Sub
   End If

   flag_ok = True
    If txtgasdiffusivityvalue(Index).Text = "" Then
       phprop.GasDiffusivity.input.Value = -1#
       PROPAVAILABLE(GAS_DIFFUSIVITY_INPUT) = False
       Call LostFocus_Handle(Me, txtgasdiffusivityvalue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtgasdiffusivityvalue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtgasdiffusivityvalue(Index).Text)) Then
          txtgasdiffusivityvalue(Index).Text = Temp_Text
          txtgasdiffusivityvalue(Index).SetFocus
          Call LostFocus_Handle(Me, txtgasdiffusivityvalue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtgasdiffusivityvalue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.GasDiffusivity.input.Value = CDbl(txtgasdiffusivityvalue(Index).Text)
          Else
             EnglishValue = CDbl(txtgasdiffusivityvalue(Index).Text)
             Call GDIFENSI(SIValue, EnglishValue)
             phprop.GasDiffusivity.input.Value = SIValue
          End If

          PROPAVAILABLE(GAS_DIFFUSIVITY_INPUT) = True
       Else
          Call LostFocus_Handle(Me, txtgasdiffusivityvalue(Index), flag_ok)
          Exit Sub
       End If
    End If
  Call LostFocus_Handle(Me, txtgasdiffusivityvalue(Index), flag_ok)


End Sub

VERSION 5.00
Begin VB.Form hc_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Henry's Constant"
   ClientHeight    =   6210
   ClientLeft      =   1185
   ClientTop       =   1170
   ClientWidth     =   8745
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form3"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   6210
   ScaleWidth      =   8745
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   2
      Left            =   240
      TabIndex        =   8
      Top             =   2640
      Width           =   225
   End
   Begin VB.TextBox txtHCmaximumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   5
      Left            =   7560
      TabIndex        =   41
      Text            =   "No Visible"
      Top             =   5160
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtHCminimumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   5
      Left            =   6360
      TabIndex        =   40
      Text            =   "No Visible"
      Top             =   5160
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtHCTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   5
      Left            =   5160
      TabIndex        =   39
      Top             =   5160
      Width           =   975
   End
   Begin VB.TextBox txtHenrysConstantValue 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   5
      Left            =   3120
      TabIndex        =   38
      Top             =   5160
      Width           =   1815
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   6
      Left            =   240
      TabIndex        =   36
      Top             =   5160
      Width           =   225
   End
   Begin VB.ComboBox cboUNIFAC 
      Appearance      =   0  'Flat
      Height          =   288
      Left            =   3120
      Style           =   2  'Dropdown List
      TabIndex        =   35
      Top             =   4680
      Width           =   3492
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   5
      Left            =   240
      TabIndex        =   28
      Top             =   4320
      Width           =   225
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Henry's Constant"
      Height          =   615
      Left            =   4920
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   4
      Left            =   240
      TabIndex        =   20
      Top             =   3480
      Width           =   225
   End
   Begin VB.ComboBox hc_list 
      Appearance      =   0  'Flat
      Height          =   288
      Left            =   3120
      Style           =   2  'Dropdown List
      TabIndex        =   27
      Top             =   3840
      Width           =   3492
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   3
      Left            =   240
      TabIndex        =   14
      Top             =   3000
      Width           =   225
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   1
      Left            =   240
      TabIndex        =   2
      Top             =   2280
      Width           =   225
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   3852
      Left            =   120
      Top             =   1680
      Width           =   8532
   End
   Begin VB.Label lblUNIFACParameterSet 
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Left            =   3720
      TabIndex        =   53
      Top             =   5760
      Width           =   4812
   End
   Begin VB.Shape Shape2 
      BorderWidth     =   2
      Height          =   492
      Left            =   120
      Top             =   5640
      Width           =   8532
   End
   Begin VB.Label Label1 
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC Group Interaction Database:"
      ForeColor       =   &H80000008&
      Height          =   252
      Left            =   240
      TabIndex        =   52
      Top             =   5760
      Width           =   3252
   End
   Begin VB.Label lblHCmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   4
      Left            =   7560
      TabIndex        =   33
      Top             =   4320
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblHCmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   3
      Left            =   7560
      TabIndex        =   25
      Top             =   3480
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblHCmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   7560
      TabIndex        =   19
      Top             =   3000
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblHCmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   7560
      TabIndex        =   13
      Top             =   2640
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblHCmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   7560
      TabIndex        =   7
      Top             =   2280
      Width           =   972
   End
   Begin VB.Label lblHCminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   4
      Left            =   6360
      TabIndex        =   32
      Top             =   4320
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblHCminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   3
      Left            =   6360
      TabIndex        =   24
      Top             =   3480
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblHCminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   6360
      TabIndex        =   18
      Top             =   3000
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblHCminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   6360
      TabIndex        =   12
      Top             =   2640
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblHCminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6360
      TabIndex        =   6
      Top             =   2280
      Width           =   972
   End
   Begin VB.Label lblHCTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   4
      Left            =   5160
      TabIndex        =   31
      Top             =   4320
      Width           =   972
   End
   Begin VB.Label lblHCTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   3
      Left            =   5160
      TabIndex        =   23
      Top             =   3480
      Width           =   972
   End
   Begin VB.Label lblHCTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   5160
      TabIndex        =   17
      Top             =   3000
      Width           =   972
   End
   Begin VB.Label lblHCTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   5160
      TabIndex        =   11
      Top             =   2640
      Width           =   972
   End
   Begin VB.Label lblHCTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   5160
      TabIndex        =   5
      Top             =   2280
      Width           =   972
   End
   Begin VB.Label lblHenrysConstantValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   4
      Left            =   3120
      TabIndex        =   30
      Top             =   4320
      Width           =   1812
   End
   Begin VB.Label lblHenrysConstantValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   3
      Left            =   3120
      TabIndex        =   22
      Top             =   3480
      Width           =   1812
   End
   Begin VB.Label lblHenrysConstantValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   3120
      TabIndex        =   16
      Top             =   3000
      Width           =   1812
   End
   Begin VB.Label lblHenrysConstantValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   3120
      TabIndex        =   10
      Top             =   2640
      Width           =   1812
   End
   Begin VB.Label lblHenrysConstantValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   3120
      TabIndex        =   4
      Top             =   2280
      Width           =   1812
   End
   Begin VB.Label lblUNIFAC 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   252
      Left            =   840
      TabIndex        =   34
      Top             =   4680
      Width           =   1812
   End
   Begin VB.Label lblDatabase 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   252
      Left            =   840
      TabIndex        =   26
      Top             =   3840
      Width           =   1812
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   5
      Left            =   600
      TabIndex        =   37
      Top             =   5160
      Width           =   2295
   End
   Begin VB.Line Line2 
      X1              =   120
      X2              =   8640
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC @ Database T's"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   4
      Left            =   600
      TabIndex        =   29
      Top             =   4320
      Width           =   2295
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Database"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   3
      Left            =   600
      TabIndex        =   21
      Top             =   3480
      Width           =   2295
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC at Operating T"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   600
      TabIndex        =   15
      Top             =   3000
      Width           =   2295
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC Fit with Data Pt."
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   600
      TabIndex        =   9
      Top             =   2640
      Width           =   2295
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Regression of Data Points"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   600
      TabIndex        =   3
      Top             =   2280
      Width           =   2295
   End
   Begin VB.Label lblHCLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Henry's Constant"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   3120
      TabIndex        =   51
      Top             =   1800
      Width           =   1815
   End
   Begin VB.Label lblHCminTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmin"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   6360
      TabIndex        =   50
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblHCmaxTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmax"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   7560
      TabIndex        =   49
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   600
      TabIndex        =   48
      Top             =   1800
      Width           =   2295
   End
   Begin VB.Label lblHCTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   5160
      TabIndex        =   47
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Henry's Constant Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   360
      TabIndex        =   46
      Top             =   240
      Width           =   4095
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   360
      TabIndex        =   45
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   360
      TabIndex        =   44
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2160
      TabIndex        =   43
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2160
      TabIndex        =   42
      Top             =   720
      Width           =   2295
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   240
      Top             =   120
      Width           =   4335
   End
   Begin VB.Line Line1 
      X1              =   240
      X2              =   4560
      Y1              =   600
      Y2              =   600
   End
End
Attribute VB_Name = "hc_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastHCInputValue As String
Dim PastHCInputTemp As String

Private Sub cboUNIFAC_Click()
    Dim i As Integer, j As Integer
    Dim msg As String
    Dim SIValue As Double, EnglishValue As Double
    Dim ValueToDisplay As Double

    i = phprop.HenrysConstant.chosenUNIFACIndex
    j = cboUNIFAC.ListIndex + 1

    If i = j Then Exit Sub

    If Left$(cboUNIFAC.List(j - 1), 3) = "N/A" Then
       msg = "This UNIFAC item can not be selected"
       msg = msg + " because it is not available"
       MsgBox msg, MB_ICONSTOP, "Warning"
       cboUNIFAC.ListIndex = i - 1
    Else
       phprop.HenrysConstant.chosenUNIFACIndex = j

       SIValue = phprop.HenrysConstant.UNIFAC(phprop.HenrysConstant.chosenUNIFACIndex).Value
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call HCCONV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHenrysConstantValue(4).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

       SIValue = phprop.HenrysConstant.UNIFAC(phprop.HenrysConstant.chosenUNIFACIndex).temperature
       If CurrentUnits = SIUnits Then
          ValueToDisplay = SIValue
       ElseIf CurrentUnits = EnglishUnits Then
          Call TEMPCNV(EnglishValue, SIValue)
          ValueToDisplay = EnglishValue
       End If
       hc_form!lblHCTemperature(4).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

    End If

End Sub

Private Sub cboUNIFAC_KeyPress(keyascii As Integer)
    KeyPress = 0
End Sub

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.HenrysConstant.CurrentSelection.choice
       Case HENRYS_CONSTANT_REGRESS
          SelectedOption = 1
       Case HENRYS_CONSTANT_FIT
          SelectedOption = 2
       Case HENRYS_CONSTANT_OPT_UNIFAC
          SelectedOption = 3
       Case HENRYS_CONSTANT_DATABASE
          SelectedOption = 4
       Case HENRYS_CONSTANT_UNIFAC
          SelectedOption = 5
       Case HENRYS_CONSTANT_INPUT
          SelectedOption = 6
          txtHenrysconstantvalue(5).Text = PastHCInputValue
          txtHCTemperature(5).Text = PastHCInputTemp
       Case Else
          hc_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    hc_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 6
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = HENRYS_CONSTANT_REGRESS
       Case 2
          ValueToDisplayIndex = HENRYS_CONSTANT_FIT
       Case 3
          ValueToDisplayIndex = HENRYS_CONSTANT_OPT_UNIFAC
       Case 4
          ValueToDisplayIndex = HENRYS_CONSTANT_DATABASE
       Case 5
          ValueToDisplayIndex = HENRYS_CONSTANT_UNIFAC
       Case 6
          If Not PROPAVAILABLE(HENRYS_CONSTANT_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtHenrysconstantvalue(5).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = HENRYS_CONSTANT_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.HenrysConstant.CurrentSelection.choice Then
       phprop.HenrysConstant.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayHenrysConstantMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = HENRYS_CONSTANT_INPUT Then
       Call DisplayHenrysConstantMainScreen(ValueToDisplayIndex)
    End If

    hc_form.Hide
End Sub

Private Sub Form_Activate()
    Dim ActCoeffIndex As Integer

  Call centerform_relative(contam_prop_form, Me)
    
    PastHCInputValue = txtHenrysconstantvalue(5).Text
    PastHCInputTemp = txtHCTemperature(5).Text

    If HaveProperty(ACTIVITY_COEFFICIENT) And HaveProperty(VAPOR_PRESSURE) Then
       Select Case phprop.ActivityCoefficient.BinaryInteractionParameterDatabase
          Case 1   'Original UNIFAC VLE
             hc_form!lblUNIFACParameterSet.Caption = "Original UNIFAC VLE"
          Case 2   'UNIFAC LLE
             hc_form!lblUNIFACParameterSet.Caption = "UNIFAC LLE"
          Case 3   'Environmental VLE'
             hc_form!lblUNIFACParameterSet.Caption = "Environmental VLE"
       End Select
    Else
       hc_form!lblUNIFACParameterSet.Caption = "UNIFAC Henry's Constant Not Available"
    End If

End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)

    If (DemoMode) Then cmdok.Enabled = False


End Sub

Private Sub hc_list_Click()
    Dim i As Integer, j As Integer
    Dim SIValue As Double, EnglishValue As Double
    Dim ValueToDisplay As Double

    i = phprop.HenrysConstant.chosenDatabaseIndex
    j = hc_list.ListIndex + 1

    If i = j Then Exit Sub

    phprop.HenrysConstant.chosenDatabaseIndex = j

    SIValue = phprop.HenrysConstant.database(phprop.HenrysConstant.chosenDatabaseIndex).Value
    If CurrentUnits = SIUnits Then
       ValueToDisplay = SIValue
    ElseIf CurrentUnits = EnglishUnits Then
       Call HCCONV(EnglishValue, SIValue)
       ValueToDisplay = EnglishValue
    End If
    hc_form!lblHenrysConstantValue(3).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

    SIValue = phprop.HenrysConstant.database(phprop.HenrysConstant.chosenDatabaseIndex).temperature
    If CurrentUnits = SIUnits Then
       ValueToDisplay = SIValue
    ElseIf CurrentUnits = EnglishUnits Then
       Call TEMPCNV(EnglishValue, SIValue)
       ValueToDisplay = EnglishValue
    End If
    hc_form!lblHCTemperature(3).Caption = Format$(ValueToDisplay, GetTheFormat(ValueToDisplay))

End Sub

Private Sub hc_list_KeyPress(keyascii As Integer)
    keyascii = 0
End Sub

Private Sub lblHCmaximumT_Click(Index As Integer)
0    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.HenrysConstant.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblHCminimumT_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.HenrysConstant.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblHCTemperature_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.HenrysConstant.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblHenrysConstantValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    Dim msg As String
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.HenrysConstant.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0   'Henry's constant regression
            ErrorFlag = phprop.HenrysConstant.regress.error
       Case 1   'UNIFAC Fit with Data Point
            ErrorFlag = phprop.HenrysConstant.fit.UNIFAC.error
       Case 2   'UNIFAC at Operating T
            ErrorFlag = phprop.HenrysConstant.operatingT.UNIFAC.error
       Case 3   'Database
            If hc_form!lblHenrysConstantValue(3).Caption = "Not Available" Then
               If phprop.HenrysConstant.NumberOfDatabaseHenrysConstants = 0 Then
                  msg = "There are no Henry's constants in the database."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
                  Exit Sub
               Else
                  ErrorFlag = phprop.HenrysConstant.database(1).error
               End If
            Else
               ErrorFlag = phprop.HenrysConstant.database(phprop.HenrysConstant.chosenDatabaseIndex).error
            End If
       Case 4   'UNIFAC at Database Ts
            If hc_form!lblHenrysConstantValue(4).Caption = "Not Available" Then
               If phprop.HenrysConstant.NumberOfDatabaseHenrysConstants = 0 Then
                  msg = "There are no Henry's constants in the database.  Consequently, the calculation of Henry's Constants from UNIFAC at database temperatures is not possible."
                  MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
                  Exit Sub
               Else
                  ErrorFlag = phprop.HenrysConstant.UNIFAC(1).error
               End If
            Else
               ErrorFlag = phprop.HenrysConstant.UNIFAC(phprop.HenrysConstant.chosenUNIFACIndex).error
            End If

    End Select


    If ErrorFlag = 0 Then Exit Sub   'No errors or warnings

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    Dim i As Integer

    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.HenrysConstant.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.HenrysConstant.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.HenrysConstant.PreviousIndex
    hilight.HenrysConstant.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtHCmaximumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtHCmaximumT(Index), Temp_Text)

End Sub

Private Sub txtHCmaximumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 5 Then keyascii = 0
End Sub

Private Sub txtHCmaximumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtHCmaximumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtHCmaximumT(Index), flag_ok)

End Sub

Private Sub txtHCminimumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtHCminimumT(Index), Temp_Text)

End Sub

Private Sub txtHCminimumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 5 Then keyascii = 0
End Sub

Private Sub txtHCminimumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtHCminimumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtHCminimumT(Index), flag_ok)

End Sub

Private Sub txtHCTemperature_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtHCTemperature(Index), Temp_Text)

    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.HenrysConstant.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub txtHCTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtHCTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtHCTemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtHCTemperature(Index).Text = "" Then
       phprop.HenrysConstant.input.temperature = -1E+25
       Call LostFocus_Handle(Me, txtHCTemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtHCTemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtHCTemperature(Index).Text)) Then
          txtHCTemperature(Index).Text = Temp_Text
          txtHCTemperature(Index).SetFocus
          Call LostFocus_Handle(Me, txtHCTemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtHCTemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.HenrysConstant.input.temperature = CDbl(txtHCTemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtHCTemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.HenrysConstant.input.temperature = SIValue
          End If

       Else
          Call LostFocus_Handle(Me, txtHCTemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
          Call LostFocus_Handle(Me, txtHCTemperature(Index), flag_ok)
End Sub

Private Sub txtHenrysConstantValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtHenrysconstantvalue(Index), Temp_Text)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.HenrysConstant.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If


End Sub

Private Sub txtHenrysConstantValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txtHCTemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
    
End Sub

Private Sub txtHenrysConstantValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtHenrysconstantvalue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtHenrysconstantvalue(Index).Text = "" Then
       phprop.HenrysConstant.input.Value = -1#
       PROPAVAILABLE(HENRYS_CONSTANT_INPUT) = False
       Call LostFocus_Handle(Me, txtHenrysconstantvalue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtHenrysconstantvalue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtHenrysconstantvalue(Index).Text)) Then
          txtHenrysconstantvalue(Index).Text = Temp_Text
          txtHenrysconstantvalue(Index).SetFocus
       Call LostFocus_Handle(Me, txtHenrysconstantvalue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtHenrysconstantvalue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.HenrysConstant.input.Value = CDbl(txtHenrysconstantvalue(Index).Text)
          Else
             EnglishValue = CDbl(txtHenrysconstantvalue(Index).Text)
             Call HCENSI(SIValue, EnglishValue)
             phprop.HenrysConstant.input.Value = SIValue
          End If

          PROPAVAILABLE(HENRYS_CONSTANT_INPUT) = True
       Else
       Call LostFocus_Handle(Me, txtHenrysconstantvalue(Index), flag_ok)
          Exit Sub
       End If
    End If
       Call LostFocus_Handle(Me, txtHenrysconstantvalue(Index), flag_ok)
End Sub

VERSION 5.00
Begin VB.Form Infinite_dilution_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Infinite Dilution Activity Coefficient"
   ClientHeight    =   3780
   ClientLeft      =   1530
   ClientTop       =   3900
   ClientWidth     =   8850
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form2"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   3780
   ScaleWidth      =   8850
   Begin VB.ComboBox cboUNIFACParameterSet 
      Appearance      =   0  'Flat
      Height          =   288
      Left            =   3720
      Style           =   2  'Dropdown List
      TabIndex        =   6
      Top             =   3240
      Width           =   4932
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Activity Coefficient"
      Height          =   615
      Left            =   5040
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   5040
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFFFF&
      ForeColor       =   &H00000000&
      Height          =   240
      Index           =   1
      Left            =   1560
      TabIndex        =   2
      Top             =   2400
      Width           =   240
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   1212
      Left            =   1440
      Top             =   1680
      Width           =   5892
   End
   Begin VB.Label Label2 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC Group Interaction Database:"
      ForeColor       =   &H80000008&
      Height          =   252
      Left            =   240
      TabIndex        =   15
      Top             =   3240
      Width           =   3252
   End
   Begin VB.Shape Shape2 
      BorderWidth     =   2
      Height          =   492
      Left            =   120
      Top             =   3120
      Width           =   8652
   End
   Begin VB.Label lblACTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6120
      TabIndex        =   5
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblActivityCoefficientValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4080
      TabIndex        =   4
      Top             =   2400
      Width           =   1812
   End
   Begin VB.Line Line2 
      X1              =   1440
      X2              =   7320
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   1920
      TabIndex        =   3
      Top             =   2400
      Width           =   1932
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Activity Coefficient Information"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   480
      TabIndex        =   14
      Top             =   240
      Width           =   4092
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   480
      TabIndex        =   13
      Top             =   720
      Width           =   1932
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   480
      TabIndex        =   12
      Top             =   1080
      Width           =   1932
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   2640
      TabIndex        =   11
      Top             =   1080
      Width           =   1932
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   2640
      TabIndex        =   7
      Top             =   720
      Width           =   1932
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1332
      Left            =   360
      Top             =   120
      Width           =   4332
   End
   Begin VB.Line Line1 
      X1              =   360
      X2              =   4680
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Label lblACLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Activity Coefficient"
      ForeColor       =   &H00000000&
      Height          =   400
      Left            =   4080
      TabIndex        =   10
      Top             =   1750
      Width           =   1812
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   1920
      TabIndex        =   9
      Top             =   1800
      Width           =   1932
   End
   Begin VB.Label lblACTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   6120
      TabIndex        =   8
      Top             =   1800
      Width           =   972
   End
End
Attribute VB_Name = "Infinite_dilution_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim BIP_DB_When_ActCoeff_Window_Opened As Integer

Private Sub cboUNIFACParameterSet_Click()
    If Infinite_dilution_form!cboUNIFACParameterSet.ListCount = 1 Then Exit Sub

    Select Case Infinite_dilution_form!cboUNIFACParameterSet.ListIndex
       Case 0   'Original UNIFAC VLE
            If phprop.ActivityCoefficient.BinaryInteractionParameterDatabase <> 1 Then
               If phprop.ActivityCoefficient.BinaryInteractionParameterDBAvailable(1) = False Then
                  MsgBox "Original UNIFAC VLE not available to calculate activity coefficient for this compound.", MB_ICONSTOP, "Data Not Available"
                  Infinite_dilution_form!cboUNIFACParameterSet.ListIndex = phprop.ActivityCoefficient.PreviousBinaryInteractionParameterDB - 1
                  Exit Sub
               End If
               phprop.ActivityCoefficient.PreviousBinaryInteractionParameterDB = phprop.ActivityCoefficient.BinaryInteractionParameterDatabase
               phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = 1
               UserSelectedTheUnifacBIPDBActCoeff = True
               Screen.MousePointer = 11   'Hourglass
               Call CalculateActivityCoefficient
               Screen.MousePointer = 0    'Arrow
            End If
       Case 1   'UNIFAC LLE
               If phprop.ActivityCoefficient.BinaryInteractionParameterDBAvailable(2) = False Then
                  MsgBox "UNIFAC LLE not available to calculate activity coefficient for this compound.", MB_ICONSTOP, "Data Not Available"
                  Infinite_dilution_form!cboUNIFACParameterSet.ListIndex = phprop.ActivityCoefficient.PreviousBinaryInteractionParameterDB - 1
                  Exit Sub
               End If
            If phprop.ActivityCoefficient.BinaryInteractionParameterDatabase <> 2 Then
               phprop.ActivityCoefficient.PreviousBinaryInteractionParameterDB = phprop.ActivityCoefficient.BinaryInteractionParameterDatabase
               phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = 2
               UserSelectedTheUnifacBIPDBActCoeff = True
               Screen.MousePointer = 11  'Hourglass
               Call CalculateActivityCoefficient
               Screen.MousePointer = 0   'Arrow
            End If
       Case 2   'Environmental VLE
               If phprop.ActivityCoefficient.BinaryInteractionParameterDBAvailable(3) = False Then
                  MsgBox "Environmental VLE not available to calculate activity coefficient for this compound.", MB_ICONSTOP, "Data Not Available"
                  Infinite_dilution_form!cboUNIFACParameterSet.ListIndex = phprop.ActivityCoefficient.PreviousBinaryInteractionParameterDB - 1
                  Exit Sub
               End If
            If phprop.ActivityCoefficient.BinaryInteractionParameterDatabase <> 3 Then
               phprop.ActivityCoefficient.PreviousBinaryInteractionParameterDB = phprop.ActivityCoefficient.BinaryInteractionParameterDatabase
               phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = 3
               UserSelectedTheUnifacBIPDBActCoeff = True
               Screen.MousePointer = 11    'Hourglass
               Call CalculateActivityCoefficient
               Screen.MousePointer = 0     'Arrow
            End If
    End Select

End Sub

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.ActivityCoefficient.CurrentSelection.choice
       Case ACTIVITY_COEFFICIENT_UNIFAC
          SelectedOption = 1
       Case Else
          Infinite_dilution_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    Infinite_dilution_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 1
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = ACTIVITY_COEFFICIENT_UNIFAC
    End Select

    If ValueToDisplayIndex <> phprop.ActivityCoefficient.CurrentSelection.choice Then
       phprop.ActivityCoefficient.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayActivityCoefficientMainScreen(ValueToDisplayIndex)
    End If

    Infinite_dilution_form.Hide

'Recalculate Henry's Constant using new activity coefficient 'if UNIFAC parameter set has changed

          If phprop.ActivityCoefficient.BinaryInteractionParameterDatabase = BIP_DB_When_ActCoeff_Window_Opened Then Exit Sub

'          frmWaitForCalculations.Show
'          frmWaitForCalculations.Refresh

          contam_prop_form!lblContaminantProperties(2).Caption = ""

          Screen.MousePointer = 11   'Hourglass

          Call CalculateHenrysConstant
          contam_prop_form.Refresh

          Screen.MousePointer = 0    'Arrow

'          frmWaitForCalculations.Hide

          NumContaminantInList = contam_prop_form!cboSelectContaminant.ListIndex + 1
          PropContaminant(NumContaminantInList) = phprop

End Sub

Private Sub Form_Activate()

  Call centerform_relative(contam_prop_form, Me)

       BIP_DB_When_ActCoeff_Window_Opened = phprop.ActivityCoefficient.BinaryInteractionParameterDatabase

       Infinite_dilution_form!cboUNIFACParameterSet.Clear
       Infinite_dilution_form!cboUNIFACParameterSet.AddItem "Original UNIFAC VLE"
       Infinite_dilution_form!cboUNIFACParameterSet.AddItem "UNIFAC LLE"
       Infinite_dilution_form!cboUNIFACParameterSet.AddItem "Environmental VLE"
       If Not Infinite_dilution_form!cboUNIFACParameterSet.Enabled Then Infinite_dilution_form!cboUNIFACParameterSet.Enabled = True
    
    Select Case phprop.ActivityCoefficient.BinaryInteractionParameterDatabase
       Case 1
            Infinite_dilution_form!cboUNIFACParameterSet.ListIndex = 0
       Case 2
            Infinite_dilution_form!cboUNIFACParameterSet.ListIndex = 1
       Case 3
            Infinite_dilution_form!cboUNIFACParameterSet.ListIndex = 2
       Case 0
            Infinite_dilution_form!cboUNIFACParameterSet.Clear
            Infinite_dilution_form!cboUNIFACParameterSet.AddItem "UNIFAC Activity Coefficient Calculation Not Possible"
            Infinite_dilution_form!cboUNIFACParameterSet.ListIndex = 0
            Infinite_dilution_form!cboUNIFACParameterSet.Enabled = False
    End Select

End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)
    
    If (DemoMode) Then cmdok.Enabled = False


End Sub

Private Sub lblActivityCoefficientValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0   'UNIFAC
          ErrorFlag = phprop.ActivityCoefficient.UNIFAC.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblSourceLabel_Click(Index As Integer)
    Dim i As Integer

    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.ActivityCoefficient.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.ActivityCoefficient.PreviousIndex Then Exit Sub
    lblSourceLabel(SourceIndex).BackColor = &H800000
    lblSourceLabel(SourceIndex).ForeColor = &H80000005
    i = hilight.ActivityCoefficient.PreviousIndex
    hilight.ActivityCoefficient.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSourceLabel(i).BackColor = &H80000005
    lblSourceLabel(i).ForeColor = &H80000008

End Sub

VERSION 5.00
Begin VB.Form ldens_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Liquid Density"
   ClientHeight    =   4410
   ClientLeft      =   1035
   ClientTop       =   1515
   ClientWidth     =   8565
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form6"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   4410
   ScaleWidth      =   8565
   Begin VB.TextBox txtLDmaximumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   2
      Left            =   7320
      TabIndex        =   19
      Text            =   "No Visible"
      Top             =   3360
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtLDminimumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   2
      Left            =   6240
      TabIndex        =   18
      Text            =   "No Visible"
      Top             =   3360
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtLDTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   2
      Left            =   5040
      TabIndex        =   17
      Top             =   3360
      Width           =   975
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Liquid Density"
      Height          =   615
      Left            =   4920
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.TextBox txtLiquidDensityValue 
      Appearance      =   0  'Flat
      Height          =   288
      Index           =   2
      Left            =   3240
      TabIndex        =   16
      Top             =   3360
      Width           =   1572
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   2
      Left            =   240
      TabIndex        =   8
      Top             =   2880
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   3
      Left            =   240
      TabIndex        =   14
      Top             =   3360
      Width           =   252
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   1
      Left            =   240
      TabIndex        =   2
      Top             =   2400
      Width           =   252
   End
   Begin VB.Label Label1 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   $"ldens.frx":0000
      ForeColor       =   &H80000008&
      Height          =   400
      Left            =   120
      TabIndex        =   30
      Top             =   3960
      Width           =   8295
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   2172
      Left            =   120
      Top             =   1680
      Width           =   8292
   End
   Begin VB.Label lblLDmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   7320
      TabIndex        =   13
      Top             =   2880
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblLDmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   7320
      TabIndex        =   7
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblLDminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   6240
      TabIndex        =   12
      Top             =   2880
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblLDminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6240
      TabIndex        =   6
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblLDTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   5040
      TabIndex        =   11
      Top             =   2880
      Width           =   972
   End
   Begin VB.Label lblLDTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   5040
      TabIndex        =   5
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblLiquidDensityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   3180
      TabIndex        =   10
      Top             =   2880
      Width           =   1575
   End
   Begin VB.Label lblLiquidDensityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   3240
      TabIndex        =   4
      Top             =   2400
      Width           =   1572
   End
   Begin VB.Label lblLDensminTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmin"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   6240
      TabIndex        =   29
      Top             =   1800
      Width           =   972
   End
   Begin VB.Label lblLDensmaxTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmax"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   7320
      TabIndex        =   28
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblLDensTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   5040
      TabIndex        =   27
      Top             =   1800
      Width           =   972
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Liquid Density Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   26
      Top             =   240
      Width           =   4095
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   25
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   24
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   23
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   22
      Top             =   720
      Width           =   2295
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Label lblLDensLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Liq. Dens."
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   3240
      TabIndex        =   21
      Top             =   1800
      Width           =   1572
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   600
      TabIndex        =   20
      Top             =   1800
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Database"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   0
      Left            =   600
      TabIndex        =   3
      Top             =   2400
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Group Contribution Method"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   1
      Left            =   600
      TabIndex        =   9
      Top             =   2880
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   2
      Left            =   600
      TabIndex        =   15
      Top             =   3360
      Width           =   2415
   End
   Begin VB.Line Line2 
      X1              =   120
      X2              =   8400
      Y1              =   2160
      Y2              =   2160
   End
End
Attribute VB_Name = "ldens_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastLDensInputValue As String
Dim PastLDensInputTemp As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.LiquidDensity.CurrentSelection.choice
       Case LIQUID_DENSITY_DATABASE
          SelectedOption = 1
       Case LIQUID_DENSITY_UNIFAC
          SelectedOption = 2
       Case LIQUID_DENSITY_INPUT
          SelectedOption = 3
          txtliquiddensityvalue(2).Text = PastLDensInputValue
          txtldtemperature(2).Text = PastLDensInputTemp
       Case Else
          ldens_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    ldens_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 3
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = LIQUID_DENSITY_DATABASE
       Case 2
          ValueToDisplayIndex = LIQUID_DENSITY_UNIFAC
       Case 3
          If Not PROPAVAILABLE(LIQUID_DENSITY_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtliquiddensityvalue(2).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = LIQUID_DENSITY_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.LiquidDensity.CurrentSelection.choice Then
       phprop.LiquidDensity.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayLiquidDensityMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = LIQUID_DENSITY_INPUT Then
       Call DisplayLiquidDensityMainScreen(ValueToDisplayIndex)
    End If

    ldens_form.Hide

End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastLDensInputValue = txtliquiddensityvalue(2).Text
    PastLDensInputTemp = txtldtemperature(2).Text
End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)

    If (DemoMode) Then cmdok.Enabled = False


End Sub

Private Sub lblLDmaximumT_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblLDminimumT_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblLDTemperature_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblLiquidDensityValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0  'Source = Database
          ErrorFlag = phprop.LiquidDensity.database.error
       Case 1  'Source = Group Contribution Method
          ErrorFlag = phprop.LiquidDensity.UNIFAC.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.LiquidDensity.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.LiquidDensity.PreviousIndex
    hilight.LiquidDensity.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtLDmaximumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtldmaximumT(Index), Temp_Text)

End Sub

Private Sub txtLDmaximumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 2 Then keyascii = 0
End Sub

Private Sub txtLDmaximumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtldmaximumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtldmaximumT(Index), flag_ok)

End Sub

Private Sub txtLDminimimumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 2 Then keyascii = 0
End Sub

Private Sub txtLDminimumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtldminimumT(Index), Temp_Text)

End Sub

Private Sub txtLDminimumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtldminimumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtldminimumT(Index), flag_ok)

End Sub

Private Sub txtLDTemperature_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtldtemperature(Index), Temp_Text)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtLDTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtLDTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtldtemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtldtemperature(Index).Text = "" Then
       phprop.LiquidDensity.input.temperature = -1E+25
       Call LostFocus_Handle(Me, txtldtemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtldtemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtldtemperature(Index).Text)) Then
          txtldtemperature(Index).Text = Temp_Text
          txtldtemperature(Index).SetFocus
          Call LostFocus_Handle(Me, txtldtemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtldtemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.LiquidDensity.input.temperature = CDbl(txtldtemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtldtemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.LiquidDensity.input.temperature = SIValue
          End If
          
       Else
          Call LostFocus_Handle(Me, txtldtemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
  Call LostFocus_Handle(Me, txtldtemperature(Index), flag_ok)

End Sub

Private Sub txtLiquidDensityValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtliquiddensityvalue(Index), Temp_Text)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtLiquidDensityValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txtldtemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
    
End Sub

Private Sub txtLiquidDensityValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtliquiddensityvalue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtliquiddensityvalue(Index).Text = "" Then
       phprop.LiquidDensity.input.Value = -1#
       PROPAVAILABLE(LIQUID_DENSITY_INPUT) = False
       Call LostFocus_Handle(Me, txtliquiddensityvalue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtliquiddensityvalue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtliquiddensityvalue(Index).Text)) Then
          txtliquiddensityvalue(Index).Text = Temp_Text
          txtliquiddensityvalue(Index).SetFocus
          Call LostFocus_Handle(Me, txtliquiddensityvalue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtliquiddensityvalue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.LiquidDensity.input.Value = CDbl(txtliquiddensityvalue(Index).Text)
          Else
             EnglishValue = CDbl(txtliquiddensityvalue(Index).Text)
             Call LDENENSI(SIValue, EnglishValue)
             phprop.LiquidDensity.input.Value = SIValue
          End If

          PROPAVAILABLE(LIQUID_DENSITY_INPUT) = True
       Else
          Call LostFocus_Handle(Me, txtliquiddensityvalue(Index), flag_ok)
          Exit Sub
       End If
    End If
       Call LostFocus_Handle(Me, txtliquiddensityvalue(Index), flag_ok)

End Sub

VERSION 5.00
Begin VB.Form liquid_diff_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Liquid Diffusivity"
   ClientHeight    =   4515
   ClientLeft      =   480
   ClientTop       =   1905
   ClientWidth     =   8490
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form3"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   4515
   ScaleWidth      =   8490
   Begin VB.TextBox txtLiqDiffTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   3
      Left            =   6120
      TabIndex        =   17
      Top             =   3840
      Width           =   1215
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   4
      Left            =   1080
      TabIndex        =   14
      Top             =   3840
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   3
      Left            =   1080
      TabIndex        =   10
      Top             =   3360
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   1080
      TabIndex        =   6
      Top             =   2880
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   1080
      TabIndex        =   2
      Top             =   2400
      Width           =   255
   End
   Begin VB.TextBox txtLiquidDiffusivityValue 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   3
      Left            =   4080
      TabIndex        =   16
      Top             =   3840
      Width           =   1815
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Liquid Diffusivity"
      Height          =   615
      Left            =   4920
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   2652
      Left            =   960
      Top             =   1680
      Width           =   6492
   End
   Begin VB.Label lblLiqDiffTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   6120
      TabIndex        =   13
      Top             =   3360
      Width           =   1212
   End
   Begin VB.Label lblLiqDiffTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   6120
      TabIndex        =   9
      Top             =   2880
      Width           =   1212
   End
   Begin VB.Label lblLiqDiffTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6120
      TabIndex        =   5
      Top             =   2400
      Width           =   1212
   End
   Begin VB.Label lblLiquidDiffusivityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   4080
      TabIndex        =   12
      Top             =   3360
      Width           =   1812
   End
   Begin VB.Label lblLiquidDiffusivityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   4080
      TabIndex        =   8
      Top             =   2880
      Width           =   1812
   End
   Begin VB.Label lblLiquidDiffusivityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4080
      TabIndex        =   4
      Top             =   2400
      Width           =   1812
   End
   Begin VB.Line Line2 
      X1              =   960
      X2              =   7440
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   3
      Left            =   1440
      TabIndex        =   15
      Top             =   3840
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Wilke-Chang"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   2
      Left            =   1440
      TabIndex        =   11
      Top             =   3360
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Polson, 1950"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   1
      Left            =   1440
      TabIndex        =   7
      Top             =   2880
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Hayduk and Laudie"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   0
      Left            =   1440
      TabIndex        =   3
      Top             =   2400
      Width           =   2415
   End
   Begin VB.Label lblLiqDiffTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   6120
      TabIndex        =   25
      Top             =   1800
      Width           =   1215
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   1440
      TabIndex        =   24
      Top             =   1800
      Width           =   2415
   End
   Begin VB.Label lblLiqDiffLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Liquid Diff."
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   4080
      TabIndex        =   23
      Top             =   1800
      Width           =   1815
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   22
      Top             =   720
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   21
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   20
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   19
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Liquid Diffusivity Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   18
      Top             =   240
      Width           =   4095
   End
End
Attribute VB_Name = "liquid_diff_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastLiqDiffInputValue As String
Dim PastLiqDiffInputTemp As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.LiquidDiffusivity.CurrentSelection.choice
       Case LIQUID_DIFFUSIVITY_HAYDUKLAUDIE
          SelectedOption = 1
       Case LIQUID_DIFFUSIVITY_POLSON
          SelectedOption = 2
       Case LIQUID_DIFFUSIVITY_WILKECHANG
          SelectedOption = 3
       Case LIQUID_DIFFUSIVITY_INPUT
          SelectedOption = 4
          txtLiquidDiffusivityvalue(3).Text = PastLiqDiffInputValue
          txtliqdifftemperature(3).Text = PastLiqDiffInputTemp
       Case Else
          liquid_diff_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    liquid_diff_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 4
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = LIQUID_DIFFUSIVITY_HAYDUKLAUDIE
       Case 2
          ValueToDisplayIndex = LIQUID_DIFFUSIVITY_POLSON
       Case 3
          ValueToDisplayIndex = LIQUID_DIFFUSIVITY_WILKECHANG
       Case 4
          If Not PROPAVAILABLE(LIQUID_DIFFUSIVITY_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtLiquidDiffusivityvalue(3).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = LIQUID_DIFFUSIVITY_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.LiquidDiffusivity.CurrentSelection.choice Then
       phprop.LiquidDiffusivity.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayLiquidDiffusivityMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = LIQUID_DIFFUSIVITY_INPUT Then
       Call DisplayLiquidDiffusivityMainScreen(ValueToDisplayIndex)
    End If

    liquid_diff_form.Hide

End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastLiqDiffInputValue = txtLiquidDiffusivityvalue(3).Text
    PastLiqDiffInputTemp = txtliqdifftemperature(3).Text
End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)

    If (DemoMode) Then cmdok.Enabled = False


End Sub

Private Sub lblLiqDiffTemperature_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDiffusivity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblLiquidDiffusivityValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDiffusivity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0  'Source = Hayduk & Laudie Correlation
          ErrorFlag = phprop.LiquidDiffusivity.haydukLaudie.error
       Case 1  'Source = Polson Method
          ErrorFlag = phprop.LiquidDiffusivity.polson.error
       Case 2  'Source = Wilke-Chang Correlation
          ErrorFlag = phprop.LiquidDiffusivity.wilkeChang.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDiffusivity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.LiquidDiffusivity.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.LiquidDiffusivity.PreviousIndex
    hilight.LiquidDiffusivity.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtLiqDiffTemperature_GotFocus(Index As Integer)

  Call gotfocus_handle(Me, txtliqdifftemperature(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDiffusivity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub txtLiqDiffTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)

End Sub

Private Sub txtLiqDiffTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtliqdifftemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtliqdifftemperature(Index).Text = "" Then
       phprop.LiquidDiffusivity.input.temperature = -1E+25
        Call LostFocus_Handle(Me, txtliqdifftemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtliqdifftemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtliqdifftemperature(Index).Text)) Then
          txtliqdifftemperature(Index).Text = Temp_Text
          txtliqdifftemperature(Index).SetFocus
        Call LostFocus_Handle(Me, txtliqdifftemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtliqdifftemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.LiquidDiffusivity.input.temperature = CDbl(txtliqdifftemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtliqdifftemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.LiquidDiffusivity.input.temperature = SIValue
          End If
          
       Else
        Call LostFocus_Handle(Me, txtliqdifftemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
        Call LostFocus_Handle(Me, txtliqdifftemperature(Index), flag_ok)

End Sub

Private Sub txtLiquidDiffusivityValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtLiquidDiffusivityvalue(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.LiquidDiffusivity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub txtLiquidDiffusivityValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txtliqdifftemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtLiquidDiffusivityValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtLiquidDiffusivityvalue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtLiquidDiffusivityvalue(Index).Text = "" Then
       phprop.LiquidDiffusivity.input.Value = -1#
       PROPAVAILABLE(LIQUID_DIFFUSIVITY_INPUT) = False
       Call LostFocus_Handle(Me, txtLiquidDiffusivityvalue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtLiquidDiffusivityvalue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtLiquidDiffusivityvalue(Index).Text)) Then
          txtLiquidDiffusivityvalue(Index).Text = Temp_Text
          txtLiquidDiffusivityvalue(Index).SetFocus
       Call LostFocus_Handle(Me, txtLiquidDiffusivityvalue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtLiquidDiffusivityvalue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.LiquidDiffusivity.input.Value = CDbl(txtLiquidDiffusivityvalue(Index).Text)
          Else
             EnglishValue = CDbl(txtLiquidDiffusivityvalue(Index).Text)
             Call LDIFENSI(SIValue, EnglishValue)
             phprop.LiquidDiffusivity.input.Value = SIValue
          End If
         
          PROPAVAILABLE(LIQUID_DIFFUSIVITY_INPUT) = True
       Else
          Call LostFocus_Handle(Me, txtLiquidDiffusivityvalue(Index), flag_ok)
          Exit Sub
       End If
    End If
       Call LostFocus_Handle(Me, txtLiquidDiffusivityvalue(Index), flag_ok)

End Sub

VERSION 5.00
Begin VB.Form molar_vol_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Molar Volume at Operating Temperature"
   ClientHeight    =   4005
   ClientLeft      =   675
   ClientTop       =   1995
   ClientWidth     =   8535
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form7"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   4005
   ScaleWidth      =   8535
   Begin VB.TextBox txtMVOpTmaximumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   2
      Left            =   7380
      TabIndex        =   8
      Text            =   "not visible"
      Top             =   3360
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtMVOpTminimumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   2
      Left            =   6240
      TabIndex        =   7
      Text            =   "not visible"
      Top             =   3360
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtMVOpTTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   2
      Left            =   5160
      TabIndex        =   6
      Top             =   3360
      Width           =   975
   End
   Begin VB.TextBox txtMolarVolumeOpTValue 
      Appearance      =   0  'Flat
      Height          =   288
      Index           =   2
      Left            =   3240
      TabIndex        =   5
      Top             =   3360
      Width           =   1812
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Molar Volume"
      Height          =   615
      Left            =   4920
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   2
      Left            =   240
      TabIndex        =   2
      Top             =   2880
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   3
      Left            =   240
      TabIndex        =   3
      Top             =   3360
      Width           =   285
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      Caption         =   "0"
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   1
      Left            =   240
      TabIndex        =   9
      Top             =   2400
      Width           =   255
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   2172
      Left            =   120
      Top             =   1680
      Width           =   8292
   End
   Begin VB.Label lblMVOpTmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   7320
      TabIndex        =   29
      Top             =   2880
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblMVOpTmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   7320
      TabIndex        =   28
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblMVOpTminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   6240
      TabIndex        =   27
      Top             =   2880
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblMVOpTminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6240
      TabIndex        =   26
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblMVOpTTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   5160
      TabIndex        =   25
      Top             =   2880
      Width           =   972
   End
   Begin VB.Label lblMVOpTTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   5160
      TabIndex        =   24
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblMolarVolumeOpTValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   3240
      TabIndex        =   23
      Top             =   2880
      Width           =   1812
   End
   Begin VB.Label lblMolarVolumeOpTValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   3240
      TabIndex        =   22
      Top             =   2400
      Width           =   1812
   End
   Begin VB.Label lblMVOpTminTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmin"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   6240
      TabIndex        =   21
      Top             =   1800
      Width           =   972
   End
   Begin VB.Label lblMVOpTMaxTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmax"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   7320
      TabIndex        =   20
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblMVOpTTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   5160
      TabIndex        =   19
      Top             =   1800
      Width           =   972
   End
   Begin VB.Line Line2 
      X1              =   120
      X2              =   8400
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   2
      Left            =   600
      TabIndex        =   4
      Top             =   3360
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Group Contribution Method"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   1
      Left            =   600
      TabIndex        =   18
      Top             =   2880
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Database"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   0
      Left            =   600
      TabIndex        =   17
      Top             =   2400
      Width           =   2415
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   600
      TabIndex        =   16
      Top             =   1800
      Width           =   2415
   End
   Begin VB.Label lblMVOpTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Molar Vol."
      ForeColor       =   &H00000000&
      Height          =   400
      Left            =   3240
      TabIndex        =   15
      Top             =   1750
      Width           =   1812
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   14
      Top             =   720
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   13
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   12
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   11
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Molar Volume (Operating T)  Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   10
      Top             =   240
      Width           =   4095
   End
End
Attribute VB_Name = "molar_vol_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastMVopTInputValue As String
Dim PastMVopTInputTemp As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.MolarVolume.operatingT.CurrentSelection.choice
       Case MOLAR_VOLUME_OPT_DATABASE
          SelectedOption = 1
       Case MOLAR_VOLUME_OPT_UNIFAC
          SelectedOption = 2
       Case MOLAR_VOLUME_OPT_INPUT
          SelectedOption = 3
          txtMolarVolumeOPTvalue(2).Text = PastMVopTInputValue
          txtmvOPTTemperature(2).Text = PastMVopTInputTemp
       Case Else
          molar_vol_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    molar_vol_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 3
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = MOLAR_VOLUME_OPT_DATABASE
       Case 2
          ValueToDisplayIndex = MOLAR_VOLUME_OPT_UNIFAC
       Case 3
          If Not PROPAVAILABLE(MOLAR_VOLUME_OPT_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtMolarVolumeOPTvalue(2).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = MOLAR_VOLUME_OPT_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.MolarVolume.operatingT.CurrentSelection.choice Then
       phprop.MolarVolume.operatingT.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayMolarVolumeOpTMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = MOLAR_VOLUME_OPT_INPUT Then
       Call DisplayMolarVolumeOpTMainScreen(ValueToDisplayIndex)
    End If

    molar_vol_form.Hide

End Sub

Private Sub Form_Activate()

  Call centerform_relative(contam_prop_form, Me)

    PastMVopTInputValue = txtMolarVolumeOPTvalue(2).Text
    PastMVopTInputTemp = txtmvOPTTemperature(2).Text
End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)
    
    If (DemoMode) Then cmdok.Enabled = False

End Sub

Private Sub lblMolarVolumeOpTValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeOperatingT.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0  'Source = Database
          ErrorFlag = phprop.MolarVolume.operatingT.database.error
       Case 1  'Source = Group Contribution Method
          ErrorFlag = phprop.MolarVolume.operatingT.UNIFAC.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblMVOpTmaximumT_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeOperatingT.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblMVOpTminimumT_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeOperatingT.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblMVOpTTemperature_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeOperatingT.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeOperatingT.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.MolarVolumeOperatingT.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.MolarVolumeOperatingT.PreviousIndex
    hilight.MolarVolumeOperatingT.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtMolarVolumeOpTValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtMolarVolumeOPTvalue(Index), Temp_Text)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeOperatingT.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub txtMolarVolumeOpTValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txtmvOPTTemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
    
End Sub

Private Sub txtMolarVolumeOpTValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtMolarVolumeOPTvalue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtMolarVolumeOPTvalue(Index).Text = "" Then
       phprop.MolarVolume.operatingT.input.Value = -1#
       PROPAVAILABLE(MOLAR_VOLUME_OPT_INPUT) = False
       Call LostFocus_Handle(Me, txtMolarVolumeOPTvalue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtMolarVolumeOPTvalue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtMolarVolumeOPTvalue(Index).Text)) Then
          txtMolarVolumeOPTvalue(Index).Text = Temp_Text
          txtMolarVolumeOPTvalue(Index).SetFocus
          Call LostFocus_Handle(Me, txtMolarVolumeOPTvalue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtMolarVolumeOPTvalue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.MolarVolume.operatingT.input.Value = CDbl(txtMolarVolumeOPTvalue(Index).Text)
          Else
             EnglishValue = CDbl(txtMolarVolumeOPTvalue(Index).Text)
             Call MVOTENSI(SIValue, EnglishValue)
             phprop.MolarVolume.operatingT.input.Value = SIValue
          End If
          
          PROPAVAILABLE(MOLAR_VOLUME_OPT_INPUT) = True
       Else
          Call LostFocus_Handle(Me, txtMolarVolumeOPTvalue(Index), flag_ok)
          Exit Sub
       End If
    End If
    
    Call LostFocus_Handle(Me, txtMolarVolumeOPTvalue(Index), flag_ok)
End Sub

Private Sub txtMVOpTemperature_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 2 Then keyascii = 0
End Sub

Private Sub txtMVOpTmaximumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtmvOPTmaximumT(Index), Temp_Text)

End Sub

Private Sub txtMVOpTmaximumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 2 Then keyascii = 0
End Sub

Private Sub txtMVOpTmaximumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtmvOPTmaximumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtmvOPTmaximumT(Index), flag_ok)

End Sub

Private Sub txtMVOpTminimimumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 2 Then keyascii = 0
End Sub

Private Sub txtMVOpTminimumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtmvOPTminimumt(Index), Temp_Text)

End Sub

Private Sub txtMVOpTminimumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtmvOPTminimumt(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtmvOPTminimumt(Index), flag_ok)

End Sub

Private Sub txtMVOpTTemperature_GotFocus(Index As Integer)

  Call gotfocus_handle(Me, txtmvOPTTemperature(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeOperatingT.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtMVOpTTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)

End Sub

Private Sub txtMVOpTTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtmvOPTTemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtmvOPTTemperature(Index).Text = "" Then
        phprop.MolarVolume.operatingT.input.temperature = -1E+25
        Call LostFocus_Handle(Me, txtmvOPTTemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtmvOPTTemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtmvOPTTemperature(Index).Text)) Then
          txtmvOPTTemperature(Index).Text = Temp_Text
          txtmvOPTTemperature(Index).SetFocus
          Call LostFocus_Handle(Me, txtmvOPTTemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtmvOPTTemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.MolarVolume.operatingT.input.temperature = CDbl(txtmvOPTTemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtmvOPTTemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.MolarVolume.operatingT.input.temperature = SIValue
          End If

       Else
        Call LostFocus_Handle(Me, txtmvOPTTemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
        Call LostFocus_Handle(Me, txtmvOPTTemperature(Index), flag_ok)

End Sub

VERSION 5.00
Begin VB.Form mv_nbp_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Molar Volume at Normal Boiling Point"
   ClientHeight    =   3510
   ClientLeft      =   1230
   ClientTop       =   4620
   ClientWidth     =   8505
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form8"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   3510
   ScaleWidth      =   8505
   Begin VB.TextBox txtMVNBPTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   6240
      TabIndex        =   9
      Top             =   2880
      Width           =   975
   End
   Begin VB.TextBox txtMolarVolumeNBPValue 
      Appearance      =   0  'Flat
      Height          =   288
      Index           =   1
      Left            =   4080
      TabIndex        =   8
      Top             =   2880
      Width           =   1932
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Molar Volume"
      Height          =   615
      Left            =   4920
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   2
      Left            =   1080
      TabIndex        =   6
      Top             =   2880
      Width           =   225
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   1
      Left            =   1080
      TabIndex        =   2
      Top             =   2400
      Width           =   225
   End
   Begin VB.Label lblMVNBPTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6240
      TabIndex        =   5
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblMolarVolumeNBPValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4080
      TabIndex        =   4
      Top             =   2400
      Width           =   1932
   End
   Begin VB.Line Line2 
      X1              =   960
      X2              =   7440
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   1692
      Left            =   960
      Top             =   1680
      Width           =   6492
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Schroeder's Method"
      ForeColor       =   &H00000000&
      Height          =   252
      Index           =   0
      Left            =   1440
      TabIndex        =   3
      Top             =   2400
      Width           =   2412
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   252
      Index           =   1
      Left            =   1440
      TabIndex        =   7
      Top             =   2880
      Width           =   2412
   End
   Begin VB.Label lblMVNBPTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   6240
      TabIndex        =   17
      Top             =   1800
      Width           =   972
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   1440
      TabIndex        =   16
      Top             =   1800
      Width           =   2412
   End
   Begin VB.Label lblMVNBPLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Molar Vol."
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   4080
      TabIndex        =   15
      Top             =   1800
      Width           =   1932
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   14
      Top             =   720
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   13
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   12
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   11
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Molar Volume (NBP)  Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   10
      Top             =   240
      Width           =   4095
   End
End
Attribute VB_Name = "mv_nbp_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastMVNBPInputValue As String
Dim PastMVNBPInputTemp As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.MolarVolume.BoilingPoint.CurrentSelection.choice
       Case MOLAR_VOLUME_NBP_UNIFAC
          SelectedOption = 1
       Case MOLAR_VOLUME_NBP_INPUT
          SelectedOption = 2
          txtMolarVolumeNBPValue(1).Text = PastMVNBPInputValue
          txtMVNBPTemperature(1).Text = PastMVNBPInputTemp
       Case Else
          mv_nbp_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    mv_nbp_form.Hide

End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer
    Dim NumContaminantInList As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 2
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = MOLAR_VOLUME_NBP_UNIFAC
       Case 2
          If Not PROPAVAILABLE(MOLAR_VOLUME_NBP_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtMolarVolumeNBPValue(1).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = MOLAR_VOLUME_NBP_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.MolarVolume.BoilingPoint.CurrentSelection.choice Then
       phprop.MolarVolume.BoilingPoint.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayMolarVolumeNBPMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = MOLAR_VOLUME_NBP_INPUT Then
       Call DisplayMolarVolumeNBPMainScreen(ValueToDisplayIndex)
    End If

    mv_nbp_form.Hide

'Recalculate Properties using selected Molar Volume at NBP

'          frmWaitForCalculations.Show
'          frmWaitForCalculations.Refresh

          contam_prop_form!lblContaminantProperties(5).Caption = ""
          contam_prop_form!lblContaminantProperties(11).Caption = ""
          contam_prop_form!lblContaminantProperties(12).Caption = ""

          Screen.MousePointer = 11   'Hourglass

          Call CalculateLiquidDensity
          contam_prop_form.Refresh
          Call CalculateLiquidDiffusivity
          contam_prop_form.Refresh
          Call CalculateGasDiffusivity
          contam_prop_form.Refresh

          Screen.MousePointer = 0    'Arrow

'          frmWaitForCalculations.Hide

          NumContaminantInList = contam_prop_form!cboSelectContaminant.ListIndex + 1
          PropContaminant(NumContaminantInList) = phprop

End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastMVNBPInputValue = txtMolarVolumeNBPValue(1).Text
    PastMVNBPInputTemp = txtMVNBPTemperature(1).Text
End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)

    If (DemoMode) Then cmdok.Enabled = False


End Sub

Private Sub lblMolarVolumeNBPValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
0    Dim ErrorFlag As Integer
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeBoilingPoint.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0  'Source = Schroeder's Group Contribution Method
          ErrorFlag = phprop.MolarVolume.BoilingPoint.UNIFAC.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblMVNBPTemperature_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeBoilingPoint.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeBoilingPoint.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.MolarVolumeBoilingPoint.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.MolarVolumeBoilingPoint.PreviousIndex
    hilight.MolarVolumeBoilingPoint.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtMolarVolumeNBPValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtMolarVolumeNBPValue(Index), Temp_Text)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeBoilingPoint.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If


End Sub

Private Sub txtMolarVolumeNBPValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txtMVNBPTemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
  
End Sub

Private Sub txtMolarVolumeNBPValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
     Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtMolarVolumeNBPValue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtMolarVolumeNBPValue(Index).Text = "" Then
       phprop.MolarVolume.BoilingPoint.input.Value = -1#
       PROPAVAILABLE(MOLAR_VOLUME_NBP_INPUT) = False
       Call LostFocus_Handle(Me, txtMolarVolumeNBPValue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtMolarVolumeNBPValue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtMolarVolumeNBPValue(Index).Text)) Then
          txtMolarVolumeNBPValue(Index).Text = Temp_Text
          txtMolarVolumeNBPValue(Index).SetFocus
          Call LostFocus_Handle(Me, txtMolarVolumeNBPValue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtMolarVolumeNBPValue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.MolarVolume.BoilingPoint.input.Value = CDbl(txtMolarVolumeNBPValue(Index).Text)
          Else
             EnglishValue = CDbl(txtMolarVolumeNBPValue(Index).Text)
             Call MVBPENSI(SIValue, EnglishValue)
             phprop.MolarVolume.BoilingPoint.input.Value = SIValue
          End If
          
          PROPAVAILABLE(MOLAR_VOLUME_NBP_INPUT) = True
         Else
          Call LostFocus_Handle(Me, txtMolarVolumeNBPValue(Index), flag_ok)
          Exit Sub
       End If
    End If

  Call LostFocus_Handle(Me, txtMolarVolumeNBPValue(Index), flag_ok)
End Sub

Private Sub txtMVNBPTemperature_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtMVNBPTemperature(Index), Temp_Text)

    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolarVolumeBoilingPoint.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub txtMVNBPTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtMVNBPTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtMVNBPTemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtMVNBPTemperature(Index).Text = "" Then
       phprop.MolarVolume.BoilingPoint.input.temperature = -1E+25
       Call LostFocus_Handle(Me, txtMVNBPTemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtMVNBPTemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtMVNBPTemperature(Index).Text)) Then
          txtMVNBPTemperature(Index).Text = Temp_Text
          txtMVNBPTemperature(Index).SetFocus
       Call LostFocus_Handle(Me, txtMVNBPTemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtMVNBPTemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.MolarVolume.BoilingPoint.input.temperature = CDbl(txtMVNBPTemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtMVNBPTemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.MolarVolume.BoilingPoint.input.temperature = SIValue
          End If
          
       Else
       Call LostFocus_Handle(Me, txtMVNBPTemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
       Call LostFocus_Handle(Me, txtMVNBPTemperature(Index), flag_ok)

End Sub

VERSION 5.00
Begin VB.Form mwt_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Molecular Weight"
   ClientHeight    =   4035
   ClientLeft      =   600
   ClientTop       =   2115
   ClientWidth     =   8445
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form4"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   4035
   ScaleWidth      =   8445
   Begin VB.TextBox txtMolecularWeightValue 
      Appearance      =   0  'Flat
      Height          =   288
      Index           =   2
      Left            =   4920
      TabIndex        =   7
      Top             =   3360
      Width           =   2412
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4800
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Molecular Weight"
      Height          =   615
      Left            =   4800
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   3
      Left            =   1440
      TabIndex        =   6
      Top             =   3360
      Width           =   285
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   2
      Left            =   1440
      TabIndex        =   4
      Top             =   2880
      Width           =   285
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   1
      Left            =   1440
      TabIndex        =   2
      Top             =   2400
      Width           =   285
   End
   Begin VB.Label lblMolecularWeightValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   4920
      TabIndex        =   5
      Top             =   2880
      Width           =   2412
   End
   Begin VB.Label lblMolecularWeightValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4920
      TabIndex        =   3
      Top             =   2400
      Width           =   2412
   End
   Begin VB.Line Line2 
      X1              =   1320
      X2              =   7560
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   2175
      Left            =   1320
      Top             =   1740
      Width           =   6255
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   2
      Left            =   1800
      TabIndex        =   17
      Top             =   3360
      Width           =   2895
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Group Contribution Method"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   1
      Left            =   1800
      TabIndex        =   16
      Top             =   2880
      Width           =   2895
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Database"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   0
      Left            =   1800
      TabIndex        =   15
      Top             =   2400
      Width           =   2895
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   1800
      TabIndex        =   14
      Top             =   1800
      Width           =   2895
   End
   Begin VB.Label lblMWTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Molecular Weight"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   4920
      TabIndex        =   13
      Top             =   1800
      Width           =   2412
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4560
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1332
      Left            =   120
      Top             =   120
      Width           =   4452
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   2160
      TabIndex        =   12
      Top             =   720
      Width           =   2292
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   2160
      TabIndex        =   11
      Top             =   1080
      Width           =   2292
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   240
      TabIndex        =   10
      Top             =   1080
      Width           =   1692
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   240
      TabIndex        =   9
      Top             =   720
      Width           =   1692
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Molecular Weight Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   8
      Top             =   240
      Width           =   4095
   End
End
Attribute VB_Name = "mwt_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastMWTInputValue As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.MolecularWeight.CurrentSelection.choice
       Case MOLECULAR_WEIGHT_DATABASE
          SelectedOption = 1
       Case MOLECULAR_WEIGHT_UNIFAC
          SelectedOption = 2
       Case MOLECULAR_WEIGHT_INPUT
          SelectedOption = 3
          txtMolecularWeightValue(2).Text = PastMWTInputValue
       Case Else
          mwt_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    mwt_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer
    Dim NumContaminantInList As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 3
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = MOLECULAR_WEIGHT_DATABASE
       Case 2
          ValueToDisplayIndex = MOLECULAR_WEIGHT_UNIFAC
       Case 3
          If Not PROPAVAILABLE(MOLECULAR_WEIGHT_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtMolecularWeightValue(2).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = MOLECULAR_WEIGHT_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.MolecularWeight.CurrentSelection.choice Then
       phprop.MolecularWeight.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayMolecularWeightMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = HENRYS_CONSTANT_INPUT Then
       Call DisplayMolecularWeightMainScreen(ValueToDisplayIndex)
    End If

    mwt_form.Hide

'Recalculate Properties using selected Molecular Weight

'          frmWaitForCalculations.Show
'          frmWaitForCalculations.Refresh

          contam_prop_form!lblContaminantProperties(5).Caption = ""
          contam_prop_form!lblContaminantProperties(6).Caption = ""
          contam_prop_form!lblContaminantProperties(11).Caption = ""
          contam_prop_form!lblContaminantProperties(12).Caption = ""

          Screen.MousePointer = 11   'Hourglass

          Call CalculateLiquidDensity
          contam_prop_form.Refresh
          Call CalculateMolarVolumeOpT
          contam_prop_form.Refresh
          Call CalculateLiquidDiffusivity
          contam_prop_form.Refresh
          Call CalculateGasDiffusivity
          contam_prop_form.Refresh

          Screen.MousePointer = 0    'Arrow

'          frmWaitForCalculations.Hide

          NumContaminantInList = contam_prop_form!cboSelectContaminant.ListIndex + 1
          PropContaminant(NumContaminantInList) = phprop

End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastMWTInputValue = txtMolecularWeightValue(2).Text
End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)
    
    If (DemoMode) Then cmdok.Enabled = False


End Sub

Private Sub lblMolecularWeightValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolecularWeight.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0   'Database
          ErrorFlag = phprop.MolecularWeight.database.error
       Case 1   'Group Contribution Method
          ErrorFlag = phprop.MolecularWeight.UNIFAC.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblSourceLabel_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolecularWeight.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.MolecularWeight.PreviousIndex Then Exit Sub
    lblSourceLabel(SourceIndex).BackColor = &H800000
    lblSourceLabel(SourceIndex).ForeColor = &H80000005
    i = hilight.MolecularWeight.PreviousIndex
    hilight.MolecularWeight.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSourceLabel(i).BackColor = &H80000005
    lblSourceLabel(i).ForeColor = &H80000008

End Sub

Private Sub txtMolecularWeightValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtMolecularWeightValue(Index), Temp_Text)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.MolecularWeight.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtMolecularWeightValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
    
End Sub

Private Sub txtMolecularWeightValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtMolecularWeightValue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtMolecularWeightValue(Index).Text = "" Then
       phprop.MolecularWeight.input.Value = -1#
       PROPAVAILABLE(MOLECULAR_WEIGHT_INPUT) = False
         Call LostFocus_Handle(Me, txtMolecularWeightValue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtMolecularWeightValue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtMolecularWeightValue(Index).Text)) Then
          txtMolecularWeightValue(Index).Text = Temp_Text
          txtMolecularWeightValue(Index).SetFocus
         Call LostFocus_Handle(Me, txtMolecularWeightValue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtMolecularWeightValue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.MolecularWeight.input.Value = CDbl(txtMolecularWeightValue(Index).Text)
          Else
             EnglishValue = CDbl(txtMolecularWeightValue(Index).Text)
             Call MWENSI(SIValue, EnglishValue)
             phprop.MolecularWeight.input.Value = SIValue
          End If

          PROPAVAILABLE(MOLECULAR_WEIGHT_INPUT) = True
       Else
         Call LostFocus_Handle(Me, txtMolecularWeightValue(Index), flag_ok)
          Exit Sub
       End If
    End If
         Call LostFocus_Handle(Me, txtMolecularWeightValue(Index), flag_ok)

End Sub

VERSION 5.00
Begin VB.Form nbp_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Normal Boiling Point"
   ClientHeight    =   3585
   ClientLeft      =   615
   ClientTop       =   1725
   ClientWidth     =   8400
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form5"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   3585
   ScaleWidth      =   8400
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Normal Boiling Point"
      Height          =   615
      Left            =   4800
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4800
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.TextBox txtNormalBPValue 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   4920
      TabIndex        =   5
      Top             =   2880
      Width           =   2055
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   2
      Left            =   1440
      TabIndex        =   4
      Top             =   2880
      Width           =   285
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   1
      Left            =   1440
      TabIndex        =   2
      Top             =   2400
      Width           =   270
   End
   Begin VB.Label lblNormalBPValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4920
      TabIndex        =   3
      Top             =   2400
      Width           =   2052
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Normal Boiling Point Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   7
      Top             =   240
      Width           =   4095
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   14
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   13
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   12
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   11
      Top             =   720
      Width           =   2295
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Label lblNBPLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Normal Boiling Point"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   4920
      TabIndex        =   10
      Top             =   1800
      Width           =   2055
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   1800
      TabIndex        =   9
      Top             =   1800
      Width           =   2895
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Database"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   0
      Left            =   1800
      TabIndex        =   8
      Top             =   2400
      Width           =   2895
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   1
      Left            =   1800
      TabIndex        =   6
      Top             =   2880
      Width           =   2895
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   1695
      Left            =   1320
      Top             =   1680
      Width           =   5895
   End
   Begin VB.Line Line2 
      X1              =   1320
      X2              =   7200
      Y1              =   2160
      Y2              =   2160
   End
End
Attribute VB_Name = "nbp_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastBPInputValue As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.BoilingPoint.CurrentSelection.choice
       Case BOILING_POINT_DATABASE
          SelectedOption = 1
       Case BOILING_POINT_INPUT
          SelectedOption = 2
          txtNormalBPValue(1).Text = PastBPInputValue
       Case Else
          nbp_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    nbp_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer
    Dim NumContaminantInList As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 2
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = BOILING_POINT_DATABASE
       Case 2
          If Not PROPAVAILABLE(BOILING_POINT_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtNormalBPValue(1).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = BOILING_POINT_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.BoilingPoint.CurrentSelection.choice Then
       phprop.BoilingPoint.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayBoilingPointMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = BOILING_POINT_INPUT Then
       Call DisplayBoilingPointMainScreen(ValueToDisplayIndex)
    End If

    nbp_form.Hide

'Recalculate Gas Diffusivity using selected Normal Boiling Point

'          frmWaitForCalculations.Show
'          frmWaitForCalculations.Refresh

          contam_prop_form!lblContaminantProperties(12).Caption = ""

          Screen.MousePointer = 11   'Hourglass

          Call CalculateGasDiffusivity
          contam_prop_form.Refresh

          Screen.MousePointer = 0    'Arrow

'          frmWaitForCalculations.Hide

          NumContaminantInList = contam_prop_form!cboSelectContaminant.ListIndex + 1
          PropContaminant(NumContaminantInList) = phprop

End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastBPInputValue = txtNormalBPValue(1).Text
End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)
    
    If (DemoMode) Then cmdok.Enabled = False


End Sub

Private Sub lblNormalBPValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.BoilingPoint.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0   'Database
          ErrorFlag = phprop.BoilingPoint.database.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.BoilingPoint.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.BoilingPoint.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.BoilingPoint.PreviousIndex
    hilight.BoilingPoint.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtNormalBPValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtNormalBPValue(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.BoilingPoint.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub txtNormalBPValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
    
End Sub

Private Sub txtNormalBPValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtNormalBPValue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtNormalBPValue(Index).Text = "" Then
       phprop.BoilingPoint.input.Value = -1E+25
       PROPAVAILABLE(BOILING_POINT_INPUT) = False
        Call LostFocus_Handle(Me, txtNormalBPValue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtNormalBPValue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber2(CDbl(txtNormalBPValue(Index).Text)) Then
          txtNormalBPValue(Index).Text = Temp_Text
          txtNormalBPValue(Index).SetFocus
        Call LostFocus_Handle(Me, txtNormalBPValue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtNormalBPValue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.BoilingPoint.input.Value = CDbl(txtNormalBPValue(Index).Text)
          Else
             EnglishValue = CDbl(txtNormalBPValue(Index).Text)
             Call NBPENSI(SIValue, EnglishValue)
             phprop.BoilingPoint.input.Value = SIValue
          End If
          
          PROPAVAILABLE(BOILING_POINT_INPUT) = True
       Else
        Call LostFocus_Handle(Me, txtNormalBPValue(Index), flag_ok)
          Exit Sub
       End If
    End If

        Call LostFocus_Handle(Me, txtNormalBPValue(Index), flag_ok)
End Sub

VERSION 5.00
Begin VB.Form octanol_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Octanol Water Partition Coefficient (Kow)"
   ClientHeight    =   4950
   ClientLeft      =   1350
   ClientTop       =   1590
   ClientWidth     =   8880
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form2"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   4950
   ScaleWidth      =   8880
   Begin VB.ComboBox cboUNIFACParameterSet 
      Appearance      =   0  'Flat
      Height          =   288
      Left            =   3720
      Style           =   2  'Dropdown List
      TabIndex        =   14
      Top             =   4440
      Width           =   4932
   End
   Begin VB.TextBox txtOWPCTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   3
      Left            =   6360
      TabIndex        =   13
      Top             =   3840
      Width           =   1215
   End
   Begin VB.TextBox txtOctWatPartCoeffValue 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   3
      Left            =   4320
      TabIndex        =   12
      Top             =   3840
      Width           =   1815
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   4
      Left            =   1320
      TabIndex        =   11
      Top             =   3840
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   3
      Left            =   1320
      TabIndex        =   8
      Top             =   3360
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   1320
      TabIndex        =   5
      Top             =   2880
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   1320
      TabIndex        =   2
      Top             =   2400
      Width           =   255
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Partition Coefficient"
      Height          =   615
      Left            =   5160
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   5160
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.Label Label2 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC Group Interaction Database:"
      ForeColor       =   &H80000008&
      Height          =   252
      Left            =   240
      TabIndex        =   27
      Top             =   4440
      Width           =   3252
   End
   Begin VB.Shape Shape2 
      BorderWidth     =   2
      Height          =   492
      Left            =   120
      Top             =   4320
      Width           =   8652
   End
   Begin VB.Label lblOWPCTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   6360
      TabIndex        =   10
      Top             =   3360
      Width           =   1212
   End
   Begin VB.Label lblOWPCTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   6360
      TabIndex        =   7
      Top             =   2880
      Width           =   1212
   End
   Begin VB.Label lblOWPCTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6360
      TabIndex        =   4
      Top             =   2400
      Width           =   1212
   End
   Begin VB.Label lblOctWatPartCoeffValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   4320
      TabIndex        =   9
      Top             =   3360
      Width           =   1812
   End
   Begin VB.Label lblOctWatPartCoeffValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   4320
      TabIndex        =   6
      Top             =   2880
      Width           =   1812
   End
   Begin VB.Label lblOctWatPartCoeffValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4320
      TabIndex        =   3
      Top             =   2400
      Width           =   1812
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC @ Database T"
      ForeColor       =   &H00000000&
      Height          =   252
      Index           =   2
      Left            =   1680
      TabIndex        =   26
      Top             =   3360
      Width           =   2412
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Oct. Water Part. Coeff. Information"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   480
      TabIndex        =   25
      Top             =   240
      Width           =   4212
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value of log Kow"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   480
      TabIndex        =   24
      Top             =   720
      Width           =   1692
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   480
      TabIndex        =   23
      Top             =   1080
      Width           =   1692
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   2400
      TabIndex        =   22
      Top             =   1080
      Width           =   2292
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   2400
      TabIndex        =   21
      Top             =   720
      Width           =   2292
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1332
      Left            =   360
      Top             =   120
      Width           =   4452
   End
   Begin VB.Line Line1 
      X1              =   360
      X2              =   4800
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Label lblKowLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "log Kow"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   4320
      TabIndex        =   20
      Top             =   1800
      Width           =   1812
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   1680
      TabIndex        =   19
      Top             =   1800
      Width           =   2412
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "UNIFAC @ Operating T"
      ForeColor       =   &H00000000&
      Height          =   252
      Index           =   0
      Left            =   1680
      TabIndex        =   18
      Top             =   2400
      Width           =   2412
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Database"
      ForeColor       =   &H00000000&
      Height          =   252
      Index           =   1
      Left            =   1680
      TabIndex        =   17
      Top             =   2880
      Width           =   2412
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   252
      Index           =   3
      Left            =   1680
      TabIndex        =   16
      Top             =   3840
      Width           =   2412
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   2532
      Left            =   1200
      Top             =   1680
      Width           =   6492
   End
   Begin VB.Line Line2 
      X1              =   1200
      X2              =   7680
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Label lblKowTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   6360
      TabIndex        =   15
      Top             =   1800
      Width           =   1212
   End
End
Attribute VB_Name = "octanol_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastKowInputValue As String
Dim PastKowInputTemp As String

Private Sub cboUNIFACParameterSet_Click()

    If octanol_form!cboUNIFACParameterSet.ListCount = 1 Then Exit Sub

    Select Case octanol_form!cboUNIFACParameterSet.ListIndex
       Case 0   'Original UNIFAC VLE
            If phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase <> 1 Then
               If phprop.OctWaterPartCoeff.BinaryInteractionParameterDBAvailable(1) = False Then
                  MsgBox "Original UNIFAC VLE not available to calculate octanol water partition coefficient for this compound.", MB_ICONSTOP, "Data Not Available"
                  octanol_form!cboUNIFACParameterSet.ListIndex = phprop.OctWaterPartCoeff.PreviousBinaryInteractionParameterDB - 1
                  Exit Sub
               End If
               phprop.OctWaterPartCoeff.PreviousBinaryInteractionParameterDB = phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase
               phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase = 1
               UserSelectedTheUnifacBIPDBKow = True
               Screen.MousePointer = 11   'Hourglass
               Call CalculateOctWaterPartCoeff
               Screen.MousePointer = 0    'Arrow
            End If
       Case 1   'UNIFAC LLE
               If phprop.OctWaterPartCoeff.BinaryInteractionParameterDBAvailable(2) = False Then
                  MsgBox "UNIFAC LLE not available to calculate octanol water partition coefficient for this compound.", MB_ICONSTOP, "Data Not Available"
                  octanol_form!cboUNIFACParameterSet.ListIndex = phprop.OctWaterPartCoeff.PreviousBinaryInteractionParameterDB - 1
                  Exit Sub
               End If
            If phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase <> 2 Then
               phprop.OctWaterPartCoeff.PreviousBinaryInteractionParameterDB = phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase
               phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase = 2
               UserSelectedTheUnifacBIPDBKow = True
               Screen.MousePointer = 11  'hourglass
               Call CalculateOctWaterPartCoeff
               Screen.MousePointer = 0   'arrow
            End If
    End Select

End Sub

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.OctWaterPartCoeff.CurrentSelection.choice
       Case OCT_WATER_PART_COEFF_OPT_UNIFAC
          SelectedOption = 1
       Case OCT_WATER_PART_COEFF_DB
          SelectedOption = 2
       Case OCT_WATER_PART_COEFF_DBT_UNIFAC
          SelectedOption = 3
       Case OCT_WATER_PART_COEFF_INPUT
          SelectedOption = 4
          txtoctwatpartcoeffvalue(3).Text = PastKowInputValue
          txtOWPCTemperature(3).Text = PastKowInputTemp
       Case Else
          octanol_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    octanol_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 4
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = OCT_WATER_PART_COEFF_OPT_UNIFAC
       Case 2
          ValueToDisplayIndex = OCT_WATER_PART_COEFF_DB
       Case 3
          ValueToDisplayIndex = OCT_WATER_PART_COEFF_DBT_UNIFAC
       Case 4
          If Not PROPAVAILABLE(OCT_WATER_PART_COEFF_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtoctwatpartcoeffvalue(3).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = OCT_WATER_PART_COEFF_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.OctWaterPartCoeff.CurrentSelection.choice Then
       phprop.OctWaterPartCoeff.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayOctWaterPartCoeffMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = OCT_WATER_PART_COEFF_INPUT Then
       Call DisplayOctWaterPartCoeffMainScreen(ValueToDisplayIndex)
    End If

    octanol_form.Hide
End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastKowInputValue = txtoctwatpartcoeffvalue(3).Text
    PastKowInputTemp = txtOWPCTemperature(3).Text

       octanol_form!cboUNIFACParameterSet.Clear
       octanol_form!cboUNIFACParameterSet.AddItem "Original UNIFAC VLE"
       octanol_form!cboUNIFACParameterSet.AddItem "UNIFAC LLE"

       If Not octanol_form!cboUNIFACParameterSet.Enabled Then octanol_form!cboUNIFACParameterSet.Enabled = True
    
    Select Case phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase
       Case 1
            octanol_form!cboUNIFACParameterSet.ListIndex = 0
       Case 2
            octanol_form!cboUNIFACParameterSet.ListIndex = 1
       Case 3
            octanol_form!cboUNIFACParameterSet.ListIndex = 2
       Case 0
            octanol_form!cboUNIFACParameterSet.Clear
            octanol_form!cboUNIFACParameterSet.AddItem "UNIFAC Kow Calculation Not Possible"
            octanol_form!cboUNIFACParameterSet.ListIndex = 0
            octanol_form!cboUNIFACParameterSet.Enabled = False
    End Select

End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)

    If (DemoMode) Then cmdok.Enabled = False


End Sub

Private Sub lblOctWatPartCoeffValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.OctWaterPartCoeff.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0  'Source = UNIFAC at Operating T
          ErrorFlag = phprop.OctWaterPartCoeff.operatingT.UNIFAC.error
       Case 1  'Source = Database
          ErrorFlag = phprop.OctWaterPartCoeff.database.error
       Case 2  'Source = UNIFAC at Database T
          ErrorFlag = phprop.OctWaterPartCoeff.databaseT.UNIFAC.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblOWPCTemperature_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.OctWaterPartCoeff.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.OctWaterPartCoeff.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.OctWaterPartCoeff.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.OctWaterPartCoeff.PreviousIndex
    hilight.OctWaterPartCoeff.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtOctWatPartCoeffValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtoctwatpartcoeffvalue(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.OctWaterPartCoeff.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub txtOctWatPartCoeffValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txtOWPCTemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
    
End Sub

Private Sub txtOctWatPartCoeffValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtoctwatpartcoeffvalue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtoctwatpartcoeffvalue(Index).Text = "" Then
       phprop.OctWaterPartCoeff.input.Value = -1#
       PROPAVAILABLE(OCT_WATER_PART_COEFF_INPUT) = False
         Call LostFocus_Handle(Me, txtoctwatpartcoeffvalue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtoctwatpartcoeffvalue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber2(CDbl(txtoctwatpartcoeffvalue(Index).Text)) Then
          txtoctwatpartcoeffvalue(Index).Text = Temp_Text
          txtoctwatpartcoeffvalue(Index).SetFocus
         Call LostFocus_Handle(Me, txtoctwatpartcoeffvalue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtoctwatpartcoeffvalue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.OctWaterPartCoeff.input.Value = CDbl(txtoctwatpartcoeffvalue(Index).Text)
          Else
             EnglishValue = CDbl(txtoctwatpartcoeffvalue(Index).Text)
             Call KOWENSI(SIValue, EnglishValue)
             phprop.OctWaterPartCoeff.input.Value = SIValue
          End If
          
          PROPAVAILABLE(OCT_WATER_PART_COEFF_INPUT) = True
       Else
         Call LostFocus_Handle(Me, txtoctwatpartcoeffvalue(Index), flag_ok)
          Exit Sub
       End If
    End If
         Call LostFocus_Handle(Me, txtoctwatpartcoeffvalue(Index), flag_ok)

End Sub

Private Sub txtOWPCTemperature_GotFocus(Index As Integer)

  Call gotfocus_handle(Me, txtOWPCTemperature(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.OctWaterPartCoeff.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtOWPCTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
  
End Sub

Private Sub txtOWPCTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtOWPCTemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtOWPCTemperature(Index).Text = "" Then
       phprop.OctWaterPartCoeff.input.temperature = -1E+25
       Call LostFocus_Handle(Me, txtOWPCTemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtOWPCTemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtOWPCTemperature(Index).Text)) Then
          txtOWPCTemperature(Index).Text = Temp_Text
          txtOWPCTemperature(Index).SetFocus
       Call LostFocus_Handle(Me, txtOWPCTemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtOWPCTemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.OctWaterPartCoeff.input.temperature = CDbl(txtOWPCTemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtOWPCTemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.OctWaterPartCoeff.input.temperature = SIValue
          End If

       Else
       Call LostFocus_Handle(Me, txtOWPCTemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
       Call LostFocus_Handle(Me, txtOWPCTemperature(Index), flag_ok)

End Sub

VERSION 5.00
Object = "{F9043C88-F6F2-101A-A3C9-08002B2F49FB}#1.1#0"; "Comdlg32.ocx"
Begin VB.Form frmPrint 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Print"
   ClientHeight    =   6210
   ClientLeft      =   1620
   ClientTop       =   1545
   ClientWidth     =   9405
   ControlBox      =   0   'False
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   6210
   ScaleWidth      =   9405
   ShowInTaskbar   =   0   'False
   Begin VB.Frame fraDestination 
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Destination"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   1095
      Left            =   420
      TabIndex        =   31
      Top             =   60
      Width           =   1455
      Begin VB.OptionButton optDestination 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Printer"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   0
         Left            =   240
         TabIndex        =   33
         Top             =   360
         Width           =   1092
      End
      Begin VB.OptionButton optDestination 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Text File"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   1
         Left            =   240
         TabIndex        =   32
         Top             =   720
         Width           =   1092
      End
   End
   Begin VB.CommandButton cmdPrint 
      Appearance      =   0  'Flat
      Caption         =   "Print"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   372
      Index           =   0
      Left            =   7620
      TabIndex        =   30
      Top             =   180
      Width           =   1692
   End
   Begin VB.CommandButton cmdPrint 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   372
      Index           =   1
      Left            =   7620
      TabIndex        =   29
      Top             =   780
      Width           =   1692
   End
   Begin VB.Frame Frame1 
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Properties to Print"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   4572
      Left            =   420
      TabIndex        =   4
      Top             =   1380
      Width           =   8892
      Begin VB.ComboBox cboUnits 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   315
         Left            =   4770
         Style           =   2  'Dropdown List
         TabIndex        =   34
         Top             =   720
         Width           =   3972
      End
      Begin VB.OptionButton optPrintProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "All Properties"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   0
         Left            =   240
         TabIndex        =   26
         Top             =   360
         Width           =   2532
      End
      Begin VB.OptionButton optPrintProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Selected Properties"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   1
         Left            =   240
         TabIndex        =   25
         Top             =   720
         Width           =   2532
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Vapor Pressure"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   0
         Left            =   720
         TabIndex        =   24
         Top             =   1800
         Width           =   2652
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Activity Coefficient"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   1
         Left            =   720
         TabIndex        =   23
         Top             =   2160
         Width           =   2652
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Henry's Constant"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   2
         Left            =   720
         TabIndex        =   22
         Top             =   2520
         Width           =   2652
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Molecular Weight"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   3
         Left            =   720
         TabIndex        =   21
         Top             =   2880
         Width           =   2652
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Normal Boiling Point (NBP)"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   4
         Left            =   720
         TabIndex        =   20
         Top             =   3240
         Width           =   2652
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Liquid Density"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   5
         Left            =   720
         TabIndex        =   19
         Top             =   3600
         Width           =   2652
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Molar Volume @ Operating T"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Index           =   6
         Left            =   720
         TabIndex        =   18
         Top             =   3960
         Width           =   2775
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Molar Volume @ NBP"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   7
         Left            =   3600
         TabIndex        =   17
         Top             =   1800
         Width           =   2412
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Refractive Index"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   8
         Left            =   3600
         TabIndex        =   16
         Top             =   2160
         Width           =   2412
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Aqueous Solubility"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   9
         Left            =   3600
         TabIndex        =   15
         Top             =   2520
         Width           =   2412
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "log Oct. Water Part. Coeff."
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   10
         Left            =   3600
         TabIndex        =   14
         Top             =   2880
         Width           =   2412
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Liquid Diffusivity"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   11
         Left            =   3600
         TabIndex        =   13
         Top             =   3240
         Width           =   2412
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Gas Diffusivity"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   12
         Left            =   3600
         TabIndex        =   12
         Top             =   3600
         Width           =   2412
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Water Density"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   13
         Left            =   6240
         TabIndex        =   11
         Top             =   1800
         Width           =   2412
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Water Viscosity"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   14
         Left            =   6240
         TabIndex        =   10
         Top             =   2160
         Width           =   2412
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Water Surface Tension"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   15
         Left            =   6240
         TabIndex        =   9
         Top             =   2520
         Width           =   2412
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Air Density"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   16
         Left            =   6240
         TabIndex        =   8
         Top             =   2880
         Width           =   2412
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Air Viscosity"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   17
         Left            =   6240
         TabIndex        =   7
         Top             =   3240
         Width           =   2412
      End
      Begin VB.ComboBox cboPropertyDescription 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   315
         Left            =   4770
         Style           =   2  'Dropdown List
         TabIndex        =   6
         Top             =   270
         Width           =   3972
      End
      Begin VB.CheckBox chkProperties 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Errors/Warnings"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   18
         Left            =   3600
         TabIndex        =   5
         Top             =   3960
         Width           =   2412
      End
      Begin VB.Label Label1 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Contaminant Properties"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Left            =   720
         TabIndex        =   28
         Top             =   1320
         Width           =   5292
      End
      Begin VB.Label Label2 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Properties of Air and Water"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Left            =   6240
         TabIndex        =   27
         Top             =   1320
         Width           =   2412
      End
      Begin VB.Shape Shape1 
         Height          =   3135
         Left            =   600
         Top             =   1200
         Width           =   5535
      End
      Begin VB.Shape Shape2 
         Height          =   3135
         Left            =   6120
         Top             =   1200
         Width           =   2655
      End
      Begin VB.Line Line1 
         X1              =   600
         X2              =   8760
         Y1              =   1680
         Y2              =   1680
      End
   End
   Begin VB.Frame Frame2 
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Selected Contaminants"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   1095
      Left            =   1980
      TabIndex        =   0
      Top             =   60
      Width           =   5535
      Begin VB.OptionButton optPrintContaminants 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "All of them"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   0
         Left            =   80
         TabIndex        =   2
         Top             =   360
         Width           =   1550
      End
      Begin VB.OptionButton optPrintContaminants 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Current One"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   252
         Index           =   1
         Left            =   80
         TabIndex        =   1
         Top             =   720
         Width           =   1550
      End
      Begin VB.Label lblCurrentContaminant 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Left            =   1680
         TabIndex        =   3
         Top             =   720
         Width           =   3735
      End
   End
   Begin MSComDlg.CommonDialog CMDialog1 
      Left            =   60
      Top             =   3420
      _ExtentX        =   847
      _ExtentY        =   847
      _Version        =   327681
      FontSize        =   0
      MaxFileSize     =   256
   End
End
Attribute VB_Name = "frmPrint"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'TAB SETTINGS FOR USE IN PRINTING
Const TABVALUE = 35
Const VALUELENGTH = 13
Const TABUNITS = TABVALUE + VALUELENGTH + 2
Const TABSOURCE = TABUNITS + 12
Const TABFULLSOURCE = 5
Const TABFULLVALUE = TABFULLSOURCE + 30
Const TABFULLUNITS = TABFULLVALUE + VALUELENGTH + 2
Const TABFULLTEMPERATURE = TABFULLUNITS + 12
Const TEMPLENGTH = 4
Const TABFULLTEMPUNITS = TABFULLTEMPERATURE + TEMPLENGTH + 1
Const TABFULLCODE = TABFULLTEMPUNITS + 4
Const TABCODE = TABFULLSOURCE
Const CODELENGTH = 6
Const TABCODEDESCRIPTION = TABCODE + CODELENGTH + 2

'Heights of Print Text for Use in Printing Full Description of Properties to Printer
Dim HeightTitle As Integer
Dim HeightOperatingConditions As Integer
Dim HeightVaporPressure As Integer
Dim HeightActivityCoefficient As Integer
Dim HeightHenrysConstant As Integer
Dim HeightMolecularWeight As Integer
Dim HeightBoilingPoint As Integer
Dim HeightLiquidDensity As Integer
Dim HeightMolarVolumeOpT As Integer
Dim HeightMolarVolumeNBP As Integer
Dim HeightRefractiveIndex As Integer
Dim HeightAqueousSolubility As Integer
Dim HeightOctWaterPartCoeff As Integer
Dim HeightLiquidDiffusivity As Integer
Dim HeightGasDiffusivity As Integer
Dim HeightWaterDensity As Integer
Dim HeightWaterViscosity As Integer
Dim HeightWaterSurfaceTension As Integer
Dim HeightAirDensity As Integer
Dim HeightAirViscosity As Integer

Dim TotalHeightThisPage As Integer   'Total Print Height on a Page So Far

Dim PrintMsg As String   'Variable to store a message used to determine height

'Number of Lines Needed to Fully Print Each Property (used to determine print height)

Const NUMLINES_VAPOR_PRESSURE = 6
Const NUMLINES_ACTIVITY_COEFFICIENT = 5
Const NUMLINES_HENRYS_CONSTANT = 10   'Note:  does not include more than 1 value from database or UNIFAC at Database T as these numbers can vary and must be accounted for separately
Const NUMLINES_MOLECULAR_WEIGHT = 7
Const NUMLINES_BOILING_POINT = 6
Const NUMLINES_LIQUID_DENSITY = 7
Const NUMLINES_MOLAR_VOLUME_OPT = 7
Const NUMLINES_MOLAR_VOLUME_NBP = 6
Const NUMLINES_REFRACTIVE_INDEX = 6
Const NUMLINES_AQUEOUS_SOLUBILITY = 9
Const NUMLINES_OCT_WATER_PART_COEFF = 8
Const NUMLINES_LIQUID_DIFFUSIVITY = 8
Const NUMLINES_GAS_DIFFUSIVITY = 6
Const NUMLINES_WATER_DENSITY = 6
Const NUMLINES_WATER_VISCOSITY = 6
Const NUMLINES_WATER_SURFACE_TENSION = 6
Const NUMLINES_AIR_DENSITY = 6
Const NUMLINES_AIR_VISCOSITY = 6

Const NUMLINES_PROPERTY_NAME = 2

Const BOTTOM_MARGIN_SAFETY_FACTOR = 1440    'Bottom margin will be at least this big when printing (1440 twips = 1 inch)

Dim HeightOneLinePropertyName As Integer 'Height of one line when fully printing name of property to printer
Dim HeightOneLinePropertyValues          'Height of one line when fully printing the values for a property to printer

Dim PrintFileName As String

Private Sub cboPropertyDescription_Click()
    If optPrintProperties(1).Value = True Then
       If frmPrint!cboPropertyDescription.ListIndex = 1 Then
          chkProperties(18).Enabled = True
       Else
          chkProperties(18).Enabled = False
       End If
    End If

End Sub

Private Sub cboUnits_Click()
'    Dim msg As String

'    If cboUnits.ListIndex = 1 Then
'       msg = "The ability to print values in English Units has not been implemented yet.  For now, it is only possible to print results in SI units."
'       MsgBox msg, MB_ICONSTOP, "Routine Not Available"
'       cboUnits.ListIndex = 0
'    End If

End Sub

Private Sub chkProperties_Click(Index As Integer)
    If chkProperties(Index).Value Then
       chkProperties(Index).BackColor = &H800000
       chkProperties(Index).ForeColor = &HFFFFFF
    Else
       chkProperties(Index).BackColor = &HC0C0C0
       chkProperties(Index).ForeColor = &H80000008
    End If
End Sub

Private Sub cmdPrint_Click(Index As Integer)
    Dim ChosenAtLeastOneValue As Integer
    Dim i As Integer, msg As String

    Select Case Index
       Case 0   'Print

          If frmPrint!optPrintProperties(1).Value Then  'If printing chosen properties, find out if at least one property is chosen
             ChosenAtLeastOneValue = False
             For i = 0 To 17
                 If (frmPrint!chkProperties(i).Value = 1) Then
                    ChosenAtLeastOneValue = True
                    Exit For
                 End If
             Next i

             If Not ChosenAtLeastOneValue Then
                msg = "In order to print chosen properties, you must "
                msg = msg + "choose at least one property" & Chr$(13)
                MsgBox msg, MB_ICONSTOP, "Error"
                Exit Sub
             End If
          End If

          Screen.MousePointer = 11   'Hourglass
          
          If cboUnits.ListIndex = 0 Then
             Call CreateUnitsArraySI
          Else
             Call CreateUnitsArrayEnglish
          End If

          If frmPrint!optDestination(0).Value Then   'Print to printer
             Call PrintToPrinter
          ElseIf frmPrint!optDestination(1).Value Then   'Print to file
             Call GetPrintFileName
             If PrintFileName$ = "" Then Exit Sub

             Open PrintFileName$ For Output As #1
             Call PrintToFile
             Close #1
          End If
          frmPrint.Hide
          
          If CurrentUnits = EnglishUnits Then Call CreateUnitsArrayEnglish   'Return to English units array if we changed this to accommodate printing.  This statement can be removed when we create the ability to print the English units.
           '******************
          ChDir App.Path

          Screen.MousePointer = 0    'Arrow
       Case 1   'Cancel
          frmPrint.Hide
     End Select
End Sub

Private Sub Form_Load()

    'Center the form on the screen
    If WindowState = 0 Then
       'don't attempt if screen Minimized or Maximized
      Move contam_prop_form.Left + (contam_prop_form.Width / 2) - (frmPrint.Width / 2), contam_prop_form.Top + (contam_prop_form.Height / 2) - (frmPrint.Height / 2)
    End If

End Sub

Private Sub FullyPrintActivityCoefficientToFile()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_ActivityCoefficient
    
    'Set header flag
    Header = 1
    'Print Activity Coefficient from UNIFAC
    If PROPAVAILABLE(ACTIVITY_COEFFICIENT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.ActivityCoefficient.UNIFAC.Value, GetTheFormat(phprop.ActivityCoefficient.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.ActivityCoefficient.UNIFAC.temperature, GetTheFormat(phprop.ActivityCoefficient.UNIFAC.temperature))
       Print #1, Tab(TABFULLSOURCE); "UNIFAC AT Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(ACTIVITY_COEFFICIENT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.ActivityCoefficient.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.ActivityCoefficient.UNIFAC.error > 0 Then
             Print #1, ","; phprop.ActivityCoefficient.UNIFAC.error
          Else
             Print #1, ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "UNIFAC AT Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLCODE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.ActivityCoefficient.UNIFAC.error < 0 Then
             Print #1, phprop.ActivityCoefficient.UNIFAC.error
          Else
             Print #1, ""
          End If
       End If
    End If
    'Print relevant codes for this property
    If phprop.ActivityCoefficient.BinaryInteractionParameterDatabase > 0 Then
       Call PrintTheCodesToFile(phprop.ActivityCoefficient.BinaryInteractionParameterDatabase)
       Header = 0
    End If
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(Header, phprop.ActivityCoefficient.UNIFAC.error)
       End If
    Else
       Call PrintTheErrorsToFile(Header, phprop.ActivityCoefficient.UNIFAC.error)
    End If

resume_exit:
Exit Sub

error_ActivityCoefficient:
Resume resume_exit
End Sub

Private Sub FullyPrintActivityCoefficientToPrinter()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_printactivitycoefficient
    'Set header flag
    Header = 1
    'Print Activity Coefficient from UNIFAC
    If PROPAVAILABLE(ACTIVITY_COEFFICIENT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.ActivityCoefficient.UNIFAC.Value, GetTheFormat(phprop.ActivityCoefficient.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.ActivityCoefficient.UNIFAC.temperature, GetTheFormat(phprop.ActivityCoefficient.UNIFAC.temperature))
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC AT Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(ACTIVITY_COEFFICIENT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       Printer.Print Tab(TABFULLCODE); phprop.ActivityCoefficient.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.ActivityCoefficient.UNIFAC.error > 0 Then
             Printer.Print ","; phprop.ActivityCoefficient.UNIFAC.error
          Else
             Printer.Print
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC AT Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLCODE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.ActivityCoefficient.UNIFAC.error < 0 Then
             Printer.Print phprop.ActivityCoefficient.UNIFAC.error
          Else
             Printer.Print
          End If
       End If
    End If
    'Print relevant codes for this property
    If phprop.ActivityCoefficient.BinaryInteractionParameterDatabase > 0 Then
       Call PrintTheCodes(phprop.ActivityCoefficient.BinaryInteractionParameterDatabase)
       Header = 0
    End If
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(Header, phprop.ActivityCoefficient.UNIFAC.error)
       End If
    Else
       Call PrintTheErrors(Header, phprop.ActivityCoefficient.UNIFAC.error)
    End If

resume_exit1:
Exit Sub

error_printactivitycoefficient:
Resume resume_exit1

End Sub

Private Sub FullyPrintAirDensityToFile()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_airdensity

    'Print Air Density from Correlation
    If PROPAVAILABLE(AIR_DENSITY_CORRELATION) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AirDensity.correlation.Value, GetTheFormat(phprop.AirDensity.correlation.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AirDensity.correlation.temperature, GetTheFormat(phprop.AirDensity.correlation.temperature))
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.AirDensity.correlation.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AIR_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AirDensity.correlation.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.AirDensity.correlation.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.AirDensity.correlation.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AirDensity.correlation.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.AirDensity.correlation.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If
    'Print Air Density from User Input
    If PROPAVAILABLE(AIR_DENSITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AirDensity.input.Value, GetTheFormat(phprop.AirDensity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AirDensity.input.temperature, GetTheFormat(phprop.AirDensity.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AIR_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print the Errors/Warnings for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(1, phprop.AirDensity.correlation.error)
       End If
    Else
       Call PrintTheErrorsToFile(1, phprop.AirDensity.correlation.error)
    End If

resume_exit2:
Exit Sub

error_airdensity:
Resume resume_exit2

End Sub

Private Sub FullyPrintAirDensityToPrinter()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_printairdensity

    'Print Air Density from Correlation
    If PROPAVAILABLE(AIR_DENSITY_CORRELATION) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AirDensity.correlation.Value, GetTheFormat(phprop.AirDensity.correlation.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AirDensity.correlation.temperature, GetTheFormat(phprop.AirDensity.correlation.temperature))
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.AirDensity.correlation.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AIR_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AirDensity.correlation.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.AirDensity.correlation.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.AirDensity.correlation.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AirDensity.correlation.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.AirDensity.correlation.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If
    'Print Air Density from User Input
    If PROPAVAILABLE(AIR_DENSITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AirDensity.input.Value, GetTheFormat(phprop.AirDensity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AirDensity.input.temperature, GetTheFormat(phprop.AirDensity.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AIR_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print the Errors/Warnings for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(1, phprop.AirDensity.correlation.error)
       End If
    Else
       Call PrintTheErrors(1, phprop.AirDensity.correlation.error)
    End If

resume_exit3:
Exit Sub

error_printairdensity:
Resume resume_exit3


End Sub

Private Sub FullyPrintAirViscosityToFile()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_airviscosity

    'Print Air Viscosity from Correlation
    If PROPAVAILABLE(AIR_VISCOSITY_CORRELATION) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AirViscosity.correlation.Value, GetTheFormat(phprop.AirViscosity.correlation.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AirViscosity.correlation.temperature, GetTheFormat(phprop.AirViscosity.correlation.temperature))
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.AirViscosity.correlation.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AIR_VISCOSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AirViscosity.correlation.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.AirViscosity.correlation.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.AirViscosity.correlation.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AirViscosity.correlation.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.AirViscosity.correlation.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If
    'Print Air Viscosity from User Input
    If PROPAVAILABLE(AIR_VISCOSITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AirViscosity.input.Value, GetTheFormat(phprop.AirViscosity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AirViscosity.input.temperature, GetTheFormat(phprop.AirViscosity.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AIR_VISCOSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print the Errors/Warnings for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(1, phprop.AirViscosity.correlation.error)
       End If
    Else
       Call PrintTheErrorsToFile(1, phprop.AirViscosity.correlation.error)
    End If

resume_exit4:
Exit Sub

error_airviscosity:
Resume resume_exit4

End Sub

Private Sub FullyPrintAirViscosityToPrinter()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_printairviscosity

    'Print Air Viscosity from Correlation
    If PROPAVAILABLE(AIR_VISCOSITY_CORRELATION) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AirViscosity.correlation.Value, GetTheFormat(phprop.AirViscosity.correlation.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AirViscosity.correlation.temperature, GetTheFormat(phprop.AirViscosity.correlation.temperature))
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.AirViscosity.correlation.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AIR_VISCOSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AirViscosity.correlation.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.AirViscosity.correlation.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.AirViscosity.correlation.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AirViscosity.correlation.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.AirViscosity.correlation.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If
    'Print Air Viscosity from User Input
    If PROPAVAILABLE(AIR_VISCOSITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AirViscosity.input.Value, GetTheFormat(phprop.AirViscosity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AirViscosity.input.temperature, GetTheFormat(phprop.AirViscosity.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AIR_VISCOSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print the Errors/Warnings for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(1, phprop.AirViscosity.correlation.error)
       End If
    Else
       Call PrintTheErrors(1, phprop.AirViscosity.correlation.error)
    End If

resume_exit5:
Exit Sub

error_printairviscosity:
Resume resume_exit5

End Sub

Private Sub FullyPrintAqueousSolubilityToFile()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_aqueousSolubility

    'Set header flag
    Header = 1
    'Print Aqueous Solubility from UNIFAC Fit
    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_FIT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AqueousSolubility.fit.UNIFAC.Value, GetTheFormat(phprop.AqueousSolubility.fit.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AqueousSolubility.fit.UNIFAC.temperature, GetTheFormat(phprop.AqueousSolubility.fit.UNIFAC.temperature))
       Print #1, Tab(TABFULLSOURCE); "UNIFAC Fit with Data Point"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.AqueousSolubility.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.fit.UNIFAC.error > 0 Then
             Print #1, ","; phprop.AqueousSolubility.fit.UNIFAC.error
          Else
             Print #1, ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "UNIFAC Fit with Data Point"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.fit.UNIFAC.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.AqueousSolubility.fit.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Aqueous Solubility from UNIFAC at operating temperature
    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_OPT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AqueousSolubility.operatingT.UNIFAC.Value, GetTheFormat(phprop.AqueousSolubility.operatingT.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AqueousSolubility.operatingT.UNIFAC.temperature, GetTheFormat(phprop.AqueousSolubility.operatingT.UNIFAC.temperature))
       Print #1, Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.AqueousSolubility.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.operatingT.UNIFAC.error > 0 Then
             Print #1, ","; phprop.AqueousSolubility.operatingT.UNIFAC.error
          Else
             Print #1, ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.operatingT.UNIFAC.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.AqueousSolubility.operatingT.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Aqueous Solubility from Database
    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AqueousSolubility.database.Value, GetTheFormat(phprop.AqueousSolubility.database.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AqueousSolubility.database.temperature, GetTheFormat(phprop.AqueousSolubility.database.temperature))
       Print #1, Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.AqueousSolubility.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.database.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.AqueousSolubility.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.database.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.AqueousSolubility.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Aqueous Solubility from UNIFAC at database temperature
    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_DBT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AqueousSolubility.UNIFAC.Value, GetTheFormat(phprop.AqueousSolubility.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AqueousSolubility.UNIFAC.temperature, GetTheFormat(phprop.AqueousSolubility.UNIFAC.temperature))
       Print #1, Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.AqueousSolubility.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.UNIFAC.error > 0 Then
             Print #1, ","; phprop.AqueousSolubility.UNIFAC.error
          Else
             Print #1, ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.UNIFAC.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.AqueousSolubility.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Aqueous Solubility from User Input
    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AqueousSolubility.input.Value, GetTheFormat(phprop.AqueousSolubility.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AqueousSolubility.input.temperature, GetTheFormat(phprop.AqueousSolubility.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If

    'Print relevant codes for this property
    If phprop.AqueousSolubility.BinaryInteractionParameterDatabase > 0 Then
       Call PrintTheCodesToFile(phprop.AqueousSolubility.BinaryInteractionParameterDatabase)
       Header = 0
    End If
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(Header, phprop.AqueousSolubility.fit.UNIFAC.error)
          Call PrintTheErrorsToFile(Header, phprop.AqueousSolubility.operatingT.UNIFAC.error)
          Call PrintTheErrorsToFile(Header, phprop.AqueousSolubility.database.error)
          Call PrintTheErrorsToFile(Header, phprop.AqueousSolubility.UNIFAC.error)
       End If
    Else
       Call PrintTheErrorsToFile(Header, phprop.AqueousSolubility.fit.UNIFAC.error)
       Call PrintTheErrorsToFile(Header, phprop.AqueousSolubility.operatingT.UNIFAC.error)
       Call PrintTheErrorsToFile(Header, phprop.AqueousSolubility.database.error)
       Call PrintTheErrorsToFile(Header, phprop.AqueousSolubility.UNIFAC.error)
    End If


resume_exit6:
Exit Sub

error_aqueousSolubility:
Resume resume_exit6

End Sub

Private Sub FullyPrintAqueousSolubilityToPrinter()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_printAqueousSolubility

    'Set header flag
    Header = 1
    'Print Aqueous Solubility from UNIFAC Fit
    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_FIT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AqueousSolubility.fit.UNIFAC.Value, GetTheFormat(phprop.AqueousSolubility.fit.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AqueousSolubility.fit.UNIFAC.temperature, GetTheFormat(phprop.AqueousSolubility.fit.UNIFAC.temperature))
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC Fit with Data Point"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.AqueousSolubility.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.fit.UNIFAC.error > 0 Then
             Printer.Print ","; phprop.AqueousSolubility.fit.UNIFAC.error
          Else
             Printer.Print ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC Fit with Data Point"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.fit.UNIFAC.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.AqueousSolubility.fit.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Aqueous Solubility from UNIFAC at operating temperature
    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_OPT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AqueousSolubility.operatingT.UNIFAC.Value, GetTheFormat(phprop.AqueousSolubility.operatingT.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AqueousSolubility.operatingT.UNIFAC.temperature, GetTheFormat(phprop.AqueousSolubility.operatingT.UNIFAC.temperature))
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.AqueousSolubility.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.operatingT.UNIFAC.error > 0 Then
             Printer.Print ","; phprop.AqueousSolubility.operatingT.UNIFAC.error
          Else
             Printer.Print ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLCODE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.operatingT.UNIFAC.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.AqueousSolubility.operatingT.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Aqueous Solubility from Database
    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AqueousSolubility.database.Value, GetTheFormat(phprop.AqueousSolubility.database.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AqueousSolubility.database.temperature, GetTheFormat(phprop.AqueousSolubility.database.temperature))
       Printer.Print Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.AqueousSolubility.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.database.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.AqueousSolubility.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.database.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.AqueousSolubility.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Aqueous Solubility from UNIFAC at database temperature
    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_DBT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AqueousSolubility.UNIFAC.Value, GetTheFormat(phprop.AqueousSolubility.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AqueousSolubility.UNIFAC.temperature, GetTheFormat(phprop.AqueousSolubility.UNIFAC.temperature))
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.AqueousSolubility.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.UNIFAC.error > 0 Then
             Printer.Print ","; phprop.AqueousSolubility.UNIFAC.error
          Else
             Printer.Print ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.AqueousSolubility.UNIFAC.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.AqueousSolubility.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Aqueous Solubility from User Input
    If PROPAVAILABLE(AQUEOUS_SOLUBILITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.AqueousSolubility.input.Value, GetTheFormat(phprop.AqueousSolubility.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.AqueousSolubility.input.temperature, GetTheFormat(phprop.AqueousSolubility.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If

    'Print relevant codes for this property
    If phprop.AqueousSolubility.BinaryInteractionParameterDatabase > 0 Then
       Call PrintTheCodes(phprop.AqueousSolubility.BinaryInteractionParameterDatabase)
       Header = 0
    End If
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(Header, phprop.AqueousSolubility.fit.UNIFAC.error)
          Call PrintTheErrors(0, phprop.AqueousSolubility.operatingT.UNIFAC.error)
          Call PrintTheErrors(0, phprop.AqueousSolubility.database.error)
          Call PrintTheErrors(0, phprop.AqueousSolubility.UNIFAC.error)
       End If
    Else
       Call PrintTheErrors(Header, phprop.AqueousSolubility.fit.UNIFAC.error)
       Call PrintTheErrors(0, phprop.AqueousSolubility.operatingT.UNIFAC.error)
       Call PrintTheErrors(0, phprop.AqueousSolubility.database.error)
       Call PrintTheErrors(0, phprop.AqueousSolubility.UNIFAC.error)
    End If

resume_exit7:
Exit Sub

error_printAqueousSolubility:
Resume resume_exit7


End Sub

Private Sub FullyPrintBoilingPointToFile()
    Dim ValueString As String

On Error GoTo error_boilingpoint

    'Print Normal Boiling Point From Database
    If PROPAVAILABLE(BOILING_POINT_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.BoilingPoint.database.Value, GetTheFormat(phprop.BoilingPoint.database.Value))
       Print #1, Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.BoilingPoint.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(BOILING_POINT);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.BoilingPoint.database.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.BoilingPoint.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.BoilingPoint.database.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.BoilingPoint.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Normal Boiling Point from User Input
    If PROPAVAILABLE(BOILING_POINT_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.BoilingPoint.input.Value, GetTheFormat(phprop.BoilingPoint.input.Value))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(BOILING_POINT)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(1, phprop.BoilingPoint.database.error)
       End If
    Else
       Call PrintTheErrorsToFile(1, phprop.BoilingPoint.database.error)
    End If

resume_exit8:
Exit Sub

error_boilingpoint:
Resume resume_exit8


End Sub

Private Sub FullyPrintBoilingPointToPrinter()
    Dim ValueString As String

On Error GoTo error_printBoilingPoint

    'Print Normal Boiling Point From Database
    If PROPAVAILABLE(BOILING_POINT_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.BoilingPoint.database.Value, GetTheFormat(phprop.BoilingPoint.database.Value))
       Printer.Print Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.BoilingPoint.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(BOILING_POINT);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.BoilingPoint.database.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.BoilingPoint.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.BoilingPoint.database.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.BoilingPoint.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Normal Boiling Point from User Input
    If PROPAVAILABLE(BOILING_POINT_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.BoilingPoint.input.Value, GetTheFormat(phprop.BoilingPoint.input.Value))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(BOILING_POINT)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(1, phprop.BoilingPoint.database.error)
       End If
    Else
       Call PrintTheErrors(1, phprop.BoilingPoint.database.error)
    End If

resume_exit9:
Exit Sub

error_printBoilingPoint:
Resume resume_exit9


End Sub

Private Sub FullyPrintGasDiffusivityToFile()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_gasdiffusivity

    'Print Gas Diffusivity from Wilke-Lee Modification of Hirschfelder-Bird-Spotz Method
    If PROPAVAILABLE(GAS_DIFFUSIVITY_WILKELEE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.GasDiffusivity.wilkeLee.Value, GetTheFormat(phprop.GasDiffusivity.wilkeLee.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.GasDiffusivity.wilkeLee.temperature, GetTheFormat(phprop.GasDiffusivity.wilkeLee.temperature))
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.GasDiffusivity.wilkeLee.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(GAS_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.GasDiffusivity.wilkeLee.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.GasDiffusivity.wilkeLee.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.GasDiffusivity.wilkeLee.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.GasDiffusivity.wilkeLee.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.GasDiffusivity.wilkeLee.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Gas Diffusivity from User Input
    If PROPAVAILABLE(GAS_DIFFUSIVITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.GasDiffusivity.input.Value, GetTheFormat(phprop.GasDiffusivity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.GasDiffusivity.input.temperature, GetTheFormat(phprop.GasDiffusivity.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(GAS_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(1, phprop.GasDiffusivity.wilkeLee.error)
       End If
    Else
       Call PrintTheErrorsToFile(1, phprop.GasDiffusivity.wilkeLee.error)
    End If

resume_exit10:
Exit Sub

error_gasdiffusivity:
Resume resume_exit10

End Sub

Private Sub FullyPrintGasDiffusivityToPrinter()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_printgasdiffusivity

    'Print Gas Diffusivity from Wilke-Lee Modification of Hirschfelder-Bird-Spotz Method
    If PROPAVAILABLE(GAS_DIFFUSIVITY_WILKELEE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.GasDiffusivity.wilkeLee.Value, GetTheFormat(phprop.GasDiffusivity.wilkeLee.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.GasDiffusivity.wilkeLee.temperature, GetTheFormat(phprop.GasDiffusivity.wilkeLee.temperature))
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.GasDiffusivity.wilkeLee.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(GAS_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.GasDiffusivity.wilkeLee.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.GasDiffusivity.wilkeLee.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.GasDiffusivity.wilkeLee.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.GasDiffusivity.wilkeLee.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.GasDiffusivity.wilkeLee.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Gas Diffusivity from User Input
    If PROPAVAILABLE(GAS_DIFFUSIVITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.GasDiffusivity.input.Value, GetTheFormat(phprop.GasDiffusivity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.GasDiffusivity.input.temperature, GetTheFormat(phprop.GasDiffusivity.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(GAS_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(1, phprop.GasDiffusivity.wilkeLee.error)
       End If
    Else
       Call PrintTheErrors(1, phprop.GasDiffusivity.wilkeLee.error)
    End If

resume_exit11:
Exit Sub

error_printgasdiffusivity:
Resume resume_exit11

End Sub

Private Sub FullyPrintHenrysConstantToFile()
    Dim ValueString As String
    Dim TempString As String
    Dim i As Integer
    Dim Header As Integer

On Error GoTo error_henryconstant

    'Set header flag
    Header = 1
    'Print Henry's Constant From Regression of Data Points
    If PROPAVAILABLE(HENRYS_CONSTANT_REGRESS) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.HenrysConstant.regress.Value, GetTheFormat(phprop.HenrysConstant.regress.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.HenrysConstant.regress.temperature, GetTheFormat(phprop.HenrysConstant.regress.temperature))
       Print #1, Tab(TABFULLSOURCE); "Regression of Data Points"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.regress.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.HenrysConstant.regress.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Regression of Data Points"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.regress.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.HenrysConstant.regress.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Henry's Constant from UNIFAC Fit
    If PROPAVAILABLE(HENRYS_CONSTANT_FIT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.HenrysConstant.fit.UNIFAC.Value, GetTheFormat(phprop.HenrysConstant.fit.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.HenrysConstant.fit.UNIFAC.temperature, GetTheFormat(phprop.HenrysConstant.fit.UNIFAC.temperature))
       Print #1, Tab(TABFULLSOURCE); "UNIFAC Fit with a Data Point"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.ActivityCoefficient.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.fit.UNIFAC.error > 0 Then
             Print #1, ","; phprop.HenrysConstant.fit.UNIFAC.error
          Else
             Print #1, ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "UNIFAC Fit with a Data Point"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.fit.UNIFAC.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.HenrysConstant.fit.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Henry's Constant from UNIFAC at Operating T
    If PROPAVAILABLE(HENRYS_CONSTANT_OPT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.HenrysConstant.operatingT.UNIFAC.Value, GetTheFormat(phprop.HenrysConstant.operatingT.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.HenrysConstant.operatingT.UNIFAC.temperature, GetTheFormat(phprop.HenrysConstant.operatingT.UNIFAC.temperature))
       Print #1, Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.ActivityCoefficient.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.operatingT.UNIFAC.error > 0 Then
             Print #1, ","; phprop.HenrysConstant.operatingT.UNIFAC.error
          Else
             Print #1, ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLCODE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.operatingT.UNIFAC.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.HenrysConstant.operatingT.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Henry's Constants from Database
    If PROPAVAILABLE(HENRYS_CONSTANT_DATABASE) Then
       For i = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
           ValueString = Space$(VALUELENGTH)
           RSet ValueString = Format$(phprop.HenrysConstant.database(i).Value, GetTheFormat(phprop.HenrysConstant.database(i).Value))
           TempString = Space$(TEMPLENGTH)
           RSet TempString = Format$(phprop.HenrysConstant.database(i).temperature, GetTheFormat(phprop.HenrysConstant.database(i).temperature))
           Print #1, Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.HenrysConstant.database(i).Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
       Next i
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString
    End If

    'Print Henry's Constants from UNIFAC corresponding to Database Temperatures
    If PROPAVAILABLE(HENRYS_CONSTANT_UNIFAC) Then
       For i = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
           If phprop.HenrysConstant.UNIFAC(i).error >= 0 Then
              ValueString = Space$(VALUELENGTH)
              RSet ValueString = Format$(phprop.HenrysConstant.UNIFAC(i).Value, GetTheFormat(phprop.HenrysConstant.UNIFAC(i).Value))
              TempString = Space$(TEMPLENGTH)
              RSet TempString = Format$(phprop.HenrysConstant.UNIFAC(i).temperature, GetTheFormat(phprop.HenrysConstant.UNIFAC(i).temperature))
              Print #1, Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.ActivityCoefficient.BinaryInteractionParameterDatabase;
              If frmPrint!chkProperties(18).Value = 1 Then
                 If phprop.HenrysConstant.UNIFAC(i).error > 0 Then
                    Print #1, ","; phprop.HenrysConstant.UNIFAC(i).error
                 Else
                    Print #1, ""
                 End If
              End If
           Else
              ValueString = Space$(VALUELENGTH)
              RSet ValueString = "Not Available"
              TempString = Space$(TEMPLENGTH)
              RSet TempString = Format$(phprop.HenrysConstant.UNIFAC(i).temperature, GetTheFormat(phprop.HenrysConstant.UNIFAC(i).temperature))
              Print #1, Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
              Print #1, Tab(TABFULLCODE); phprop.HenrysConstant.UNIFAC(i).error
           End If
       Next i
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString
    End If


    'Print Henry's Constant from User Input
    If PROPAVAILABLE(HENRYS_CONSTANT_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.HenrysConstant.input.Value, GetTheFormat(phprop.HenrysConstant.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.HenrysConstant.input.temperature, GetTheFormat(phprop.HenrysConstant.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If phprop.ActivityCoefficient.BinaryInteractionParameterDatabase > 0 Then
       Call PrintTheCodesToFile(phprop.ActivityCoefficient.BinaryInteractionParameterDatabase)
       Header = 0
    End If
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(Header, phprop.HenrysConstant.regress.error)
          Call PrintTheErrorsToFile(Header, phprop.HenrysConstant.fit.UNIFAC.error)
          Call PrintTheErrorsToFile(Header, phprop.HenrysConstant.operatingT.UNIFAC.error)
          For i = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
             Call PrintTheErrorsToFile(Header, phprop.HenrysConstant.UNIFAC(i).error)
          Next i
       End If
    Else
       Call PrintTheErrorsToFile(Header, phprop.HenrysConstant.regress.error)
       Call PrintTheErrorsToFile(Header, phprop.HenrysConstant.fit.UNIFAC.error)
       Call PrintTheErrorsToFile(Header, phprop.HenrysConstant.operatingT.UNIFAC.error)
       For i = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
          Call PrintTheErrorsToFile(Header, phprop.HenrysConstant.UNIFAC(i).error)
       Next i
    End If

resume_exit12:
Exit Sub

error_henryconstant:
Resume resume_exit12


End Sub

Private Sub FullyPrintHenrysConstantToPrinter()
    Dim ValueString As String
    Dim TempString As String
    Dim i As Integer
    Dim Header As Integer

On Error GoTo error_printhenryconstant

    'Set header flag
    Header = 1
    'Print Henry's Constant From Regression of Data Points
    If PROPAVAILABLE(HENRYS_CONSTANT_REGRESS) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.HenrysConstant.regress.Value, GetTheFormat(phprop.HenrysConstant.regress.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.HenrysConstant.regress.temperature, GetTheFormat(phprop.HenrysConstant.regress.temperature))
       Printer.Print Tab(TABFULLSOURCE); "Regression of Data Points"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.regress.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.HenrysConstant.regress.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Regression of Data Points"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.regress.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.HenrysConstant.regress.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If
    'Print Henry's Constant from UNIFAC Fit
    If PROPAVAILABLE(HENRYS_CONSTANT_FIT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.HenrysConstant.fit.UNIFAC.Value, GetTheFormat(phprop.HenrysConstant.fit.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.HenrysConstant.fit.UNIFAC.temperature, GetTheFormat(phprop.HenrysConstant.fit.UNIFAC.temperature))
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC Fit with a Data Point"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.ActivityCoefficient.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.fit.UNIFAC.error > 0 Then
             Printer.Print ","; phprop.HenrysConstant.fit.UNIFAC.error
          Else
             Printer.Print ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC Fit with a Data Point"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.fit.UNIFAC.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.HenrysConstant.fit.UNIFAC.error
          Else
             Printer.Print ""
          End If
       End If
    End If
    'Print Henry's Constant from UNIFAC at Operating T
    If PROPAVAILABLE(HENRYS_CONSTANT_OPT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.HenrysConstant.operatingT.UNIFAC.Value, GetTheFormat(phprop.HenrysConstant.operatingT.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.HenrysConstant.operatingT.UNIFAC.temperature, GetTheFormat(phprop.HenrysConstant.operatingT.UNIFAC.temperature))
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.ActivityCoefficient.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.operatingT.UNIFAC.error > 0 Then
             Printer.Print ","; phprop.HenrysConstant.operatingT.UNIFAC.error
          Else
             Printer.Print ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLCODE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.HenrysConstant.operatingT.UNIFAC.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.HenrysConstant.operatingT.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If
    'Print Henry's Constants from Database
    If PROPAVAILABLE(HENRYS_CONSTANT_DATABASE) Then
       For i = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
           ValueString = Space$(VALUELENGTH)
           RSet ValueString = Format$(phprop.HenrysConstant.database(i).Value, GetTheFormat(phprop.HenrysConstant.database(i).Value))
           TempString = Space$(TEMPLENGTH)
           RSet TempString = Format$(phprop.HenrysConstant.database(i).temperature, GetTheFormat(phprop.HenrysConstant.database(i).temperature))
           Printer.Print Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.HenrysConstant.database(i).Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
       Next i
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString
    End If
    'Print Henry's Constants from UNIFAC corresponding to Database Temperatures
    If PROPAVAILABLE(HENRYS_CONSTANT_UNIFAC) Then
       For i = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
           If phprop.HenrysConstant.UNIFAC(i).error >= 0 Then
              ValueString = Space$(VALUELENGTH)
              RSet ValueString = Format$(phprop.HenrysConstant.UNIFAC(i).Value, GetTheFormat(phprop.HenrysConstant.UNIFAC(i).Value))
              TempString = Space$(TEMPLENGTH)
              RSet TempString = Format$(phprop.HenrysConstant.UNIFAC(i).temperature, GetTheFormat(phprop.HenrysConstant.UNIFAC(i).temperature))
              Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.ActivityCoefficient.BinaryInteractionParameterDatabase;
              If frmPrint!chkProperties(18).Value = 1 Then
                 If phprop.HenrysConstant.UNIFAC(i).error > 0 Then
                    Printer.Print ","; phprop.HenrysConstant.UNIFAC(i).error
                 Else
                    Printer.Print ""
                 End If
              End If
           Else
              ValueString = Space$(VALUELENGTH)
              RSet ValueString = "Not Available"
              TempString = Space$(TEMPLENGTH)
              RSet TempString = Format$(phprop.HenrysConstant.UNIFAC(i).temperature, GetTheFormat(phprop.HenrysConstant.UNIFAC(i).temperature))
              Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
              Printer.Print Tab(TABFULLCODE); phprop.HenrysConstant.UNIFAC(i).error
           End If
       Next i
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString
    End If
    'Print Henry's Constant from User Input
    If PROPAVAILABLE(HENRYS_CONSTANT_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.HenrysConstant.input.Value, GetTheFormat(phprop.HenrysConstant.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.HenrysConstant.input.temperature, GetTheFormat(phprop.HenrysConstant.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(HENRYS_CONSTANT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If phprop.ActivityCoefficient.BinaryInteractionParameterDatabase > 0 Then
       Call PrintTheCodes(phprop.ActivityCoefficient.BinaryInteractionParameterDatabase)
       Header = 0
    End If
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(Header, phprop.HenrysConstant.regress.error)
          Call PrintTheErrors(0, phprop.HenrysConstant.fit.UNIFAC.error)
          Call PrintTheErrors(0, phprop.HenrysConstant.operatingT.UNIFAC.error)
          For i = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
             Call PrintTheErrors(0, phprop.HenrysConstant.UNIFAC(i).error)
          Next i
       End If
    Else
       Call PrintTheErrors(Header, phprop.HenrysConstant.regress.error)
       Call PrintTheErrors(0, phprop.HenrysConstant.fit.UNIFAC.error)
       Call PrintTheErrors(0, phprop.HenrysConstant.operatingT.UNIFAC.error)
       For i = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
          Call PrintTheErrors(0, phprop.HenrysConstant.UNIFAC(i).error)
       Next i
    End If

resume_exit13:
Exit Sub

error_printhenryconstant:
Resume resume_exit13


End Sub

Private Sub FullyPrintLiquidDensityToFile()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_liquiddensity

    Header = 1
    'Print Liquid Density From Database
    If PROPAVAILABLE(LIQUID_DENSITY_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDensity.database.Value, GetTheFormat(phprop.LiquidDensity.database.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDensity.database.temperature, GetTheFormat(phprop.LiquidDensity.database.temperature))
       Print #1, Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.LiquidDensity.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDensity.database.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.LiquidDensity.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDensity.database.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.LiquidDensity.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Liquid Density From Group Contribution Method
    If PROPAVAILABLE(LIQUID_DENSITY_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDensity.UNIFAC.Value, GetTheFormat(phprop.LiquidDensity.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDensity.UNIFAC.temperature, GetTheFormat(phprop.LiquidDensity.UNIFAC.temperature))
       Print #1, Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDensity.UNIFAC.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.LiquidDensity.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDensity.UNIFAC.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.LiquidDensity.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Liquid Density from User Input
    If PROPAVAILABLE(LIQUID_DENSITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDensity.input.Value, GetTheFormat(phprop.LiquidDensity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDensity.input.temperature, GetTheFormat(phprop.LiquidDensity.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(Header, phprop.LiquidDensity.database.error)
          Call PrintTheErrorsToFile(Header, phprop.LiquidDensity.UNIFAC.error)
       End If
    Else
       Call PrintTheErrorsToFile(Header, phprop.LiquidDensity.database.error)
       Call PrintTheErrorsToFile(Header, phprop.LiquidDensity.UNIFAC.error)
    End If

resume_exit14:
Exit Sub

error_liquiddensity:
Resume resume_exit14


End Sub

Private Sub FullyPrintLiquidDensityToPrinter()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_printliquiddensity

    Header = 1
    'Print Liquid Density From Database
    If PROPAVAILABLE(LIQUID_DENSITY_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDensity.database.Value, GetTheFormat(phprop.LiquidDensity.database.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDensity.database.temperature, GetTheFormat(phprop.LiquidDensity.database.temperature))
       Printer.Print Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.LiquidDensity.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDensity.database.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.LiquidDensity.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDensity.database.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.LiquidDensity.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Liquid Density From Group Contribution Method
    If PROPAVAILABLE(LIQUID_DENSITY_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDensity.UNIFAC.Value, GetTheFormat(phprop.LiquidDensity.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDensity.UNIFAC.temperature, GetTheFormat(phprop.LiquidDensity.UNIFAC.temperature))
       Printer.Print Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDensity.UNIFAC.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.LiquidDensity.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDensity.UNIFAC.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.LiquidDensity.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Liquid Density from User Input
    If PROPAVAILABLE(LIQUID_DENSITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDensity.input.Value, GetTheFormat(phprop.LiquidDensity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDensity.input.temperature, GetTheFormat(phprop.LiquidDensity.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(Header, phprop.LiquidDensity.database.error)
          Call PrintTheErrors(Header, phprop.LiquidDensity.UNIFAC.error)
       End If
    Else
       Call PrintTheErrors(Header, phprop.LiquidDensity.database.error)
       Call PrintTheErrors(Header, phprop.LiquidDensity.UNIFAC.error)
    End If

resume_exit15:
Exit Sub

error_printliquiddensity:
Resume resume_exit15


End Sub

Private Sub FullyPrintLiquidDiffusivityToFile()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_liquiddiffusivity

    Header = 1
    'Print Liquid Diffusivity from Hayduk & Laudie correlation
    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_HAYDUKLAUDIE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDiffusivity.haydukLaudie.Value, GetTheFormat(phprop.LiquidDiffusivity.haydukLaudie.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDiffusivity.haydukLaudie.temperature, GetTheFormat(phprop.LiquidDiffusivity.haydukLaudie.temperature))
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.haydukLaudie.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.haydukLaudie.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.LiquidDiffusivity.haydukLaudie.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.haydukLaudie.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.haydukLaudie.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.LiquidDiffusivity.haydukLaudie.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Liquid Diffusivity from method of Polson, 1950
    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_POLSON) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDiffusivity.polson.Value, GetTheFormat(phprop.LiquidDiffusivity.polson.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDiffusivity.polson.temperature, GetTheFormat(phprop.LiquidDiffusivity.polson.temperature))
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.polson.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.polson.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.LiquidDiffusivity.polson.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.polson.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.polson.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.LiquidDiffusivity.polson.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Liquid Diffusivity from Wilke-Chang correlation
    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_WILKECHANG) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDiffusivity.wilkeChang.Value, GetTheFormat(phprop.LiquidDiffusivity.wilkeChang.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDiffusivity.wilkeChang.temperature, GetTheFormat(phprop.LiquidDiffusivity.wilkeChang.temperature))
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.wilkeChang.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.wilkeChang.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.LiquidDiffusivity.wilkeChang.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.wilkeChang.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.wilkeChang.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.LiquidDiffusivity.wilkeChang.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Liquid Diffusivity from User Input
    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDiffusivity.input.Value, GetTheFormat(phprop.LiquidDiffusivity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDiffusivity.input.temperature, GetTheFormat(phprop.LiquidDiffusivity.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(Header, phprop.LiquidDiffusivity.haydukLaudie.error)
          Call PrintTheErrorsToFile(Header, phprop.LiquidDiffusivity.polson.error)
          Call PrintTheErrorsToFile(Header, phprop.LiquidDiffusivity.wilkeChang.error)
       End If
    Else
       Call PrintTheErrorsToFile(Header, phprop.LiquidDiffusivity.haydukLaudie.error)
       Call PrintTheErrorsToFile(Header, phprop.LiquidDiffusivity.polson.error)
       Call PrintTheErrorsToFile(Header, phprop.LiquidDiffusivity.wilkeChang.error)
    End If

resume_exit16:
Exit Sub

error_liquiddiffusivity:
Resume resume_exit16


End Sub

Private Sub FullyPrintLiquidDiffusivityToPrinter()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_printliquiddiffusivity

    Header = 1
    'Print Liquid Diffusivity from Hayduk & Laudie correlation
    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_HAYDUKLAUDIE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDiffusivity.haydukLaudie.Value, GetTheFormat(phprop.LiquidDiffusivity.haydukLaudie.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDiffusivity.haydukLaudie.temperature, GetTheFormat(phprop.LiquidDiffusivity.haydukLaudie.temperature))
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.haydukLaudie.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.haydukLaudie.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.LiquidDiffusivity.haydukLaudie.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.haydukLaudie.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.haydukLaudie.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.LiquidDiffusivity.haydukLaudie.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Liquid Diffusivity from method of Polson, 1950
    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_POLSON) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDiffusivity.polson.Value, GetTheFormat(phprop.LiquidDiffusivity.polson.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDiffusivity.polson.temperature, GetTheFormat(phprop.LiquidDiffusivity.polson.temperature))
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.polson.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.polson.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.LiquidDiffusivity.polson.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.polson.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.polson.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.LiquidDiffusivity.polson.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Liquid Diffusivity from Wilke-Chang correlation
    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_WILKECHANG) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDiffusivity.wilkeChang.Value, GetTheFormat(phprop.LiquidDiffusivity.wilkeChang.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDiffusivity.wilkeChang.temperature, GetTheFormat(phprop.LiquidDiffusivity.wilkeChang.temperature))
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.wilkeChang.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.wilkeChang.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.LiquidDiffusivity.wilkeChang.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.LiquidDiffusivity.wilkeChang.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.LiquidDiffusivity.wilkeChang.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.LiquidDiffusivity.wilkeChang.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Liquid Diffusivity from User Input
    If PROPAVAILABLE(LIQUID_DIFFUSIVITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.LiquidDiffusivity.input.Value, GetTheFormat(phprop.LiquidDiffusivity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.LiquidDiffusivity.input.temperature, GetTheFormat(phprop.LiquidDiffusivity.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(LIQUID_DIFFUSIVITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(Header, phprop.LiquidDiffusivity.haydukLaudie.error)
          Call PrintTheErrors(Header, phprop.LiquidDiffusivity.polson.error)
          Call PrintTheErrors(Header, phprop.LiquidDiffusivity.wilkeChang.error)
       End If
    Else
       Call PrintTheErrors(Header, phprop.LiquidDiffusivity.haydukLaudie.error)
       Call PrintTheErrors(Header, phprop.LiquidDiffusivity.polson.error)
       Call PrintTheErrors(Header, phprop.LiquidDiffusivity.wilkeChang.error)
    End If

resume_exit17:
Exit Sub

error_printliquiddiffusivity:
Resume resume_exit17


End Sub

Private Sub FullyPrintMolarVolumeNBPToFile()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_molarvolume

    'Print Molar Volume at Normal Boiling Point From Schroeder's Method
    If PROPAVAILABLE(MOLAR_VOLUME_NBP_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolarVolume.BoilingPoint.UNIFAC.Value, GetTheFormat(phprop.MolarVolume.BoilingPoint.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       If HaveProperty(BOILING_POINT) Then
          RSet TempString = Format$(phprop.MolarVolume.BoilingPoint.UNIFAC.temperature, GetTheFormat(phprop.MolarVolume.BoilingPoint.UNIFAC.temperature))
       Else
          RSet TempString = "N/A"
       End If
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.MolarVolume.BoilingPoint.UNIFAC.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLAR_VOLUME_BOILING_POINT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.BoilingPoint.UNIFAC.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.MolarVolume.BoilingPoint.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.MolarVolume.BoilingPoint.UNIFAC.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.BoilingPoint.UNIFAC.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.MolarVolume.BoilingPoint.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Molar Volume at Normal Boiling Point from User Input
    If PROPAVAILABLE(MOLAR_VOLUME_NBP_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolarVolume.BoilingPoint.input.Value, GetTheFormat(phprop.MolarVolume.BoilingPoint.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.MolarVolume.BoilingPoint.input.temperature, GetTheFormat(phprop.MolarVolume.BoilingPoint.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLAR_VOLUME_BOILING_POINT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(1, phprop.MolarVolume.BoilingPoint.UNIFAC.error)
       End If
    Else
       Call PrintTheErrorsToFile(1, phprop.MolarVolume.BoilingPoint.UNIFAC.error)
    End If

resume_exit18:
Exit Sub

error_molarvolume:
Resume resume_exit18


End Sub

Private Sub FullyPrintMolarVolumeNBPToPrinter()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_printmolarvolume

    'Print Molar Volume at Normal Boiling Point From Schroeder's Method
    If PROPAVAILABLE(MOLAR_VOLUME_NBP_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolarVolume.BoilingPoint.UNIFAC.Value, GetTheFormat(phprop.MolarVolume.BoilingPoint.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       If HaveProperty(BOILING_POINT) Then
          RSet TempString = Format$(phprop.MolarVolume.BoilingPoint.UNIFAC.temperature, GetTheFormat(phprop.MolarVolume.BoilingPoint.UNIFAC.temperature))
       Else
          RSet TempString = "N/A"
       End If
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.MolarVolume.BoilingPoint.UNIFAC.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLAR_VOLUME_BOILING_POINT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.BoilingPoint.UNIFAC.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.MolarVolume.BoilingPoint.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.MolarVolume.BoilingPoint.UNIFAC.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.BoilingPoint.UNIFAC.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.MolarVolume.BoilingPoint.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Molar Volume at Normal Boiling Point from User Input
    If PROPAVAILABLE(MOLAR_VOLUME_NBP_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolarVolume.BoilingPoint.input.Value, GetTheFormat(phprop.MolarVolume.BoilingPoint.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.MolarVolume.BoilingPoint.input.temperature, GetTheFormat(phprop.MolarVolume.BoilingPoint.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLAR_VOLUME_BOILING_POINT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(1, phprop.MolarVolume.BoilingPoint.UNIFAC.error)
       End If
    Else
       Call PrintTheErrors(1, phprop.MolarVolume.BoilingPoint.UNIFAC.error)
    End If

resume_exit19:
Exit Sub

error_printmolarvolume:
Resume resume_exit19


End Sub

Private Sub FullyPrintMolarVolumeOpTToFile()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_molarvolumeopt
    Header = 1
    'Print Molar Volume at Operating Temperature From Database
    If PROPAVAILABLE(MOLAR_VOLUME_OPT_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolarVolume.operatingT.database.Value, GetTheFormat(phprop.MolarVolume.operatingT.database.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.MolarVolume.operatingT.database.temperature, GetTheFormat(phprop.MolarVolume.operatingT.database.temperature))
       Print #1, Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.MolarVolume.operatingT.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLAR_VOLUME_OPT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.operatingT.database.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.MolarVolume.operatingT.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.operatingT.database.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.MolarVolume.operatingT.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Molar Volume at Operating Temperature From Group Contribution Method
    If PROPAVAILABLE(MOLAR_VOLUME_OPT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolarVolume.operatingT.UNIFAC.Value, GetTheFormat(phprop.MolarVolume.operatingT.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.MolarVolume.operatingT.UNIFAC.temperature, GetTheFormat(phprop.MolarVolume.operatingT.UNIFAC.temperature))
       Print #1, Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLAR_VOLUME_OPT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.operatingT.UNIFAC.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.MolarVolume.operatingT.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.operatingT.UNIFAC.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.MolarVolume.operatingT.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Molar Volume at Operating Temperature from User Input
    If PROPAVAILABLE(MOLAR_VOLUME_OPT_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolarVolume.operatingT.input.Value, GetTheFormat(phprop.MolarVolume.operatingT.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.MolarVolume.operatingT.input.temperature, GetTheFormat(phprop.MolarVolume.operatingT.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLAR_VOLUME_OPT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(Header, phprop.MolarVolume.operatingT.database.error)
          Call PrintTheErrorsToFile(Header, phprop.MolarVolume.operatingT.UNIFAC.error)
       End If
    Else
       Call PrintTheErrorsToFile(Header, phprop.MolarVolume.operatingT.database.error)
       Call PrintTheErrorsToFile(Header, phprop.MolarVolume.operatingT.UNIFAC.error)
    End If

resume_exit20:
Exit Sub

error_molarvolumeopt:
Resume resume_exit20


End Sub

Private Sub FullyPrintMolarVolumeOpTToPrinter()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_printmolarVolumeOPt

    Header = 1
    'Print Molar Volume at Operating Temperature From Database
    If PROPAVAILABLE(MOLAR_VOLUME_OPT_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolarVolume.operatingT.database.Value, GetTheFormat(phprop.MolarVolume.operatingT.database.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.MolarVolume.operatingT.database.temperature, GetTheFormat(phprop.MolarVolume.operatingT.database.temperature))
       Printer.Print Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.MolarVolume.operatingT.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLAR_VOLUME_OPT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.operatingT.database.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.MolarVolume.operatingT.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.operatingT.database.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.MolarVolume.operatingT.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Molar Volume at Operating Temperature From Group Contribution Method
    If PROPAVAILABLE(MOLAR_VOLUME_OPT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolarVolume.operatingT.UNIFAC.Value, GetTheFormat(phprop.MolarVolume.operatingT.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.MolarVolume.operatingT.UNIFAC.temperature, GetTheFormat(phprop.MolarVolume.operatingT.UNIFAC.temperature))
       Printer.Print Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLAR_VOLUME_OPT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.operatingT.UNIFAC.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.MolarVolume.operatingT.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolarVolume.operatingT.UNIFAC.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.MolarVolume.operatingT.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Molar Volume at Operating Temperature from User Input
    If PROPAVAILABLE(MOLAR_VOLUME_OPT_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolarVolume.operatingT.input.Value, GetTheFormat(phprop.MolarVolume.operatingT.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.MolarVolume.operatingT.input.temperature, GetTheFormat(phprop.MolarVolume.operatingT.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLAR_VOLUME_OPT); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(Header, phprop.MolarVolume.operatingT.database.error)
          Call PrintTheErrors(Header, phprop.MolarVolume.operatingT.UNIFAC.error)
       End If
    Else
       Call PrintTheErrors(Header, phprop.MolarVolume.operatingT.database.error)
       Call PrintTheErrors(Header, phprop.MolarVolume.operatingT.UNIFAC.error)
    End If

resume_exit21:
Exit Sub

error_printmolarVolumeOPt:
Resume resume_exit21

End Sub

Private Sub FullyPrintMolecularWeightToFile()
    Dim ValueString As String
    Dim Header As Integer

On Error GoTo error_molecularWeight

    Header = 1
    'Print Molecular Weight From Database
    If PROPAVAILABLE(MOLECULAR_WEIGHT_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolecularWeight.database.Value, MOLECULAR_WEIGHT_FORMAT)
       Print #1, Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.MolecularWeight.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLECULAR_WEIGHT); "";
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolecularWeight.database.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.MolecularWeight.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolecularWeight.database.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.MolecularWeight.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Molecular Weight From Group Contribution Method
    If PROPAVAILABLE(MOLECULAR_WEIGHT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolecularWeight.UNIFAC.Value, MOLECULAR_WEIGHT_FORMAT)
       Print #1, Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLECULAR_WEIGHT);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolecularWeight.UNIFAC.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.MolecularWeight.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolecularWeight.UNIFAC.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.MolecularWeight.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Molecular Weight from User Input
    If PROPAVAILABLE(MOLECULAR_WEIGHT_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolecularWeight.input.Value, MOLECULAR_WEIGHT_FORMAT)
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLECULAR_WEIGHT)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(Header, phprop.MolecularWeight.database.error)
          Call PrintTheErrorsToFile(Header, phprop.MolecularWeight.UNIFAC.error)
       End If
    Else
       Call PrintTheErrorsToFile(Header, phprop.MolecularWeight.database.error)
       Call PrintTheErrorsToFile(Header, phprop.MolecularWeight.UNIFAC.error)
    End If

resume_exit22:
Exit Sub

error_molecularWeight:
Resume resume_exit22


End Sub

Private Sub FullyPrintMolecularWeightToPrinter()
    Dim ValueString As String
    Dim Header As Integer

On Error GoTo error_printmolecularWeight

    Header = 1
    'Print Molecular Weight From Database
    If PROPAVAILABLE(MOLECULAR_WEIGHT_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolecularWeight.database.Value, MOLECULAR_WEIGHT_FORMAT)
       Printer.Print Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.MolecularWeight.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLECULAR_WEIGHT); "";
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolecularWeight.database.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.MolecularWeight.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolecularWeight.database.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.MolecularWeight.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Molecular Weight From Group Contribution Method
    If PROPAVAILABLE(MOLECULAR_WEIGHT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolecularWeight.UNIFAC.Value, MOLECULAR_WEIGHT_FORMAT)
       Printer.Print Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLECULAR_WEIGHT);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolecularWeight.UNIFAC.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.MolecularWeight.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Group Contribution Method"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.MolecularWeight.UNIFAC.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.MolecularWeight.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Molecular Weight from User Input
    If PROPAVAILABLE(MOLECULAR_WEIGHT_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.MolecularWeight.input.Value, MOLECULAR_WEIGHT_FORMAT)
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(MOLECULAR_WEIGHT)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(Header, phprop.MolecularWeight.database.error)
          Call PrintTheErrors(Header, phprop.MolecularWeight.UNIFAC.error)
       End If
    Else
       Call PrintTheErrors(Header, phprop.MolecularWeight.database.error)
       Call PrintTheErrors(Header, phprop.MolecularWeight.UNIFAC.error)
    End If

resume_exit23:
Exit Sub

error_printmolecularWeight:
Resume resume_exit23


End Sub

Private Sub FullyPrintOctWaterPartCoeffToFile()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_octwater

    'Set header flag
    Header = 1
    'Print Octanol Water Partition Coefficient from UNIFAC at operating temperature
    If PROPAVAILABLE(OCT_WATER_PART_COEFF_OPT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.OctWaterPartCoeff.operatingT.UNIFAC.Value, GetTheFormat(phprop.OctWaterPartCoeff.operatingT.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature, GetTheFormat(phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature))
       Print #1, Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(OCT_WATER_PART_COEFF); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.operatingT.UNIFAC.error > 0 Then
             Print #1, ","; phprop.OctWaterPartCoeff.operatingT.UNIFAC.error
          Else
             Print #1, ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.operatingT.UNIFAC.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.OctWaterPartCoeff.operatingT.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Octanol Water Partition Coefficient from Database
    If PROPAVAILABLE(OCT_WATER_PART_COEFF_DB) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.OctWaterPartCoeff.database.Value, GetTheFormat(phprop.OctWaterPartCoeff.database.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.OctWaterPartCoeff.database.temperature, GetTheFormat(phprop.OctWaterPartCoeff.database.temperature))
       Print #1, Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.OctWaterPartCoeff.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(OCT_WATER_PART_COEFF); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.database.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.OctWaterPartCoeff.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.database.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.OctWaterPartCoeff.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Octanol Water Partition Coefficient from UNIFAC at database temperature
    If PROPAVAILABLE(OCT_WATER_PART_COEFF_DBT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.OctWaterPartCoeff.databaseT.UNIFAC.Value, GetTheFormat(phprop.OctWaterPartCoeff.databaseT.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature, GetTheFormat(phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature))
       Print #1, Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(OCT_WATER_PART_COEFF); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.databaseT.UNIFAC.error > 0 Then
             Print #1, ","; phprop.OctWaterPartCoeff.databaseT.UNIFAC.error
          Else
             Print #1, ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.databaseT.UNIFAC.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.OctWaterPartCoeff.databaseT.UNIFAC.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Octanol Water Partition Coefficient from User Input
    If PROPAVAILABLE(OCT_WATER_PART_COEFF_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.OctWaterPartCoeff.input.Value, GetTheFormat(phprop.OctWaterPartCoeff.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.OctWaterPartCoeff.input.temperature, GetTheFormat(phprop.OctWaterPartCoeff.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(OCT_WATER_PART_COEFF); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase > 0 Then
       Call PrintTheCodesToFile(phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase)
       Header = 0
    End If
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(Header, phprop.OctWaterPartCoeff.operatingT.UNIFAC.error)
          Call PrintTheErrorsToFile(Header, phprop.OctWaterPartCoeff.database.error)
          Call PrintTheErrorsToFile(Header, phprop.OctWaterPartCoeff.databaseT.UNIFAC.error)
       End If
    Else
       Call PrintTheErrorsToFile(Header, phprop.OctWaterPartCoeff.operatingT.UNIFAC.error)
       Call PrintTheErrorsToFile(Header, phprop.OctWaterPartCoeff.database.error)
       Call PrintTheErrorsToFile(Header, phprop.OctWaterPartCoeff.databaseT.UNIFAC.error)
    End If
resume_exit24:
Exit Sub

error_octwater:
Resume resume_exit24


End Sub

Private Sub FullyPrintOctWaterPartCoeffToPrinter()
    Dim ValueString As String
    Dim TempString As String
    Dim Header As Integer

On Error GoTo error_printoctwater

    'Set header flag
    Header = 1
    'Print Octanol Water Partition Coefficient from UNIFAC at operating temperature
    If PROPAVAILABLE(OCT_WATER_PART_COEFF_OPT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.OctWaterPartCoeff.operatingT.UNIFAC.Value, GetTheFormat(phprop.OctWaterPartCoeff.operatingT.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature, GetTheFormat(phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature))
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(OCT_WATER_PART_COEFF); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.operatingT.UNIFAC.error > 0 Then
             Printer.Print ","; phprop.OctWaterPartCoeff.operatingT.UNIFAC.error
          Else
             Printer.Print ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Operating T"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.operatingT.UNIFAC.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.OctWaterPartCoeff.operatingT.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Octanol Water Partition Coefficient from Database
    If PROPAVAILABLE(OCT_WATER_PART_COEFF_DB) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.OctWaterPartCoeff.database.Value, GetTheFormat(phprop.OctWaterPartCoeff.database.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.OctWaterPartCoeff.database.temperature, GetTheFormat(phprop.OctWaterPartCoeff.database.temperature))
       Printer.Print Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.OctWaterPartCoeff.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(OCT_WATER_PART_COEFF); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.database.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.OctWaterPartCoeff.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.database.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.OctWaterPartCoeff.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Octanol Water Partition Coefficient from UNIFAC at database temperature
    If PROPAVAILABLE(OCT_WATER_PART_COEFF_DBT_UNIFAC) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.OctWaterPartCoeff.databaseT.UNIFAC.Value, GetTheFormat(phprop.OctWaterPartCoeff.databaseT.UNIFAC.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature, GetTheFormat(phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature))
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(OCT_WATER_PART_COEFF); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE); Tab(TABFULLCODE); phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.databaseT.UNIFAC.error > 0 Then
             Printer.Print ","; phprop.OctWaterPartCoeff.databaseT.UNIFAC.error
          Else
             Printer.Print ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "UNIFAC at Database T"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.OctWaterPartCoeff.databaseT.UNIFAC.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.OctWaterPartCoeff.databaseT.UNIFAC.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Octanol Water Partition Coefficient from User Input
    If PROPAVAILABLE(OCT_WATER_PART_COEFF_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.OctWaterPartCoeff.input.Value, GetTheFormat(phprop.OctWaterPartCoeff.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.OctWaterPartCoeff.input.temperature, GetTheFormat(phprop.OctWaterPartCoeff.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(OCT_WATER_PART_COEFF); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase > 0 Then
       Call PrintTheCodes(phprop.OctWaterPartCoeff.BinaryInteractionParameterDatabase)
       Header = 0
    End If
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(Header, phprop.OctWaterPartCoeff.operatingT.UNIFAC.error)
          Call PrintTheErrors(Header, phprop.OctWaterPartCoeff.database.error)
          Call PrintTheErrors(Header, phprop.OctWaterPartCoeff.databaseT.UNIFAC.error)
       End If
    Else
       Call PrintTheErrors(Header, phprop.OctWaterPartCoeff.operatingT.UNIFAC.error)
       Call PrintTheErrors(Header, phprop.OctWaterPartCoeff.database.error)
       Call PrintTheErrors(Header, phprop.OctWaterPartCoeff.databaseT.UNIFAC.error)
    End If

resume_exit25:
Exit Sub

error_printoctwater:
Resume resume_exit25


End Sub

Private Sub FullyPrintRefractiveIndexToFile()
    Dim ValueString As String

On Error GoTo error_refractive

    'Print Refractive Index From Database
    If PROPAVAILABLE(REFRACTIVE_INDEX_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.RefractiveIndex.database.Value, REFRACTIVE_INDEX_FORMAT)
       Print #1, Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.RefractiveIndex.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(REFRACTIVE_INDEX);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.RefractiveIndex.database.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.RefractiveIndex.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.RefractiveIndex.database.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.RefractiveIndex.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If
    'Print Refractive Index from User Input
    If PROPAVAILABLE(REFRACTIVE_INDEX_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.RefractiveIndex.input.Value, REFRACTIVE_INDEX_FORMAT)
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(REFRACTIVE_INDEX)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(1, phprop.RefractiveIndex.database.error)
       End If
    Else
       Call PrintTheErrorsToFile(1, phprop.RefractiveIndex.database.error)
    End If

resume_exit26:
Exit Sub

error_refractive:
Resume resume_exit26


End Sub

Private Sub FullyPrintRefractiveIndexToPrinter()
    Dim ValueString As String

On Error GoTo error_printrefractive

    'Print Refractive Index From Database
    If PROPAVAILABLE(REFRACTIVE_INDEX_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.RefractiveIndex.database.Value, REFRACTIVE_INDEX_FORMAT)
       Printer.Print Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.RefractiveIndex.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(REFRACTIVE_INDEX);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.RefractiveIndex.database.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.RefractiveIndex.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.RefractiveIndex.database.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.RefractiveIndex.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Refractive Index from User Input
    If PROPAVAILABLE(REFRACTIVE_INDEX_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.RefractiveIndex.input.Value, REFRACTIVE_INDEX_FORMAT)
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(REFRACTIVE_INDEX)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(1, phprop.RefractiveIndex.database.error)
       End If
    Else
       Call PrintTheErrors(1, phprop.RefractiveIndex.database.error)
    End If

resume_exit27:
Exit Sub

error_printrefractive:
Resume resume_exit27


End Sub

Private Sub FullyPrintVaporPressureToFile()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_vaporpressure

    'Print Vapor Pressure From Database
    If PROPAVAILABLE(VAPOR_PRESSURE_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.VaporPressure.database.Value, GetTheFormat(phprop.VaporPressure.database.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.VaporPressure.database.temperature, GetTheFormat(phprop.VaporPressure.database.temperature))
       Print #1, Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.VaporPressure.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(VAPOR_PRESSURE); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.VaporPressure.database.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.VaporPressure.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.VaporPressure.database.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.VaporPressure.database.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Vapor Pressure from User Input
    If PROPAVAILABLE(VAPOR_PRESSURE_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.VaporPressure.input.Value, GetTheFormat(phprop.VaporPressure.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.VaporPressure.input.temperature, GetTheFormat(phprop.VaporPressure.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(VAPOR_PRESSURE); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(1, phprop.VaporPressure.database.error)
       End If
    Else
       Call PrintTheErrorsToFile(1, phprop.VaporPressure.database.error)
    End If

resume_exit28:
Exit Sub

error_vaporpressure:
Resume resume_exit28


End Sub

Private Sub FullyPrintVaporPressureToPrinter()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_printvaporpressure

    'Print Vapor Pressure From Database
    If PROPAVAILABLE(VAPOR_PRESSURE_DATABASE) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.VaporPressure.database.Value, GetTheFormat(phprop.VaporPressure.database.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.VaporPressure.database.temperature, GetTheFormat(phprop.VaporPressure.database.temperature))
       Printer.Print Tab(TABFULLSOURCE); "Database (" & GetSource(phprop.VaporPressure.database.Source.short) & ")"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(VAPOR_PRESSURE); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.VaporPressure.database.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.VaporPressure.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "Database"; Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.VaporPressure.database.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.VaporPressure.database.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Vapor Pressure from User Input
    If PROPAVAILABLE(VAPOR_PRESSURE_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.VaporPressure.input.Value, GetTheFormat(phprop.VaporPressure.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.VaporPressure.input.temperature, GetTheFormat(phprop.VaporPressure.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(VAPOR_PRESSURE); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(1, phprop.VaporPressure.database.error)
       End If
    Else
       Call PrintTheErrors(1, phprop.VaporPressure.database.error)
    End If

resume_exit29:
Exit Sub

error_printvaporpressure:
Resume resume_exit29


End Sub

Private Sub FullyPrintWaterDensityToFile()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_waterdensity
    'Print Water Density from Correlation
    If PROPAVAILABLE(WATER_DENSITY_CORRELATION) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterDensity.correlation.Value, WATER_DENSITY_FORMAT)
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterDensity.correlation.temperature, GetTheFormat(phprop.WaterDensity.correlation.temperature))
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.WaterDensity.correlation.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterDensity.correlation.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.WaterDensity.correlation.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.WaterDensity.correlation.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterDensity.correlation.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.WaterDensity.correlation.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Water Density from User Input
    If PROPAVAILABLE(WATER_DENSITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterDensity.input.Value, WATER_DENSITY_FORMAT)
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterDensity.input.temperature, GetTheFormat(phprop.WaterDensity.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(1, phprop.WaterDensity.correlation.error)
       End If
    Else
       Call PrintTheErrorsToFile(1, phprop.WaterDensity.correlation.error)
    End If

resume_exit30:
Exit Sub

error_waterdensity:
Resume resume_exit30


End Sub

Private Sub FullyPrintWaterDensityToPrinter()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_printwaterdensity

    'Print Water Density from Correlation
    If PROPAVAILABLE(WATER_DENSITY_CORRELATION) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterDensity.correlation.Value, WATER_DENSITY_FORMAT)
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterDensity.correlation.temperature, GetTheFormat(phprop.WaterDensity.correlation.temperature))
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.WaterDensity.correlation.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterDensity.correlation.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.WaterDensity.correlation.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.WaterDensity.correlation.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterDensity.correlation.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.WaterDensity.correlation.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Water Density from User Input
    If PROPAVAILABLE(WATER_DENSITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterDensity.input.Value, WATER_DENSITY_FORMAT)
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterDensity.input.temperature, GetTheFormat(phprop.WaterDensity.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_DENSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(1, phprop.WaterDensity.correlation.error)
       End If
    Else
       Call PrintTheErrors(1, phprop.WaterDensity.correlation.error)
    End If

resume_exit31:
Exit Sub

error_printwaterdensity:
Resume resume_exit31


End Sub

Private Sub FullyPrintWaterSurfaceTensionToFile()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_watersurfacetension

    'Print Water Surface Tension from Correlation
    If PROPAVAILABLE(WATER_SURF_TENSION_CORRELATION) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterSurfaceTension.correlation.Value, GetTheFormat(phprop.WaterSurfaceTension.correlation.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterSurfaceTension.correlation.temperature, GetTheFormat(phprop.WaterSurfaceTension.correlation.temperature))
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.WaterSurfaceTension.correlation.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_SURFACE_TENSION); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterSurfaceTension.correlation.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.WaterSurfaceTension.correlation.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.WaterSurfaceTension.correlation.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterSurfaceTension.correlation.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.WaterSurfaceTension.correlation.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Water Surface Tension from User Input
    If PROPAVAILABLE(WATER_SURF_TENSION_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterSurfaceTension.input.Value, GetTheFormat(phprop.WaterSurfaceTension.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterSurfaceTension.input.temperature, GetTheFormat(phprop.WaterSurfaceTension.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_SURFACE_TENSION); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(1, phprop.WaterSurfaceTension.correlation.error)
       End If
    Else
       Call PrintTheErrorsToFile(1, phprop.WaterSurfaceTension.correlation.error)
    End If

resume_exit32:
Exit Sub

error_watersurfacetension:
Resume resume_exit32


End Sub

Private Sub FullyPrintWaterSurfaceTensionToPrinter()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_printwatersurfacetension

    'Print Water Surface Tension from Correlation
    If PROPAVAILABLE(WATER_SURF_TENSION_CORRELATION) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterSurfaceTension.correlation.Value, GetTheFormat(phprop.WaterSurfaceTension.correlation.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterSurfaceTension.correlation.temperature, GetTheFormat(phprop.WaterSurfaceTension.correlation.temperature))
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.WaterSurfaceTension.correlation.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_SURFACE_TENSION); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterSurfaceTension.correlation.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.WaterSurfaceTension.correlation.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.WaterSurfaceTension.correlation.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterSurfaceTension.correlation.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.WaterSurfaceTension.correlation.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Water Surface Tension from User Input
    If PROPAVAILABLE(WATER_SURF_TENSION_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterSurfaceTension.input.Value, GetTheFormat(phprop.WaterSurfaceTension.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterSurfaceTension.input.temperature, GetTheFormat(phprop.WaterSurfaceTension.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_SURFACE_TENSION); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(1, phprop.WaterSurfaceTension.correlation.error)
       End If
    Else
       Call PrintTheErrors(1, phprop.WaterSurfaceTension.correlation.error)
    End If

resume_exit33:
Exit Sub

error_printwatersurfacetension:
Resume resume_exit33


End Sub

Private Sub FullyPrintWaterViscosityToFile()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_waterviscosity

    'Print Water Viscosity from Correlation
    If PROPAVAILABLE(WATER_VISCOSITY_CORRELATION) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterViscosity.correlation.Value, GetTheFormat(phprop.WaterViscosity.correlation.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterViscosity.correlation.temperature, GetTheFormat(phprop.WaterViscosity.correlation.temperature))
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.WaterViscosity.correlation.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_VISCOSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterViscosity.correlation.error > 0 Then
             Print #1, Tab(TABFULLCODE); phprop.WaterViscosity.correlation.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); GetSource(phprop.WaterViscosity.correlation.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterViscosity.correlation.error < 0 Then
             Print #1, Tab(TABFULLCODE); phprop.WaterViscosity.correlation.error
          Else
             Print #1, Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Water Viscosity from User Input
    If PROPAVAILABLE(WATER_VISCOSITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterViscosity.input.Value, GetTheFormat(phprop.WaterViscosity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterViscosity.input.temperature, GetTheFormat(phprop.WaterViscosity.input.temperature))
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_VISCOSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Print #1, Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrorsToFile(1, phprop.WaterViscosity.correlation.error)
       End If
    Else
       Call PrintTheErrorsToFile(1, phprop.WaterViscosity.correlation.error)
    End If

resume_exit34:
Exit Sub

error_waterviscosity:
Resume resume_exit34

End Sub

Private Sub FullyPrintWaterViscosityToPrinter()
    Dim ValueString As String
    Dim TempString As String

On Error GoTo error_printwaterviscosity

    'Print Water Viscosity from Correlation
    If PROPAVAILABLE(WATER_VISCOSITY_CORRELATION) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterViscosity.correlation.Value, GetTheFormat(phprop.WaterViscosity.correlation.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterViscosity.correlation.temperature, GetTheFormat(phprop.WaterViscosity.correlation.temperature))
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.WaterViscosity.correlation.Source.short); Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_VISCOSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE);
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterViscosity.correlation.error > 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.WaterViscosity.correlation.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); GetSource(phprop.WaterViscosity.correlation.Source.short); Tab(TABFULLVALUE); ValueString;
       If frmPrint!chkProperties(18).Value = 1 Then
          If phprop.WaterViscosity.correlation.error < 0 Then
             Printer.Print Tab(TABFULLCODE); phprop.WaterViscosity.correlation.error
          Else
             Printer.Print Tab(TABFULLCODE); ""
          End If
       End If
    End If

    'Print Water Viscosity from User Input
    If PROPAVAILABLE(WATER_VISCOSITY_INPUT) Then
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = Format$(phprop.WaterViscosity.input.Value, GetTheFormat(phprop.WaterViscosity.input.Value))
       TempString = Space$(TEMPLENGTH)
       RSet TempString = Format$(phprop.WaterViscosity.input.temperature, GetTheFormat(phprop.WaterViscosity.input.temperature))
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString; Tab(TABFULLUNITS); Units(WATER_VISCOSITY); Tab(TABFULLTEMPERATURE); TempString; "  "; Units(OPERATING_TEMPERATURE)
    Else
       ValueString = Space$(VALUELENGTH)
       RSet ValueString = "Not Available"
       Printer.Print Tab(TABFULLSOURCE); "User Input"; Tab(TABFULLVALUE); ValueString
    End If
    'Print relevant codes for this property
    If optPrintProperties(1).Value = True Then
       If frmPrint!chkProperties(18).Value = 1 Then
          Call PrintTheErrors(1, phprop.WaterViscosity.correlation.error)
       End If
    Else
       Call PrintTheErrors(1, phprop.WaterViscosity.correlation.error)
    End If

resume_exit35:
Exit Sub

error_printwaterviscosity:
Resume resume_exit35


End Sub

Private Sub GetPrintFileName()

    On Error Resume Next
    frmPrint!CMDialog1.DefaultExt = "out"
    frmPrint!CMDialog1.Filter = "StEPP Output Files (*.out)|*.out"
    frmPrint!CMDialog1.DialogTitle = "Print StEPP Output to File"
    frmPrint!CMDialog1.flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST
    frmPrint!CMDialog1.CancelError = True
    frmPrint!CMDialog1.Action = 2
    PrintFileName$ = frmPrint!CMDialog1.FileName
    If Err = 32755 Then   'Cancel selected by user
       PrintFileName$ = ""
    End If

End Sub

Private Function GetSource(Source As Long) As String

   Select Case Source
      Case 1
         GetSource = "YAWS"
      Case 2
         GetSource = "SUPERFUND"
      Case 3
         GetSource = "RTI"
      Case 4
         GetSource = "DIPPR801"
      Case 5
         GetSource = "BRI/NASA"
      Case 6
         GetSource = "Clean Air Act"
      Case 7
         GetSource = "UNIFAC"
      Case 8
         GetSource = "Schroeder's Method"
      Case 9
         GetSource = "Group Contribution Method"
      Case 10
         GetSource = "Hayduk & Laudie"
      Case 11
         GetSource = "Polson"
      Case 12
         GetSource = "Wilke-Chang"
      Case 13
         GetSource = "Wilke-Lee"
      Case 14
         GetSource = "Data Correlation"
      Case 15
         GetSource = "Cummins"
      Case 16
         GetSource = "Ideal Gas Law"
      Case 17
         GetSource = "HC Regression"
      Case 18
         GetSource = "HC UNIFAC Fit"
      Case 19
         GetSource = "Solubility UNIFAC Fit"
   End Select

End Function

Private Sub optPrintContaminants_Click(Index As Integer)
    
    Select Case Index
       Case 0   'All Contaminants
          lblCurrentContaminant.ForeColor = &H80000008
          lblCurrentContaminant.BackColor = &HC0C0C0
       Case 1   'Currently selected contaminant
          lblCurrentContaminant.ForeColor = &HFFFFFF
          lblCurrentContaminant.BackColor = &H800000
    End Select
End Sub

Private Sub optPrintProperties_Click(Index As Integer)
    Dim i As Integer

    Select Case Index
       Case 0   'All Properties
          For i = 0 To 18
              chkProperties(i).BackColor = &HC0C0C0
              chkProperties(i).ForeColor = &H80000008
              chkProperties(i).Enabled = False
          Next i
       Case 1   'Selected Properties
          For i = 0 To 18
              If chkProperties(i).Value Then
                 chkProperties(i).BackColor = &H800000
                 chkProperties(i).ForeColor = &HFFFFFF
              End If
              chkProperties(i).Enabled = True
          Next i
    End Select
    
    If frmPrint!cboPropertyDescription.ListIndex = 0 Then
       chkProperties(18).Enabled = False
    End If

End Sub

Private Sub PrintActivityCoefficientPrinter()
    Dim ValueString As String


    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(ACTIVITY_COEFFICIENT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.ActivityCoefficient.CurrentSelection.Value, GetTheFormat(phprop.ActivityCoefficient.CurrentSelection.Value))
             Printer.Print "Activity Coefficient"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(ACTIVITY_COEFFICIENT); Tab(TABSOURCE); GetSource(phprop.ActivityCoefficient.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Activity Coefficient"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Activity Coefficient
          HeightActivityCoefficient = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightActivityCoefficient = HeightActivityCoefficient + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightActivityCoefficient = HeightActivityCoefficient + NUMLINES_ACTIVITY_COEFFICIENT * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightActivityCoefficient + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  INFINITE DILUTION ACTIVITY COEFFICIENT"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintActivityCoefficientToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintActivityCoefficientToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(ACTIVITY_COEFFICIENT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.ActivityCoefficient.CurrentSelection.Value, GetTheFormat(phprop.ActivityCoefficient.CurrentSelection.Value))
             Print #1, "Activity Coefficient"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(ACTIVITY_COEFFICIENT); Tab(TABSOURCE); GetSource(phprop.ActivityCoefficient.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Activity Coefficient"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Activity Coefficient
          Print #1, "Property:  INFINITE DILUTION ACTIVITY COEFFICIENT"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintActivityCoefficientToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintAirDensityPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(AIR_DENSITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.AirDensity.CurrentSelection.Value, GetTheFormat(phprop.AirDensity.CurrentSelection.Value))
             Printer.Print "Air Density"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(AIR_DENSITY); Tab(TABSOURCE); GetSource(phprop.AirDensity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Air Density"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Air Density
          HeightAirDensity = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightAirDensity = HeightAirDensity + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightAirDensity = HeightAirDensity + NUMLINES_AIR_DENSITY * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightAirDensity + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintAirWaterTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  AIR DENSITY"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintAirDensityToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintAirDensityToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(AIR_DENSITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.AirDensity.CurrentSelection.Value, GetTheFormat(phprop.AirDensity.CurrentSelection.Value))
             Print #1, "Air Density"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(AIR_DENSITY); Tab(TABSOURCE); GetSource(phprop.AirDensity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Air Density"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Air Density
          Print #1, "Property:  AIR DENSITY"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintAirDensityToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintAirViscosityPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(AIR_VISCOSITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.AirViscosity.CurrentSelection.Value, GetTheFormat(phprop.AirViscosity.CurrentSelection.Value))
             Printer.Print "Air Viscosity"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(AIR_VISCOSITY); Tab(TABSOURCE); GetSource(phprop.AirViscosity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Air Viscosity"; Tab(TABVALUE); ValueString
          End If

       Case 1   'Print Full Description of Air Density
          HeightAirViscosity = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightAirViscosity = HeightAirViscosity + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightAirViscosity = HeightAirViscosity + NUMLINES_AIR_VISCOSITY * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightAirViscosity + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintAirWaterTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  AIR VISCOSITY"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintAirViscosityToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintAirViscosityToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(AIR_VISCOSITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.AirViscosity.CurrentSelection.Value, GetTheFormat(phprop.AirViscosity.CurrentSelection.Value))
             Print #1, "Air Viscosity"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(AIR_VISCOSITY); Tab(TABSOURCE); GetSource(phprop.AirViscosity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Air Viscosity"; Tab(TABVALUE); ValueString
          End If

       Case 1   'Print Full Description of Air Density
          Print #1, "Property:  AIR VISCOSITY"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintAirViscosityToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintAirWaterProperties()

       Printer.FontSize = 14
       Printer.FontBold = True
       Printer.Print "PROPERTIES OF AIR AND WATER"
       Printer.Print
       Printer.Print

       Select Case frmPrint!cboPropertyDescription.ListIndex
          Case 0   'Print Selected Value Only
             Printer.FontBold = False
             Printer.Print "Summary of Selected Values"
             Printer.Print
             Printer.Print
             Printer.FontSize = 10
             Printer.FontBold = True
             Printer.FontUnderline = True
             Printer.Print "Property:"; Tab(TABVALUE); "Value:"; Tab(TABUNITS); "Units:"; Tab(TABSOURCE); "Source:"
             Printer.Print
             Printer.FontUnderline = False
             Printer.FontBold = False
             Printer.FontSize = 10
             Call PrintOperatingPressure
             Call PrintOperatingTemperature
             Printer.Print

             If frmPrint!optPrintProperties(0).Value Then  'Print all properties
                Call PrintAllAirWaterPropertiesToPrinter
             ElseIf frmPrint!optPrintProperties(1).Value Then  'Print chosen properties only
                Call PrintChosenAirWaterPropertiesToPrinter
             End If
          Case 1   'Print Full Description of Properties
             Printer.FontBold = False
             Printer.Print "Full Description of Properties"
             Printer.Print
             Printer.Print
             HeightTitle = Printer.CurrentY
             Printer.FontSize = 10
             Printer.FontBold = True
             Printer.FontUnderline = True
             Printer.Print "Operating Conditions:"; Tab(TABVALUE); "Value:"; Tab(TABUNITS); "Units:"; Tab(TABSOURCE); "Source:"
             Printer.Print
             Printer.FontUnderline = False
             Printer.FontBold = False
             Printer.FontSize = 10
             Call PrintOperatingPressure
             Call PrintOperatingTemperature
             Printer.Print
             Printer.Print
             HeightOperatingConditions = Printer.CurrentY - HeightTitle

             If frmPrint!optPrintProperties(0).Value Then  'Print all properties
                Call PrintAllAirWaterPropertiesToPrinter
             ElseIf frmPrint!optPrintProperties(1).Value Then  'Print chosen properties only
                Call PrintChosenAirWaterPropertiesToPrinter
             End If

       End Select

End Sub

Private Sub PrintAirWaterPropertiesToFile()

       Print #1, "PROPERTIES OF AIR AND WATER"
       Print #1,
       Print #1,
       Print #1,

       Select Case frmPrint!cboPropertyDescription.ListIndex
          Case 0   'Print Selected Value Only
             Print #1, "Summary of Selected Values"
             Print #1,
             Print #1,
             Print #1, "Property:"; Tab(TABVALUE); "Value:"; Tab(TABUNITS); "Units:"; Tab(TABSOURCE); "Source:"
             Print #1,
             Call PrintOperatingPressureToFile
             Call PrintOperatingTemperatureToFile
             Print #1,

             If frmPrint!optPrintProperties(0).Value Then  'Print all properties
                Call PrintAllAirWaterPropertiesToFile
             ElseIf frmPrint!optPrintProperties(1).Value Then  'Print chosen properties only
                Call PrintChosenAirWaterPropertiesToFile
             End If
          Case 1   'Print Full Description of Properties
             Print #1, "Full Description of Properties"
             Print #1,
             Print #1,
             Print #1, "Property:"; Tab(TABVALUE); "Value:"; Tab(TABUNITS); "Units:"; Tab(TABSOURCE); "Source:"
             Print #1,
             Call PrintOperatingPressureToFile
             Call PrintOperatingTemperatureToFile
             Print #1,
             Print #1,

             If frmPrint!optPrintProperties(0).Value Then  'Print all properties
                Call PrintAllAirWaterPropertiesToFile
             ElseIf frmPrint!optPrintProperties(1).Value Then  'Print chosen properties only
                Call PrintChosenAirWaterPropertiesToFile
             End If

       End Select
    
End Sub

Private Sub PrintAirWaterTitleContinuation()

       Printer.FontSize = 14
       Printer.FontBold = True
       Printer.Print "PROPERTIES OF AIR AND WATER";
       Printer.FontBold = False
       Printer.Print " (continued)"
       Printer.Print
       Printer.Print
       Printer.FontBold = False
       Printer.Print "Full Description of Properties"
       Printer.Print
       Printer.Print
       HeightTitle = Printer.CurrentY
       Printer.FontSize = 10
       Printer.FontBold = True
       Printer.FontUnderline = True
       Printer.Print "Operating Conditions:"; Tab(TABVALUE); "Value:"; Tab(TABUNITS); "Units:"; Tab(TABSOURCE); "Source:"
       Printer.Print
       Printer.FontUnderline = False
       Printer.FontBold = False
       Printer.FontSize = 10
       Call PrintOperatingPressure
       Call PrintOperatingTemperature
       Printer.Print
       Printer.Print
       HeightOperatingConditions = Printer.CurrentY - HeightTitle

End Sub

Private Sub PrintAllAirWaterPropertiesToFile()

       Call PrintWaterDensityToFile
       Call PrintWaterViscosityToFile
       Call PrintWaterSurfaceTensionToFile
       Call PrintAirDensityToFile
       Call PrintAirViscosityToFile

End Sub

Private Sub PrintAllAirWaterPropertiesToPrinter()

       Call PrintWaterDensityPrinter
       Call PrintWaterViscosityPrinter
       Call PrintWaterSurfaceTensionPrinter
       Call PrintAirDensityPrinter
       Call PrintAirViscosityPrinter

End Sub

Private Sub PrintAllPropertiesToFile()

       Call PrintVaporPressureToFile
       Call PrintActivityCoefficientToFile
       Call PrintHenrysConstantToFile
       Call PrintMolecularWeightToFile
       Call PrintBoilingPointToFile
       Call PrintLiquidDensityToFile
       Call PrintMolarVolumeOpTToFile
       Call PrintMolarVolumeNBPToFile
       Call PrintRefractiveIndexToFile
       Call PrintAqueousSolubilityToFile
       Call PrintOctWaterPartCoeffToFile
       Call PrintLiquidDiffusivityToFile
       Call PrintGasDiffusivityToFile

End Sub

Private Sub PrintAllPropertiesToPrinter()

       Call PrintVaporPressurePrinter
       Call PrintActivityCoefficientPrinter
       Call PrintHenrysConstantPrinter
       Call PrintMolecularWeightPrinter
       Call PrintBoilingPointPrinter
       Call PrintLiquidDensityPrinter
       Call PrintMolarVolumeOpTPrinter
       Call PrintMolarVolumeNBPPrinter
       Call PrintRefractiveIndexPrinter
       Call PrintAqueousSolubilityPrinter
       Call PrintOctWaterPartCoeffPrinter
       Call PrintLiquidDiffusivityPrinter
       Call PrintGasDiffusivityPrinter

End Sub

Private Sub PrintAqueousSolubilityPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(AQUEOUS_SOLUBILITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.AqueousSolubility.CurrentSelection.Value, GetTheFormat(phprop.AqueousSolubility.CurrentSelection.Value))
             Printer.Print "Aqueous Solubility"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABSOURCE); GetSource(phprop.AqueousSolubility.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Aqueous Solubility"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Aqueous Solubility
          HeightAqueousSolubility = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightAqueousSolubility = HeightAqueousSolubility + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightAqueousSolubility = HeightAqueousSolubility + NUMLINES_AQUEOUS_SOLUBILITY * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightAqueousSolubility + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  AQUEOUS SOLUBILITY"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintAqueousSolubilityToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintAqueousSolubilityToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(AQUEOUS_SOLUBILITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.AqueousSolubility.CurrentSelection.Value, GetTheFormat(phprop.AqueousSolubility.CurrentSelection.Value))
             Print #1, "Aqueous Solubility"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(AQUEOUS_SOLUBILITY); Tab(TABSOURCE); GetSource(phprop.AqueousSolubility.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Aqueous Solubility"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Aqueous Solubility
          Print #1, "Property:  AQUEOUS SOLUBILITY"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintAqueousSolubilityToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintBoilingPointPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(BOILING_POINT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.BoilingPoint.CurrentSelection.Value, GetTheFormat(phprop.BoilingPoint.CurrentSelection.Value))
             Printer.Print "Normal Boiling Point (NBP)"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(BOILING_POINT); Tab(TABSOURCE); GetSource(phprop.BoilingPoint.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Normal Boiling Point (NBP)"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Normal Boiling Point
          HeightBoilingPoint = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightBoilingPoint = HeightBoilingPoint + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightBoilingPoint = HeightBoilingPoint + NUMLINES_BOILING_POINT * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightBoilingPoint + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  NORMAL BOILING POINT"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintBoilingPointToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintBoilingPointToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(BOILING_POINT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.BoilingPoint.CurrentSelection.Value, GetTheFormat(phprop.BoilingPoint.CurrentSelection.Value))
             Print #1, "Normal Boiling Point (NBP)"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(BOILING_POINT); Tab(TABSOURCE); GetSource(phprop.BoilingPoint.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Normal Boiling Point (NBP)"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Normal Boiling Point
          Print #1, "Property:  NORMAL BOILING POINT"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintBoilingPointToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintChosenAirWaterPropertiesToFile()

    If frmPrint!chkProperties(13).Value = 1 Then
       Call PrintWaterDensityToFile
    End If

    If frmPrint!chkProperties(14).Value = 1 Then
       Call PrintWaterViscosityToFile
    End If

    If frmPrint!chkProperties(15).Value = 1 Then
       Call PrintWaterSurfaceTensionToFile
    End If

    If frmPrint!chkProperties(16).Value = 1 Then
       Call PrintAirDensityToFile
    End If

    If frmPrint!chkProperties(17).Value = 1 Then
       Call PrintAirViscosityToFile
    End If


End Sub

Private Sub PrintChosenAirWaterPropertiesToPrinter()

    If frmPrint!chkProperties(13).Value = 1 Then
       Call PrintWaterDensityPrinter
    End If

    If frmPrint!chkProperties(14).Value = 1 Then
       Call PrintWaterViscosityPrinter
    End If

    If frmPrint!chkProperties(15).Value = 1 Then
       Call PrintWaterSurfaceTensionPrinter
    End If

    If frmPrint!chkProperties(16).Value = 1 Then
       Call PrintAirDensityPrinter
    End If

    If frmPrint!chkProperties(17).Value = 1 Then
       Call PrintAirViscosityPrinter
    End If

End Sub

Private Sub PrintChosenPropertiesToFile()

    If frmPrint!chkProperties(0).Value = 1 Then
       Call PrintVaporPressureToFile
    End If

    If frmPrint!chkProperties(1).Value = 1 Then
       Call PrintActivityCoefficientToFile
    End If

    If frmPrint!chkProperties(2).Value = 1 Then
       Call PrintHenrysConstantToFile
    End If

    If frmPrint!chkProperties(3).Value = 1 Then
       Call PrintMolecularWeightToFile
    End If

    If frmPrint!chkProperties(4).Value = 1 Then
       Call PrintBoilingPointToFile
    End If

    If frmPrint!chkProperties(5).Value = 1 Then
       Call PrintLiquidDensityToFile
    End If

    If frmPrint!chkProperties(6).Value = 1 Then
       Call PrintMolarVolumeOpTToFile
    End If

    If frmPrint!chkProperties(7).Value = 1 Then
       Call PrintMolarVolumeNBPToFile
    End If

    If frmPrint!chkProperties(8).Value = 1 Then
       Call PrintRefractiveIndexToFile
    End If

    If frmPrint!chkProperties(9).Value = 1 Then
       Call PrintAqueousSolubilityToFile
    End If

    If frmPrint!chkProperties(10).Value = 1 Then
       Call PrintOctWaterPartCoeffToFile
    End If

    If frmPrint!chkProperties(11).Value = 1 Then
       Call PrintLiquidDiffusivityToFile
    End If

    If frmPrint!chkProperties(12).Value = 1 Then
       Call PrintGasDiffusivityToFile
    End If

End Sub

Private Sub PrintChosenPropertiesToPrinter()

    If frmPrint!chkProperties(0).Value = 1 Then
       Call PrintVaporPressurePrinter
    End If

    If frmPrint!chkProperties(1).Value = 1 Then
       Call PrintActivityCoefficientPrinter
    End If

    If frmPrint!chkProperties(2).Value = 1 Then
       Call PrintHenrysConstantPrinter
    End If

    If frmPrint!chkProperties(3).Value = 1 Then
       Call PrintMolecularWeightPrinter
    End If

    If frmPrint!chkProperties(4).Value = 1 Then
       Call PrintBoilingPointPrinter
    End If

    If frmPrint!chkProperties(5).Value = 1 Then
       Call PrintLiquidDensityPrinter
    End If

    If frmPrint!chkProperties(6).Value = 1 Then
       Call PrintMolarVolumeOpTPrinter
    End If

    If frmPrint!chkProperties(7).Value = 1 Then
       Call PrintMolarVolumeNBPPrinter
    End If

    If frmPrint!chkProperties(8).Value = 1 Then
       Call PrintRefractiveIndexPrinter
    End If

    If frmPrint!chkProperties(9).Value = 1 Then
       Call PrintAqueousSolubilityPrinter
    End If

    If frmPrint!chkProperties(10).Value = 1 Then
       Call PrintOctWaterPartCoeffPrinter
    End If

    If frmPrint!chkProperties(11).Value = 1 Then
       Call PrintLiquidDiffusivityPrinter
    End If

    If frmPrint!chkProperties(12).Value = 1 Then
       Call PrintGasDiffusivityPrinter
    End If

End Sub

Private Sub PrintGasDiffusivityPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(GAS_DIFFUSIVITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.GasDiffusivity.CurrentSelection.Value, GetTheFormat(phprop.GasDiffusivity.CurrentSelection.Value))
             Printer.Print "Gas Diffusivity"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(GAS_DIFFUSIVITY); Tab(TABSOURCE); GetSource(phprop.GasDiffusivity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Gas Diffusivity"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Gas Diffusivity
          HeightGasDiffusivity = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightGasDiffusivity = HeightGasDiffusivity + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightGasDiffusivity = HeightGasDiffusivity + NUMLINES_GAS_DIFFUSIVITY * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightGasDiffusivity + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  GAS DIFFUSIVITY"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintGasDiffusivityToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintGasDiffusivityToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(GAS_DIFFUSIVITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.GasDiffusivity.CurrentSelection.Value, GetTheFormat(phprop.GasDiffusivity.CurrentSelection.Value))
             Print #1, "Gas Diffusivity"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(GAS_DIFFUSIVITY); Tab(TABSOURCE); GetSource(phprop.GasDiffusivity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Gas Diffusivity"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Gas Diffusivity
          Print #1, "Property:  GAS DIFFUSIVITY"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temperature:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintGasDiffusivityToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintHenrysConstantPrinter()
    Dim ValueString As String


    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(HENRYS_CONSTANT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.HenrysConstant.CurrentSelection.Value, GetTheFormat(phprop.HenrysConstant.CurrentSelection.Value))
             Printer.Print "Henry's Constant"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(HENRYS_CONSTANT); Tab(TABSOURCE); GetSource(phprop.HenrysConstant.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Henry's Constant"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Henry's Constant
          HeightHenrysConstant = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightHenrysConstant = HeightHenrysConstant + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightHenrysConstant = HeightHenrysConstant + NUMLINES_HENRYS_CONSTANT * Printer.TextHeight(PrintMsg)

          If phprop.HenrysConstant.NumberOfDatabaseHenrysConstants > 1 Then 'Account for more than one Henry's constant in database in height determination
             HeightHenrysConstant = HeightHenrysConstant + 2 * (phprop.HenrysConstant.NumberOfDatabaseHenrysConstants - 1) * Printer.TextHeight(PrintMsg)
          End If
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightHenrysConstant + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  HENRY'S CONSTANT"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintHenrysConstantToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintHenrysConstantToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(HENRYS_CONSTANT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.HenrysConstant.CurrentSelection.Value, GetTheFormat(phprop.HenrysConstant.CurrentSelection.Value))
             Print #1, "Henry's Constant"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(HENRYS_CONSTANT); Tab(TABSOURCE); GetSource(phprop.HenrysConstant.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Henry's Constant"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Henry's Constant
          Print #1, "Property:  HENRY'S CONSTANT"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintHenrysConstantToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintLiquidDensityPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(LIQUID_DENSITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.LiquidDensity.CurrentSelection.Value, GetTheFormat(phprop.LiquidDensity.CurrentSelection.Value))
             Printer.Print "Liquid Density"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(LIQUID_DENSITY); Tab(TABSOURCE); GetSource(phprop.LiquidDensity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Liquid Density"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Liquid Density
          HeightLiquidDensity = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightLiquidDensity = HeightLiquidDensity + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightLiquidDensity = HeightLiquidDensity + NUMLINES_LIQUID_DENSITY * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightLiquidDensity + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  LIQUID DENSITY"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintLiquidDensityToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintLiquidDensityToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(LIQUID_DENSITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.LiquidDensity.CurrentSelection.Value, GetTheFormat(phprop.LiquidDensity.CurrentSelection.Value))
             Print #1, "Liquid Density"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(LIQUID_DENSITY); Tab(TABSOURCE); GetSource(phprop.LiquidDensity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Liquid Density"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Liquid Density
          Print #1, "Property:  LIQUID DENSITY"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintLiquidDensityToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintLiquidDiffusivityPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(LIQUID_DIFFUSIVITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.LiquidDiffusivity.CurrentSelection.Value, GetTheFormat(phprop.LiquidDiffusivity.CurrentSelection.Value))
             Printer.Print "Liquid Diffusivity"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(LIQUID_DIFFUSIVITY); Tab(TABSOURCE); GetSource(phprop.LiquidDiffusivity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Liquid Diffusivity"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Liquid Diffusivity
          HeightLiquidDiffusivity = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightLiquidDiffusivity = HeightLiquidDiffusivity + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightLiquidDiffusivity = HeightLiquidDiffusivity + NUMLINES_LIQUID_DIFFUSIVITY * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightLiquidDiffusivity + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  LIQUID DIFFUSIVITY"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintLiquidDiffusivityToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintLiquidDiffusivityToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(LIQUID_DIFFUSIVITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.LiquidDiffusivity.CurrentSelection.Value, GetTheFormat(phprop.LiquidDiffusivity.CurrentSelection.Value))
             Print #1, "Liquid Diffusivity"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(LIQUID_DIFFUSIVITY); Tab(TABSOURCE); GetSource(phprop.LiquidDiffusivity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Liquid Diffusivity"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Liquid Diffusivity
          Print #1, "Property:  LIQUID DIFFUSIVITY"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temperature:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintLiquidDiffusivityToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintMolarVolumeNBPPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(MOLAR_VOLUME_BOILING_POINT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.MolarVolume.BoilingPoint.CurrentSelection.Value, GetTheFormat(phprop.MolarVolume.BoilingPoint.CurrentSelection.Value))
             Printer.Print "Molar Volume @ NBP"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(MOLAR_VOLUME_BOILING_POINT); Tab(TABSOURCE); GetSource(phprop.MolarVolume.BoilingPoint.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Molar Volume @ NBP"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Molar Volume at Normal Boiling Point
          HeightMolarVolumeNBP = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightMolarVolumeNBP = HeightMolarVolumeNBP + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightMolarVolumeNBP = HeightMolarVolumeNBP + NUMLINES_MOLAR_VOLUME_NBP * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightMolarVolumeNBP + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  MOLAR VOLUME AT NORMAL BOILING POINT"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintMolarVolumeNBPToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintMolarVolumeNBPToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(MOLAR_VOLUME_BOILING_POINT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.MolarVolume.BoilingPoint.CurrentSelection.Value, GetTheFormat(phprop.MolarVolume.BoilingPoint.CurrentSelection.Value))
             Print #1, "Molar Volume @ NBP"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(MOLAR_VOLUME_BOILING_POINT); Tab(TABSOURCE); GetSource(phprop.MolarVolume.BoilingPoint.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Molar Volume @ NBP"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Molar Volume at Normal Boiling Point
          Print #1, "Property:  MOLAR VOLUME AT THE NORMAL BOILING POINT"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temperature:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintMolarVolumeNBPToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintMolarVolumeOpTPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(MOLAR_VOLUME_OPT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.MolarVolume.operatingT.CurrentSelection.Value, GetTheFormat(phprop.MolarVolume.operatingT.CurrentSelection.Value))
             Printer.Print "Molar Volume @ Operating T"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(MOLAR_VOLUME_OPT); Tab(TABSOURCE); GetSource(phprop.MolarVolume.operatingT.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Molar Volume @ Operating T"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Molar Volume at Operating T
          HeightMolarVolumeOpT = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightMolarVolumeOpT = HeightMolarVolumeOpT + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightMolarVolumeOpT = HeightMolarVolumeOpT + NUMLINES_MOLAR_VOLUME_OPT * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightMolarVolumeOpT + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  MOLAR VOLUME AT OPERATING TEMPERATURE"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintMolarVolumeOpTToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintMolarVolumeOpTToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(MOLAR_VOLUME_OPT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.MolarVolume.operatingT.CurrentSelection.Value, GetTheFormat(phprop.MolarVolume.operatingT.CurrentSelection.Value))
             Print #1, "Molar Volume @ Operating T"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(MOLAR_VOLUME_OPT); Tab(TABSOURCE); GetSource(phprop.MolarVolume.operatingT.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Molar Volume @ Operating T"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Molar Volume at Operating T
          Print #1, "Property:  MOLAR VOLUME AT THE OPERATING TEMPERATURE"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintMolarVolumeOpTToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintMolecularWeightPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(MOLECULAR_WEIGHT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.MolecularWeight.CurrentSelection.Value, MOLECULAR_WEIGHT_FORMAT)
             Printer.Print "Molecular Weight"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(MOLECULAR_WEIGHT); Tab(TABSOURCE); GetSource(phprop.MolecularWeight.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Molecular Weight"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Molecular Weight
          HeightMolecularWeight = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightMolecularWeight = HeightMolecularWeight + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightMolecularWeight = HeightMolecularWeight + NUMLINES_MOLECULAR_WEIGHT * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightMolecularWeight + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  MOLECULAR WEIGHT"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintMolecularWeightToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintMolecularWeightToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(MOLECULAR_WEIGHT) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.MolecularWeight.CurrentSelection.Value, MOLECULAR_WEIGHT_FORMAT)
             Print #1, "Molecular Weight"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(MOLECULAR_WEIGHT); Tab(TABSOURCE); GetSource(phprop.MolecularWeight.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Molecular Weight"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Molecular Weight
          Print #1, "Property:  MOLECULAR WEIGHT"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintMolecularWeightToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintOctWaterPartCoeffPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(OCT_WATER_PART_COEFF) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.OctWaterPartCoeff.CurrentSelection.Value, GetTheFormat(phprop.OctWaterPartCoeff.CurrentSelection.Value))
             Printer.Print "log Octanol Water Part. Coeff."; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(OCT_WATER_PART_COEFF); Tab(TABSOURCE); GetSource(phprop.OctWaterPartCoeff.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "log Octanol Water Part. Coeff."; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Octanol Water Partition Coefficient
          HeightOctWaterPartCoeff = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightOctWaterPartCoeff = HeightOctWaterPartCoeff + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightOctWaterPartCoeff = HeightOctWaterPartCoeff + NUMLINES_OCT_WATER_PART_COEFF * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightOctWaterPartCoeff + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  OCTANOL WATER PARTITION COEFFICIENT"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintOctWaterPartCoeffToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintOctWaterPartCoeffToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(OCT_WATER_PART_COEFF) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.OctWaterPartCoeff.CurrentSelection.Value, GetTheFormat(phprop.OctWaterPartCoeff.CurrentSelection.Value))
             Print #1, "log Octanol Water Part. Coeff."; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(OCT_WATER_PART_COEFF); Tab(TABSOURCE); GetSource(phprop.OctWaterPartCoeff.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "log Octanol Water Part. Coeff."; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Octanol Water Partition Coefficient
          Print #1, "Property:  OCTANOL WATER PARTITION COEFFICIENT"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintOctWaterPartCoeffToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintOneContaminant()

       Printer.FontSize = 14
       Printer.FontBold = True
       Printer.Print phprop.CASNumber; " "; phprop.Name
       Printer.Print
       Printer.Print

       Select Case frmPrint!cboPropertyDescription.ListIndex
          Case 0   'Print Selected Value Only
             Printer.FontBold = False
             Printer.Print "Summary of Selected Values"
             Printer.Print
             Printer.Print
             Printer.FontSize = 10
             Printer.FontBold = True
             Printer.FontUnderline = True
             Printer.Print "Property:"; Tab(TABVALUE); "Value:"; Tab(TABUNITS); "Units:"; Tab(TABSOURCE); "Source:"
             Printer.Print
             Printer.FontUnderline = False
             Printer.FontBold = False
             Printer.FontSize = 10
             Call PrintOperatingPressure
             Call PrintOperatingTemperature
             Printer.Print

             If frmPrint!optPrintProperties(0).Value Then  'Print all properties
                Call PrintAllPropertiesToPrinter
             ElseIf frmPrint!optPrintProperties(1).Value Then  'Print chosen properties only
                Call PrintChosenPropertiesToPrinter
             End If
          Case 1   'Print Full Description of Properties
             Printer.FontBold = False
             Printer.Print "Full Description of Properties"
             Printer.Print
             Printer.Print
             HeightTitle = Printer.CurrentY
             Printer.FontSize = 10
             Printer.FontBold = True
             Printer.FontUnderline = True
             Printer.Print "Operating Conditions:"; Tab(TABVALUE); "Value:"; Tab(TABUNITS); "Units:"; Tab(TABSOURCE); "Source:"
             Printer.Print
             Printer.FontUnderline = False
             Printer.FontBold = False
             Printer.FontSize = 10
             Call PrintOperatingPressure
             Call PrintOperatingTemperature
             Printer.Print
             Printer.Print
             HeightOperatingConditions = Printer.CurrentY - HeightTitle

             If frmPrint!optPrintProperties(0).Value Then  'Print all properties
                Call PrintAllPropertiesToPrinter
             ElseIf frmPrint!optPrintProperties(1).Value Then  'Print chosen properties only
                Call PrintChosenPropertiesToPrinter
             End If

       End Select

End Sub

Private Sub PrintOneContaminantToFile()

       Print #1, phprop.CASNumber; " "; phprop.Name
       Print #1,
       Print #1,
       Print #1,

       Select Case frmPrint!cboPropertyDescription.ListIndex
          Case 0   'Print Selected Value Only
             Print #1, "Summary of Selected Values"
             Print #1,
             Print #1,
             Print #1, "Property:"; Tab(TABVALUE); "Value:"; Tab(TABUNITS); "Units:"; Tab(TABSOURCE); "Source:"
             Print #1,
             Call PrintOperatingPressureToFile
             Call PrintOperatingTemperatureToFile
             Print #1,

             If frmPrint!optPrintProperties(0).Value Then  'Print all properties
                Call PrintAllPropertiesToFile
             ElseIf frmPrint!optPrintProperties(1).Value Then  'Print chosen properties only
                Call PrintChosenPropertiesToFile
             End If
          Case 1   'Print Full Description of Properties
             Print #1, "Full Description of Properties"
             Print #1,
             Print #1,
             Print #1, "Property:"; Tab(TABVALUE); "Value:"; Tab(TABUNITS); "Units:"; Tab(TABSOURCE); "Source:"
             Print #1,
             Call PrintOperatingPressureToFile
             Call PrintOperatingTemperatureToFile
             Print #1,
             Print #1,

             If frmPrint!optPrintProperties(0).Value Then  'Print all properties
                Call PrintAllPropertiesToFile
             ElseIf frmPrint!optPrintProperties(1).Value Then  'Print chosen properties only
                Call PrintChosenPropertiesToFile
             End If

       End Select

End Sub

Private Sub PrintOperatingPressure()
    Dim ValueString As String

    ValueString = Space$(VALUELENGTH)
    RSet ValueString = Format$(phprop.OperatingPressure, GetTheFormat(phprop.OperatingPressure))
    Printer.Print "Operating Pressure"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(OPERATING_PRESSURE); Tab(TABSOURCE); "User Input"

End Sub

Private Sub PrintOperatingPressureToFile()
    Dim ValueString As String

    ValueString = Space$(VALUELENGTH)
    RSet ValueString = Format$(phprop.OperatingPressure, GetTheFormat(phprop.OperatingPressure))
    Print #1, "Operating Pressure"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(OPERATING_PRESSURE); Tab(TABSOURCE); "User Input"

End Sub

Private Sub PrintOperatingTemperature()
    Dim ValueString As String

    ValueString = Space$(VALUELENGTH)
    RSet ValueString = Format$(phprop.OperatingTemperature, GetTheFormat(phprop.OperatingTemperature))
    Printer.Print "Operating Temperature"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(OPERATING_TEMPERATURE); Tab(TABSOURCE); "User Input"

End Sub

Private Sub PrintOperatingTemperatureToFile()
    Dim ValueString As String

    ValueString = Space$(VALUELENGTH)
    RSet ValueString = Format$(phprop.OperatingTemperature, GetTheFormat(phprop.OperatingTemperature))
    Print #1, "Operating Temperature"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(OPERATING_TEMPERATURE); Tab(TABSOURCE); "User Input"

End Sub

Private Sub PrintRefractiveIndexPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(REFRACTIVE_INDEX) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.RefractiveIndex.CurrentSelection.Value, REFRACTIVE_INDEX_FORMAT)
             Printer.Print "Refractive Index"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(REFRACTIVE_INDEX); Tab(TABSOURCE); GetSource(phprop.RefractiveIndex.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Refractive Index"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Refractive Index
          HeightRefractiveIndex = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightRefractiveIndex = HeightRefractiveIndex + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightRefractiveIndex = HeightRefractiveIndex + NUMLINES_REFRACTIVE_INDEX * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightRefractiveIndex + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  REFRACTIVE INDEX"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintRefractiveIndexToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintRefractiveIndexToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(REFRACTIVE_INDEX) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.RefractiveIndex.CurrentSelection.Value, REFRACTIVE_INDEX_FORMAT)
             Print #1, "Refractive Index"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(REFRACTIVE_INDEX); Tab(TABSOURCE); GetSource(phprop.RefractiveIndex.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Refractive Index"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Refractive Index
          Print #1, "Property:  REFRACTIVE INDEX"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintRefractiveIndexToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintTheCodes(code As Long)

    Printer.Print
    Printer.FontUnderline = True
    Printer.Print Tab(TABCODE); "Code:"; Tab(TABCODEDESCRIPTION); "Description:"
    Printer.FontUnderline = False
    Printer.Print
    Printer.Print Tab(TABCODE); code;
    Select Case code
       Case 1   'UNIFAC Parameter Set = Original UNIFAC VLE
            Printer.Print Tab(TABCODEDESCRIPTION); "UNIFAC Parameter Set = Original UNIFAC VLE"
       Case 2   'UNIFAC Parameter Set = UNIFAC LLE
            Printer.Print Tab(TABCODEDESCRIPTION); "UNIFAC Parameter Set = UNIFAC LLE"
       Case 3   'UNIFAC Parameter Set = Environmental VLE
            Printer.Print Tab(TABCODEDESCRIPTION); "UNIFAC Parameter Set = Environmental VLE"
'       Case 0   'UNIFAC Calculation Not Possible
'            Printer.Print Tab(TABCODEDESCRIPTION); "UNIFAC Calculation Not Possible"
    End Select
End Sub

Private Sub PrintTheCodesToFile(code As Long)

    Print #1,
    Print #1,
    Printer.FontUnderline = True
    Print #1, Tab(TABCODE); "Code:"; Tab(TABCODEDESCRIPTION); "Description:"
    Printer.FontUnderline = False
    Print #1,
    Print #1, Tab(TABCODE); code;
    Select Case code
       Case 1   'UNIFAC Parameter Set = Original UNIFAC VLE
            Print #1, Tab(TABCODEDESCRIPTION); "UNIFAC Parameter Set = Original UNIFAC VLE"
       Case 2   'UNIFAC Parameter Set = UNIFAC LLE
            Print #1, Tab(TABCODEDESCRIPTION); "UNIFAC Parameter Set = UNIFAC LLE"
       Case 3   'UNIFAC Parameter Set = Environmental VLE
            Print #1, Tab(TABCODEDESCRIPTION); "UNIFAC Parameter Set = Environmental VLE"
'       Case 0   'UNIFAC Calculation Not Possible
'            Print #1, Tab(TABCODEDESCRIPTION); "UNIFAC Calculation Not Possible"
    End Select

End Sub

Private Sub PrintTheErrors(Header As Integer, code As Long)
    
    Dim cut As String
    
    If code = 0 Then Exit Sub

    If Header = 1 Then
       Header = 0
       Printer.Print
       Printer.FontUnderline = True
       Printer.Print Tab(TABCODE); "Code:"; Tab(TABCODEDESCRIPTION); "Description:"
       Printer.FontUnderline = False
       Printer.Print
    End If
    
    Printer.Print Tab(TABCODE); code;
    curri = 1
    currl = 1
' This routine breaks up long error messages
iter1:
    i = curri + 59
    If Len(ErrorMsg(code)) <= i Then
       cut = Mid$(ErrorMsg(code), curri, i)
       Printer.Print Tab(TABCODEDESCRIPTION); Trim$(cut)
       Exit Sub
    End If
    If Mid$(ErrorMsg(code), i, 1) = " " Then
        cut = Mid$(ErrorMsg(code), curri, i - curri)
        curri = i
        Printer.Print Tab(TABCODEDESCRIPTION); Trim$(cut)
        GoTo iter1:
    Else
        curri = i
iter2:
        curri = curri + 1
        If Mid$(ErrorMsg(code), curri, 1) = "." Then
            cut = Mid$(ErrorMsg(code), currl, curri - currl + 1)
            Printer.Print Tab(TABCODEDESCRIPTION); Trim$(cut)
            Exit Sub
        End If
        If Mid$(ErrorMsg(code), curri, 1) = " " Then
            cut = Mid$(ErrorMsg(code), currl, curri - currl)
            currl = curri
            Printer.Print Tab(TABCODEDESCRIPTION); Trim$(cut)
            GoTo iter1:
        End If
        GoTo iter2:
    End If

End Sub

Private Sub PrintTheErrorsToFile(Header As Integer, code As Long)
    
    Dim cut As String

    If code = 0 Then Exit Sub

    If Header = 1 Then
       Header = 0
       Print #1,
       Print #1,
       Printer.FontUnderline = True
       Print #1, Tab(TABCODE); "Code:"; Tab(TABCODEDESCRIPTION); "Description:"
       Printer.FontUnderline = False
       Print #1,
    End If

    Print #1, Tab(TABCODE); code;
    curri = 1
    currl = 1
iterf1:
    i = curri + 59
    If Len(ErrorMsg(code)) < i Then
        cut$ = Mid$(ErrorMsg(code), curri, i)
        Print #1, Tab(TABCODEDESCRIPTION); Trim$(cut)
        Exit Sub
    End If
    If Mid$(ErrorMsg(code), i, 1) = " " Then
        cut$ = Mid$(ErrorMsg(code), curri, i)
        curri = i
    Else
        curri = i
iterf2:
        curri = curri + 1
        If Mid$(ErrorMsg(code), curri, 1) = "." Then
            cut = Mid$(ErrorMsg(code), currl, curri - currl + 1)
            Print #1, Tab(TABCODEDESCRIPTION); Trim$(cut)
            Exit Sub
        End If
        If Mid$(ErrorMsg(code), curri, 1) = " " Then
            cut$ = Mid$(ErrorMsg(code), currl, curri)
            currl = curri
            Print #1, Tab(TABCODEDESCRIPTION); Trim$(cut)
            GoTo iterf1:
        End If
        GoTo iterf2:
    End If

End Sub

Private Sub PrintTitleContinuation()

       Printer.FontSize = 14
       Printer.FontBold = True
       Printer.Print phprop.CASNumber; " "; Trim$(phprop.Name);
       Printer.FontBold = False
       Printer.Print " (continued)"
       Printer.Print
       Printer.Print
       Printer.FontBold = False
       Printer.Print "Full Description of Properties"
       Printer.Print
       Printer.Print
       HeightTitle = Printer.CurrentY
       Printer.FontSize = 10
       Printer.FontBold = True
       Printer.FontUnderline = True
       Printer.Print "Operating Conditions:"; Tab(TABVALUE); "Value:"; Tab(TABUNITS); "Units:"; Tab(TABSOURCE); "Source:"
       Printer.Print
       Printer.FontUnderline = False
       Printer.FontBold = False
       Printer.FontSize = 10
       Call PrintOperatingPressure
       Call PrintOperatingTemperature
       Printer.Print
       Printer.Print
       HeightOperatingConditions = Printer.CurrentY - HeightTitle

End Sub

Private Sub PrintToFile()
    Dim CurrentlySelectedContaminant As Integer
    Dim i As Integer, j As Integer
    Dim ChosenAtLeastOneContaminantProperty As Integer
    Dim ChosenAtLeastOneAirWaterProperty As Integer
    Dim EnglishValue As Double
    Static temphdbttmp(20) As Double
    Static temphunttmp(20) As Double

On Error GoTo error_printtofile

    ChosenAtLeastOneContaminantProperty = False
    ChosenAtLeastOneAirWaterProperty = False
    If optPrintProperties(0).Value Then
       ChosenAtLeastOneContaminantProperty = True
       ChosenAtLeastOneAirWaterProperty = True
    Else
       For i = 0 To 12
           If (frmPrint!chkProperties(i).Value = 1) Then
              ChosenAtLeastOneContaminantProperty = True
              Exit For
           End If
       Next i

       For i = 13 To 17
           If (frmPrint!chkProperties(i).Value = 1) Then
              ChosenAtLeastOneAirWaterProperty = True
              Exit For
           End If
       Next i
    End If

    If frmPrint!optPrintContaminants(0).Value Then   'Print All Contaminants
       If ChosenAtLeastOneContaminantProperty Then
          CurrentlySelectedContaminant = contam_prop_form!cboSelectContaminant.ListIndex + 1
          For i = 1 To NumSelectedChemicals
              phprop = PropContaminant(i)
              
              'If English units are desired convert them here
              If cboUnits.ListIndex = 1 Then
              
                 temppress = phprop.OperatingPressure
                 Call PRESSCNV(EnglishValue, phprop.OperatingPressure)
                 phprop.OperatingPressure = EnglishValue
              
                 tempt = phprop.OperatingTemperature
                 Call TEMPCNV(EnglishValue, phprop.OperatingTemperature)
                 phprop.OperatingTemperature = EnglishValue
                 
                 'Change all temperatures
                 tempvptmp = phprop.VaporPressure.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.VaporPressure.database.temperature)
                 phprop.VaporPressure.database.temperature = EnglishValue
                 
                 tempvptmpi = phprop.VaporPressure.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.VaporPressure.input.temperature)
                 phprop.VaporPressure.input.temperature = EnglishValue
                 
                 tempactmp = phprop.ActivityCoefficient.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.ActivityCoefficient.UNIFAC.temperature)
                 phprop.ActivityCoefficient.UNIFAC.temperature = EnglishValue
                 
                 temphregtmp = phprop.HenrysConstant.regress.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.regress.temperature)
                 phprop.HenrysConstant.regress.temperature = EnglishValue
                 
                 temphfittmp = phprop.HenrysConstant.fit.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.fit.UNIFAC.temperature)
                 phprop.HenrysConstant.fit.UNIFAC.temperature = EnglishValue
                 
                 temphopttmp = phprop.HenrysConstant.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.operatingT.UNIFAC.temperature)
                 phprop.HenrysConstant.operatingT.UNIFAC.temperature = EnglishValue
       
                 For j = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
                    temphdbttmp(j) = phprop.HenrysConstant.database(j).temperature
                    temphunttmp(j) = phprop.HenrysConstant.UNIFAC(j).temperature
                    Call TEMPCNV(EnglishValue, phprop.HenrysConstant.database(j).temperature)
                    phprop.HenrysConstant.database(j).temperature = EnglishValue
                    Call TEMPCNV(EnglishValue, phprop.HenrysConstant.UNIFAC(j).temperature)
                    phprop.HenrysConstant.UNIFAC(j).temperature = EnglishValue
                 Next j
                 
                 temphtmpi = phprop.HenrysConstant.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.input.temperature)
                 phprop.HenrysConstant.input.temperature = EnglishValue
                 
                 templdtmp = phprop.LiquidDensity.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.database.temperature)
                 phprop.LiquidDensity.database.temperature = EnglishValue
                 
                 templdutmp = phprop.LiquidDensity.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.UNIFAC.temperature)
                 phprop.LiquidDensity.UNIFAC.temperature = EnglishValue
                 
                 templdtmpi = phprop.LiquidDensity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.input.temperature)
                 phprop.LiquidDensity.input.temperature = EnglishValue
                 
                 tempmvopttmp = phprop.MolarVolume.operatingT.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.database.temperature)
                 phprop.MolarVolume.operatingT.database.temperature = EnglishValue
                 
                 tempmvoptutmp = phprop.MolarVolume.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.UNIFAC.temperature)
                 phprop.MolarVolume.operatingT.UNIFAC.temperature = EnglishValue
                 
                 tempmvopttmpi = phprop.MolarVolume.operatingT.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.input.temperature)
                 phprop.MolarVolume.operatingT.input.temperature = EnglishValue
                 
                 tempmvtmp = phprop.MolarVolume.BoilingPoint.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.UNIFAC.temperature)
                 phprop.MolarVolume.BoilingPoint.UNIFAC.temperature = EnglishValue
                 
                 tempmvtmpi = phprop.MolarVolume.BoilingPoint.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.input.temperature)
                 phprop.MolarVolume.BoilingPoint.input.temperature = EnglishValue
                 
                 tempaqfittmp = phprop.AqueousSolubility.fit.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.fit.UNIFAC.temperature)
                 phprop.AqueousSolubility.fit.UNIFAC.temperature = EnglishValue
                 
                 tempaqopttmp = phprop.AqueousSolubility.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.operatingT.UNIFAC.temperature)
                 phprop.AqueousSolubility.operatingT.UNIFAC.temperature = EnglishValue
       
                 tempaqdbtmp = phprop.AqueousSolubility.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.database.temperature)
                 phprop.AqueousSolubility.database.temperature = EnglishValue
                 
                 tempaquntmp = phprop.AqueousSolubility.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.UNIFAC.temperature)
                 phprop.AqueousSolubility.UNIFAC.temperature = EnglishValue
                 
                 tempaqtmpi = phprop.AqueousSolubility.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.input.temperature)
                 phprop.AqueousSolubility.input.temperature = EnglishValue
                 
                 tempoctopttmp = phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature)
                 phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature = EnglishValue
              
                 tempoctdbtmp = phprop.OctWaterPartCoeff.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.database.temperature)
                 phprop.OctWaterPartCoeff.database.temperature = EnglishValue

                 tempoctuntmp = phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature)
                 phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature = EnglishValue

                 tempocttmpi = phprop.OctWaterPartCoeff.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.input.temperature)
                 phprop.OctWaterPartCoeff.input.temperature = EnglishValue

                 templdhltmp = phprop.LiquidDiffusivity.haydukLaudie.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.haydukLaudie.temperature)
                 phprop.LiquidDiffusivity.haydukLaudie.temperature = EnglishValue

                 templdptmp = phprop.LiquidDiffusivity.polson.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.polson.temperature)
                 phprop.LiquidDiffusivity.polson.temperature = EnglishValue
                 
                 templdwctmp = phprop.LiquidDiffusivity.wilkeChang.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.wilkeChang.temperature)
                 phprop.LiquidDiffusivity.wilkeChang.temperature = EnglishValue
                 
                 templdtmpi = phprop.LiquidDiffusivity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.input.temperature)
                 phprop.LiquidDiffusivity.input.temperature = EnglishValue
                 
                 tempgdwltmp = phprop.GasDiffusivity.wilkeLee.temperature
                 Call TEMPCNV(EnglishValue, phprop.GasDiffusivity.wilkeLee.temperature)
                 phprop.GasDiffusivity.wilkeLee.temperature = EnglishValue
                 
                 tempgdtmpi = phprop.GasDiffusivity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.GasDiffusivity.input.temperature)
                 phprop.GasDiffusivity.input.temperature = EnglishValue

                 'Convert values
                 tempvp = phprop.VaporPressure.CurrentSelection.Value
                 tempvpi = phprop.VaporPressure.input.Value
                 Call VPCONV(EnglishValue, phprop.VaporPressure.CurrentSelection.Value)
                 phprop.VaporPressure.CurrentSelection.Value = EnglishValue
                 phprop.VaporPressure.database.Value = EnglishValue
                 Call VPCONV(EnglishValue, phprop.VaporPressure.input.Value)
                 phprop.VaporPressure.input.Value = EnglishValue
                 
                 tempmw = phprop.MolecularWeight.CurrentSelection.Value
                 tempmwdb = phprop.MolecularWeight.database.Value
                 tempmwun = phprop.MolecularWeight.UNIFAC.Value
                 tempmwi = phprop.MolecularWeight.input.Value
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.CurrentSelection.Value)
                 phprop.MolecularWeight.CurrentSelection.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.database.Value)
                 phprop.MolecularWeight.database.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.UNIFAC.Value)
                 phprop.MolecularWeight.UNIFAC.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.input.Value)
                 phprop.MolecularWeight.input.Value = EnglishValue
              
                 tempbp = phprop.BoilingPoint.CurrentSelection.Value
                 tempbpdb = phprop.BoilingPoint.database.Value
                 tempbpi = phprop.BoilingPoint.input.Value
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.CurrentSelection.Value)
                 phprop.BoilingPoint.CurrentSelection.Value = EnglishValue
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.database.Value)
                 phprop.BoilingPoint.database.Value = EnglishValue
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.input.Value)
                 phprop.BoilingPoint.input.Value = EnglishValue
                 
                 templd = phprop.LiquidDensity.CurrentSelection.Value
                 templddb = phprop.LiquidDensity.database.Value
                 templdun = phprop.LiquidDensity.UNIFAC.Value
                 templdi = phprop.LiquidDensity.input.Value
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.CurrentSelection.Value)
                 phprop.LiquidDensity.CurrentSelection.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.database.Value)
                 phprop.LiquidDensity.database.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.UNIFAC.Value)
                 phprop.LiquidDensity.UNIFAC.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.input.Value)
                 phprop.LiquidDensity.input.Value = EnglishValue
              
                 tempmvopt = phprop.MolarVolume.operatingT.CurrentSelection.Value
                 tempmvoptdb = phprop.MolarVolume.operatingT.database.Value
                 tempmvoptun = phprop.MolarVolume.operatingT.UNIFAC.Value
                 tempmvopti = phprop.MolarVolume.operatingT.input.Value
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.CurrentSelection.Value)
                 phprop.MolarVolume.operatingT.CurrentSelection.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.database.Value)
                 phprop.MolarVolume.operatingT.database.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.UNIFAC.Value)
                 phprop.MolarVolume.operatingT.UNIFAC.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.input.Value)
                 phprop.MolarVolume.operatingT.input.Value = EnglishValue
              
                 tempmv = phprop.MolarVolume.BoilingPoint.CurrentSelection.Value
                 tempmvsc = phprop.MolarVolume.BoilingPoint.UNIFAC.Value
                 tempmvi = phprop.MolarVolume.BoilingPoint.input.Value
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.CurrentSelection.Value)
                 phprop.MolarVolume.BoilingPoint.CurrentSelection.Value = EnglishValue
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.UNIFAC.Value)
                 phprop.MolarVolume.BoilingPoint.UNIFAC.Value = EnglishValue
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.input.Value)
                 phprop.MolarVolume.BoilingPoint.input.Value = EnglishValue
              
                 templdiff = phprop.LiquidDiffusivity.CurrentSelection.Value
                 templhldiff = phprop.LiquidDiffusivity.haydukLaudie.Value
                 templpldiff = phprop.LiquidDiffusivity.polson.Value
                 templwcdiff = phprop.LiquidDiffusivity.wilkeChang.Value
                 templdiffi = phprop.LiquidDiffusivity.input.Value
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.CurrentSelection.Value)
                 phprop.LiquidDiffusivity.CurrentSelection.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.haydukLaudie.Value)
                 phprop.LiquidDiffusivity.haydukLaudie.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.polson.Value)
                 phprop.LiquidDiffusivity.polson.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.wilkeChang.Value)
                 phprop.LiquidDiffusivity.wilkeChang.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.input.Value)
                 phprop.LiquidDiffusivity.input.Value = EnglishValue
              
                 tempgdiff = phprop.GasDiffusivity.CurrentSelection.Value
                 tempgdiffwl = phprop.GasDiffusivity.wilkeLee.Value
                 tempgdiffi = phprop.GasDiffusivity.input.Value
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.CurrentSelection.Value)
                 phprop.GasDiffusivity.CurrentSelection.Value = EnglishValue
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.wilkeLee.Value)
                 phprop.GasDiffusivity.wilkeLee.Value = EnglishValue
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.input.Value)
                 phprop.GasDiffusivity.input.Value = EnglishValue
              
              End If

              For j = 1 To NUMBER_OF_PROPERTIES
                  HaveProperty(j) = phprop.HaveProperty(j)
              Next j
              For j = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
                  PROPAVAILABLE(j) = phprop.PROPAVAILABLE(j)
              Next j

              Call PrintOneContaminantToFile  'Prints the contaminant currently stored in structure phprop

              'If English units were selected convert them back
              If cboUnits.ListIndex = 1 Then
                 
                 'Convert temperatures back
                 phprop.VaporPressure.database.temperature = tempvptmp
                 
                 phprop.VaporPressure.input.temperature = tempvptmpi
                 
                 phprop.ActivityCoefficient.UNIFAC.temperature = tempactmp
                 
                 phprop.HenrysConstant.regress.temperature = temphregtmp
                 
                 phprop.HenrysConstant.fit.UNIFAC.temperature = temphfittmp
                 
                 phprop.HenrysConstant.operatingT.UNIFAC.temperature = temphopttmp
       
                 For j = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
                    phprop.HenrysConstant.database(j).temperature = temphdbttmp(j)
                    phprop.HenrysConstant.UNIFAC(j).temperature = temphunttmp(j)
                 Next j
                 
                 phprop.HenrysConstant.input.temperature = temphtmpi
                 
                 phprop.LiquidDensity.database.temperature = templdtmp
                 
                 phprop.LiquidDensity.UNIFAC.temperature = templdutmp
                 
                 phprop.LiquidDensity.input.temperature = templdtmpi
                 
                 phprop.MolarVolume.operatingT.database.temperature = tempmvopttmp
                 
                 phprop.MolarVolume.operatingT.UNIFAC.temperature = tempmvoptutmp
                 
                 phprop.MolarVolume.operatingT.input.temperature = tempmvopttmpi
                 
                 phprop.MolarVolume.BoilingPoint.UNIFAC.temperature = tempmvtmp
                 
                 phprop.MolarVolume.BoilingPoint.input.temperature = tempmvtmpi
                 
                 phprop.AqueousSolubility.fit.UNIFAC.temperature = tempaqfittmp
                 
                 phprop.AqueousSolubility.operatingT.UNIFAC.temperature = tempaqopttmp
       
                 phprop.AqueousSolubility.database.temperature = tempaqdbtmp
                 
                 phprop.AqueousSolubility.UNIFAC.temperature = tempaquntmp
                 
                 phprop.AqueousSolubility.input.temperature = tempaqtmpi
                 
                 phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature = tempoctopttmp
              
                 phprop.OctWaterPartCoeff.database.temperature = tempoctdbtmp

                 phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature = tempoctuntmp

                 phprop.OctWaterPartCoeff.input.temperature = tempocttmpi

                 phprop.LiquidDiffusivity.haydukLaudie.temperature = templdhltmp

                 phprop.LiquidDiffusivity.polson.temperature = templdptmp
                 
                 phprop.LiquidDiffusivity.wilkeChang.temperature = templdwctmp
                 
                 phprop.LiquidDiffusivity.input.temperature = templdtmpi
                 
                 phprop.GasDiffusivity.wilkeLee.temperature = tempgdwltmp
                 
                 phprop.GasDiffusivity.input.temperature = tempgdtmpi
              
                 'Covert values back
                 phprop.OperatingPressure = tempress
              
                 phprop.OperatingTemperature = tempt
              
                 phprop.VaporPressure.CurrentSelection.Value = tempvp
                 phprop.VaporPressure.database.Value = tempvp
                 phprop.VaporPressure.input.Value = tempvpi
              
                 phprop.MolecularWeight.CurrentSelection.Value = tempmw
                 phprop.MolecularWeight.database.Value = tempmwdb
                 phprop.MolecularWeight.UNIFAC.Value = tempmwun
                 phprop.MolecularWeight.input.Value = tempmwi
                 
                 phprop.BoilingPoint.CurrentSelection.Value = tempbp
                 phprop.BoilingPoint.database.Value = tempbpdb
                 phprop.BoilingPoint.input.Value = tempbpi
                 
                 phprop.LiquidDensity.CurrentSelection.Value = templd
                 phprop.LiquidDensity.database.Value = templddb
                 phprop.LiquidDensity.UNIFAC.Value = templdun
                 phprop.LiquidDensity.input.Value = templdi
                 
                 phprop.MolarVolume.operatingT.CurrentSelection.Value = tempmvopt
                 phprop.MolarVolume.operatingT.database.Value = tempmvoptdb
                 phprop.MolarVolume.operatingT.UNIFAC.Value = tempmvoptun
                 phprop.MolarVolume.operatingT.input.Value = tempmvopti

                 phprop.MolarVolume.BoilingPoint.CurrentSelection.Value = tempmv
                 phprop.MolarVolume.BoilingPoint.UNIFAC.Value = tempmvsc
                 phprop.MolarVolume.BoilingPoint.input.Value = tempmvi
                 
                 phprop.LiquidDiffusivity.CurrentSelection.Value = templdiff
                 phprop.LiquidDiffusivity.haydukLaudie.Value = templhldiff
                 phprop.LiquidDiffusivity.polson.Value = templpldiff
                 phprop.LiquidDiffusivity.wilkeChang.Value = templwcdiff
                 phprop.LiquidDiffusivity.input.Value = templdiffi
              
                 phprop.GasDiffusivity.CurrentSelection.Value = tempgdiff
                 phprop.GasDiffusivity.wilkeLee.Value = tempgdiffwl
                 phprop.GasDiffusivity.input.Value = tempgdiffi
              
              End If
              
              If i = NumSelectedChemicals Then Exit For
           
              Print #1,
              Print #1,
              Print #1,
              Print #1,
           
          Next i

          If ChosenAtLeastOneAirWaterProperty Then
             Print #1,
             Print #1,
             Print #1,
             Print #1,
             Print #1,
             Print #1,
          End If

          phprop = PropContaminant(CurrentlySelectedContaminant)

          For i = 1 To NUMBER_OF_PROPERTIES
              HaveProperty(i) = phprop.HaveProperty(i)
          Next i
          For i = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
              PROPAVAILABLE(i) = phprop.PROPAVAILABLE(i)
          Next i
       End If

       If ChosenAtLeastOneAirWaterProperty Then
          
          'If English units are desired convert them here
          If cboUnits.ListIndex = 1 Then
              
             temppress = phprop.OperatingPressure
             Call PRESSCNV(EnglishValue, phprop.OperatingPressure)
             phprop.OperatingPressure = EnglishValue
              
             tempt = phprop.OperatingTemperature
             Call TEMPCNV(EnglishValue, phprop.OperatingTemperature)
             phprop.OperatingTemperature = EnglishValue
             
             'Convert Temperatures
             tempwdtmp = phprop.WaterDensity.correlation.temperature
             tempwdtmpi = phprop.WaterDensity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterDensity.correlation.temperature)
             phprop.WaterDensity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterDensity.input.temperature)
             phprop.WaterDensity.input.temperature = EnglishValue
             
             tempwvtmp = phprop.WaterViscosity.correlation.temperature
             tempwvtmpi = phprop.WaterViscosity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterViscosity.correlation.temperature)
             phprop.WaterViscosity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterViscosity.input.temperature)
             phprop.WaterViscosity.input.temperature = EnglishValue
             
             tempwsttmp = phprop.WaterSurfaceTension.correlation.temperature
             tempwsttmpi = phprop.WaterSurfaceTension.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterSurfaceTension.correlation.temperature)
             phprop.WaterSurfaceTension.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterSurfaceTension.input.temperature)
             phprop.WaterSurfaceTension.input.temperature = EnglishValue
             
             tempadtmp = phprop.AirDensity.correlation.temperature
             tempadtmpi = phprop.AirDensity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.AirDensity.correlation.temperature)
             phprop.AirDensity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.AirDensity.input.temperature)
             phprop.AirDensity.input.temperature = EnglishValue
             
             tempavtmp = phprop.AirViscosity.correlation.temperature
             tempavtmpi = phprop.AirViscosity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.AirViscosity.correlation.temperature)
             phprop.AirViscosity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.AirViscosity.input.temperature)
             phprop.AirViscosity.input.temperature = EnglishValue
              
             'Convert Values
             tempwd = phprop.WaterDensity.CurrentSelection.Value
             tempwdcor = phprop.WaterDensity.correlation.Value
             tempwdi = phprop.WaterDensity.input.Value
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.CurrentSelection.Value)
             phprop.WaterDensity.CurrentSelection.Value = EnglishValue
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.correlation.Value)
             phprop.WaterDensity.correlation.Value = EnglishValue
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.input.Value)
             phprop.WaterDensity.input.Value = EnglishValue
             
             tempwv = phprop.WaterViscosity.CurrentSelection.Value
             tempwvcor = phprop.WaterViscosity.correlation.Value
             tempwvi = phprop.WaterViscosity.input.Value
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.CurrentSelection.Value)
             phprop.WaterViscosity.CurrentSelection.Value = EnglishValue
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.correlation.Value)
             phprop.WaterViscosity.correlation.Value = EnglishValue
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.input.Value)
             phprop.WaterViscosity.input.Value = EnglishValue
             
             tempwst = phprop.WaterSurfaceTension.CurrentSelection.Value
             tempwstcor = phprop.WaterSurfaceTension.correlation.Value
             tempwsti = phprop.WaterSurfaceTension.input.Value
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.CurrentSelection.Value)
             phprop.WaterSurfaceTension.CurrentSelection.Value = EnglishValue
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.correlation.Value)
             phprop.WaterSurfaceTension.correlation.Value = EnglishValue
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.input.Value)
             phprop.WaterSurfaceTension.input.Value = EnglishValue
             
             tempad = phprop.AirDensity.CurrentSelection.Value
             tempadcor = phprop.AirDensity.correlation.Value
             tempadi = phprop.AirDensity.input.Value
             Call ADENSCNV(EnglishValue, phprop.AirDensity.CurrentSelection.Value)
             phprop.AirDensity.CurrentSelection.Value = EnglishValue
             Call ADENSCNV(EnglishValue, phprop.AirDensity.correlation.Value)
             phprop.AirDensity.correlation.Value = EnglishValue
             Call ADENSCNV(EnglishValue, phprop.AirDensity.input.Value)
             phprop.AirDensity.input.Value = EnglishValue
             
             tempav = phprop.AirViscosity.CurrentSelection.Value
             tempavcor = phprop.AirViscosity.correlation.Value
             tempavi = phprop.AirViscosity.input.Value
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.CurrentSelection.Value)
             phprop.AirViscosity.CurrentSelection.Value = EnglishValue
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.correlation.Value)
             phprop.AirViscosity.correlation.Value = EnglishValue
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.input.Value)
             phprop.AirViscosity.input.Value = EnglishValue

          End If

          Call PrintAirWaterPropertiesToFile
          
          'If English units were selected convert them back
          If cboUnits.ListIndex = 1 Then
              
             phprop.OperatingPressure = temppress
              
             phprop.OperatingTemperature = tempt
             
             'Convert temperatures back
             
             phprop.WaterDensity.correlation.temperature = tempwdtmp
             phprop.WaterDensity.input.temperature = tempwdtmpi
             
             phprop.WaterViscosity.correlation.temperature = tempwvtmp
             phprop.WaterViscosity.input.temperature = tempwvtmpi
             
             phprop.WaterSurfaceTension.correlation.temperature = tempwsttmp
             phprop.WaterSurfaceTension.input.temperature = tempwsttmpi
             
             phprop.AirDensity.correlation.temperature = tempadtmp
             phprop.AirDensity.input.temperature = tempadtmpi
             
             phprop.AirViscosity.correlation.temperature = tempavtmp
             phprop.AirViscosity.input.temperature = tempavtmpi
              
             'Convert values back
             phprop.WaterDensity.CurrentSelection.Value = tempwd
             phprop.WaterDensity.correlation.Value = tempwdcor
             phprop.WaterDensity.input.Value = tempwdi
             
             phprop.WaterViscosity.CurrentSelection.Value = tempwv
             phprop.WaterViscosity.correlation.Value = tempwvcor
             phprop.WaterViscosity.input.Value = tempwvi
             
             phprop.WaterSurfaceTension.CurrentSelection.Value = tempwst
             phprop.WaterSurfaceTension.correlation.Value = tempwstcor
             phprop.WaterSurfaceTension.input.Value = tempwsti
             
             phprop.AirDensity.CurrentSelection.Value = tempad
             phprop.AirDensity.correlation.Value = tempadcor
             phprop.AirDensity.input.Value = tempadi
             
             phprop.AirViscosity.CurrentSelection.Value = tempav
             phprop.AirViscosity.correlation.Value = tempavcor
             phprop.AirViscosity.input.Value = tempavi

          End If
       
       End If

       ElseIf frmPrint!optPrintContaminants(1).Value Then   'Print Currently Selected Contaminant
          If ChosenAtLeastOneContaminantProperty Then
             
              'If English units are desired convert them here
              If cboUnits.ListIndex = 1 Then
              
                 temppress = phprop.OperatingPressure
                 Call PRESSCNV(EnglishValue, phprop.OperatingPressure)
                 phprop.OperatingPressure = EnglishValue
              
                 tempt = phprop.OperatingTemperature
                 Call TEMPCNV(EnglishValue, phprop.OperatingTemperature)
                 phprop.OperatingTemperature = EnglishValue
                 
                 'Change all temperatures
                 tempvptmp = phprop.VaporPressure.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.VaporPressure.database.temperature)
                 phprop.VaporPressure.database.temperature = EnglishValue
                 
                 tempvptmpi = phprop.VaporPressure.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.VaporPressure.input.temperature)
                 phprop.VaporPressure.input.temperature = EnglishValue
                 
                 tempactmp = phprop.ActivityCoefficient.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.ActivityCoefficient.UNIFAC.temperature)
                 phprop.ActivityCoefficient.UNIFAC.temperature = EnglishValue
                 
                 temphregtmp = phprop.HenrysConstant.regress.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.regress.temperature)
                 phprop.HenrysConstant.regress.temperature = EnglishValue
                 
                 temphfittmp = phprop.HenrysConstant.fit.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.fit.UNIFAC.temperature)
                 phprop.HenrysConstant.fit.UNIFAC.temperature = EnglishValue
                 
                 temphopttmp = phprop.HenrysConstant.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.operatingT.UNIFAC.temperature)
                 phprop.HenrysConstant.operatingT.UNIFAC.temperature = EnglishValue
       
                 For j = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
                    temphdbttmp(j) = phprop.HenrysConstant.database(j).temperature
                    temphunttmp(j) = phprop.HenrysConstant.UNIFAC(j).temperature
                    Call TEMPCNV(EnglishValue, phprop.HenrysConstant.database(j).temperature)
                    phprop.HenrysConstant.database(j).temperature = EnglishValue
                    Call TEMPCNV(EnglishValue, phprop.HenrysConstant.UNIFAC(j).temperature)
                    phprop.HenrysConstant.UNIFAC(j).temperature = EnglishValue
                 Next j
                 
                 temphtmpi = phprop.HenrysConstant.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.input.temperature)
                 phprop.HenrysConstant.input.temperature = EnglishValue
                 
                 templdtmp = phprop.LiquidDensity.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.database.temperature)
                 phprop.LiquidDensity.database.temperature = EnglishValue
                 
                 templdutmp = phprop.LiquidDensity.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.UNIFAC.temperature)
                 phprop.LiquidDensity.UNIFAC.temperature = EnglishValue
                 
                 templdtmpi = phprop.LiquidDensity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.input.temperature)
                 phprop.LiquidDensity.input.temperature = EnglishValue
                 
                 tempmvopttmp = phprop.MolarVolume.operatingT.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.database.temperature)
                 phprop.MolarVolume.operatingT.database.temperature = EnglishValue
                 
                 tempmvoptutmp = phprop.MolarVolume.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.UNIFAC.temperature)
                 phprop.MolarVolume.operatingT.UNIFAC.temperature = EnglishValue
                 
                 tempmvopttmpi = phprop.MolarVolume.operatingT.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.input.temperature)
                 phprop.MolarVolume.operatingT.input.temperature = EnglishValue
                 
                 tempmvtmp = phprop.MolarVolume.BoilingPoint.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.UNIFAC.temperature)
                 phprop.MolarVolume.BoilingPoint.UNIFAC.temperature = EnglishValue
                 
                 tempmvtmpi = phprop.MolarVolume.BoilingPoint.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.input.temperature)
                 phprop.MolarVolume.BoilingPoint.input.temperature = EnglishValue
                 
                 tempaqfittmp = phprop.AqueousSolubility.fit.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.fit.UNIFAC.temperature)
                 phprop.AqueousSolubility.fit.UNIFAC.temperature = EnglishValue
                 
                 tempaqopttmp = phprop.AqueousSolubility.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.operatingT.UNIFAC.temperature)
                 phprop.AqueousSolubility.operatingT.UNIFAC.temperature = EnglishValue
       
                 tempaqdbtmp = phprop.AqueousSolubility.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.database.temperature)
                 phprop.AqueousSolubility.database.temperature = EnglishValue
                 
                 tempaquntmp = phprop.AqueousSolubility.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.UNIFAC.temperature)
                 phprop.AqueousSolubility.UNIFAC.temperature = EnglishValue
                 
                 tempaqtmpi = phprop.AqueousSolubility.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.input.temperature)
                 phprop.AqueousSolubility.input.temperature = EnglishValue
                 
                 tempoctopttmp = phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature)
                 phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature = EnglishValue
              
                 tempoctdbtmp = phprop.OctWaterPartCoeff.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.database.temperature)
                 phprop.OctWaterPartCoeff.database.temperature = EnglishValue

                 tempoctuntmp = phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature)
                 phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature = EnglishValue

                 tempocttmpi = phprop.OctWaterPartCoeff.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.input.temperature)
                 phprop.OctWaterPartCoeff.input.temperature = EnglishValue

                 templdhltmp = phprop.LiquidDiffusivity.haydukLaudie.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.haydukLaudie.temperature)
                 phprop.LiquidDiffusivity.haydukLaudie.temperature = EnglishValue

                 templdptmp = phprop.LiquidDiffusivity.polson.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.polson.temperature)
                 phprop.LiquidDiffusivity.polson.temperature = EnglishValue
                 
                 templdwctmp = phprop.LiquidDiffusivity.wilkeChang.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.wilkeChang.temperature)
                 phprop.LiquidDiffusivity.wilkeChang.temperature = EnglishValue
                 
                 templdtmpi = phprop.LiquidDiffusivity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.input.temperature)
                 phprop.LiquidDiffusivity.input.temperature = EnglishValue
                 
                 tempgdwltmp = phprop.GasDiffusivity.wilkeLee.temperature
                 Call TEMPCNV(EnglishValue, phprop.GasDiffusivity.wilkeLee.temperature)
                 phprop.GasDiffusivity.wilkeLee.temperature = EnglishValue
                 
                 tempgdtmpi = phprop.GasDiffusivity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.GasDiffusivity.input.temperature)
                 phprop.GasDiffusivity.input.temperature = EnglishValue

                 'Convert values
                 tempvp = phprop.VaporPressure.CurrentSelection.Value
                 tempvpi = phprop.VaporPressure.input.Value
                 Call VPCONV(EnglishValue, phprop.VaporPressure.CurrentSelection.Value)
                 phprop.VaporPressure.CurrentSelection.Value = EnglishValue
                 phprop.VaporPressure.database.Value = EnglishValue
                 Call VPCONV(EnglishValue, phprop.VaporPressure.input.Value)
                 phprop.VaporPressure.input.Value = EnglishValue
                 
                 tempmw = phprop.MolecularWeight.CurrentSelection.Value
                 tempmwdb = phprop.MolecularWeight.database.Value
                 tempmwun = phprop.MolecularWeight.UNIFAC.Value
                 tempmwi = phprop.MolecularWeight.input.Value
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.CurrentSelection.Value)
                 phprop.MolecularWeight.CurrentSelection.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.database.Value)
                 phprop.MolecularWeight.database.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.UNIFAC.Value)
                 phprop.MolecularWeight.UNIFAC.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.input.Value)
                 phprop.MolecularWeight.input.Value = EnglishValue
              
                 tempbp = phprop.BoilingPoint.CurrentSelection.Value
                 tempbpdb = phprop.BoilingPoint.database.Value
                 tempbpi = phprop.BoilingPoint.input.Value
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.CurrentSelection.Value)
                 phprop.BoilingPoint.CurrentSelection.Value = EnglishValue
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.database.Value)
                 phprop.BoilingPoint.database.Value = EnglishValue
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.input.Value)
                 phprop.BoilingPoint.input.Value = EnglishValue
                 
                 templd = phprop.LiquidDensity.CurrentSelection.Value
                 templddb = phprop.LiquidDensity.database.Value
                 templdun = phprop.LiquidDensity.UNIFAC.Value
                 templdi = phprop.LiquidDensity.input.Value
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.CurrentSelection.Value)
                 phprop.LiquidDensity.CurrentSelection.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.database.Value)
                 phprop.LiquidDensity.database.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.UNIFAC.Value)
                 phprop.LiquidDensity.UNIFAC.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.input.Value)
                 phprop.LiquidDensity.input.Value = EnglishValue
              
                 tempmvopt = phprop.MolarVolume.operatingT.CurrentSelection.Value
                 tempmvoptdb = phprop.MolarVolume.operatingT.database.Value
                 tempmvoptun = phprop.MolarVolume.operatingT.UNIFAC.Value
                 tempmvopti = phprop.MolarVolume.operatingT.input.Value
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.CurrentSelection.Value)
                 phprop.MolarVolume.operatingT.CurrentSelection.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.database.Value)
                 phprop.MolarVolume.operatingT.database.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.UNIFAC.Value)
                 phprop.MolarVolume.operatingT.UNIFAC.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.input.Value)
                 phprop.MolarVolume.operatingT.input.Value = EnglishValue
              
                 tempmv = phprop.MolarVolume.BoilingPoint.CurrentSelection.Value
                 tempmvsc = phprop.MolarVolume.BoilingPoint.UNIFAC.Value
                 tempmvi = phprop.MolarVolume.BoilingPoint.input.Value
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.CurrentSelection.Value)
                 phprop.MolarVolume.BoilingPoint.CurrentSelection.Value = EnglishValue
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.UNIFAC.Value)
                 phprop.MolarVolume.BoilingPoint.UNIFAC.Value = EnglishValue
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.input.Value)
                 phprop.MolarVolume.BoilingPoint.input.Value = EnglishValue
              
                 templdiff = phprop.LiquidDiffusivity.CurrentSelection.Value
                 templhldiff = phprop.LiquidDiffusivity.haydukLaudie.Value
                 templpldiff = phprop.LiquidDiffusivity.polson.Value
                 templwcdiff = phprop.LiquidDiffusivity.wilkeChang.Value
                 templdiffi = phprop.LiquidDiffusivity.input.Value
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.CurrentSelection.Value)
                 phprop.LiquidDiffusivity.CurrentSelection.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.haydukLaudie.Value)
                 phprop.LiquidDiffusivity.haydukLaudie.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.polson.Value)
                 phprop.LiquidDiffusivity.polson.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.wilkeChang.Value)
                 phprop.LiquidDiffusivity.wilkeChang.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.input.Value)
                 phprop.LiquidDiffusivity.input.Value = EnglishValue
              
                 tempgdiff = phprop.GasDiffusivity.CurrentSelection.Value
                 tempgdiffwl = phprop.GasDiffusivity.wilkeLee.Value
                 tempgdiffi = phprop.GasDiffusivity.input.Value
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.CurrentSelection.Value)
                 phprop.GasDiffusivity.CurrentSelection.Value = EnglishValue
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.wilkeLee.Value)
                 phprop.GasDiffusivity.wilkeLee.Value = EnglishValue
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.input.Value)
                 phprop.GasDiffusivity.input.Value = EnglishValue
              
              End If
             
             Call PrintOneContaminantToFile
              
              'If English units were selected convert them back
              If cboUnits.ListIndex = 1 Then
                 
                 'Convert temperatures back
                 phprop.VaporPressure.database.temperature = tempvptmp
                 
                 phprop.VaporPressure.input.temperature = tempvptmpi
                 
                 phprop.ActivityCoefficient.UNIFAC.temperature = tempactmp
                 
                 phprop.HenrysConstant.regress.temperature = temphregtmp
                 
                 phprop.HenrysConstant.fit.UNIFAC.temperature = temphfittmp
                 
                 phprop.HenrysConstant.operatingT.UNIFAC.temperature = temphopttmp
       
                 For j = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
                    phprop.HenrysConstant.database(j).temperature = temphdbttmp(j)
                    phprop.HenrysConstant.UNIFAC(j).temperature = temphunttmp(j)
                 Next j
                 
                 phprop.HenrysConstant.input.temperature = temphtmpi
                 
                 phprop.LiquidDensity.database.temperature = templdtmp
                 
                 phprop.LiquidDensity.UNIFAC.temperature = templdutmp
                 
                 phprop.LiquidDensity.input.temperature = templdtmpi
                 
                 phprop.MolarVolume.operatingT.database.temperature = tempmvopttmp
                 
                 phprop.MolarVolume.operatingT.UNIFAC.temperature = tempmvoptutmp
                 
                 phprop.MolarVolume.operatingT.input.temperature = tempmvopttmpi
                 
                 phprop.MolarVolume.BoilingPoint.UNIFAC.temperature = tempmvtmp
                 
                 phprop.MolarVolume.BoilingPoint.input.temperature = tempmvtmpi
                 
                 phprop.AqueousSolubility.fit.UNIFAC.temperature = tempaqfittmp
                 
                 phprop.AqueousSolubility.operatingT.UNIFAC.temperature = tempaqopttmp
       
                 phprop.AqueousSolubility.database.temperature = tempaqdbtmp
                 
                 phprop.AqueousSolubility.UNIFAC.temperature = tempaquntmp
                 
                 phprop.AqueousSolubility.input.temperature = tempaqtmpi
                 
                 phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature = tempoctopttmp
              
                 phprop.OctWaterPartCoeff.database.temperature = tempoctdbtmp

                 phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature = tempoctuntmp

                 phprop.OctWaterPartCoeff.input.temperature = tempocttmpi

                 phprop.LiquidDiffusivity.haydukLaudie.temperature = templdhltmp

                 phprop.LiquidDiffusivity.polson.temperature = templdptmp
                 
                 phprop.LiquidDiffusivity.wilkeChang.temperature = templdwctmp
                 
                 phprop.LiquidDiffusivity.input.temperature = templdtmpi
                 
                 phprop.GasDiffusivity.wilkeLee.temperature = tempgdwltmp
                 
                 phprop.GasDiffusivity.input.temperature = tempgdtmpi
              
                 'Covert values back
                 phprop.OperatingPressure = tempress
              
                 phprop.OperatingTemperature = tempt
              
                 phprop.VaporPressure.CurrentSelection.Value = tempvp
                 phprop.VaporPressure.database.Value = tempvp
                 phprop.VaporPressure.input.Value = tempvpi
              
                 phprop.MolecularWeight.CurrentSelection.Value = tempmw
                 phprop.MolecularWeight.database.Value = tempmwdb
                 phprop.MolecularWeight.UNIFAC.Value = tempmwun
                 phprop.MolecularWeight.input.Value = tempmwi
                 
                 phprop.BoilingPoint.CurrentSelection.Value = tempbp
                 phprop.BoilingPoint.database.Value = tempbpdb
                 phprop.BoilingPoint.input.Value = tempbpi
                 
                 phprop.LiquidDensity.CurrentSelection.Value = templd
                 phprop.LiquidDensity.database.Value = templddb
                 phprop.LiquidDensity.UNIFAC.Value = templdun
                 phprop.LiquidDensity.input.Value = templdi
                 
                 phprop.MolarVolume.operatingT.CurrentSelection.Value = tempmvopt
                 phprop.MolarVolume.operatingT.database.Value = tempmvoptdb
                 phprop.MolarVolume.operatingT.UNIFAC.Value = tempmvoptun
                 phprop.MolarVolume.operatingT.input.Value = tempmvopti

                 phprop.MolarVolume.BoilingPoint.CurrentSelection.Value = tempmv
                 phprop.MolarVolume.BoilingPoint.UNIFAC.Value = tempmvsc
                 phprop.MolarVolume.BoilingPoint.input.Value = tempmvi
                 
                 phprop.LiquidDiffusivity.CurrentSelection.Value = templdiff
                 phprop.LiquidDiffusivity.haydukLaudie.Value = templhldiff
                 phprop.LiquidDiffusivity.polson.Value = templpldiff
                 phprop.LiquidDiffusivity.wilkeChang.Value = templwcdiff
                 phprop.LiquidDiffusivity.input.Value = templdiffi
              
                 phprop.GasDiffusivity.CurrentSelection.Value = tempgdiff
                 phprop.GasDiffusivity.wilkeLee.Value = tempgdiffwl
                 phprop.GasDiffusivity.input.Value = tempgdiffi
              
              End If
              
          End If

          If ChosenAtLeastOneAirWaterProperty Then
             Print #1,
             Print #1,
             Print #1,
             Print #1,
             Print #1,
             Print #1,
          End If

          If ChosenAtLeastOneAirWaterProperty Then
             
          'If English units are desired convert them here
          If cboUnits.ListIndex = 1 Then
              
             temppress = phprop.OperatingPressure
             Call PRESSCNV(EnglishValue, phprop.OperatingPressure)
             phprop.OperatingPressure = EnglishValue
              
             tempt = phprop.OperatingTemperature
             Call TEMPCNV(EnglishValue, phprop.OperatingTemperature)
             phprop.OperatingTemperature = EnglishValue
             
             'Convert Temperatures
             tempwdtmp = phprop.WaterDensity.correlation.temperature
             tempwdtmpi = phprop.WaterDensity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterDensity.correlation.temperature)
             phprop.WaterDensity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterDensity.input.temperature)
             phprop.WaterDensity.input.temperature = EnglishValue
             
             tempwvtmp = phprop.WaterViscosity.correlation.temperature
             tempwvtmpi = phprop.WaterViscosity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterViscosity.correlation.temperature)
             phprop.WaterViscosity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterViscosity.input.temperature)
             phprop.WaterViscosity.input.temperature = EnglishValue
             
             tempwsttmp = phprop.WaterSurfaceTension.correlation.temperature
             tempwsttmpi = phprop.WaterSurfaceTension.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterSurfaceTension.correlation.temperature)
             phprop.WaterSurfaceTension.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterSurfaceTension.input.temperature)
             phprop.WaterSurfaceTension.input.temperature = EnglishValue
             
             tempadtmp = phprop.AirDensity.correlation.temperature
             tempadtmpi = phprop.AirDensity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.AirDensity.correlation.temperature)
             phprop.AirDensity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.AirDensity.input.temperature)
             phprop.AirDensity.input.temperature = EnglishValue
             
             tempavtmp = phprop.AirViscosity.correlation.temperature
             tempavtmpi = phprop.AirViscosity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.AirViscosity.correlation.temperature)
             phprop.AirViscosity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.AirViscosity.input.temperature)
             phprop.AirViscosity.input.temperature = EnglishValue
              
             'Convert Values
             tempwd = phprop.WaterDensity.CurrentSelection.Value
             tempwdcor = phprop.WaterDensity.correlation.Value
             tempwdi = phprop.WaterDensity.input.Value
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.CurrentSelection.Value)
             phprop.WaterDensity.CurrentSelection.Value = EnglishValue
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.correlation.Value)
             phprop.WaterDensity.correlation.Value = EnglishValue
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.input.Value)
             phprop.WaterDensity.input.Value = EnglishValue
             
             tempwv = phprop.WaterViscosity.CurrentSelection.Value
             tempwvcor = phprop.WaterViscosity.correlation.Value
             tempwvi = phprop.WaterViscosity.input.Value
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.CurrentSelection.Value)
             phprop.WaterViscosity.CurrentSelection.Value = EnglishValue
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.correlation.Value)
             phprop.WaterViscosity.correlation.Value = EnglishValue
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.input.Value)
             phprop.WaterViscosity.input.Value = EnglishValue
             
             tempwst = phprop.WaterSurfaceTension.CurrentSelection.Value
             tempwstcor = phprop.WaterSurfaceTension.correlation.Value
             tempwsti = phprop.WaterSurfaceTension.input.Value
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.CurrentSelection.Value)
             phprop.WaterSurfaceTension.CurrentSelection.Value = EnglishValue
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.correlation.Value)
             phprop.WaterSurfaceTension.correlation.Value = EnglishValue
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.input.Value)
             phprop.WaterSurfaceTension.input.Value = EnglishValue
             
             tempad = phprop.AirDensity.CurrentSelection.Value
             tempadcor = phprop.AirDensity.correlation.Value
             tempadi = phprop.AirDensity.input.Value
             Call ADENSCNV(EnglishValue, phprop.AirDensity.CurrentSelection.Value)
             phprop.AirDensity.CurrentSelection.Value = EnglishValue
             Call ADENSCNV(EnglishValue, phprop.AirDensity.correlation.Value)
             phprop.AirDensity.correlation.Value = EnglishValue
             Call ADENSCNV(EnglishValue, phprop.AirDensity.input.Value)
             phprop.AirDensity.input.Value = EnglishValue
             
             tempav = phprop.AirViscosity.CurrentSelection.Value
             tempavcor = phprop.AirViscosity.correlation.Value
             tempavi = phprop.AirViscosity.input.Value
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.CurrentSelection.Value)
             phprop.AirViscosity.CurrentSelection.Value = EnglishValue
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.correlation.Value)
             phprop.AirViscosity.correlation.Value = EnglishValue
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.input.Value)
             phprop.AirViscosity.input.Value = EnglishValue

          End If
             
             Call PrintAirWaterPropertiesToFile
          
          'If English units were selected convert them back
          If cboUnits.ListIndex = 1 Then
              
             phprop.OperatingPressure = temppress
              
             phprop.OperatingTemperature = tempt
             
             'Convert temperatures back
             
             phprop.WaterDensity.correlation.temperature = tempwdtmp
             phprop.WaterDensity.input.temperature = tempwdtmpi
             
             phprop.WaterViscosity.correlation.temperature = tempwvtmp
             phprop.WaterViscosity.input.temperature = tempwvtmpi
             
             phprop.WaterSurfaceTension.correlation.temperature = tempwsttmp
             phprop.WaterSurfaceTension.input.temperature = tempwsttmpi
             
             phprop.AirDensity.correlation.temperature = tempadtmp
             phprop.AirDensity.input.temperature = tempadtmpi
             
             phprop.AirViscosity.correlation.temperature = tempavtmp
             phprop.AirViscosity.input.temperature = tempavtmpi
              
             'Convert values back
             phprop.WaterDensity.CurrentSelection.Value = tempwd
             phprop.WaterDensity.correlation.Value = tempwdcor
             phprop.WaterDensity.input.Value = tempwdi
             
             phprop.WaterViscosity.CurrentSelection.Value = tempwv
             phprop.WaterViscosity.correlation.Value = tempwvcor
             phprop.WaterViscosity.input.Value = tempwvi
             
             phprop.WaterSurfaceTension.CurrentSelection.Value = tempwst
             phprop.WaterSurfaceTension.correlation.Value = tempwstcor
             phprop.WaterSurfaceTension.input.Value = tempwsti
             
             phprop.AirDensity.CurrentSelection.Value = tempad
             phprop.AirDensity.correlation.Value = tempadcor
             phprop.AirDensity.input.Value = tempadi
             
             phprop.AirViscosity.CurrentSelection.Value = tempav
             phprop.AirViscosity.correlation.Value = tempavcor
             phprop.AirViscosity.input.Value = tempavi

          End If
          
          End If

    End If

resume_exit36:
Exit Sub

error_printtofile:
MsgBox "Error printing to file", mb_exclamation, "StEPP"
Resume resume_exit36


End Sub

Private Sub PrintToPrinter()
    Dim CurrentlySelectedContaminant As Integer
    Dim i As Integer, j As Integer
    Dim PrintHeightOfEachContaminant As Integer   'The Printing Height of Each Contaminant
    Dim PrintSpaceBetweenContaminants As Integer
    Dim ChosenAtLeastOneContaminantProperty As Integer
    Dim ChosenAtLeastOneAirWaterProperty As Integer
    Dim EnglishValue As Double
    Static temphdbttmp(20) As Double
    Static temphunttmp(20) As Double

On Error GoTo error_printtoprinter

    ChosenAtLeastOneContaminantProperty = False
    ChosenAtLeastOneAirWaterProperty = False
    If optPrintProperties(0).Value Then
       ChosenAtLeastOneContaminantProperty = True
       ChosenAtLeastOneAirWaterProperty = True
    Else
       For i = 0 To 12
           If (frmPrint!chkProperties(i).Value = 1) Then
              ChosenAtLeastOneContaminantProperty = True
              Exit For
           End If
       Next i

       For i = 13 To 17
           If (frmPrint!chkProperties(i).Value = 1) Then
              ChosenAtLeastOneAirWaterProperty = True
              Exit For
           End If
       Next i
    End If


    If frmPrint!optPrintContaminants(0).Value Then   'Print All Contaminants
       If ChosenAtLeastOneContaminantProperty Then
          PrintHeightOfEachContaminant = 0
          CurrentlySelectedContaminant = contam_prop_form!cboSelectContaminant.ListIndex + 1
          For i = 1 To NumSelectedChemicals
              phprop = PropContaminant(i)
     
              'If English units are desired convert them here
              If cboUnits.ListIndex = 1 Then
              
                 temppress = phprop.OperatingPressure
                 Call PRESSCNV(EnglishValue, phprop.OperatingPressure)
                 phprop.OperatingPressure = EnglishValue
              
                 tempt = phprop.OperatingTemperature
                 Call TEMPCNV(EnglishValue, phprop.OperatingTemperature)
                 phprop.OperatingTemperature = EnglishValue
                 
                 'Change all temperatures
                 tempvptmp = phprop.VaporPressure.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.VaporPressure.database.temperature)
                 phprop.VaporPressure.database.temperature = EnglishValue
                 
                 tempvptmpi = phprop.VaporPressure.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.VaporPressure.input.temperature)
                 phprop.VaporPressure.input.temperature = EnglishValue
                 
                 tempactmp = phprop.ActivityCoefficient.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.ActivityCoefficient.UNIFAC.temperature)
                 phprop.ActivityCoefficient.UNIFAC.temperature = EnglishValue
                 
                 temphregtmp = phprop.HenrysConstant.regress.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.regress.temperature)
                 phprop.HenrysConstant.regress.temperature = EnglishValue
                 
                 temphfittmp = phprop.HenrysConstant.fit.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.fit.UNIFAC.temperature)
                 phprop.HenrysConstant.fit.UNIFAC.temperature = EnglishValue
                 
                 temphopttmp = phprop.HenrysConstant.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.operatingT.UNIFAC.temperature)
                 phprop.HenrysConstant.operatingT.UNIFAC.temperature = EnglishValue
       
                 For j = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
                    temphdbttmp(j) = phprop.HenrysConstant.database(j).temperature
                    temphunttmp(j) = phprop.HenrysConstant.UNIFAC(j).temperature
                    Call TEMPCNV(EnglishValue, phprop.HenrysConstant.database(j).temperature)
                    phprop.HenrysConstant.database(j).temperature = EnglishValue
                    Call TEMPCNV(EnglishValue, phprop.HenrysConstant.UNIFAC(j).temperature)
                    phprop.HenrysConstant.UNIFAC(j).temperature = EnglishValue
                 Next j
                 
                 temphtmpi = phprop.HenrysConstant.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.input.temperature)
                 phprop.HenrysConstant.input.temperature = EnglishValue
                 
                 templdtmp = phprop.LiquidDensity.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.database.temperature)
                 phprop.LiquidDensity.database.temperature = EnglishValue
                 
                 templdutmp = phprop.LiquidDensity.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.UNIFAC.temperature)
                 phprop.LiquidDensity.UNIFAC.temperature = EnglishValue
                 
                 templdtmpi = phprop.LiquidDensity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.input.temperature)
                 phprop.LiquidDensity.input.temperature = EnglishValue
                 
                 tempmvopttmp = phprop.MolarVolume.operatingT.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.database.temperature)
                 phprop.MolarVolume.operatingT.database.temperature = EnglishValue
                 
                 tempmvoptutmp = phprop.MolarVolume.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.UNIFAC.temperature)
                 phprop.MolarVolume.operatingT.UNIFAC.temperature = EnglishValue
                 
                 tempmvopttmpi = phprop.MolarVolume.operatingT.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.input.temperature)
                 phprop.MolarVolume.operatingT.input.temperature = EnglishValue
                 
                 tempmvtmp = phprop.MolarVolume.BoilingPoint.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.UNIFAC.temperature)
                 phprop.MolarVolume.BoilingPoint.UNIFAC.temperature = EnglishValue
                 
                 tempmvtmpi = phprop.MolarVolume.BoilingPoint.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.input.temperature)
                 phprop.MolarVolume.BoilingPoint.input.temperature = EnglishValue
                 
                 tempaqfittmp = phprop.AqueousSolubility.fit.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.fit.UNIFAC.temperature)
                 phprop.AqueousSolubility.fit.UNIFAC.temperature = EnglishValue
                 
                 tempaqopttmp = phprop.AqueousSolubility.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.operatingT.UNIFAC.temperature)
                 phprop.AqueousSolubility.operatingT.UNIFAC.temperature = EnglishValue
       
                 tempaqdbtmp = phprop.AqueousSolubility.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.database.temperature)
                 phprop.AqueousSolubility.database.temperature = EnglishValue
                 
                 tempaquntmp = phprop.AqueousSolubility.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.UNIFAC.temperature)
                 phprop.AqueousSolubility.UNIFAC.temperature = EnglishValue
                 
                 tempaqtmpi = phprop.AqueousSolubility.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.input.temperature)
                 phprop.AqueousSolubility.input.temperature = EnglishValue
                 
                 tempoctopttmp = phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature)
                 phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature = EnglishValue
              
                 tempoctdbtmp = phprop.OctWaterPartCoeff.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.database.temperature)
                 phprop.OctWaterPartCoeff.database.temperature = EnglishValue

                 tempoctuntmp = phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature)
                 phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature = EnglishValue

                 tempocttmpi = phprop.OctWaterPartCoeff.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.input.temperature)
                 phprop.OctWaterPartCoeff.input.temperature = EnglishValue

                 templdhltmp = phprop.LiquidDiffusivity.haydukLaudie.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.haydukLaudie.temperature)
                 phprop.LiquidDiffusivity.haydukLaudie.temperature = EnglishValue

                 templdptmp = phprop.LiquidDiffusivity.polson.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.polson.temperature)
                 phprop.LiquidDiffusivity.polson.temperature = EnglishValue
                 
                 templdwctmp = phprop.LiquidDiffusivity.wilkeChang.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.wilkeChang.temperature)
                 phprop.LiquidDiffusivity.wilkeChang.temperature = EnglishValue
                 
                 templdtmpi = phprop.LiquidDiffusivity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.input.temperature)
                 phprop.LiquidDiffusivity.input.temperature = EnglishValue
                 
                 tempgdwltmp = phprop.GasDiffusivity.wilkeLee.temperature
                 Call TEMPCNV(EnglishValue, phprop.GasDiffusivity.wilkeLee.temperature)
                 phprop.GasDiffusivity.wilkeLee.temperature = EnglishValue
                 
                 tempgdtmpi = phprop.GasDiffusivity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.GasDiffusivity.input.temperature)
                 phprop.GasDiffusivity.input.temperature = EnglishValue

                 'Convert values
                 tempvp = phprop.VaporPressure.CurrentSelection.Value
                 tempvpi = phprop.VaporPressure.input.Value
                 Call VPCONV(EnglishValue, phprop.VaporPressure.CurrentSelection.Value)
                 phprop.VaporPressure.CurrentSelection.Value = EnglishValue
                 phprop.VaporPressure.database.Value = EnglishValue
                 Call VPCONV(EnglishValue, phprop.VaporPressure.input.Value)
                 phprop.VaporPressure.input.Value = EnglishValue
                 
                 tempmw = phprop.MolecularWeight.CurrentSelection.Value
                 tempmwdb = phprop.MolecularWeight.database.Value
                 tempmwun = phprop.MolecularWeight.UNIFAC.Value
                 tempmwi = phprop.MolecularWeight.input.Value
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.CurrentSelection.Value)
                 phprop.MolecularWeight.CurrentSelection.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.database.Value)
                 phprop.MolecularWeight.database.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.UNIFAC.Value)
                 phprop.MolecularWeight.UNIFAC.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.input.Value)
                 phprop.MolecularWeight.input.Value = EnglishValue
              
                 tempbp = phprop.BoilingPoint.CurrentSelection.Value
                 tempbpdb = phprop.BoilingPoint.database.Value
                 tempbpi = phprop.BoilingPoint.input.Value
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.CurrentSelection.Value)
                 phprop.BoilingPoint.CurrentSelection.Value = EnglishValue
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.database.Value)
                 phprop.BoilingPoint.database.Value = EnglishValue
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.input.Value)
                 phprop.BoilingPoint.input.Value = EnglishValue
                 
                 templd = phprop.LiquidDensity.CurrentSelection.Value
                 templddb = phprop.LiquidDensity.database.Value
                 templdun = phprop.LiquidDensity.UNIFAC.Value
                 templdi = phprop.LiquidDensity.input.Value
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.CurrentSelection.Value)
                 phprop.LiquidDensity.CurrentSelection.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.database.Value)
                 phprop.LiquidDensity.database.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.UNIFAC.Value)
                 phprop.LiquidDensity.UNIFAC.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.input.Value)
                 phprop.LiquidDensity.input.Value = EnglishValue
              
                 tempmvopt = phprop.MolarVolume.operatingT.CurrentSelection.Value
                 tempmvoptdb = phprop.MolarVolume.operatingT.database.Value
                 tempmvoptun = phprop.MolarVolume.operatingT.UNIFAC.Value
                 tempmvopti = phprop.MolarVolume.operatingT.input.Value
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.CurrentSelection.Value)
                 phprop.MolarVolume.operatingT.CurrentSelection.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.database.Value)
                 phprop.MolarVolume.operatingT.database.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.UNIFAC.Value)
                 phprop.MolarVolume.operatingT.UNIFAC.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.input.Value)
                 phprop.MolarVolume.operatingT.input.Value = EnglishValue
              
                 tempmv = phprop.MolarVolume.BoilingPoint.CurrentSelection.Value
                 tempmvsc = phprop.MolarVolume.BoilingPoint.UNIFAC.Value
                 tempmvi = phprop.MolarVolume.BoilingPoint.input.Value
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.CurrentSelection.Value)
                 phprop.MolarVolume.BoilingPoint.CurrentSelection.Value = EnglishValue
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.UNIFAC.Value)
                 phprop.MolarVolume.BoilingPoint.UNIFAC.Value = EnglishValue
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.input.Value)
                 phprop.MolarVolume.BoilingPoint.input.Value = EnglishValue
              
                 templdiff = phprop.LiquidDiffusivity.CurrentSelection.Value
                 templhldiff = phprop.LiquidDiffusivity.haydukLaudie.Value
                 templpldiff = phprop.LiquidDiffusivity.polson.Value
                 templwcdiff = phprop.LiquidDiffusivity.wilkeChang.Value
                 templdiffi = phprop.LiquidDiffusivity.input.Value
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.CurrentSelection.Value)
                 phprop.LiquidDiffusivity.CurrentSelection.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.haydukLaudie.Value)
                 phprop.LiquidDiffusivity.haydukLaudie.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.polson.Value)
                 phprop.LiquidDiffusivity.polson.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.wilkeChang.Value)
                 phprop.LiquidDiffusivity.wilkeChang.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.input.Value)
                 phprop.LiquidDiffusivity.input.Value = EnglishValue
              
                 tempgdiff = phprop.GasDiffusivity.CurrentSelection.Value
                 tempgdiffwl = phprop.GasDiffusivity.wilkeLee.Value
                 tempgdiffi = phprop.GasDiffusivity.input.Value
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.CurrentSelection.Value)
                 phprop.GasDiffusivity.CurrentSelection.Value = EnglishValue
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.wilkeLee.Value)
                 phprop.GasDiffusivity.wilkeLee.Value = EnglishValue
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.input.Value)
                 phprop.GasDiffusivity.input.Value = EnglishValue
              
              End If

              For j = 1 To NUMBER_OF_PROPERTIES
                  HaveProperty(j) = phprop.HaveProperty(j)
              Next j
              For j = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
                  PROPAVAILABLE(j) = phprop.PROPAVAILABLE(j)
              Next j

              If i = NumSelectedChemicals Then
                 If Printer.CurrentY + PrintHeightOfEachContaminant + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
                    Printer.NewPage
                 End If
              Else
                 If Printer.CurrentY + PrintHeightOfEachContaminant + PrintSpaceBetweenContaminants > Printer.Height Then
                    Printer.NewPage
                 End If
              End If

              Call PrintOneContaminant  'Prints the contaminant currently stored in structure phprop
              
              'If English units were selected convert them back
              If cboUnits.ListIndex = 1 Then
                 
                 'Convert temperatures back
                 phprop.VaporPressure.database.temperature = tempvptmp
                 
                 phprop.VaporPressure.input.temperature = tempvptmpi
                 
                 phprop.ActivityCoefficient.UNIFAC.temperature = tempactmp
                 
                 phprop.HenrysConstant.regress.temperature = temphregtmp
                 
                 phprop.HenrysConstant.fit.UNIFAC.temperature = temphfittmp
                 
                 phprop.HenrysConstant.operatingT.UNIFAC.temperature = temphopttmp
       
                 For j = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
                    phprop.HenrysConstant.database(j).temperature = temphdbttmp(j)
                    phprop.HenrysConstant.UNIFAC(j).temperature = temphunttmp(j)
                 Next j
                 
                 phprop.HenrysConstant.input.temperature = temphtmpi
                 
                 phprop.LiquidDensity.database.temperature = templdtmp
                 
                 phprop.LiquidDensity.UNIFAC.temperature = templdutmp
                 
                 phprop.LiquidDensity.input.temperature = templdtmpi
                 
                 phprop.MolarVolume.operatingT.database.temperature = tempmvopttmp
                 
                 phprop.MolarVolume.operatingT.UNIFAC.temperature = tempmvoptutmp
                 
                 phprop.MolarVolume.operatingT.input.temperature = tempmvopttmpi
                 
                 phprop.MolarVolume.BoilingPoint.UNIFAC.temperature = tempmvtmp
                 
                 phprop.MolarVolume.BoilingPoint.input.temperature = tempmvtmpi
                 
                 phprop.AqueousSolubility.fit.UNIFAC.temperature = tempaqfittmp
                 
                 phprop.AqueousSolubility.operatingT.UNIFAC.temperature = tempaqopttmp
       
                 phprop.AqueousSolubility.database.temperature = tempaqdbtmp
                 
                 phprop.AqueousSolubility.UNIFAC.temperature = tempaquntmp
                 
                 phprop.AqueousSolubility.input.temperature = tempaqtmpi
                 
                 phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature = tempoctopttmp
              
                 phprop.OctWaterPartCoeff.database.temperature = tempoctdbtmp

                 phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature = tempoctuntmp

                 phprop.OctWaterPartCoeff.input.temperature = tempocttmpi

                 phprop.LiquidDiffusivity.haydukLaudie.temperature = templdhltmp

                 phprop.LiquidDiffusivity.polson.temperature = templdptmp
                 
                 phprop.LiquidDiffusivity.wilkeChang.temperature = templdwctmp
                 
                 phprop.LiquidDiffusivity.input.temperature = templdtmpi
                 
                 phprop.GasDiffusivity.wilkeLee.temperature = tempgdwltmp
                 
                 phprop.GasDiffusivity.input.temperature = tempgdtmpi
              
                 'Covert values back
                 phprop.OperatingPressure = tempress
              
                 phprop.OperatingTemperature = tempt
              
                 phprop.VaporPressure.CurrentSelection.Value = tempvp
                 phprop.VaporPressure.database.Value = tempvp
                 phprop.VaporPressure.input.Value = tempvpi
              
                 phprop.MolecularWeight.CurrentSelection.Value = tempmw
                 phprop.MolecularWeight.database.Value = tempmwdb
                 phprop.MolecularWeight.UNIFAC.Value = tempmwun
                 phprop.MolecularWeight.input.Value = tempmwi
                 
                 phprop.BoilingPoint.CurrentSelection.Value = tempbp
                 phprop.BoilingPoint.database.Value = tempbpdb
                 phprop.BoilingPoint.input.Value = tempbpi
                 
                 phprop.LiquidDensity.CurrentSelection.Value = templd
                 phprop.LiquidDensity.database.Value = templddb
                 phprop.LiquidDensity.UNIFAC.Value = templdun
                 phprop.LiquidDensity.input.Value = templdi
                 
                 phprop.MolarVolume.operatingT.CurrentSelection.Value = tempmvopt
                 phprop.MolarVolume.operatingT.database.Value = tempmvoptdb
                 phprop.MolarVolume.operatingT.UNIFAC.Value = tempmvoptun
                 phprop.MolarVolume.operatingT.input.Value = tempmvopti

                 phprop.MolarVolume.BoilingPoint.CurrentSelection.Value = tempmv
                 phprop.MolarVolume.BoilingPoint.UNIFAC.Value = tempmvsc
                 phprop.MolarVolume.BoilingPoint.input.Value = tempmvi
                 
                 phprop.LiquidDiffusivity.CurrentSelection.Value = templdiff
                 phprop.LiquidDiffusivity.haydukLaudie.Value = templhldiff
                 phprop.LiquidDiffusivity.polson.Value = templpldiff
                 phprop.LiquidDiffusivity.wilkeChang.Value = templwcdiff
                 phprop.LiquidDiffusivity.input.Value = templdiffi
              
                 phprop.GasDiffusivity.CurrentSelection.Value = tempgdiff
                 phprop.GasDiffusivity.wilkeLee.Value = tempgdiffwl
                 phprop.GasDiffusivity.input.Value = tempgdiffi
              
              End If

              phprop.BoilingPoint.CurrentSelection.Value = tempbp
              
              If i = NumSelectedChemicals Then Exit For
              If i = 1 Then PrintHeightOfEachContaminant = Printer.CurrentY
              Printer.Print
              Printer.Print
              Printer.Print
              Printer.Print
              If i = 1 Then PrintSpaceBetweenContaminants = Printer.CurrentY - PrintHeightOfEachContaminant
           
          Next i

          phprop = PropContaminant(CurrentlySelectedContaminant)

          For i = 1 To NUMBER_OF_PROPERTIES
              HaveProperty(i) = phprop.HaveProperty(i)
          Next i
          For i = 1 To NUMBER_OF_PROPERTIES_AVAILABLE
              PROPAVAILABLE(i) = phprop.PROPAVAILABLE(i)
          Next i

       End If

       If ChosenAtLeastOneAirWaterProperty Then
          Printer.NewPage
       
          'If English units are desired convert them here
          If cboUnits.ListIndex = 1 Then
              
             temppress = phprop.OperatingPressure
             Call PRESSCNV(EnglishValue, phprop.OperatingPressure)
             phprop.OperatingPressure = EnglishValue
              
             tempt = phprop.OperatingTemperature
             Call TEMPCNV(EnglishValue, phprop.OperatingTemperature)
             phprop.OperatingTemperature = EnglishValue
             
             'Convert Temperatures
             tempwdtmp = phprop.WaterDensity.correlation.temperature
             tempwdtmpi = phprop.WaterDensity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterDensity.correlation.temperature)
             phprop.WaterDensity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterDensity.input.temperature)
             phprop.WaterDensity.input.temperature = EnglishValue
             
             tempwvtmp = phprop.WaterViscosity.correlation.temperature
             tempwvtmpi = phprop.WaterViscosity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterViscosity.correlation.temperature)
             phprop.WaterViscosity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterViscosity.input.temperature)
             phprop.WaterViscosity.input.temperature = EnglishValue
             
             tempwsttmp = phprop.WaterSurfaceTension.correlation.temperature
             tempwsttmpi = phprop.WaterSurfaceTension.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterSurfaceTension.correlation.temperature)
             phprop.WaterSurfaceTension.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterSurfaceTension.input.temperature)
             phprop.WaterSurfaceTension.input.temperature = EnglishValue
             
             tempadtmp = phprop.AirDensity.correlation.temperature
             tempadtmpi = phprop.AirDensity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.AirDensity.correlation.temperature)
             phprop.AirDensity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.AirDensity.input.temperature)
             phprop.AirDensity.input.temperature = EnglishValue
             
             tempavtmp = phprop.AirViscosity.correlation.temperature
             tempavtmpi = phprop.AirViscosity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.AirViscosity.correlation.temperature)
             phprop.AirViscosity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.AirViscosity.input.temperature)
             phprop.AirViscosity.input.temperature = EnglishValue
              
             'Convert Values
             tempwd = phprop.WaterDensity.CurrentSelection.Value
             tempwdcor = phprop.WaterDensity.correlation.Value
             tempwdi = phprop.WaterDensity.input.Value
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.CurrentSelection.Value)
             phprop.WaterDensity.CurrentSelection.Value = EnglishValue
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.correlation.Value)
             phprop.WaterDensity.correlation.Value = EnglishValue
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.input.Value)
             phprop.WaterDensity.input.Value = EnglishValue
             
             tempwv = phprop.WaterViscosity.CurrentSelection.Value
             tempwvcor = phprop.WaterViscosity.correlation.Value
             tempwvi = phprop.WaterViscosity.input.Value
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.CurrentSelection.Value)
             phprop.WaterViscosity.CurrentSelection.Value = EnglishValue
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.correlation.Value)
             phprop.WaterViscosity.correlation.Value = EnglishValue
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.input.Value)
             phprop.WaterViscosity.input.Value = EnglishValue
             
             tempwst = phprop.WaterSurfaceTension.CurrentSelection.Value
             tempwstcor = phprop.WaterSurfaceTension.correlation.Value
             tempwsti = phprop.WaterSurfaceTension.input.Value
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.CurrentSelection.Value)
             phprop.WaterSurfaceTension.CurrentSelection.Value = EnglishValue
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.correlation.Value)
             phprop.WaterSurfaceTension.correlation.Value = EnglishValue
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.input.Value)
             phprop.WaterSurfaceTension.input.Value = EnglishValue
             
             tempad = phprop.AirDensity.CurrentSelection.Value
             tempadcor = phprop.AirDensity.correlation.Value
             tempadi = phprop.AirDensity.input.Value
             Call ADENSCNV(EnglishValue, phprop.AirDensity.CurrentSelection.Value)
             phprop.AirDensity.CurrentSelection.Value = EnglishValue
             Call ADENSCNV(EnglishValue, phprop.AirDensity.correlation.Value)
             phprop.AirDensity.correlation.Value = EnglishValue
             Call ADENSCNV(EnglishValue, phprop.AirDensity.input.Value)
             phprop.AirDensity.input.Value = EnglishValue
             
             tempav = phprop.AirViscosity.CurrentSelection.Value
             tempavcor = phprop.AirViscosity.correlation.Value
             tempavi = phprop.AirViscosity.input.Value
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.CurrentSelection.Value)
             phprop.AirViscosity.CurrentSelection.Value = EnglishValue
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.correlation.Value)
             phprop.AirViscosity.correlation.Value = EnglishValue
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.input.Value)
             phprop.AirViscosity.input.Value = EnglishValue

          End If
          
          Call PrintAirWaterProperties
       
          'If English units were selected convert them back
          If cboUnits.ListIndex = 1 Then
              
             phprop.OperatingPressure = temppress
              
             phprop.OperatingTemperature = tempt
             
             'Convert temperatures back
             
             phprop.WaterDensity.correlation.temperature = tempwdtmp
             phprop.WaterDensity.input.temperature = tempwdtmpi
             
             phprop.WaterViscosity.correlation.temperature = tempwvtmp
             phprop.WaterViscosity.input.temperature = tempwvtmpi
             
             phprop.WaterSurfaceTension.correlation.temperature = tempwsttmp
             phprop.WaterSurfaceTension.input.temperature = tempwsttmpi
             
             phprop.AirDensity.correlation.temperature = tempadtmp
             phprop.AirDensity.input.temperature = tempadtmpi
             
             phprop.AirViscosity.correlation.temperature = tempavtmp
             phprop.AirViscosity.input.temperature = tempavtmpi
              
             'Convert values back
             phprop.WaterDensity.CurrentSelection.Value = tempwd
             phprop.WaterDensity.correlation.Value = tempwdcor
             phprop.WaterDensity.input.Value = tempwdi
             
             phprop.WaterViscosity.CurrentSelection.Value = tempwv
             phprop.WaterViscosity.correlation.Value = tempwvcor
             phprop.WaterViscosity.input.Value = tempwvi
             
             phprop.WaterSurfaceTension.CurrentSelection.Value = tempwst
             phprop.WaterSurfaceTension.correlation.Value = tempwstcor
             phprop.WaterSurfaceTension.input.Value = tempwsti
             
             phprop.AirDensity.CurrentSelection.Value = tempad
             phprop.AirDensity.correlation.Value = tempadcor
             phprop.AirDensity.input.Value = tempadi
             
             phprop.AirViscosity.CurrentSelection.Value = tempav
             phprop.AirViscosity.correlation.Value = tempavcor
             phprop.AirViscosity.input.Value = tempavi

          End If
       
       End If
       
    ElseIf frmPrint!optPrintContaminants(1).Value Then   'Print Currently Selected Contaminant
       If ChosenAtLeastOneContaminantProperty Then
          
          'Convert******************************************************

              'If English units are desired convert them here
              If cboUnits.ListIndex = 1 Then
              
                 temppress = phprop.OperatingPressure
                 Call PRESSCNV(EnglishValue, phprop.OperatingPressure)
                 phprop.OperatingPressure = EnglishValue
              
                 tempt = phprop.OperatingTemperature
                 Call TEMPCNV(EnglishValue, phprop.OperatingTemperature)
                 phprop.OperatingTemperature = EnglishValue
                 
                 'Change all temperatures
                 tempvptmp = phprop.VaporPressure.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.VaporPressure.database.temperature)
                 phprop.VaporPressure.database.temperature = EnglishValue
                 
                 tempvptmpi = phprop.VaporPressure.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.VaporPressure.input.temperature)
                 phprop.VaporPressure.input.temperature = EnglishValue
                 
                 tempactmp = phprop.ActivityCoefficient.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.ActivityCoefficient.UNIFAC.temperature)
                 phprop.ActivityCoefficient.UNIFAC.temperature = EnglishValue
                 
                 temphregtmp = phprop.HenrysConstant.regress.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.regress.temperature)
                 phprop.HenrysConstant.regress.temperature = EnglishValue
                 
                 temphfittmp = phprop.HenrysConstant.fit.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.fit.UNIFAC.temperature)
                 phprop.HenrysConstant.fit.UNIFAC.temperature = EnglishValue
                 
                 temphopttmp = phprop.HenrysConstant.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.operatingT.UNIFAC.temperature)
                 phprop.HenrysConstant.operatingT.UNIFAC.temperature = EnglishValue
       
                 For j = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
                    temphdbttmp(j) = phprop.HenrysConstant.database(j).temperature
                    temphunttmp(j) = phprop.HenrysConstant.UNIFAC(j).temperature
                    Call TEMPCNV(EnglishValue, phprop.HenrysConstant.database(j).temperature)
                    phprop.HenrysConstant.database(j).temperature = EnglishValue
                    Call TEMPCNV(EnglishValue, phprop.HenrysConstant.UNIFAC(j).temperature)
                    phprop.HenrysConstant.UNIFAC(j).temperature = EnglishValue
                 Next j
                 
                 temphtmpi = phprop.HenrysConstant.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.HenrysConstant.input.temperature)
                 phprop.HenrysConstant.input.temperature = EnglishValue
                 
                 templdtmp = phprop.LiquidDensity.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.database.temperature)
                 phprop.LiquidDensity.database.temperature = EnglishValue
                 
                 templdutmp = phprop.LiquidDensity.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.UNIFAC.temperature)
                 phprop.LiquidDensity.UNIFAC.temperature = EnglishValue
                 
                 templdtmpi = phprop.LiquidDensity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDensity.input.temperature)
                 phprop.LiquidDensity.input.temperature = EnglishValue
                 
                 tempmvopttmp = phprop.MolarVolume.operatingT.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.database.temperature)
                 phprop.MolarVolume.operatingT.database.temperature = EnglishValue
                 
                 tempmvoptutmp = phprop.MolarVolume.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.UNIFAC.temperature)
                 phprop.MolarVolume.operatingT.UNIFAC.temperature = EnglishValue
                 
                 tempmvopttmpi = phprop.MolarVolume.operatingT.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.operatingT.input.temperature)
                 phprop.MolarVolume.operatingT.input.temperature = EnglishValue
                 
                 tempmvtmp = phprop.MolarVolume.BoilingPoint.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.UNIFAC.temperature)
                 phprop.MolarVolume.BoilingPoint.UNIFAC.temperature = EnglishValue
                 
                 tempmvtmpi = phprop.MolarVolume.BoilingPoint.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.input.temperature)
                 phprop.MolarVolume.BoilingPoint.input.temperature = EnglishValue
                 
                 tempaqfittmp = phprop.AqueousSolubility.fit.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.fit.UNIFAC.temperature)
                 phprop.AqueousSolubility.fit.UNIFAC.temperature = EnglishValue
                 
                 tempaqopttmp = phprop.AqueousSolubility.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.operatingT.UNIFAC.temperature)
                 phprop.AqueousSolubility.operatingT.UNIFAC.temperature = EnglishValue
       
                 tempaqdbtmp = phprop.AqueousSolubility.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.database.temperature)
                 phprop.AqueousSolubility.database.temperature = EnglishValue
                 
                 tempaquntmp = phprop.AqueousSolubility.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.UNIFAC.temperature)
                 phprop.AqueousSolubility.UNIFAC.temperature = EnglishValue
                 
                 tempaqtmpi = phprop.AqueousSolubility.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.AqueousSolubility.input.temperature)
                 phprop.AqueousSolubility.input.temperature = EnglishValue
                 
                 tempoctopttmp = phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature)
                 phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature = EnglishValue
              
                 tempoctdbtmp = phprop.OctWaterPartCoeff.database.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.database.temperature)
                 phprop.OctWaterPartCoeff.database.temperature = EnglishValue

                 tempoctuntmp = phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature)
                 phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature = EnglishValue

                 tempocttmpi = phprop.OctWaterPartCoeff.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.OctWaterPartCoeff.input.temperature)
                 phprop.OctWaterPartCoeff.input.temperature = EnglishValue

                 templdhltmp = phprop.LiquidDiffusivity.haydukLaudie.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.haydukLaudie.temperature)
                 phprop.LiquidDiffusivity.haydukLaudie.temperature = EnglishValue

                 templdptmp = phprop.LiquidDiffusivity.polson.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.polson.temperature)
                 phprop.LiquidDiffusivity.polson.temperature = EnglishValue
                 
                 templdwctmp = phprop.LiquidDiffusivity.wilkeChang.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.wilkeChang.temperature)
                 phprop.LiquidDiffusivity.wilkeChang.temperature = EnglishValue
                 
                 templdtmpi = phprop.LiquidDiffusivity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.LiquidDiffusivity.input.temperature)
                 phprop.LiquidDiffusivity.input.temperature = EnglishValue
                 
                 tempgdwltmp = phprop.GasDiffusivity.wilkeLee.temperature
                 Call TEMPCNV(EnglishValue, phprop.GasDiffusivity.wilkeLee.temperature)
                 phprop.GasDiffusivity.wilkeLee.temperature = EnglishValue
                 
                 tempgdtmpi = phprop.GasDiffusivity.input.temperature
                 Call TEMPCNV(EnglishValue, phprop.GasDiffusivity.input.temperature)
                 phprop.GasDiffusivity.input.temperature = EnglishValue

                 'Convert values
                 tempvp = phprop.VaporPressure.CurrentSelection.Value
                 tempvpi = phprop.VaporPressure.input.Value
                 Call VPCONV(EnglishValue, phprop.VaporPressure.CurrentSelection.Value)
                 phprop.VaporPressure.CurrentSelection.Value = EnglishValue
                 phprop.VaporPressure.database.Value = EnglishValue
                 Call VPCONV(EnglishValue, phprop.VaporPressure.input.Value)
                 phprop.VaporPressure.input.Value = EnglishValue
              
                 tempmw = phprop.MolecularWeight.CurrentSelection.Value
                 tempmwdb = phprop.MolecularWeight.database.Value
                 tempmwun = phprop.MolecularWeight.UNIFAC.Value
                 tempmwi = phprop.MolecularWeight.input.Value
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.CurrentSelection.Value)
                 phprop.MolecularWeight.CurrentSelection.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.database.Value)
                 phprop.MolecularWeight.database.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.UNIFAC.Value)
                 phprop.MolecularWeight.UNIFAC.Value = EnglishValue
                 Call MWCONV(EnglishValue, phprop.MolecularWeight.input.Value)
                 phprop.MolecularWeight.input.Value = EnglishValue
                 
                 tempbp = phprop.BoilingPoint.CurrentSelection.Value
                 tempbpdb = phprop.BoilingPoint.database.Value
                 tempbpi = phprop.BoilingPoint.input.Value
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.CurrentSelection.Value)
                 phprop.BoilingPoint.CurrentSelection.Value = EnglishValue
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.database.Value)
                 phprop.BoilingPoint.database.Value = EnglishValue
                 Call NBPCONV(EnglishValue, phprop.BoilingPoint.input.Value)
                 phprop.BoilingPoint.input.Value = EnglishValue
                 
                 templd = phprop.LiquidDensity.CurrentSelection.Value
                 templddb = phprop.LiquidDensity.database.Value
                 templdun = phprop.LiquidDensity.UNIFAC.Value
                 templdi = phprop.LiquidDensity.input.Value
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.CurrentSelection.Value)
                 phprop.LiquidDensity.CurrentSelection.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.database.Value)
                 phprop.LiquidDensity.database.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.UNIFAC.Value)
                 phprop.LiquidDensity.UNIFAC.Value = EnglishValue
                 Call LDENSCNV(EnglishValue, phprop.LiquidDensity.input.Value)
                 phprop.LiquidDensity.input.Value = EnglishValue
                 
                 tempmvopt = phprop.MolarVolume.operatingT.CurrentSelection.Value
                 tempmvoptdb = phprop.MolarVolume.operatingT.database.Value
                 tempmvoptun = phprop.MolarVolume.operatingT.UNIFAC.Value
                 tempmvopti = phprop.MolarVolume.operatingT.input.Value
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.CurrentSelection.Value)
                 phprop.MolarVolume.operatingT.CurrentSelection.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.database.Value)
                 phprop.MolarVolume.operatingT.database.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.UNIFAC.Value)
                 phprop.MolarVolume.operatingT.UNIFAC.Value = EnglishValue
                 Call MVOPTCNV(EnglishValue, phprop.MolarVolume.operatingT.input.Value)
                 phprop.MolarVolume.operatingT.input.Value = EnglishValue
                 
                 tempmv = phprop.MolarVolume.BoilingPoint.CurrentSelection.Value
                 tempmvsc = phprop.MolarVolume.BoilingPoint.UNIFAC.Value
                 tempmvi = phprop.MolarVolume.BoilingPoint.input.Value
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.CurrentSelection.Value)
                 phprop.MolarVolume.BoilingPoint.CurrentSelection.Value = EnglishValue
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.UNIFAC.Value)
                 phprop.MolarVolume.BoilingPoint.UNIFAC.Value = EnglishValue
                 Call MVNBPCNV(EnglishValue, phprop.MolarVolume.BoilingPoint.input.Value)
                 phprop.MolarVolume.BoilingPoint.input.Value = EnglishValue
              
                 templdiff = phprop.LiquidDiffusivity.CurrentSelection.Value
                 templhldiff = phprop.LiquidDiffusivity.haydukLaudie.Value
                 templpldiff = phprop.LiquidDiffusivity.polson.Value
                 templwcdiff = phprop.LiquidDiffusivity.wilkeChang.Value
                 templdiffi = phprop.LiquidDiffusivity.input.Value
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.CurrentSelection.Value)
                 phprop.LiquidDiffusivity.CurrentSelection.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.haydukLaudie.Value)
                 phprop.LiquidDiffusivity.haydukLaudie.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.polson.Value)
                 phprop.LiquidDiffusivity.polson.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.wilkeChang.Value)
                 phprop.LiquidDiffusivity.wilkeChang.Value = EnglishValue
                 Call LDIFFCNV(EnglishValue, phprop.LiquidDiffusivity.input.Value)
                 phprop.LiquidDiffusivity.input.Value = EnglishValue
                 
                 tempgdiff = phprop.GasDiffusivity.CurrentSelection.Value
                 tempgdiffwl = phprop.GasDiffusivity.wilkeLee.Value
                 tempgdiffi = phprop.GasDiffusivity.input.Value
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.CurrentSelection.Value)
                 phprop.GasDiffusivity.CurrentSelection.Value = EnglishValue
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.wilkeLee.Value)
                 phprop.GasDiffusivity.wilkeLee.Value = EnglishValue
                 Call GDIFFCNV(EnglishValue, phprop.GasDiffusivity.input.Value)
                 phprop.GasDiffusivity.input.Value = EnglishValue
                 
              End If

          'EndConvert****************************************************

          Call PrintOneContaminant
              
          'ReConvert******************************************************

              'If English units were selected convert them back
              If cboUnits.ListIndex = 1 Then
                 
                 'Convert temperatures back
                 phprop.VaporPressure.database.temperature = tempvptmp
                 
                 phprop.VaporPressure.input.temperature = tempvptmpi
                 
                 phprop.ActivityCoefficient.UNIFAC.temperature = tempactmp
                 
                 phprop.HenrysConstant.regress.temperature = temphregtmp
                 
                 phprop.HenrysConstant.fit.UNIFAC.temperature = temphfittmp
                 
                 phprop.HenrysConstant.operatingT.UNIFAC.temperature = temphopttmp
       
                 For j = 1 To phprop.HenrysConstant.NumberOfDatabaseHenrysConstants
                    phprop.HenrysConstant.database(j).temperature = temphdbttmp(j)
                    phprop.HenrysConstant.UNIFAC(j).temperature = temphunttmp(j)
                 Next j
                 
                 phprop.HenrysConstant.input.temperature = temphtmpi
                 
                 phprop.LiquidDensity.database.temperature = templdtmp
                 
                 phprop.LiquidDensity.UNIFAC.temperature = templdutmp
                 
                 phprop.LiquidDensity.input.temperature = templdtmpi
                 
                 phprop.MolarVolume.operatingT.database.temperature = tempmvopttmp
                 
                 phprop.MolarVolume.operatingT.UNIFAC.temperature = tempmvoptutmp
                 
                 phprop.MolarVolume.operatingT.input.temperature = tempmvopttmpi
                 
                 phprop.MolarVolume.BoilingPoint.UNIFAC.temperature = tempmvtmp
                 
                 phprop.MolarVolume.BoilingPoint.input.temperature = tempmvtmpi
                 
                 phprop.AqueousSolubility.fit.UNIFAC.temperature = tempaqfittmp
                 
                 phprop.AqueousSolubility.operatingT.UNIFAC.temperature = tempaqopttmp
       
                 phprop.AqueousSolubility.database.temperature = tempaqdbtmp
                 
                 phprop.AqueousSolubility.UNIFAC.temperature = tempaquntmp
                 
                 phprop.AqueousSolubility.input.temperature = tempaqtmpi
                 
                 phprop.OctWaterPartCoeff.operatingT.UNIFAC.temperature = tempoctopttmp
              
                 phprop.OctWaterPartCoeff.database.temperature = tempoctdbtmp

                 phprop.OctWaterPartCoeff.databaseT.UNIFAC.temperature = tempoctuntmp

                 phprop.OctWaterPartCoeff.input.temperature = tempocttmpi

                 phprop.LiquidDiffusivity.haydukLaudie.temperature = templdhltmp

                 phprop.LiquidDiffusivity.polson.temperature = templdptmp
                 
                 phprop.LiquidDiffusivity.wilkeChang.temperature = templdwctmp
                 
                 phprop.LiquidDiffusivity.input.temperature = templdtmpi
                 
                 phprop.GasDiffusivity.wilkeLee.temperature = tempgdwltmp
                 
                 phprop.GasDiffusivity.input.temperature = tempgdtmpi
              
                 'Covert values back
                 phprop.OperatingPressure = temppress
              
                 phprop.OperatingTemperature = tempt
              
                 phprop.VaporPressure.CurrentSelection.Value = tempvp
                 phprop.VaporPressure.database.Value = tempvp
                 phprop.VaporPressure.input.Value = tempvpi
                 
                 phprop.MolecularWeight.CurrentSelection.Value = tempmw
                 phprop.MolecularWeight.database.Value = tempmwdb
                 phprop.MolecularWeight.UNIFAC.Value = tempmwun
                 phprop.MolecularWeight.input.Value = tempmwi
              
                 phprop.MolecularWeight.CurrentSelection.Value = tempmw
                 phprop.MolecularWeight.database.Value = tempmw
                 phprop.MolecularWeight.UNIFAC.Value = tempmw
                 phprop.MolecularWeight.input.Value = tempmwi
              
                 phprop.BoilingPoint.CurrentSelection.Value = tempbp
                 phprop.BoilingPoint.database.Value = tempbpdb
                 phprop.BoilingPoint.input.Value = tempbpi
                 
                 phprop.LiquidDensity.CurrentSelection.Value = templd
                 phprop.LiquidDensity.database.Value = templddb
                 phprop.LiquidDensity.UNIFAC.Value = templdun
                 phprop.LiquidDensity.input.Value = templdi
                 
                 phprop.MolarVolume.operatingT.CurrentSelection.Value = tempmvopt
                 phprop.MolarVolume.operatingT.database.Value = tempmvoptdb
                 phprop.MolarVolume.operatingT.UNIFAC.Value = tempmvoptun
                 phprop.MolarVolume.operatingT.input.Value = tempmvopti

                 phprop.MolarVolume.BoilingPoint.CurrentSelection.Value = tempmv
                 phprop.MolarVolume.BoilingPoint.UNIFAC.Value = tempmvsc
                 phprop.MolarVolume.BoilingPoint.input.Value = tempmvi
                 
                 phprop.LiquidDiffusivity.CurrentSelection.Value = templdiff
                 phprop.LiquidDiffusivity.haydukLaudie.Value = templhldiff
                 phprop.LiquidDiffusivity.polson.Value = templpldiff
                 phprop.LiquidDiffusivity.wilkeChang.Value = templwcdiff
                 phprop.LiquidDiffusivity.input.Value = templdiffi
              
                 phprop.GasDiffusivity.CurrentSelection.Value = tempgdiff
                 phprop.GasDiffusivity.wilkeLee.Value = tempgdiffwl
                 phprop.GasDiffusivity.input.Value = tempgdiffi
              
              End If

          'EndReConvert****************************************************

       End If

       If ChosenAtLeastOneAirWaterProperty Then
          Printer.NewPage
          
'ConvertAirWater******************************************************

          'If English units are desired convert them here
          If cboUnits.ListIndex = 1 Then
              
             temppress = phprop.OperatingPressure
             Call PRESSCNV(EnglishValue, phprop.OperatingPressure)
             phprop.OperatingPressure = EnglishValue
              
             tempt = phprop.OperatingTemperature
             Call TEMPCNV(EnglishValue, phprop.OperatingTemperature)
             phprop.OperatingTemperature = EnglishValue
             
             'Convert Temperatures
             tempwdtmp = phprop.WaterDensity.correlation.temperature
             tempwdtmpi = phprop.WaterDensity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterDensity.correlation.temperature)
             phprop.WaterDensity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterDensity.input.temperature)
             phprop.WaterDensity.input.temperature = EnglishValue
             
             tempwvtmp = phprop.WaterViscosity.correlation.temperature
             tempwvtmpi = phprop.WaterViscosity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterViscosity.correlation.temperature)
             phprop.WaterViscosity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterViscosity.input.temperature)
             phprop.WaterViscosity.input.temperature = EnglishValue
             
             tempwsttmp = phprop.WaterSurfaceTension.correlation.temperature
             tempwsttmpi = phprop.WaterSurfaceTension.input.temperature
             Call TEMPCNV(EnglishValue, phprop.WaterSurfaceTension.correlation.temperature)
             phprop.WaterSurfaceTension.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.WaterSurfaceTension.input.temperature)
             phprop.WaterSurfaceTension.input.temperature = EnglishValue
             
             tempadtmp = phprop.AirDensity.correlation.temperature
             tempadtmpi = phprop.AirDensity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.AirDensity.correlation.temperature)
             phprop.AirDensity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.AirDensity.input.temperature)
             phprop.AirDensity.input.temperature = EnglishValue
             
             tempavtmp = phprop.AirViscosity.correlation.temperature
             tempavtmpi = phprop.AirViscosity.input.temperature
             Call TEMPCNV(EnglishValue, phprop.AirViscosity.correlation.temperature)
             phprop.AirViscosity.correlation.temperature = EnglishValue
             Call TEMPCNV(EnglishValue, phprop.AirViscosity.input.temperature)
             phprop.AirViscosity.input.temperature = EnglishValue
              
             'Covert Values
             tempwd = phprop.WaterDensity.CurrentSelection.Value
             tempwdcor = phprop.WaterDensity.correlation.Value
             tempwdi = phprop.WaterDensity.input.Value
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.CurrentSelection.Value)
             phprop.WaterDensity.CurrentSelection.Value = EnglishValue
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.correlation.Value)
             phprop.WaterDensity.correlation.Value = EnglishValue
             Call WDENSCNV(EnglishValue, phprop.WaterDensity.input.Value)
             phprop.WaterDensity.input.Value = EnglishValue
             
             tempwv = phprop.WaterViscosity.CurrentSelection.Value
             tempwvcor = phprop.WaterViscosity.correlation.Value
             tempwvi = phprop.WaterViscosity.input.Value
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.CurrentSelection.Value)
             phprop.WaterViscosity.CurrentSelection.Value = EnglishValue
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.correlation.Value)
             phprop.WaterViscosity.correlation.Value = EnglishValue
             Call WVISCCNV(EnglishValue, phprop.WaterViscosity.input.Value)
             phprop.WaterViscosity.input.Value = EnglishValue
             
             tempwst = phprop.WaterSurfaceTension.CurrentSelection.Value
             tempwstcor = phprop.WaterSurfaceTension.correlation.Value
             tempwsti = phprop.WaterSurfaceTension.input.Value
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.CurrentSelection.Value)
             phprop.WaterSurfaceTension.CurrentSelection.Value = EnglishValue
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.correlation.Value)
             phprop.WaterSurfaceTension.correlation.Value = EnglishValue
             Call H2OSTCNV(EnglishValue, phprop.WaterSurfaceTension.input.Value)
             phprop.WaterSurfaceTension.input.Value = EnglishValue
             
             tempad = phprop.AirDensity.CurrentSelection.Value
             tempadcor = phprop.AirDensity.correlation.Value
             tempadi = phprop.AirDensity.input.Value
             Call ADENSCNV(EnglishValue, phprop.AirDensity.CurrentSelection.Value)
             phprop.AirDensity.CurrentSelection.Value = EnglishValue
             Call ADENSCNV(EnglishValue, phprop.AirDensity.correlation.Value)
             phprop.AirDensity.correlation.Value = EnglishValue
             Call ADENSCNV(EnglishValue, phprop.AirDensity.input.Value)
             phprop.AirDensity.input.Value = EnglishValue
             
             tempav = phprop.AirViscosity.CurrentSelection.Value
             tempavcor = phprop.AirViscosity.correlation.Value
             tempavi = phprop.AirViscosity.input.Value
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.CurrentSelection.Value)
             phprop.AirViscosity.CurrentSelection.Value = EnglishValue
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.correlation.Value)
             phprop.AirViscosity.correlation.Value = EnglishValue
             Call AVISCCNV(EnglishValue, phprop.AirViscosity.input.Value)
             phprop.AirViscosity.input.Value = EnglishValue

          End If

'EndConvertAirWater****************************************************
          
          Call PrintAirWaterProperties
              
'ReConvertAirWater******************************************************

          'If English units were selected convert them back
          If cboUnits.ListIndex = 1 Then
              
             phprop.OperatingPressure = temppress
              
             phprop.OperatingTemperature = tempt
             
             'Convert temperatures back
             phprop.WaterDensity.correlation.temperature = tempwdtmp
             phprop.WaterDensity.input.temperature = tempwdtmpi

             phprop.WaterViscosity.correlation.temperature = tempwvtmp
             phprop.WaterViscosity.input.temperature = tempwvtmpi
             
             phprop.WaterSurfaceTension.correlation.temperature = tempwsttmp
             phprop.WaterSurfaceTension.input.temperature = tempwsttmpi
             
             phprop.AirDensity.correlation.temperature = tempadtmp
             phprop.AirDensity.input.temperature = tempadtmpi
             
             phprop.AirViscosity.correlation.temperature = tempavtmp
             phprop.AirViscosity.input.temperature = tempavtmpi
              
             'Convert values back
             phprop.WaterDensity.CurrentSelection.Value = tempwd
             phprop.WaterDensity.correlation.Value = tempwdcor
             phprop.WaterDensity.input.Value = tempwdi
             
             phprop.WaterViscosity.CurrentSelection.Value = tempwv
             phprop.WaterViscosity.correlation.Value = tempwvcor
             phprop.WaterViscosity.input.Value = tempwvi
             
             phprop.WaterSurfaceTension.CurrentSelection.Value = tempwst
             phprop.WaterSurfaceTension.correlation.Value = tempwstcor
             phprop.WaterSurfaceTension.input.Value = tempwsti
             
             phprop.AirDensity.CurrentSelection.Value = tempad
             phprop.AirDensity.correlation.Value = tempadcor
             phprop.AirDensity.input.Value = tempadi
             
             phprop.AirViscosity.CurrentSelection.Value = tempav
             phprop.AirViscosity.correlation.Value = tempavcor
             phprop.AirViscosity.input.Value = tempavi

          End If

'EndReConvertAirWater****************************************************

       End If

    End If
    Printer.EndDoc

resume_exit37:
Exit Sub

error_printtoprinter:
MsgBox "Error printing to printer", mb_exclamation, "StEPP"
Resume resume_exit37


End Sub

Private Sub PrintVaporPressurePrinter()
   Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(VAPOR_PRESSURE) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.VaporPressure.CurrentSelection.Value, GetTheFormat(phprop.VaporPressure.CurrentSelection.Value))
             Printer.Print "Vapor Pressure"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(VAPOR_PRESSURE); Tab(TABSOURCE); GetSource(phprop.VaporPressure.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Vapor Pressure"; Tab(TABVALUE); ValueString
          End If

       Case 1   'Print Full Description of Vapor Pressure
          HeightVaporPressure = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightVaporPressure = HeightVaporPressure + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightVaporPressure = HeightVaporPressure + NUMLINES_VAPOR_PRESSURE * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightVaporPressure + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  VAPOR PRESSURE"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintVaporPressureToPrinter
          Printer.Print
          Printer.Print

    End Select
End Sub

Private Sub PrintVaporPressureToFile()
   Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(VAPOR_PRESSURE) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.VaporPressure.CurrentSelection.Value, GetTheFormat(phprop.VaporPressure.CurrentSelection.Value))
             Print #1, "Vapor Pressure"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(VAPOR_PRESSURE); Tab(TABSOURCE); GetSource(phprop.VaporPressure.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Vapor Pressure"; Tab(TABVALUE); ValueString
          End If

       Case 1   'Print Full Description of Vapor Pressure
          Print #1, "Property:  VAPOR PRESSURE"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temperature:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintVaporPressureToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintWaterDensityPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(WATER_DENSITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.WaterDensity.CurrentSelection.Value, WATER_DENSITY_FORMAT)
             Printer.Print "Water Density"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(WATER_DENSITY); Tab(TABSOURCE); GetSource(phprop.WaterDensity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Water Density"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Water Density
          HeightWaterDensity = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightWaterDensity = HeightWaterDensity + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightWaterDensity = HeightWaterDensity + NUMLINES_WATER_DENSITY * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightWaterDensity + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintAirWaterTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  WATER DENSITY"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintWaterDensityToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintWaterDensityToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(WATER_DENSITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.WaterDensity.CurrentSelection.Value, WATER_DENSITY_FORMAT)
             Print #1, "Water Density"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(WATER_DENSITY); Tab(TABSOURCE); GetSource(phprop.WaterDensity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Water Density"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Water Density
          Print #1, "Property:  WATER DENSITY"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintWaterDensityToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintWaterSurfaceTensionPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(WATER_SURFACE_TENSION) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.WaterSurfaceTension.CurrentSelection.Value, GetTheFormat(phprop.WaterSurfaceTension.CurrentSelection.Value))
             Printer.Print "Water Surface Tension"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(WATER_SURFACE_TENSION); Tab(TABSOURCE); GetSource(phprop.WaterSurfaceTension.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Water Surface Tension"; Tab(TABVALUE); ValueString
          End If

       Case 1   'Print Full Description of Water Surface Tension
          HeightWaterSurfaceTension = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightWaterSurfaceTension = HeightWaterSurfaceTension + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightWaterSurfaceTension = HeightWaterSurfaceTension + NUMLINES_WATER_SURFACE_TENSION * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightWaterSurfaceTension + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintAirWaterTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  WATER SURFACE TENSION"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintWaterSurfaceTensionToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintWaterSurfaceTensionToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(WATER_SURFACE_TENSION) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.WaterSurfaceTension.CurrentSelection.Value, GetTheFormat(phprop.WaterSurfaceTension.CurrentSelection.Value))
             Print #1, "Water Surface Tension"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(WATER_SURFACE_TENSION); Tab(TABSOURCE); GetSource(phprop.WaterSurfaceTension.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Water Surface Tension"; Tab(TABVALUE); ValueString
          End If

       Case 1   'Print Full Description of Water Surface Tension
          Print #1, "Property:  WATER SURFACE TENSION"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintWaterSurfaceTensionToFile
          Print #1,
          Print #1,

    End Select

End Sub

Private Sub PrintWaterViscosityPrinter()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(WATER_VISCOSITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.WaterViscosity.CurrentSelection.Value, GetTheFormat(phprop.WaterViscosity.CurrentSelection.Value))
             Printer.Print "Water Viscosity"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(WATER_VISCOSITY); Tab(TABSOURCE); GetSource(phprop.WaterViscosity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Printer.Print "Water Viscosity"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Water Viscosity
          HeightWaterViscosity = 0
          Printer.FontSize = 12
          PrintMsg = ""
          HeightWaterViscosity = HeightWaterViscosity + NUMLINES_PROPERTY_NAME * Printer.TextHeight(PrintMsg)
          Printer.FontSize = 10
          HeightWaterViscosity = HeightWaterViscosity + NUMLINES_WATER_VISCOSITY * Printer.TextHeight(PrintMsg)
          TotalHeightThisPage = Printer.CurrentY
          If TotalHeightThisPage + HeightWaterViscosity + BOTTOM_MARGIN_SAFETY_FACTOR > Printer.Height Then
             Printer.NewPage
             Call PrintAirWaterTitleContinuation
          End If

          Printer.FontBold = True
          Printer.FontSize = 12
          Printer.Print "Property:  WATER VISCOSITY"
          Printer.Print
          Printer.FontBold = False
          Printer.FontUnderline = True
          Printer.FontSize = 10
          Printer.Print Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Printer.FontUnderline = False
          Printer.Print
          Call FullyPrintWaterViscosityToPrinter
          Printer.Print
          Printer.Print

    End Select

End Sub

Private Sub PrintWaterViscosityToFile()
    Dim ValueString As String

    Select Case frmPrint!cboPropertyDescription.ListIndex
       Case 0   'Print Selected Value Only
          If HaveProperty(WATER_VISCOSITY) Then
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = Format$(phprop.WaterViscosity.CurrentSelection.Value, GetTheFormat(phprop.WaterViscosity.CurrentSelection.Value))
             Print #1, "Water Viscosity"; Tab(TABVALUE); ValueString; Tab(TABUNITS); Units(WATER_VISCOSITY); Tab(TABSOURCE); GetSource(phprop.WaterViscosity.CurrentSelection.Source)
          Else
             ValueString = Space$(VALUELENGTH)
             RSet ValueString = "Not Available"
             Print #1, "Water Viscosity"; Tab(TABVALUE); ValueString
          End If
       Case 1   'Print Full Description of Water Viscosity
          Print #1, "Property:  WATER VISCOSITY"
          Print #1,
          Print #1, Tab(TABFULLSOURCE); "Source:"; Tab(TABFULLVALUE); "Value:"; Tab(TABFULLUNITS); "Units:"; Tab(TABFULLTEMPERATURE); "Temp.:"; Tab(TABFULLCODE); "Code:"
          Print #1,
          Call FullyPrintWaterViscosityToFile
          Print #1,
          Print #1,

    End Select

End Sub


VERSION 5.00
Begin VB.Form rindex_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Refractive Index"
   ClientHeight    =   3480
   ClientLeft      =   645
   ClientTop       =   1695
   ClientWidth     =   8460
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form9"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   3480
   ScaleWidth      =   8460
   Begin VB.TextBox txtRefractiveIndexValue 
      Appearance      =   0  'Flat
      Height          =   288
      Index           =   1
      Left            =   4800
      TabIndex        =   5
      Top             =   2880
      Width           =   1692
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Refractive Index"
      Height          =   615
      Left            =   4920
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   2
      Left            =   1800
      TabIndex        =   4
      Top             =   2880
      Width           =   225
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   1
      Left            =   1800
      TabIndex        =   2
      Top             =   2400
      Width           =   255
   End
   Begin VB.Label lblRefractiveIndexValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4800
      TabIndex        =   3
      Top             =   2400
      Width           =   1692
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Refractive Index Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   14
      Top             =   240
      Width           =   4095
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   13
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   12
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   11
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   10
      Top             =   720
      Width           =   2295
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Label lblRefIndexLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Refractive Index @25 C"
      ForeColor       =   &H00000000&
      Height          =   470
      Left            =   4800
      TabIndex        =   9
      Top             =   1800
      Width           =   1692
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   2160
      TabIndex        =   8
      Top             =   1800
      Width           =   2412
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   252
      Index           =   1
      Left            =   2160
      TabIndex        =   7
      Top             =   2880
      Width           =   2412
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Database"
      ForeColor       =   &H00000000&
      Height          =   252
      Index           =   0
      Left            =   2160
      TabIndex        =   6
      Top             =   2400
      Width           =   2412
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   1692
      Left            =   1680
      Top             =   1680
      Width           =   5052
   End
   Begin VB.Line Line2 
      X1              =   1680
      X2              =   6720
      Y1              =   2280
      Y2              =   2280
   End
End
Attribute VB_Name = "rindex_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastRefIndInputValue As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.RefractiveIndex.CurrentSelection.choice
       Case REFRACTIVE_INDEX_DATABASE
          SelectedOption = 1
       Case REFRACTIVE_INDEX_INPUT
          SelectedOption = 2
          txtRefractiveIndexValue(1).Text = PastRefIndInputValue
       Case Else
          rindex_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    rindex_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 2
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = REFRACTIVE_INDEX_DATABASE
       Case 2
          If Not PROPAVAILABLE(REFRACTIVE_INDEX_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtRefractiveIndexValue(1).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = REFRACTIVE_INDEX_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.RefractiveIndex.CurrentSelection.choice Then
       phprop.RefractiveIndex.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayRefractiveIndexMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = REFRACTIVE_INDEX_INPUT Then
       Call DisplayRefractiveIndexMainScreen(ValueToDisplayIndex)
    End If

    rindex_form.Hide

End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastRefIndInputValue = txtRefractiveIndexValue(1).Text
End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)
    
  If (DemoMode) Then cmdok.Enabled = False


End Sub

Private Sub lblRefractiveIndexValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.RefractiveIndex.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0   'Database
          ErrorFlag = phprop.RefractiveIndex.database.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.RefractiveIndex.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.RefractiveIndex.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.RefractiveIndex.PreviousIndex
    hilight.RefractiveIndex.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtRefractiveIndexValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtRefractiveIndexValue(Index), Temp_Text)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.RefractiveIndex.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtRefractiveIndexValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtRefractiveIndexValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtRefractiveIndexValue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtRefractiveIndexValue(Index).Text = "" Then
       phprop.RefractiveIndex.input.Value = -1E+25
       PROPAVAILABLE(REFRACTIVE_INDEX_INPUT) = False
       Call LostFocus_Handle(Me, txtRefractiveIndexValue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtRefractiveIndexValue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtRefractiveIndexValue(Index).Text)) Then
          txtRefractiveIndexValue(Index).Text = Temp_Text
          txtRefractiveIndexValue(Index).SetFocus
       Call LostFocus_Handle(Me, txtRefractiveIndexValue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtRefractiveIndexValue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.RefractiveIndex.input.Value = CDbl(txtRefractiveIndexValue(Index).Text)
          Else
             EnglishValue = CDbl(txtRefractiveIndexValue(Index).Text)
             Call RIENSI(SIValue, EnglishValue)
             phprop.RefractiveIndex.input.Value = SIValue
          End If

          
          PROPAVAILABLE(REFRACTIVE_INDEX_INPUT) = True
       Else
       Call LostFocus_Handle(Me, txtRefractiveIndexValue(Index), flag_ok)
          Exit Sub
       End If
    End If

       Call LostFocus_Handle(Me, txtRefractiveIndexValue(Index), flag_ok)
End Sub

VERSION 5.00
Object = "{0BA686C6-F7D3-101A-993E-0000C0EF6F5E}#1.0#0"; "THREED32.OCX"
Begin VB.Form frmSplash 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   ClientHeight    =   5745
   ClientLeft      =   1755
   ClientTop       =   3045
   ClientWidth     =   9165
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form1"
   LockControls    =   -1  'True
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   5745
   ScaleWidth      =   9165
   Begin Threed.SSPanel sspanel_disclaimer 
      Height          =   3795
      Left            =   9210
      TabIndex        =   19
      Top             =   4890
      Width           =   8325
      _Version        =   65536
      _ExtentX        =   14684
      _ExtentY        =   6694
      _StockProps     =   15
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Begin Threed.SSPanel SSPanel3 
         Height          =   3075
         Left            =   120
         TabIndex        =   21
         Top             =   570
         Width           =   8085
         _Version        =   65536
         _ExtentX        =   14261
         _ExtentY        =   5424
         _StockProps     =   15
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Begin VB.Label lblDisclaimer 
            Appearance      =   0  'Flat
            BackColor       =   &H00C0C0C0&
            BackStyle       =   0  'Transparent
            Caption         =   "lblDisclaimer"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   2895
            Left            =   90
            TabIndex        =   22
            Top             =   90
            Width           =   7845
         End
      End
      Begin VB.Label lblDisclaimerTitle 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Disclaimer"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   18
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   525
         Left            =   60
         TabIndex        =   20
         Top             =   60
         Width           =   8175
      End
   End
   Begin Threed.SSPanel sspanel_logos 
      Height          =   3795
      Left            =   420
      TabIndex        =   4
      Top             =   1170
      Width           =   8325
      _Version        =   65536
      _ExtentX        =   14684
      _ExtentY        =   6694
      _StockProps     =   15
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   18
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Begin Threed.SSPanel Panel3D3 
         Height          =   825
         Left            =   120
         TabIndex        =   9
         Top             =   900
         Width           =   8055
         _Version        =   65536
         _ExtentX        =   14208
         _ExtentY        =   1455
         _StockProps     =   15
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "MS Sans Serif"
            Size            =   18
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Begin VB.Label lbldesc 
            Alignment       =   1  'Right Justify
            Appearance      =   0  'Flat
            BackColor       =   &H00C0C0C0&
            Caption         =   " "
            ForeColor       =   &H80000008&
            Height          =   225
            Index           =   1
            Left            =   120
            TabIndex        =   23
            Top             =   450
            Width           =   2055
         End
         Begin VB.Label lbldesc 
            Alignment       =   1  'Right Justify
            Appearance      =   0  'Flat
            BackColor       =   &H00C0C0C0&
            Caption         =   "Model and Software:"
            ForeColor       =   &H80000008&
            Height          =   225
            Index           =   0
            Left            =   120
            TabIndex        =   12
            Top             =   180
            Width           =   2055
         End
         Begin VB.Label lblAuthors 
            Appearance      =   0  'Flat
            BackColor       =   &H00C0C0C0&
            Caption         =   "David R. Hokanson     David W. Hand     John C. Crittenden"
            ForeColor       =   &H80000008&
            Height          =   225
            Index           =   0
            Left            =   2340
            TabIndex        =   11
            Top             =   180
            Width           =   5595
         End
         Begin VB.Label lblAuthors 
            Appearance      =   0  'Flat
            BackColor       =   &H00C0C0C0&
            Caption         =   "Eric J. Oman"
            ForeColor       =   &H80000008&
            Height          =   225
            Index           =   1
            Left            =   2340
            TabIndex        =   10
            Top             =   450
            Width           =   5595
         End
      End
      Begin VB.PictureBox picLogos 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BorderStyle     =   0  'None
         ForeColor       =   &H80000008&
         Height          =   1755
         Index           =   0
         Left            =   120
         Picture         =   "Splash.frx":0000
         ScaleHeight     =   1755
         ScaleWidth      =   1815
         TabIndex        =   6
         Top             =   1830
         Width           =   1815
      End
      Begin VB.PictureBox picLogos 
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         BorderStyle     =   0  'None
         ForeColor       =   &H80000008&
         Height          =   1755
         Index           =   1
         Left            =   6360
         Picture         =   "Splash.frx":3776
         ScaleHeight     =   1755
         ScaleWidth      =   1815
         TabIndex        =   5
         Top             =   1830
         Width           =   1815
      End
      Begin Threed.SSPanel SSPanel1 
         Height          =   1425
         Left            =   2190
         TabIndex        =   13
         Top             =   2010
         Width           =   3765
         _Version        =   65536
         _ExtentX        =   6641
         _ExtentY        =   2514
         _StockProps     =   15
         Caption         =   "SSPanel1"
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Begin VB.Label lblVersionInfo 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00C0C0C0&
            Caption         =   "Version {ver} {STANDARD}"
            ForeColor       =   &H80000008&
            Height          =   225
            Index           =   0
            Left            =   60
            TabIndex        =   18
            Top             =   120
            Width           =   3645
         End
         Begin VB.Label lblVersionInfo 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00C0C0C0&
            Caption         =   "Expires on MM/DD/YYYY"
            ForeColor       =   &H80000008&
            Height          =   225
            Index           =   1
            Left            =   60
            TabIndex        =   17
            Top             =   360
            Width           =   3645
         End
         Begin VB.Label lblVersionInfo 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00C0C0C0&
            Caption         =   "Copyright {years}"
            ForeColor       =   &H80000008&
            Height          =   225
            Index           =   2
            Left            =   60
            TabIndex        =   16
            Top             =   600
            Width           =   3645
         End
         Begin VB.Label lblVersionInfo 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00C0C0C0&
            Caption         =   "Michigan Technological University"
            ForeColor       =   &H80000008&
            Height          =   225
            Index           =   3
            Left            =   60
            TabIndex        =   15
            Top             =   840
            Width           =   3645
         End
         Begin VB.Label lblVersionInfo 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00C0C0C0&
            Caption         =   "Houghton, Michigan"
            ForeColor       =   &H80000008&
            Height          =   225
            Index           =   4
            Left            =   60
            TabIndex        =   14
            Top             =   1080
            Width           =   3645
         End
      End
      Begin VB.Label lblCompany 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "CenCITT"
         ForeColor       =   &H80000008&
         Height          =   225
         Index           =   0
         Left            =   60
         TabIndex        =   8
         Top             =   150
         Width           =   8175
      End
      Begin VB.Label lblCompany 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BackColor       =   &H00C0C0C0&
         Caption         =   "Center for Clean Industrial and Treatment Technologies"
         ForeColor       =   &H80000008&
         Height          =   225
         Index           =   1
         Left            =   60
         TabIndex        =   7
         Top             =   420
         Width           =   8175
      End
   End
   Begin VB.CommandButton cmdExit 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      Caption         =   "E&xit"
      Height          =   525
      Left            =   7440
      TabIndex        =   2
      Top             =   5070
      Width           =   1305
   End
   Begin VB.CommandButton cmdButton2 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      Caption         =   "I agree, never show again"
      Height          =   525
      Left            =   1950
      TabIndex        =   1
      Top             =   5070
      Width           =   2535
   End
   Begin VB.CommandButton cmdButton1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      Caption         =   "&Continue"
      Height          =   525
      Left            =   420
      TabIndex        =   0
      Top             =   5070
      Width           =   1455
   End
   Begin Threed.SSPanel sspanel_maintitle 
      Height          =   945
      Left            =   420
      TabIndex        =   3
      Top             =   120
      Width           =   8325
      _Version        =   65536
      _ExtentX        =   14684
      _ExtentY        =   1667
      _StockProps     =   15
      Caption         =   "Software to Estimate Physical Properties (StEPP)"
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   13.5
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
   End
End
Attribute VB_Name = "frmSplash"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit


Private Sub cmdButton1_Click()
  splash_button_pressed = 1
  Unload Me
End Sub

Private Sub cmdButton2_Click()
  splash_button_pressed = 2
  Unload Me
End Sub

Private Sub cmdExit_Click()
  splash_button_pressed = 3
  Unload Me
End Sub

Private Sub Form_Load()
Dim s As String
'Call debug_output("L1")
  Me.Height = 6165
  Me.Width = 9300
  Me.Left = (Screen.Width - Me.Width) / 2
  Me.Top = (Screen.Height - Me.Height) / 2
'Call debug_output("L2")
  If (splash_mode = 0) Then
    'SHOW THE CONTINUE/EXIT FRONT WINDOW.
'Call debug_output("L3")
    cmdButton1.Visible = True
    cmdButton1.Caption = "&Continue"
    cmdButton2.Visible = False
    cmdExit.Visible = True
    'VERSION INFO.
    lblVersionInfo(0).Caption = "Version " & get_program_version_with_build_info()
    'EXPIRATION INFO.
    lblVersionInfo(1).Caption = get_expiration_info()
    'COPYRIGHT INFO.
    lblVersionInfo(2).Caption = "Copyright " & AppCopyrightYears
    'ETC.
    sspanel_disclaimer.Visible = False
    'cmdButton1.SetFocus
    cmdButton1.TabIndex = 0
'Call debug_output("L4")
  End If
  'If (splash_mode = 1) Then
  If (splash_mode = 1) Or (splash_mode = 101) Then
'Call debug_output("L5")
    'SHOW THE DISCLAIMER WINDOW.
    If (splash_mode = 101) Then
      cmdButton1.Visible = False
      cmdButton2.Visible = False
      cmdExit.Visible = True
      cmdExit.Caption = "&Close"
    Else
      cmdButton1.Visible = True
      cmdButton1.Caption = "I Agree"
      cmdButton2.Visible = True
      cmdExit.Visible = True
    End If
    'cmdButton1.Visible = True
    'cmdButton1.Caption = "I Agree"
    'cmdButton2.Visible = True
    'cmdExit.Visible = True
    sspanel_logos.Visible = False
    sspanel_disclaimer.Left = sspanel_logos.Left
    sspanel_disclaimer.Top = sspanel_logos.Top
    sspanel_disclaimer.Visible = True
    s = "By choosing " & Chr$(34) & "I Agree" & Chr$(34) & " you acknowledge that "
    s = s & "this software is under development and not guaranteed to be free "
    s = s & "of errors.  Furthermore there may be errors in the software that "
    s = s & "lead to erroneous output.  MTU shall not be liable for any loss, "
    s = s & "damage, injury, or casualty of whatsoever kind, or by whomsoever "
    s = s & "caused to the person or property of anyone arising out of or "
    s = s & "resulting from receipt and use of any aspect of the software.  "
    s = s & "References to specific commercial products, processes, or services "
    s = s & "by trademark, manufacturer, or otherwise does not necessarily "
    s = s & "constitute or imply endorsement/recommendation by the authors or "
    s = s & "the respective organizations under which the software "
    s = s & "was developed."
    lblDisclaimer.Caption = s
    'cmdButton1.SetFocus
    cmdButton1.TabIndex = 0
'Call debug_output("L6")
  End If
End Sub

Private Sub Form_Unload(Cancel As Integer)
  If (splash_button_pressed = 0) Then
    'If they got here, they must have selected "Close",
    'so perform the exit functionality.
    splash_button_pressed = 3
  End If
End Sub

VERSION 5.00
Object = "{0BA686C6-F7D3-101A-993E-0000C0EF6F5E}#1.0#0"; "THREED32.OCX"
Begin VB.Form frmStringS 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Search for String..."
   ClientHeight    =   1920
   ClientLeft      =   2490
   ClientTop       =   3300
   ClientWidth     =   5040
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   1920
   ScaleWidth      =   5040
   Begin VB.TextBox txtFind 
      Appearance      =   0  'Flat
      Height          =   288
      Left            =   120
      TabIndex        =   0
      Top             =   720
      Width           =   3612
   End
   Begin Threed.SSCommand cmdStart 
      Height          =   372
      Left            =   3240
      TabIndex        =   1
      Top             =   1440
      Width           =   1692
      _Version        =   65536
      _ExtentX        =   2646
      _ExtentY        =   1323
      _StockProps     =   78
      Caption         =   "Start searching..."
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   372
      Left            =   120
      TabIndex        =   2
      Top             =   1440
      Width           =   1212
   End
   Begin VB.Label Label1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BackStyle       =   0  'Transparent
      Caption         =   "Enter the string to find:"
      ForeColor       =   &H80000008&
      Height          =   252
      Left            =   120
      TabIndex        =   3
      Top             =   360
      Width           =   3012
   End
End
Attribute VB_Name = "frmStringS"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit
Option Base 1

Private Sub cmdCancel_Click()
    Find_String = ""
    Unload Me
End Sub

Private Sub cmdStart_Click()
   Find_String = Trim$(txtFind)
   If Find_String = "" Then
     MsgBox "The string is an empty string", 48, "Error"
   Else
     Unload Me
   End If
End Sub

Private Sub Form_Load()

    'Center the form on the screen
    If WindowState = 0 Then
       'don't attempt if screen Minimized or Maximized
      Move contam_prop_form.Left + (contam_prop_form.Width / 2) - (frmStringS.Width / 2), contam_prop_form.Top + (contam_prop_form.Height / 2) - (frmStringS.Height / 2)
    
    End If

  txtFind = Find_String
  txtFind.SelLength = Len(Find_String)
  
End Sub

Private Sub txtFind_GotFocus()
  Call GotFocus_Handle(Me, txtFind, Temp_Text)
End Sub

Private Sub txtFind_KeyPress(keyascii As Integer)
    If keyascii = 13 Then '<Return> pressed
       cmdStart_Click
    End If
End Sub

Private Sub txtFind_LostFocus()
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtFind)) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtFind, flag_ok)

End Sub

VERSION 5.00
Object = "{0BA686C6-F7D3-101A-993E-0000C0EF6F5E}#1.0#0"; "THREED32.OCX"
Begin VB.Form frmTechnicalAssistance 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Model & Software Developers"
   ClientHeight    =   2850
   ClientLeft      =   4125
   ClientTop       =   6660
   ClientWidth     =   5010
   ControlBox      =   0   'False
   LinkTopic       =   "Form1"
   LockControls    =   -1  'True
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2850
   ScaleWidth      =   5010
   ShowInTaskbar   =   0   'False
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "&OK"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   345
      Left            =   3540
      TabIndex        =   1
      Top             =   2400
      Width           =   1365
   End
   Begin Threed.SSPanel pnl_title 
      Height          =   2235
      Index           =   3
      Left            =   90
      TabIndex        =   0
      Top             =   90
      Width           =   4815
      _Version        =   65536
      _ExtentX        =   8493
      _ExtentY        =   3942
      _StockProps     =   15
      Caption         =   "pnl_title(3)"
      BackColor       =   12632256
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
   End
End
Attribute VB_Name = "frmTechnicalAssistance"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False

Private Sub cmdOK_Click()
  Unload Me
End Sub

Private Sub Form_Load()
    Dim msg As String
If WindowState = 0 Then
  'don't attempt if screen Minimized or Maximized
  Move contam_prop_form.Left + (contam_prop_form.Width / 2) - (Me.Width / 2), contam_prop_form.Top + (contam_prop_form.Height / 2) - (Me.Height / 2)

End If

'msg = "Programming Support:    Richard J. Hossli" & Chr$(13) & "                                    Jason E. Mclean" & Chr$(13) & "                                    Eric J. Oman" & Chr$(13)
'pnl_title(5).Caption = msg & "                                    Thomas F. Budd" & Chr$(13) & "                                    Kristine L. Grove"
'pnl_title(5).BackColor = &HC0C0C0
'pnl_title(5).ForeColor = &H0&

msg = "David R. Hokanson" & Chr$(13)
msg = msg & "Tony N. Rogers" & Chr$(13)
msg = msg & "David W. Hand" & Chr$(13)
msg = msg & "John C. Crittenden" & Chr$(13)
msg = msg & "Fr" & Chr$(233) & "d" & Chr$(233) & "ric Gobin" & Chr$(13)
msg = msg & "Eric J. Oman"
pnl_title(3).Caption = msg

pnl_title(3).BackColor = &HC0C0C0
pnl_title(3).ForeColor = &H0&

''''picmtu(0).Picture = LoadPicture(app.Path & "\mtu_logo.bmp")
End Sub


VERSION 5.00
Begin VB.Form vp_form 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Vapor Pressure"
   ClientHeight    =   4665
   ClientLeft      =   1215
   ClientTop       =   2805
   ClientWidth     =   8640
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   4665
   ScaleWidth      =   8640
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   612
      Left            =   4920
      TabIndex        =   1
      Top             =   960
      Width           =   3492
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Vapor Pressure"
      Height          =   612
      Left            =   4920
      TabIndex        =   0
      Top             =   225
      Width           =   3492
   End
   Begin VB.TextBox txtVPmaximumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   3
      Left            =   7320
      TabIndex        =   10
      Text            =   "not visible"
      Top             =   3960
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtVPminimumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   3
      Left            =   6120
      TabIndex        =   9
      Text            =   "not visible"
      Top             =   3960
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtVPTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   3
      Left            =   4920
      TabIndex        =   8
      Top             =   3960
      Width           =   975
   End
   Begin VB.TextBox txtVaporPressureValue 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   3
      Left            =   2880
      TabIndex        =   7
      Top             =   3960
      Width           =   1815
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   4
      Left            =   360
      TabIndex        =   5
      Top             =   3960
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   3
      Left            =   360
      TabIndex        =   4
      Top             =   3480
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   2
      Left            =   360
      TabIndex        =   3
      Top             =   3000
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   1
      Left            =   360
      TabIndex        =   2
      Top             =   2520
      Width           =   255
   End
   Begin VB.Label lblVPmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   7320
      TabIndex        =   35
      Top             =   3480
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblVPmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   7320
      TabIndex        =   34
      Top             =   3000
      Width           =   972
   End
   Begin VB.Label lblVPmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   7320
      TabIndex        =   33
      Top             =   2520
      Width           =   972
   End
   Begin VB.Label lblVPminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   6120
      TabIndex        =   32
      Top             =   3480
      Visible         =   0   'False
      Width           =   972
   End
   Begin VB.Label lblVPminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   6120
      TabIndex        =   31
      Top             =   3000
      Width           =   972
   End
   Begin VB.Label lblVPminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6120
      TabIndex        =   30
      Top             =   2520
      Width           =   972
   End
   Begin VB.Label lblVPTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   4920
      TabIndex        =   29
      Top             =   3480
      Width           =   972
   End
   Begin VB.Label lblVPTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   4920
      TabIndex        =   28
      Top             =   3000
      Width           =   972
   End
   Begin VB.Label lblVPTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4920
      TabIndex        =   27
      Top             =   2520
      Width           =   972
   End
   Begin VB.Label lblVaporPressureValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   2
      Left            =   2880
      TabIndex        =   26
      Top             =   3480
      Width           =   1812
   End
   Begin VB.Label lblVaporPressureValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   1
      Left            =   2880
      TabIndex        =   25
      Top             =   3000
      Width           =   1812
   End
   Begin VB.Label lblVaporPressureValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   2880
      TabIndex        =   24
      Top             =   2520
      Width           =   1812
   End
   Begin VB.Line Line2 
      X1              =   240
      X2              =   8400
      Y1              =   2280
      Y2              =   2280
   End
   Begin VB.Line Line1 
      X1              =   240
      X2              =   4560
      Y1              =   720
      Y2              =   720
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   240
      Top             =   240
      Width           =   4335
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2520
      TabIndex        =   23
      Top             =   840
      Width           =   1935
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2520
      TabIndex        =   22
      Top             =   1200
      Width           =   1935
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   360
      TabIndex        =   21
      Top             =   1200
      Width           =   1935
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   360
      TabIndex        =   20
      Top             =   840
      Width           =   1935
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Vapor Pressure Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   360
      TabIndex        =   19
      Top             =   360
      Width           =   4095
   End
   Begin VB.Shape Shape2 
      BorderWidth     =   2
      Height          =   2655
      Left            =   240
      Top             =   1800
      Width           =   8175
   End
   Begin VB.Label lblVPTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   4920
      TabIndex        =   18
      Top             =   1920
      Width           =   975
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFFFF&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   3
      Left            =   720
      TabIndex        =   6
      Top             =   3960
      Width           =   1935
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Superfund"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   720
      TabIndex        =   17
      Top             =   3480
      Width           =   1935
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Antoine's Equation"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   720
      TabIndex        =   16
      Top             =   3000
      Width           =   1935
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "DIPPR801"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   720
      TabIndex        =   15
      Top             =   2520
      Width           =   1935
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   720
      TabIndex        =   14
      Top             =   1920
      Width           =   1935
   End
   Begin VB.Label lblVPmaxTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmax"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   7320
      TabIndex        =   13
      Top             =   1920
      Width           =   975
   End
   Begin VB.Label lblVPminTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmin"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   6120
      TabIndex        =   12
      Top             =   1920
      Width           =   975
   End
   Begin VB.Label lblVPLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Vapor Pressure"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   2880
      TabIndex        =   11
      Top             =   1920
      Width           =   1815
   End
End
Attribute VB_Name = "vp_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastVPInputValue As String
Dim PastVPInputTemp As String

Private Sub cmdCancel_Click()
    Dim i As Integer
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.VaporPressure.CurrentSelection.choice
       Case VAPOR_PRESSURE_DATABASE
          For i = 1 To 3
              If Option1(i).Enabled = True Then
                 SelectedOption = i
                 Exit For
              End If
          Next i
       Case VAPOR_PRESSURE_INPUT
          SelectedOption = 4
          txtVaporPressureValue(3).Text = PastVPInputValue
          txtVPTemperature(3).Text = PastVPInputTemp
       Case Else
          vp_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    vp_form.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer
    Dim NumContaminantInList As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 4
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1, 2, 3
          ValueToDisplayIndex = VAPOR_PRESSURE_DATABASE
       Case 4
          If Not PROPAVAILABLE(VAPOR_PRESSURE_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtVaporPressureValue(3).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = VAPOR_PRESSURE_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.VaporPressure.CurrentSelection.choice Then
       phprop.VaporPressure.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayVaporPressureMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = VAPOR_PRESSURE_INPUT Then
       Call DisplayVaporPressureMainScreen(ValueToDisplayIndex)
    End If

    vp_form.Hide

'Recalculate Henry's Constant using selected vapor pressure

'          frmWaitForCalculations.Show
'          frmWaitForCalculations.Refresh

          contam_prop_form!lblContaminantProperties(2).Caption = ""

          Screen.MousePointer = 11   'Hourglass

          Call CalculateHenrysConstant
          contam_prop_form.Refresh

          Screen.MousePointer = 0    'Arrow

'          frmWaitForCalculations.Hide

          NumContaminantInList = contam_prop_form!cboSelectContaminant.ListIndex + 1
          PropContaminant(NumContaminantInList) = phprop

End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastVPInputValue = txtVaporPressureValue(3).Text
    PastVPInputTemp = txtVPTemperature(3).Text
End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)
    
  If (DemoMode) Then cmdOK.Enabled = False


End Sub

Private Sub lblSourceLabel_Click(Index As Integer)
    Dim i As Integer

    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub lblVaporPressureValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim msg As String
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    If lblVaporPressureValue(Index).Caption = "Not Available" Then
       Select Case Index
          Case 0   'DIPPR801
               msg = "Vapor Pressure from DIPPR801 is not available in the StEPP database."
          Case 1   'Antoine's Equation
               msg = "Vapor Pressure from Antoine's Equation is not available in the StEPP database."
          Case 2   'Superfund
               msg = "Vapor Pressure from Superfund is not available in the StEPP database."
       End Select

       MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
       Exit Sub
    End If

    If phprop.VaporPressure.database.error = 0 Then Exit Sub

    MsgBox ErrorMsg(phprop.VaporPressure.database.error), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"

End Sub

Private Sub lblVPmaximumT_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblVPminimumT_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblVPTemperature_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.VaporPressure.PreviousIndex Then Exit Sub
    lblSourceLabel(SourceIndex).BackColor = &H800000
    lblSourceLabel(SourceIndex).ForeColor = &H80000005
    i = hilight.VaporPressure.PreviousIndex
    hilight.VaporPressure.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSourceLabel(i).BackColor = &H80000005
    lblSourceLabel(i).ForeColor = &H80000008

End Sub

Private Sub txtVaporPressureValue_GotFocus(Index As Integer)
  Call GotFocus_Handle(Me, txtVaporPressureValue(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtVaporPressureValue_KeyPress(Index As Integer, keyascii As Integer)

    If keyascii = 13 Then
       keyascii = 0
       txtVPTemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)

End Sub

Private Sub txtVaporPressureValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtVaporPressureValue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtVaporPressureValue(Index).Text = "" Then
       phprop.VaporPressure.input.Value = -1#
       PROPAVAILABLE(VAPOR_PRESSURE_INPUT) = False
       Call LostFocus_Handle(Me, txtVaporPressureValue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtVaporPressureValue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtVaporPressureValue(Index).Text)) Then
          txtVaporPressureValue(Index).Text = Temp_Text
          txtVaporPressureValue(Index).SetFocus
       Call LostFocus_Handle(Me, txtVaporPressureValue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtVaporPressureValue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.VaporPressure.input.Value = CDbl(txtVaporPressureValue(Index).Text)
          Else
             EnglishValue = CDbl(txtVaporPressureValue(Index).Text)
             Call VPENSI(SIValue, EnglishValue)
             phprop.VaporPressure.input.Value = SIValue
          End If
          
          PROPAVAILABLE(VAPOR_PRESSURE_INPUT) = True
       Else
       Call LostFocus_Handle(Me, txtVaporPressureValue(Index), flag_ok)
          Exit Sub
       End If

    End If
       Call LostFocus_Handle(Me, txtVaporPressureValue(Index), flag_ok)

End Sub

Private Sub txtVPmaximumT_GotFocus(Index As Integer)
  Call GotFocus_Handle(Me, txtVPmaximumT(Index), Temp_Text)

End Sub

Private Sub txtVPmaximumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtVPmaximumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtVPmaximumT(Index), flag_ok)

End Sub

Private Sub txtVPminimumT_GotFocus(Index As Integer)
  Call GotFocus_Handle(Me, txtVPminimumT(Index), Temp_Text)

End Sub

Private Sub txtVPminimumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtVPminimumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtVPminimumT(Index), flag_ok)

End Sub

Private Sub txtVPTemperature_GotFocus(Index As Integer)
  Call GotFocus_Handle(Me, txtVPTemperature(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtVPTemperature_KeyPress(Index As Integer, keyascii As Integer)

    If keyascii = 13 Then
       keyascii = 0
       cmdOK.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)

End Sub

Private Sub txtVPTemperature_LostFocus(Index As Integer)

    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtVPTemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtVPTemperature(Index).Text = "" Then
       phprop.VaporPressure.input.temperature = -1E+25
        Call LostFocus_Handle(Me, txtVPTemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtVPTemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtVPTemperature(Index).Text)) Then
          txtVPTemperature(Index).Text = Temp_Text
          txtVPTemperature(Index).SetFocus
        Call LostFocus_Handle(Me, txtVPTemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtVPTemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.VaporPressure.input.temperature = CDbl(txtVPTemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtVPTemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.VaporPressure.input.temperature = SIValue
          End If
          
       Else
        Call LostFocus_Handle(Me, txtVPTemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
        Call LostFocus_Handle(Me, txtVPTemperature(Index), flag_ok)

End Sub

VERSION 5.00
Begin VB.Form vp_form 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Vapor Pressure"
   ClientHeight    =   4665
   ClientLeft      =   3450
   ClientTop       =   3840
   ClientWidth     =   8640
   ControlBox      =   0   'False
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   4665
   ScaleWidth      =   8640
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   1
      Left            =   270
      TabIndex        =   9
      Top             =   2475
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   2
      Left            =   270
      TabIndex        =   8
      Top             =   2955
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   3
      Left            =   270
      TabIndex        =   7
      Top             =   3435
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   4
      Left            =   270
      TabIndex        =   6
      Top             =   3915
      Width           =   255
   End
   Begin VB.TextBox txtVaporPressureValue 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Index           =   3
      Left            =   2790
      TabIndex        =   5
      Top             =   3915
      Width           =   1815
   End
   Begin VB.TextBox txtVPTemperature 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Index           =   3
      Left            =   4830
      TabIndex        =   4
      Top             =   3915
      Width           =   975
   End
   Begin VB.TextBox txtVPminimumT 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Index           =   3
      Left            =   6030
      TabIndex        =   3
      Text            =   "not visible"
      Top             =   3915
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtVPmaximumT 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Index           =   3
      Left            =   7230
      TabIndex        =   2
      Text            =   "not visible"
      Top             =   3915
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Vapor Pressure"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   612
      Left            =   4830
      TabIndex        =   1
      Top             =   180
      Width           =   3492
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   612
      Left            =   4830
      TabIndex        =   0
      Top             =   915
      Width           =   3492
   End
   Begin VB.Label lblVPLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Vapor Pressure"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   2790
      TabIndex        =   35
      Top             =   1875
      Width           =   1815
   End
   Begin VB.Label lblVPminTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmin"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   6030
      TabIndex        =   34
      Top             =   1875
      Width           =   975
   End
   Begin VB.Label lblVPmaxTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmax"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   7230
      TabIndex        =   33
      Top             =   1875
      Width           =   975
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   630
      TabIndex        =   32
      Top             =   1875
      Width           =   1935
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "DIPPR801"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   630
      TabIndex        =   31
      Top             =   2475
      Width           =   1935
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Antoine's Equation"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   630
      TabIndex        =   30
      Top             =   2955
      Width           =   1935
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Superfund"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   630
      TabIndex        =   29
      Top             =   3435
      Width           =   1935
   End
   Begin VB.Label lblSourceLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFFFF&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   3
      Left            =   630
      TabIndex        =   28
      Top             =   3915
      Width           =   1935
   End
   Begin VB.Label lblVPTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   4830
      TabIndex        =   27
      Top             =   1875
      Width           =   975
   End
   Begin VB.Shape Shape2 
      BorderWidth     =   2
      Height          =   2655
      Left            =   150
      Top             =   1740
      Width           =   8175
   End
   Begin VB.Label vp_form 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Vapor Pressure Information"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   270
      TabIndex        =   26
      Top             =   315
      Width           =   4095
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   270
      TabIndex        =   25
      Top             =   795
      Width           =   1935
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   270
      TabIndex        =   24
      Top             =   1155
      Width           =   1935
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2430
      TabIndex        =   23
      Top             =   1155
      Width           =   1935
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2430
      TabIndex        =   22
      Top             =   795
      Width           =   1935
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   150
      Top             =   210
      Width           =   4335
   End
   Begin VB.Line Line1 
      X1              =   150
      X2              =   4470
      Y1              =   675
      Y2              =   675
   End
   Begin VB.Line Line2 
      X1              =   150
      X2              =   8310
      Y1              =   2235
      Y2              =   2235
   End
   Begin VB.Label lblVaporPressureValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2790
      TabIndex        =   21
      Top             =   2475
      Width           =   1815
   End
   Begin VB.Label lblVaporPressureValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2790
      TabIndex        =   20
      Top             =   2955
      Width           =   1815
   End
   Begin VB.Label lblVaporPressureValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   2790
      TabIndex        =   19
      Top             =   3435
      Width           =   1815
   End
   Begin VB.Label lblVPTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   4830
      TabIndex        =   18
      Top             =   2475
      Width           =   975
   End
   Begin VB.Label lblVPTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   4830
      TabIndex        =   17
      Top             =   2955
      Width           =   975
   End
   Begin VB.Label lblVPTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   4830
      TabIndex        =   16
      Top             =   3435
      Width           =   975
   End
   Begin VB.Label lblVPminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   6030
      TabIndex        =   15
      Top             =   2475
      Width           =   975
   End
   Begin VB.Label lblVPminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   6030
      TabIndex        =   14
      Top             =   2955
      Width           =   975
   End
   Begin VB.Label lblVPminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   6030
      TabIndex        =   13
      Top             =   3435
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.Label lblVPmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   7230
      TabIndex        =   12
      Top             =   2475
      Width           =   975
   End
   Begin VB.Label lblVPmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   7230
      TabIndex        =   11
      Top             =   2955
      Width           =   975
   End
   Begin VB.Label lblVPmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "not visible"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   7230
      TabIndex        =   10
      Top             =   3435
      Visible         =   0   'False
      Width           =   975
   End
End
Attribute VB_Name = "vp_form"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastVPInputValue As String
Dim PastVPInputTemp As String

Private Sub cmdCancel_Click()
    Dim i As Integer
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.VaporPressure.CurrentSelection.choice
       Case VAPOR_PRESSURE_DATABASE
          For i = 1 To 3
              If Option1(i).Enabled = True Then
                 SelectedOption = i
                 Exit For
              End If
          Next i
       Case VAPOR_PRESSURE_INPUT
          SelectedOption = 4
          txtVaporPressureValue(3).Text = PastVPInputValue
          txtVPTemperature(3).Text = PastVPInputTemp
       Case Else
          vp_form.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    vp_form.Hide
End Sub

Private Sub cmdOK_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer
    Dim NumContaminantInList As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 4
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1, 2, 3
          ValueToDisplayIndex = VAPOR_PRESSURE_DATABASE
       Case 4
          If Not PROPAVAILABLE(VAPOR_PRESSURE_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtVaporPressureValue(3).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = VAPOR_PRESSURE_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.VaporPressure.CurrentSelection.choice Then
       phprop.VaporPressure.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayVaporPressureMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = VAPOR_PRESSURE_INPUT Then
       Call DisplayVaporPressureMainScreen(ValueToDisplayIndex)
    End If

    vp_form.Hide

'Recalculate Henry's Constant using selected vapor pressure

'          frmWaitForCalculations.Show
'          frmWaitForCalculations.Refresh

          contam_prop_form!lblContaminantProperties(2).Caption = ""

          Screen.MousePointer = 11   'Hourglass

          Call CalculateHenrysConstant
          contam_prop_form.Refresh

          Screen.MousePointer = 0    'Arrow

'          frmWaitForCalculations.Hide

          NumContaminantInList = contam_prop_form!cboSelectContaminant.ListIndex + 1
          PropContaminant(NumContaminantInList) = phprop

End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastVPInputValue = txtVaporPressureValue(3).Text
    PastVPInputTemp = txtVPTemperature(3).Text
End Sub

Private Sub Form_Load()

  Call centerform_relative(contam_prop_form, Me)
    
  If (DemoMode) Then cmdOK.Enabled = False


End Sub

Private Sub lblSourceLabel_Click(Index As Integer)
    Dim i As Integer

    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub lblVaporPressureValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim msg As String
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    If lblVaporPressureValue(Index).Caption = "Not Available" Then
       Select Case Index
          Case 0   'DIPPR801
               msg = "Vapor Pressure from DIPPR801 is not available in the StEPP database."
          Case 1   'Antoine's Equation
               msg = "Vapor Pressure from Antoine's Equation is not available in the StEPP database."
          Case 2   'Superfund
               msg = "Vapor Pressure from Superfund is not available in the StEPP database."
       End Select

       MsgBox msg, MB_ICONINFORMATION, Trim$(phprop.Name) & " - Data Unavailable"
       Exit Sub
    End If

    If phprop.VaporPressure.database.error = 0 Then Exit Sub

    MsgBox ErrorMsg(phprop.VaporPressure.database.error), MB_ICONINFORMATION, Trim$(phprop.Name) & " - Warning"

End Sub

Private Sub lblVPmaximumT_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblVPminimumT_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblVPTemperature_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.VaporPressure.PreviousIndex Then Exit Sub
    lblSourceLabel(SourceIndex).BackColor = &H800000
    lblSourceLabel(SourceIndex).ForeColor = &H80000005
    i = hilight.VaporPressure.PreviousIndex
    hilight.VaporPressure.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSourceLabel(i).BackColor = &H80000005
    lblSourceLabel(i).ForeColor = &H80000008

End Sub

Private Sub txtVaporPressureValue_GotFocus(Index As Integer)
  Call GotFocus_Handle(Me, txtVaporPressureValue(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtVaporPressureValue_KeyPress(Index As Integer, keyascii As Integer)

    If keyascii = 13 Then
       keyascii = 0
       txtVPTemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)

End Sub

Private Sub txtVaporPressureValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtVaporPressureValue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtVaporPressureValue(Index).Text = "" Then
       phprop.VaporPressure.input.Value = -1#
       PROPAVAILABLE(VAPOR_PRESSURE_INPUT) = False
       Call LostFocus_Handle(Me, txtVaporPressureValue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtVaporPressureValue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtVaporPressureValue(Index).Text)) Then
          txtVaporPressureValue(Index).Text = Temp_Text
          txtVaporPressureValue(Index).SetFocus
       Call LostFocus_Handle(Me, txtVaporPressureValue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtVaporPressureValue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.VaporPressure.input.Value = CDbl(txtVaporPressureValue(Index).Text)
          Else
             EnglishValue = CDbl(txtVaporPressureValue(Index).Text)
             Call VPENSI(SIValue, EnglishValue)
             phprop.VaporPressure.input.Value = SIValue
          End If
          
          PROPAVAILABLE(VAPOR_PRESSURE_INPUT) = True
       Else
       Call LostFocus_Handle(Me, txtVaporPressureValue(Index), flag_ok)
          Exit Sub
       End If

    End If
       Call LostFocus_Handle(Me, txtVaporPressureValue(Index), flag_ok)

End Sub

Private Sub txtVPmaximumT_GotFocus(Index As Integer)
  Call GotFocus_Handle(Me, txtVPmaximumT(Index), Temp_Text)

End Sub

Private Sub txtVPmaximumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtVPmaximumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtVPmaximumT(Index), flag_ok)

End Sub

Private Sub txtVPminimumT_GotFocus(Index As Integer)
  Call GotFocus_Handle(Me, txtVPminimumT(Index), Temp_Text)

End Sub

Private Sub txtVPminimumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtVPminimumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtVPminimumT(Index), flag_ok)

End Sub

Private Sub txtVPTemperature_GotFocus(Index As Integer)
  Call GotFocus_Handle(Me, txtVPTemperature(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.VaporPressure.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtVPTemperature_KeyPress(Index As Integer, keyascii As Integer)

    If keyascii = 13 Then
       keyascii = 0
       cmdOK.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)

End Sub

Private Sub txtVPTemperature_LostFocus(Index As Integer)

    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtVPTemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtVPTemperature(Index).Text = "" Then
       phprop.VaporPressure.input.temperature = -1E+25
        Call LostFocus_Handle(Me, txtVPTemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtVPTemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtVPTemperature(Index).Text)) Then
          txtVPTemperature(Index).Text = Temp_Text
          txtVPTemperature(Index).SetFocus
        Call LostFocus_Handle(Me, txtVPTemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtVPTemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.VaporPressure.input.temperature = CDbl(txtVPTemperature(Index).Text)
          Else
             EnglishValue = CDbl(txtVPTemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.VaporPressure.input.temperature = SIValue
          End If
          
       Else
        Call LostFocus_Handle(Me, txtVPTemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
        Call LostFocus_Handle(Me, txtVPTemperature(Index), flag_ok)

End Sub


VERSION 5.00
Object = "{0BA686C6-F7D3-101A-993E-0000C0EF6F5E}#1.0#0"; "THREED32.OCX"
Begin VB.Form frmWaitForCalculations 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "StEPP"
   ClientHeight    =   2280
   ClientLeft      =   5115
   ClientTop       =   3840
   ClientWidth     =   5025
   ControlBox      =   0   'False
   LinkTopic       =   "Form1"
   LockControls    =   -1  'True
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   2280
   ScaleWidth      =   5025
   ShowInTaskbar   =   0   'False
   Begin Threed.SSPanel Panel3D1 
      Height          =   1995
      Left            =   240
      TabIndex        =   0
      Top             =   120
      Width           =   4575
      _Version        =   65536
      _ExtentX        =   8070
      _ExtentY        =   3519
      _StockProps     =   15
      BackColor       =   12632256
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Begin Threed.SSPanel Panel3D2 
         Height          =   735
         Left            =   180
         TabIndex        =   1
         Top             =   630
         Visible         =   0   'False
         Width           =   4215
         _Version        =   65536
         _ExtentX        =   7435
         _ExtentY        =   1296
         _StockProps     =   15
         Caption         =   "Panel3D2"
         BackColor       =   12632256
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
      End
   End
End
Attribute VB_Name = "frmWaitForCalculations"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit


Private Sub Form_Load()

    'Center the form on the screen
    If WindowState = 0 Then
       'don't attempt if screen Minimized or Maximized
       Move (Screen.Width - frmWaitForCalculations.Width) / 2, (Screen.Height - frmWaitForCalculations.Height) / 2
    End If

    Panel3D1.BackColor = &HC0C0C0
    Panel3D1.ForeColor = &H0&

    Panel3D1.FontSize = 13.8
    Panel3D1.Caption = "Performing Calculations" & Chr$(13) & Chr$(13) & "Please Wait"

End Sub


Private Sub SSPanel1_Click()

End Sub
VERSION 5.00
Begin VB.Form frmWaterDensity 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Water Density"
   ClientHeight    =   3540
   ClientLeft      =   90
   ClientTop       =   1620
   ClientWidth     =   8520
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   3540
   ScaleWidth      =   8520
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   240
      TabIndex        =   3
      Top             =   2880
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   2
      Top             =   2400
      Width           =   255
   End
   Begin VB.TextBox txtH2ODensitymaximumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   7320
      TabIndex        =   7
      Text            =   "not visible"
      Top             =   2880
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtH2ODensityminimumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   6240
      TabIndex        =   6
      Text            =   "not visible"
      Top             =   2880
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtH2ODensityTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   5160
      TabIndex        =   5
      Top             =   2880
      Width           =   975
   End
   Begin VB.TextBox txtWaterDensityValue 
      Appearance      =   0  'Flat
      Height          =   288
      Index           =   1
      Left            =   3240
      TabIndex        =   4
      Top             =   2880
      Width           =   1692
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected Water Density"
      Height          =   615
      Left            =   4920
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   1692
      Left            =   120
      Top             =   1620
      Width           =   8292
   End
   Begin VB.Label lblH2ODensitymaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   7320
      TabIndex        =   23
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblH2ODensityminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6240
      TabIndex        =   22
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblH2ODensityTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   5160
      TabIndex        =   21
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblWaterDensityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   3240
      TabIndex        =   20
      Top             =   2400
      Width           =   1692
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   1
      Left            =   600
      TabIndex        =   19
      Top             =   2880
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Correlation of Data"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   0
      Left            =   600
      TabIndex        =   18
      Top             =   2400
      Width           =   2415
   End
   Begin VB.Line Line2 
      X1              =   120
      X2              =   8400
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   600
      TabIndex        =   17
      Top             =   1800
      Width           =   2415
   End
   Begin VB.Label lblH2ODensLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "H2O Dens."
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   3240
      TabIndex        =   16
      Top             =   1800
      Width           =   1692
   End
   Begin VB.Label lblH2ODensTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   5160
      TabIndex        =   15
      Top             =   1800
      Width           =   972
   End
   Begin VB.Label lblH2ODensmaxTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmax"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   7320
      TabIndex        =   14
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblH2ODensminTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmin"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   6240
      TabIndex        =   13
      Top             =   1800
      Width           =   972
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   12
      Top             =   720
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   11
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   10
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   9
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Water Density Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   8
      Top             =   240
      Width           =   4095
   End
End
Attribute VB_Name = "frmWaterDensity"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastH2ODensInputValue As String
Dim PastH2ODensInputTemp As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.WaterDensity.CurrentSelection.choice
       Case WATER_DENSITY_CORRELATION
          SelectedOption = 1
       Case WATER_DENSITY_INPUT
          SelectedOption = 2
          txtWaterDensityValue(1).Text = PastH2ODensInputValue
          txth2odensitytemperature(1).Text = PastH2ODensInputTemp
       Case Else
          frmWaterDensity.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    frmWaterDensity.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 2
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = WATER_DENSITY_CORRELATION
       Case 2
          If Not PROPAVAILABLE(WATER_DENSITY_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtWaterDensityValue(1).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = WATER_DENSITY_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.WaterDensity.CurrentSelection.choice Then
       phprop.WaterDensity.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayWaterDensityMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = WATER_DENSITY_INPUT Then
       Call DisplayWaterDensityMainScreen(ValueToDisplayIndex)
    End If

    frmWaterDensity.Hide
End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastH2ODensInputValue = txtWaterDensityValue(1).Text
    PastH2ODensInputTemp = txth2odensitytemperature(1).Text
End Sub

Private Sub Form_Load()

    If (DemoMode) Then cmdok.Enabled = False

  Call centerform_relative(contam_prop_form, Me)

End Sub

Private Sub lblH2ODensitymaximumT_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblH2ODensityminimumT_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblH2ODensityTemperature_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblWaterDensityValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0  'Correlation from Data in McCabe and Smith
          ErrorFlag = phprop.WaterDensity.correlation.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, "Water - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, "Water - Warning"
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.WaterDensity.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.WaterDensity.PreviousIndex
    hilight.WaterDensity.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtH2ODensitymaximumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txth2odensitymaximumT(Index), Temp_Text)

End Sub

Private Sub txtH2ODensitymaximumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 1 Then keyascii = 0
End Sub

Private Sub txtH2ODensitymaximumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txth2odensitymaximumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txth2odensitymaximumT(Index), flag_ok)


End Sub

Private Sub txtH2ODensityminimimumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 1 Then keyascii = 0
End Sub

Private Sub txtH2ODensityminimumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txth2odensityminimumT(Index), Temp_Text)


End Sub

Private Sub txtH2ODensityminimumT_LostFocus(Index As Integer)
Dim flag_ok As Integer
   
   If (LostFocus_IsEvil(Me, txth2odensityminimumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txth2odensityminimumT(Index), flag_ok)

End Sub

Private Sub txtH2ODensityTemperature_GotFocus(Index As Integer)

  Call gotfocus_handle(Me, txth2odensitytemperature(Index), Temp_Text)

    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtH2ODensityTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
    
End Sub

Private Sub txtH2ODensityTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txth2odensitytemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True
    
    If txth2odensitytemperature(Index).Text = "" Then
       phprop.WaterDensity.input.temperature = -1E+25
       Call LostFocus_Handle(Me, txth2odensitytemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txth2odensitytemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txth2odensitytemperature(Index).Text)) Then
          txth2odensitytemperature(Index).Text = Temp_Text
          txth2odensitytemperature(Index).SetFocus
          Call LostFocus_Handle(Me, txth2odensitytemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txth2odensitytemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.WaterDensity.input.temperature = CDbl(txth2odensitytemperature(Index).Text)
          Else
             EnglishValue = CDbl(txth2odensitytemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.WaterDensity.input.temperature = SIValue
          End If

          
       Else
          Call LostFocus_Handle(Me, txth2odensitytemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
          Call LostFocus_Handle(Me, txth2odensitytemperature(Index), flag_ok)
End Sub

Private Sub txtWaterDensityValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtWaterDensityValue(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterDensity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub txtWaterDensityValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txth2odensitytemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
    
End Sub

Private Sub txtWaterDensityValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtWaterDensityValue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtWaterDensityValue(Index).Text = "" Then
       phprop.WaterDensity.input.Value = -1#
       PROPAVAILABLE(WATER_DENSITY_INPUT) = False
          Call LostFocus_Handle(Me, txtWaterDensityValue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtWaterDensityValue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtWaterDensityValue(Index).Text)) Then
          txtWaterDensityValue(Index).Text = Temp_Text
          txtWaterDensityValue(Index).SetFocus
          Call LostFocus_Handle(Me, txth2odensitytemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtWaterDensityValue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.WaterDensity.input.Value = CDbl(txtWaterDensityValue(Index).Text)
          Else
             EnglishValue = CDbl(txtWaterDensityValue(Index).Text)
             Call WDENENSI(SIValue, EnglishValue)
             phprop.WaterDensity.input.Value = SIValue
          End If

          PROPAVAILABLE(WATER_DENSITY_INPUT) = True
       Else
          Call LostFocus_Handle(Me, txth2odensitytemperature(Index), flag_ok)
          Exit Sub
       End If
    End If
          Call LostFocus_Handle(Me, txth2odensitytemperature(Index), flag_ok)
End Sub

VERSION 5.00
Begin VB.Form frmWaterSurfaceTension 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Water Surface Tension"
   ClientHeight    =   3585
   ClientLeft      =   795
   ClientTop       =   3570
   ClientWidth     =   8475
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form3"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   3585
   ScaleWidth      =   8475
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   240
      TabIndex        =   3
      Top             =   2880
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   2
      Top             =   2400
      Width           =   255
   End
   Begin VB.TextBox txtH2OSurfTensmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFFFF&
      Height          =   285
      Index           =   1
      Left            =   7320
      TabIndex        =   7
      Text            =   "not visible"
      Top             =   2880
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtH2OSurfTensminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFFFF&
      Height          =   285
      Index           =   1
      Left            =   6120
      TabIndex        =   6
      Text            =   "not visible"
      Top             =   2880
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtH2OSurfTensTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   4920
      TabIndex        =   5
      Top             =   2880
      Width           =   975
   End
   Begin VB.TextBox txtWaterSurfaceTensionValue 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   3240
      TabIndex        =   4
      Top             =   2880
      Width           =   1455
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Selected H2O Surface Tension"
      Height          =   615
      Left            =   4920
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   1692
      Left            =   120
      Top             =   1680
      Width           =   8292
   End
   Begin VB.Label lblH2OSurfTensmaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   7320
      TabIndex        =   23
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblH2OSurfTensminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6120
      TabIndex        =   22
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblH2OSurfTensTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   4920
      TabIndex        =   21
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblWaterSurfaceTensionValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   3240
      TabIndex        =   20
      Top             =   2400
      Width           =   1452
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   1
      Left            =   600
      TabIndex        =   19
      Top             =   2880
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Cummins, et. al. (1983)"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   0
      Left            =   600
      TabIndex        =   18
      Top             =   2400
      Width           =   2415
   End
   Begin VB.Line Line2 
      X1              =   120
      X2              =   8400
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   600
      TabIndex        =   17
      Top             =   1800
      Width           =   2415
   End
   Begin VB.Label lblH2OSTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Surf. Tens."
      ForeColor       =   &H00000000&
      Height          =   400
      Left            =   3240
      TabIndex        =   16
      Top             =   1750
      Width           =   1455
   End
   Begin VB.Label lblH2OSTTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   4920
      TabIndex        =   15
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblH2OSTmaxTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmax"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   7320
      TabIndex        =   14
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblH2OSTminTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmin"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   6120
      TabIndex        =   13
      Top             =   1800
      Width           =   975
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   12
      Top             =   720
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   11
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   10
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   9
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Water Surface Tension Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   8
      Top             =   240
      Width           =   4095
   End
End
Attribute VB_Name = "frmWaterSurfaceTension"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastH2OSurfTensInputValue As String
Dim PastH2OSurfTensInputTemp As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.WaterSurfaceTension.CurrentSelection.choice
       Case WATER_SURF_TENSION_CORRELATION
          SelectedOption = 1
       Case WATER_SURF_TENSION_INPUT
          SelectedOption = 2
          txtwatersurfacetensionvalue(1).Text = PastH2OSurfTensInputValue
          txth2osurftenstemperature(1).Text = PastH2OSurfTensInputTemp
       Case Else
          frmWaterSurfaceTension.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    frmWaterSurfaceTension.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 2
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = WATER_SURF_TENSION_CORRELATION
       Case 2
          If Not PROPAVAILABLE(WATER_SURF_TENSION_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtwatersurfacetensionvalue(1).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = WATER_SURF_TENSION_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.WaterSurfaceTension.CurrentSelection.choice Then
       phprop.WaterSurfaceTension.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayWaterSurfaceTensionMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = WATER_SURF_TENSION_INPUT Then
       Call DisplayWaterSurfaceTensionMainScreen(ValueToDisplayIndex)
    End If

    frmWaterSurfaceTension.Hide

End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastH2OSurfTensInputValue = txtwatersurfacetensionvalue(1).Text
    PastH2OSurfTensInputTemp = txth2osurftenstemperature(1).Text
End Sub

Private Sub Form_Load()

    If (DemoMode) Then cmdok.Enabled = False

  Call centerform_relative(contam_prop_form, Me)

End Sub

Private Sub lblH2OSurfTensmaximumT_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterSurfaceTension.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblH2OSurfTensminimumT_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterSurfaceTension.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblH2OSurfTensTemperature_Click(Index As Integer)
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterSurfaceTension.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterSurfaceTension.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblWaterSurfaceTensionValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterSurfaceTension.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0  'Correlation from Cummins and Westrick (1983)
          ErrorFlag = phprop.WaterSurfaceTension.correlation.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, "Water - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, "Water - Warning"
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.WaterSurfaceTension.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.WaterSurfaceTension.PreviousIndex
    hilight.WaterSurfaceTension.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtH2OSurfTensmaximumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtH2oSurftensmaximumT(Index), Temp_Text)

End Sub

Private Sub txtH2OSurfTensmaximumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 1 Then keyascii = 0
End Sub

Private Sub txtH2OSurfTensmaximumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtH2oSurftensmaximumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtH2oSurftensmaximumT(Index), flag_ok)

End Sub

Private Sub txtH2OSurfTensminimimumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 1 Then keyascii = 0
End Sub

Private Sub txtH2OSurfTensminimumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txth2osurftensminimumT(Index), Temp_Text)


End Sub

Private Sub txtH2OSurfTensminimumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txth2osurftensminimumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txth2osurftensminimumT(Index), flag_ok)


End Sub

Private Sub txtH2OSurfTensTemperature_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txth2osurftenstemperature(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterSurfaceTension.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If


End Sub

Private Sub txtH2OSurfTensTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtH2OSurfTensTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txth2osurftenstemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txth2osurftenstemperature(Index).Text = "" Then
       phprop.WaterSurfaceTension.input.temperature = -1E+25
       Call LostFocus_Handle(Me, txth2osurftenstemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txth2osurftenstemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txth2osurftenstemperature(Index).Text)) Then
          txth2osurftenstemperature(Index).Text = Temp_Text
          txth2osurftenstemperature(Index).SetFocus
           Call LostFocus_Handle(Me, txth2osurftenstemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txth2osurftenstemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.WaterSurfaceTension.input.temperature = CDbl(txth2osurftenstemperature(Index).Text)
          Else
             EnglishValue = CDbl(txth2osurftenstemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.WaterSurfaceTension.input.temperature = SIValue
          End If

       Else
       Call LostFocus_Handle(Me, txth2osurftenstemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
       Call LostFocus_Handle(Me, txth2osurftenstemperature(Index), flag_ok)

End Sub

Private Sub txtWaterSurfaceTensionValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtwatersurfacetensionvalue(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterSurfaceTension.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub txtWaterSurfaceTensionValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txth2osurftenstemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)

End Sub

Private Sub txtWaterSurfaceTensionValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtwatersurfacetensionvalue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtwatersurfacetensionvalue(Index).Text = "" Then
       phprop.WaterSurfaceTension.input.Value = -1#
       PROPAVAILABLE(WATER_SURF_TENSION_INPUT) = False
       Call LostFocus_Handle(Me, txtwatersurfacetensionvalue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtwatersurfacetensionvalue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtwatersurfacetensionvalue(Index).Text)) Then
          txtwatersurfacetensionvalue(Index).Text = Temp_Text
          txtwatersurfacetensionvalue(Index).SetFocus
          Call LostFocus_Handle(Me, txtwatersurfacetensionvalue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtwatersurfacetensionvalue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.WaterSurfaceTension.input.Value = CDbl(txtwatersurfacetensionvalue(Index).Text)
          Else
             EnglishValue = CDbl(txtwatersurfacetensionvalue(Index).Text)
             Call WSTENSI(SIValue, EnglishValue)
             phprop.WaterSurfaceTension.input.Value = SIValue
          End If

          PROPAVAILABLE(WATER_SURF_TENSION_INPUT) = True
       Else
           Call LostFocus_Handle(Me, txtwatersurfacetensionvalue(Index), flag_ok)
           Exit Sub
       End If
    End If
       Call LostFocus_Handle(Me, txtwatersurfacetensionvalue(Index), flag_ok)

End Sub

VERSION 5.00
Begin VB.Form frmWaterViscosity 
   Appearance      =   0  'Flat
   BackColor       =   &H00C0C0C0&
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Water Viscosity"
   ClientHeight    =   3555
   ClientLeft      =   570
   ClientTop       =   1590
   ClientWidth     =   8490
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "MS Sans Serif"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkTopic       =   "Form2"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   3555
   ScaleWidth      =   8490
   Begin VB.TextBox txtH2OViscositymaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFFFF&
      Height          =   285
      Index           =   1
      Left            =   7320
      TabIndex        =   7
      Text            =   "not visible"
      Top             =   2880
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtH2OViscosityminimumT 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   6240
      TabIndex        =   6
      Text            =   "not visible"
      Top             =   2880
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.TextBox txtH2OViscosityTemperature 
      Appearance      =   0  'Flat
      Height          =   285
      Index           =   1
      Left            =   5040
      TabIndex        =   5
      Top             =   2880
      Width           =   975
   End
   Begin VB.TextBox txtWaterViscosityValue 
      Appearance      =   0  'Flat
      Height          =   288
      Index           =   1
      Left            =   3240
      TabIndex        =   4
      Top             =   2880
      Width           =   1572
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   2
      Left            =   240
      TabIndex        =   3
      Top             =   2880
      Width           =   255
   End
   Begin VB.OptionButton Option1 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   2
      Top             =   2400
      Width           =   255
   End
   Begin VB.CommandButton cmdCancel 
      Appearance      =   0  'Flat
      Cancel          =   -1  'True
      Caption         =   "Cancel"
      Height          =   615
      Left            =   4920
      TabIndex        =   1
      Top             =   840
      Width           =   3495
   End
   Begin VB.CommandButton cmdOK 
      Appearance      =   0  'Flat
      Caption         =   "Accept Current Selected Viscosity"
      Height          =   615
      Left            =   4920
      TabIndex        =   0
      Top             =   120
      Width           =   3495
   End
   Begin VB.Shape Shape1 
      BorderWidth     =   2
      Height          =   1692
      Left            =   120
      Top             =   1680
      Width           =   8292
   End
   Begin VB.Label lblH2OViscositymaximumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   7320
      TabIndex        =   23
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblH2OViscosityminimumT 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   6240
      TabIndex        =   22
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblH2OViscosityTemperature 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   5040
      TabIndex        =   21
      Top             =   2400
      Width           =   972
   End
   Begin VB.Label lblWaterViscosityValue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   252
      Index           =   0
      Left            =   3240
      TabIndex        =   20
      Top             =   2400
      Width           =   1572
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "User Input"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   1
      Left            =   600
      TabIndex        =   19
      Top             =   2880
      Width           =   2415
   End
   Begin VB.Label lblSource 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      Caption         =   "Yaws, et. al. (1976)"
      ForeColor       =   &H00000000&
      Height          =   255
      Index           =   0
      Left            =   600
      TabIndex        =   18
      Top             =   2400
      Width           =   2415
   End
   Begin VB.Line Line2 
      X1              =   120
      X2              =   8400
      Y1              =   2160
      Y2              =   2160
   End
   Begin VB.Label Label4 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   600
      TabIndex        =   17
      Top             =   1800
      Width           =   2415
   End
   Begin VB.Label lblH2OViscLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "H2O Visc."
      ForeColor       =   &H00000000&
      Height          =   400
      Left            =   3240
      TabIndex        =   16
      Top             =   1750
      Width           =   1572
   End
   Begin VB.Label lblH2OViscTempLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Temp."
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   5040
      TabIndex        =   15
      Top             =   1800
      Width           =   972
   End
   Begin VB.Label lblH2OViscmaxTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmax"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   7320
      TabIndex        =   14
      Top             =   1800
      Width           =   975
   End
   Begin VB.Label lblH2OViscminTLabel 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Tmin"
      ForeColor       =   &H00000000&
      Height          =   252
      Left            =   6240
      TabIndex        =   13
      Top             =   1800
      Width           =   972
   End
   Begin VB.Line Line1 
      X1              =   120
      X2              =   4440
      Y1              =   600
      Y2              =   600
   End
   Begin VB.Shape Shape3 
      BorderWidth     =   2
      Height          =   1335
      Left            =   120
      Top             =   120
      Width           =   4335
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   2040
      TabIndex        =   12
      Top             =   720
      Width           =   2295
   End
   Begin VB.Label lblCurrentValues 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   2040
      TabIndex        =   11
      Top             =   1080
      Width           =   2295
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Source"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   1
      Left            =   240
      TabIndex        =   10
      Top             =   1080
      Width           =   1575
   End
   Begin VB.Label lblCurrentInformation 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Value"
      ForeColor       =   &H80000008&
      Height          =   255
      Index           =   0
      Left            =   240
      TabIndex        =   9
      Top             =   720
      Width           =   1575
   End
   Begin VB.Label Label6 
      Alignment       =   2  'Center
      Appearance      =   0  'Flat
      BackColor       =   &H00C0C0C0&
      Caption         =   "Current Water Viscosity Information"
      ForeColor       =   &H00000000&
      Height          =   255
      Left            =   240
      TabIndex        =   8
      Top             =   240
      Width           =   4095
   End
End
Attribute VB_Name = "frmWaterViscosity"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Dim PastH2OViscInputValue As String
Dim PastH2OViscInputTemp As String

Private Sub cmdCancel_Click()
    Dim SelectedOption As Integer   'Option selected permanently by the user (the option corresponding to the number on the main screen)

    Select Case phprop.WaterViscosity.CurrentSelection.choice
       Case WATER_VISCOSITY_CORRELATION
          SelectedOption = 1
       Case WATER_VISCOSITY_INPUT
          SelectedOption = 2
          txtwaterviscosityvalue(1).Text = PastH2OViscInputValue
          txth2oviscositytemperature(1).Text = PastH2OViscInputTemp
       Case Else
          frmWaterViscosity.Hide
          Exit Sub
    End Select

    If Not Option1(SelectedOption).Value Then Option1(SelectedOption).Value = True

    frmWaterViscosity.Hide
End Sub

Private Sub cmdok_Click()
    Dim OptionSelected As Integer
    Dim ValueToDisplayIndex As Integer
    Dim i As Integer

'*** Pass new selected value back to main screen
    For i = 1 To 2
        If Option1(i).Value Then
           OptionSelected = i
           Exit For
        End If
    Next i

    Select Case OptionSelected
       Case 1
          ValueToDisplayIndex = WATER_VISCOSITY_CORRELATION
       Case 2
          If Not PROPAVAILABLE(WATER_VISCOSITY_INPUT) Then
             MsgBox "User Input can not be selected without first entering a value", MB_ICONSTOP, "Error"
             txtwaterviscosityvalue(1).SetFocus
             Exit Sub
          End If
          ValueToDisplayIndex = WATER_VISCOSITY_INPUT
    End Select

    If ValueToDisplayIndex <> phprop.WaterViscosity.CurrentSelection.choice Then
       phprop.WaterViscosity.CurrentSelection.choice = ValueToDisplayIndex
       Call DisplayWaterViscosityMainScreen(ValueToDisplayIndex)
    ElseIf ValueToDisplayIndex = WATER_VISCOSITY_INPUT Then
       Call DisplayWaterViscosityMainScreen(ValueToDisplayIndex)
    End If

    frmWaterViscosity.Hide

End Sub

Private Sub Form_Activate()
    
  Call centerform_relative(contam_prop_form, Me)
    
    PastH2OViscInputValue = txtwaterviscosityvalue(1).Text
    PastH2OViscInputTemp = txth2oviscositytemperature(1).Text
End Sub

Private Sub Form_Load()

    If (DemoMode) Then cmdok.Enabled = False

  Call centerform_relative(contam_prop_form, Me)

End Sub

Private Sub lblH2OViscositymaximumT_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblH2OViscosityminimumT_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblH2OViscosityTemperature_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblSource_Click(Index As Integer)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

End Sub

Private Sub lblWaterViscosityValue_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ErrorFlag As Integer
    
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If

    If Button <> 2 Then Exit Sub

    Select Case Index
       Case 0  'Correlation from Yaws, et. al. (1976)
          ErrorFlag = phprop.WaterViscosity.correlation.error
    End Select

    If ErrorFlag = 0 Then Exit Sub

    If ErrorFlag < 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, "Water - Data Unavailable"
    End If

    If ErrorFlag > 0 Then
       MsgBox ErrorMsg(ErrorFlag), MB_ICONINFORMATION, "Water - Warning"
    End If

End Sub

Private Sub Option1_Click(Index As Integer)
    Dim i As Integer, SourceIndex As Integer

    SourceIndex = Index - 1
    If SourceIndex = hilight.WaterViscosity.PreviousIndex Then Exit Sub
    lblSource(SourceIndex).BackColor = &H800000
    lblSource(SourceIndex).ForeColor = &H80000005
    i = hilight.WaterViscosity.PreviousIndex
    hilight.WaterViscosity.PreviousIndex = SourceIndex
    If i = -1 Then Exit Sub
    If Option1(i + 1).Enabled = False Then Exit Sub
    lblSource(i).BackColor = &H80000005
    lblSource(i).ForeColor = &H80000008

End Sub

Private Sub txtH2OViscositymaximumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtH2oViscosityMaximumT(Index), Temp_Text)

End Sub

Private Sub txtH2OViscositymaximumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 1 Then keyascii = 0
End Sub

Private Sub txtH2OViscositymaximumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtH2oViscosityMaximumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txtH2oViscosityMaximumT(Index), flag_ok)


End Sub

Private Sub txtH2OViscosityminimimumT_KeyPress(Index As Integer, keyascii As Integer)
    If Index <> 1 Then keyascii = 0
End Sub

Private Sub txtH2OViscosityminimumT_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txth2oviscosityminimumT(Index), Temp_Text)

End Sub

Private Sub txtH2OViscosityminimumT_LostFocus(Index As Integer)
Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txth2oviscosityminimumT(Index))) Then
     Exit Sub
   End If

   flag_ok = True
  Call LostFocus_Handle(Me, txth2oviscosityminimumT(Index), flag_ok)

End Sub

Private Sub txtH2OViscosityTemperature_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txth2oviscositytemperature(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If


End Sub

Private Sub txtH2OViscosityTemperature_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       cmdok.SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
    
End Sub

Private Sub txtH2OViscosityTemperature_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txth2oviscositytemperature(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txth2oviscositytemperature(Index).Text = "" Then
       phprop.WaterViscosity.input.temperature = -1E+25
       Call LostFocus_Handle(Me, txth2oviscositytemperature(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txth2oviscositytemperature(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txth2oviscositytemperature(Index).Text)) Then
          txth2oviscositytemperature(Index).Text = Temp_Text
          txth2oviscositytemperature(Index).SetFocus
          Call LostFocus_Handle(Me, txth2oviscositytemperature(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txth2oviscositytemperature(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.WaterViscosity.input.temperature = CDbl(txth2oviscositytemperature(Index).Text)
          Else
             EnglishValue = CDbl(txth2oviscositytemperature(Index).Text)
             Call TEMPENSI(SIValue, EnglishValue)
             phprop.WaterViscosity.input.temperature = SIValue
          End If

       Else
          Call LostFocus_Handle(Me, txth2oviscositytemperature(Index), flag_ok)
          Exit Sub
       End If

    End If
       Call LostFocus_Handle(Me, txth2oviscositytemperature(Index), flag_ok)

End Sub

Private Sub txtWaterViscosityValue_GotFocus(Index As Integer)
  Call gotfocus_handle(Me, txtwaterviscosityvalue(Index), Temp_Text)
    If Option1(Index + 1).Enabled = True Then
       If Index = hilight.WaterViscosity.PreviousIndex Then Exit Sub
       Option1(Index + 1).Value = True
    End If
End Sub

Private Sub txtWaterViscosityValue_KeyPress(Index As Integer, keyascii As Integer)
    
    If keyascii = 13 Then
       keyascii = 0
       txth2oviscositytemperature(Index).SetFocus
       Exit Sub
    End If
    Call NumberCheck(keyascii)
   
End Sub

Private Sub txtWaterViscosityValue_LostFocus(Index As Integer)
    Dim msg As String, response As Integer
    Dim Answer As Integer
    Dim IsError As Integer
    Dim ValueChanged As Integer
    Dim EnglishValue As Double, SIValue As Double
    Dim flag_ok As Integer

   If (LostFocus_IsEvil(Me, txtwaterviscosityvalue(Index))) Then
     Exit Sub
   End If

   flag_ok = True

    If txtwaterviscosityvalue(Index).Text = "" Then
       phprop.WaterViscosity.input.Value = -1#
       PROPAVAILABLE(WATER_VISCOSITY_INPUT) = False
       Call LostFocus_Handle(Me, txtwaterviscosityvalue(Index), flag_ok)
       Exit Sub
    End If

    Call TextHandleError(IsError, txtwaterviscosityvalue(Index), Temp_Text)
    If Not IsError Then
       If Not HaveNumber(CDbl(txtwaterviscosityvalue(Index).Text)) Then
          txtwaterviscosityvalue(Index).Text = Temp_Text
          txtwaterviscosityvalue(Index).SetFocus
          Call LostFocus_Handle(Me, txtwaterviscosityvalue(Index), flag_ok)
          Exit Sub
       End If

       Call TextNumberChanged(ValueChanged, txtwaterviscosityvalue(Index), Temp_Text)

       If ValueChanged Then
          If CurrentUnits = SIUnits Then
             phprop.WaterViscosity.input.Value = CDbl(txtwaterviscosityvalue(Index).Text)
          Else
             EnglishValue = CDbl(txtwaterviscosityvalue(Index).Text)
             Call WVISENSI(SIValue, EnglishValue)
             phprop.WaterViscosity.input.Value = SIValue
          End If
          
          PROPAVAILABLE(WATER_VISCOSITY_INPUT) = True
       Else
          Call LostFocus_Handle(Me, txtwaterviscosityvalue(Index), flag_ok)
          Exit Sub
       End If
    End If
          Call LostFocus_Handle(Me, txtwaterviscosityvalue(Index), flag_ok)
End Sub

