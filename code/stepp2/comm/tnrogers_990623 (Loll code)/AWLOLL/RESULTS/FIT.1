      PROGRAM FIT_6a       

C  THIS IS THE LINEAR/SIMPLEX REFERENCE MODEL FOR THE TEST SET OF 8 CHEMICALS.
C  THIS PROGRAM IS MODIFIED FROM FIT_6.FOR BECAUSE I MOVED FRAGLIN, DS3, AND
C  TVAL INTO COMMON BLOCKS FOR INTEGRATION OF THE LINEAR LOOP INSIDE OF THE
C  SIMPLEX LOOP INSTEAD OF BEING PARALLEL

C   DATE MODIFIED:  2/10/97

C  WRITTEN BY ANDREW W. LOLL, NOVEMBER, 1996.       
C  THIS PROGRAM FITS ANTOINE CONSTANTS TO THE 75 UNIFAC FRAGMENT
C  ASSIGNMENTS FOR ORGANIC COMPOUNDS USING EITHER A SIMPLEX NON-LINEAR
C  REGRESSION ROUTINE OR GAUSSIAN ELIMINATION, DEPENDING ON THE MODEL.
C  THE INPUT FILE FITT95b.DAT CONTAINS A 
C  MAXIMUM OF 808 CHEMICALS FROM THE DIPPR801 1995ver DATABASE.  
C  THE OPTIONAL FILES NEEDED TO RUN THE PROGRAM, DEPENDING ON THE 
C  METHOD CHOSEN FOR DETERMINING THE FITTING SET(SEE MFIT BELOW) ARE:
C  *CVAL.DAT (C VALUE SEED VALUES)
C  *FITT.DAT (ALL 643 CHEMICALS FROM 1994ver. database)
C  *FITT95A.DAT (509 CHEMICALS IN TEMPERATURE RANGE OF 10-100 C)
C  *FITT95B.DAT (808 CHEMICALS IN TEMPERATURE RANGE OF 10-100 C)
C  *FAMGROUP.DAT (75 0/1 FLAGS TO CHOOSE WHICH UNIFAC FAMILY GROUPS
C   TO FIT)
C  *SINGLE.DAT (CAS#s FOR CUSTOM FITTING SETS)
C  *EXCLUDE.DAT (CAS#s FOR CHEMICALS TO EXCLUDE FROM FITTING SET
C   WHEN DOING AN OVERALL OR SEVERAL FAMILY GROUP FIT)             
C  *FRAGMENT.DAT (FRAGMENT#s TO PICK ALL CHEMICALS WITH THOSE
C   FRAGMENTS; FOR A SEQUENTIAL TYPE FIT)
C  *TSEED216.DAT (USER SUPPLIED SEED GUESSES FOR A AND B)
C  *UNIFACT.DAT (CHEMICAL SET BREAKDOWN LIST BUILT BY MIKE MILLER, 
C   ANDREW LOLL, AND JEFF JANES)


C***********************VARIABLE LIST****************************
C
C  CAS - HOLDS THE CAS# FOR EACH CHEMICAL BREAKDOWN IN THE 
C        UNIFAC.DAT FILE.
C  CAS2 - HOLDS THE SUBSET CAS# FROM UNIFAC.DAT FOR THE MFIT=3
C         OPTION.
C  CFIT - SWITCH SPECIFIES WHETHER TO USE FAMILY GROUP C VALUE MODEL
C  CHEM - CHEMICAL COUNTER USED FOR OUTPUT TO STATS.OUT
C  CINP - HOLDS C VALUE DATA FROM CVALUE.DAT
C  CMAX - THE TOTAL NUMBER OF CHEMICALS BEING OPTIMIZED ON THE
C         CURRENT RUN.
C  CSET - HOLDS THE SEED ARRAY POSITION OF THE C CONSTANT FOR EACH
C         CHEMICAL
C  ECOUNT - # OF CHEMICALS IN THE INPUT FILE.
C  EXCLUDE - HOLDS THE CAS#S FROM EXCLUDE.DAT TO BE REMOVED FROM
C            THE FITTING SET IN GETFITT.
C  FMGRP - HOLDS FAMILY GROUP FOR EACH COMPOUND
C  FRAG - HOLD ALL OF THE FRAGMENT BREAKDOWN DATA FROM UNIFAC.DAT
C  FRAGMENT - HOLDS THE FRAGMENTS TO SEARCH FOR IN SUBROUTINE GETFITT
C             FROM INPUT FILE FRAGMENT.DAT
C  FRAGNEW - HOLDS THE FRAGMENT BREAKDOWN DATA IN ARRAY LINKED TO 
C            THE EXPERIMENTAL DATA
C  FTOL - THE RELATIVE TOLERANCE CRITERIA WHICH SIMPLEX USES TO
C         DETERMINE CONVERGENCE
C  FTYPE - SWITCH DETERMINES WHETHER TO USE SIMPLEX OR LINEAR SOLVER
C  GROUP - THE UNIFAC SUBGROUP# (1-115).
C  HCAS -  CAS# HEADER FOR UNIFAC.TXT
C  HDUM - ARRAY HOLDING HEADER INFO FOR GROUP NUMBERS
C  HFORM - 'FORMULA' HEADER FOR UNIFAC.TXT
C          LINKED TO EXPERIMENTAL DATA
C  IREST - RESTART FLAG TO ALLOW CONTINUATION OF A RUN AT THE POINT 
C          IT WAS STOPPED.
C          IREST = 0 MEANS NO RESTART
C          IREST = 1 MEANS CONTINUE PREVIOUS RUN
C  ISUB -  FLAG INDICATES WHETHER THE NEW SET OF INITIAL GUESSES WILL 
C          REPLACE THE WORST CASE IN THE RESTART DATASET.
C          ISUB = 0 MEANS USE RESTART VALUES
C          ISUB = 1 MEANS SUBSTITUTE NEW GUESSES
C  MAX - HOLDS THE NUMBER OF (DATA POINTS*2) TO BE READ IN FOR EACH 
C        CHEMICAL FROM DIPPR*.DAT
C  MAXFCN - THE MAXIMUM # OF ITERATIONS THAT SIMPLEX WILL RUN TO 
C           CONVERGE THE OBJECTIVE FUNCTION
C  MFIT - FLAG DETERMINES WHAT DATA IS TO BE FITTED
C  MPAR - THE # OF PARAMETERS TO BE OPTIMIZED (NPAR*2)
C  NCOMP - NUMBER OF CHEMICALS IN UNIFAC.TXT
C  NN - THE # OF PARAMETERS TO BE OPTIMIZED( = MPAR)
C  NPAR - THE # OF DIFFERENT SUBGROUPS TO BE OPTIMIZED
C  NPOINT - HOLDS THE CAS# AND # OF DATA POINTS FOR EACH CHEMICAL IN
C           DIPPR*.DAT
C  NUMB - HOLDS THE FRAG# FOR THE COMPRESSED SEED VECTOR.
C  NUMB2 - TEMPORARY ARRAY HOLDING NUMB ARRAY VALUES WHILE SORTING IN  
C          SUBROUTINE SORTSEED
C  PARASET - SUBROUTINE SORTS OUT THE PARTICULAR SUBGROUPS TO BE
C            OPTIMIZED FOR THE CHEMICAL BEING RUN FROM THE SUBSET
C            OF SUBGROUPS BEING OVERALL OPTIMIZED. 
C  S - INITIAL STEP SIZE.  WILL SELF-ADJUST
C  SEED - THE INITIAL SEED VALUES MATRIX FED TO SIMPLEX
C  SEED2 - TEMPORARY ARRAY HOLDING SEED ARRAY VALUES WHILE SORTING IN
C          SUBROUTINE SORTSEED
C  SMALL1 - TEMP VARIABLE IN SORTSEED
C  SMALL2 - TEMP VARIABLE IN SORTSEED
C  SMSEED - TEMP VARIABLE IN SORTSEED
C  SMSEED - TEMP VARIABLE IN SORTSEED
C  TP - ARRAY HOLDS EXPERIMENTAL T AND P DATA FROM DIPPR*.DAT
C  TSEED - HOLDS THE TRUE SEED VALUES FOR EACH FRAGMENT AS READ IN
C          FROM TSEED.TXT
C  TVAL - HOLDS C VALUE ASSIGNMENT FOR EACH CHEMICAL
C  XX - THE PARAMETERS TO BE OPTIMIZED
C              
C****************************************************************

      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      PARAMETER(DD = 220)
      INCLUDE 'param.for'
      DOUBLE PRECISION SEED, TP, TSEED, FTOL, FVALUE, RWKSP(2800),
     &        LTOL,FVAL0,ALIN(115),BLIN(115),CINP,TVAL(808),X(DD),
     &        REFCOEFF(5),REFC(75,5)
      INTEGER ITER,IPASS,IREST,ISUB,DS2(75),CS,I,J,K,NPRNT,RCAS(75),
     &        RP(75),RTYPE,DS3(75),RCOUNT,IOF,LSINDEX
      CHARACTER*20 HFORMU, HFORM 
      CHARACTER*4  HDUM(22),HCAS
      CHARACTER*2 FM1(660), FMGRP(808), FMGRP2(75),FMREF
      DIMENSION NP1(808,2),FRAGLIN(808,115),FRAGMENT(115),TSEED(115,2)
      EXTERNAL FCN, DUMPOL, VMODEL, PARASET, GETFITT, SUMUP,FAMCHEK,
     &         GETCALC,MFIT3,SORTSEED,LINPREP,LINPAC,SORTC
      COMMON /B/ SEED(DD),ECOUNT,NUMB(DD),CSET(808)
      COMMON /C/ TP(808, 900),NPOINT(808,2),CMAX
      COMMON /D/ NUMGRP(DD)      
      COMMON /E/ FMGRP, CS(808)
      COMMON /F/ NCOMP, FRAG(1450, 25), CAS(1450)
      COMMON /G/ CINP(100),MFIT,CFIT
      COMMON /H/ FRAGNEW(808,25)
      COMMON /J/ CPAR0,MPAR
      COMMON /K/ FMGRP2
      COMMON /L/ NPAR
      COMMON /M/ MAXFRG,FRAGMENT,NOFRG(115),MPMAX
      COMMON /N/ ALIN, BLIN, FTYPE,AC
      COMMON /O/ IOF(8),NPRNT, ITER, IPASS, IREST, ISUB
      COMMON /P/ DS2,RP,RCOUNT,REFC,DS3,FRAGLIN
      COMMON /Q/ TVAL
      COMMON /WORKSP/RWKSP

C***********************INITIALIZATION***************************

C  THE INFO BELOW ARE THE INITIAL SETTINGS FOR THE SIMPLEX      
C  ROUTINE. 
      
      FTOL = 1.E-12
      LTOL = 5.E-09
      MAXFCN = 200000
      S = 5.
      IREST = 0
      ISUB = 0
C      IREST = 1
C      ISUB = 1
C      NPRNT = 5
      NPRNT = 1000
C      ECOUNT = 808
      ECOUNT = 8 
      CHEM = 0
      PASS = 0
      LSINDEX = 0     

      INCLUDE 'settings.for'

C      IOF(6) = 10
      IOF(8) = 11

      CALL IWKIN(2800)

C***********************OPEN INPUT/OUTPUT FILES******************

C  THE FILES UNI*.TXT ARE VERIFICATION FILES TO MAKE SURE THE 
C  PROGRAM IS RUNNING CORRECTLY.

      OPEN (52, FILE='predict.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      OPEN (54, FILE='stats.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      OPEN (55, FILE='unifact.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      OPEN (57, FILE='uni3.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      OPEN (71, FILE='fitt.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      OPEN (72, FILE='stat2.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      OPEN (73, FILE='results.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
C      OPEN (61, FILE='fitt95b.dat', STATUS='UNKNOWN', 
C     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      OPEN (61, FILE='fittr.ref', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
C      OPEN (61, FILE='fitt.ex', STATUS='UNKNOWN', 
C     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')

      IF (MFIT.NE.4) THEN
C        OPEN (51, FILE='unifact.dat', STATUS='UNKNOWN', 
C     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	 OPEN (51, FILE='unifacr.ref', STATUS='UNKNOWN', 
     &        ACCESS='SEQUENTIAL', FORM='FORMATTED')
	OPEN (56, FILE='tseed216.dat', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      ELSE
C        OPEN (56, FILE='tseed324.dat', STATUS='UNKNOWN', 
C     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	 OPEN (76, FILE='fragment.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      END IF
      
      IF ((MFIT.NE.4).OR.(MFIT.NE.6)) THEN
	 OPEN (62, FILE='famgroup.dat', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	 OPEN (66, FILE='fragment.dat', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	 OPEN (58, FILE='uni4.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      END IF
      OPEN (63, FILE='exclude.dat', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      OPEN (67, FILE='cvalue.dat', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')

C***********************INPUT DATA*******************************
     
C  READS IN THE HEADER INFO OF THE BREAKDOWN FILE

      IF (MFIT.NE.4) THEN
	 I = 0
	 READ (51, *) HCAS, HFORM, (HDUM(K),K=1,22)
116      I = I + 1

C  READS IN THE BREAKDOWN INFO FROM UNIFACT.DAT

	 READ (51, *, END=118) CAS(I), HFORMU,(FRAG(I,K),K=1,22)
	 GOTO 116
118      NCOMP = I - 1
	 CLOSE(51)
      END IF

C  THE FOLLOWING CALL READS IN THE EXPERIMENTAL DATA FOR ALL OF 
C  DESIRED CHEMICALS.

      CALL GETFITT(TP, NPOINT, CMAX, NP1, FM1,MAXFRG)
      PRINT *, 'CMAX = ', CMAX
      PRINT *, 'MAXFRG = ',MAXFRG
      CLOSE(54)
      CLOSE(61)
      CLOSE(71)

C  THE FOLLOWING BLOCK READS IN AND MATCHES UP THE CAS NUMBERS FOR ALL
C  OF THE REFERENCE COMPOUNDS PRESENT IN THE FITTING SET. (RTYPE=1 ONLY)

      IF(RTYPE.EQ.1) THEN
C        OPEN (69, FILE='ref1.dat', STATUS='UNKNOWN', 
C     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	 OPEN (69, FILE='ref2.dat', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	 DO 810, A=1,75
	    READ(69,*) RCAS(A), FMREF, DS3(A)
810      CONTINUE
	 CLOSE (69)
	 RCOUNT = 0
	 DO 820, B=1,75
	   DO 830, C=1,CMAX
	      IF(RCAS(B).EQ.NPOINT(C,1)) THEN
		 RCOUNT = RCOUNT + 1
		 RP(RCOUNT) = C
		 DS3(RCOUNT) = B
C                 PRINT *, B, RCAS(B),RP(B)
		 GOTO 820
	      END IF
830       CONTINUE
820     CONTINUE
C       OPEN (65, FILE='vpc.dat', STATUS='UNKNOWN', 
C     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	OPEN (65, FILE='vpc.ref', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	MC = 0
	DO 840, M=1,808
	   READ(65,*) CASREF,DUMMY,(REFCOEFF(N),N=1,5)
	   DO 850, MA = 1,RCOUNT
	      IF (RCAS(DS3(MA)).EQ.CASREF) THEN
		 MC = MC + 1
		 DO 860, MB=1,5
		    REFC(MA,MB)=REFCOEFF(MB)
860              CONTINUE
		 IF (MC.EQ.RCOUNT) THEN
		    GOTO 845
		 END IF
		 GOTO 840
	      END IF
850        CONTINUE
840     CONTINUE
845     CONTINUE
	CLOSE (65)
      END IF

C  THE FOLLOWING BLOCK REORGANIZES THE CHEMICAL FRAGMENT BREAKDOWN 
C  MATRIX SO THAT IT IS DIMENSIONED BY P X 113 WHERE P IS THE 
C  NUMBER OF CHEMICALS IN THE FITTING SET.  USED IN LINEAR SOLVER.

      IF(MFIT.EQ.1.AND.FTYPE.GT.0) THEN
	 FRAGMENT(1) = 1
	 FRAGMENT(2) = 2
	 FRAGMENT(3) = 3
	 FRAGMENT(4) = 4
	 FRAGMENT(5) = 5
	 FRAGMENT(6) = 6
	 MAXFRG = 6
	 GOTO 5510
      END IF
5500  CONTINUE
      IF (RTYPE.EQ.1) THEN
	 GOTO 5510
      END IF
5540  CONTINUE
      OPEN (79, FILE='fraglin.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      PA = 0
      IF (FTYPE.GE.1) THEN
	 DO 4005, I = 1,CMAX
	    PA = FRAGNEW(I,2)*2+1
	    DO 4010, J=1, MAXFRG
	       DO 4015, K=3,PA,2     
		  IF(MFIT.EQ.1) THEN
		     IF(FRAGNEW(I,K).EQ.FRAGMENT(J)) THEN
			FRAGLIN(I,J) = FRAGNEW(I,K+1)
			BLIN(J) = TSEED(FRAGNEW(I,K),2)
			ALIN(J) = 0.
C                        PRINT *,'J: ',J,'BLIN: ',BLIN(J)
			GOTO 4025
		     END IF
		  ELSEIF(FRAGNEW(I,K).EQ.FRAGMENT(J)) THEN
		     FRAGLIN(I,J) = FRAGNEW(I,K+1)
		     BLIN(J) = TSEED(FRAGNEW(I,K),2)
		     GOTO 4025
		  END IF
4015           CONTINUE
	       FRAGLIN(I,J) = 0
4025           CONTINUE               
4010        CONTINUE
4005     CONTINUE 

      PRINT *, 'MAXFRG: ',MAXFRG
      DO 4090, I = 1,CMAX
	 WRITE(79,4001) NPOINT(I,1),(FRAGLIN(I,J), J=1,MAXFRG)
C         PRINT *, NPOINT(I,1)
4090  CONTINUE
C  4001  FORMAT(1X,115(2X,I3))                 
4001  FORMAT(1X,I8,10(23(',',I2)),/)                  
      END IF
      CLOSE (79)
      IF (FTYPE.GE.1) THEN
	 AC = MAXFRG*2
	 CALL LINPREP(ALIN,BLIN)
	 IF(FTYPE.EQ.2.AND.RTYPE.EQ.0) THEN 
	    GOTO 5530
	 ELSEIF (FTYPE.EQ.2.AND.RTYPE.EQ.1) THEN
	    GOTO 5570
	 END IF
	 
	 GOTO 1020
      END IF
      
C***********************DATA SORT********************************      

C  THE FOLLOWING ROUTINE SORTS THROUGH THE UNIFAC BREAKDOWN MATRIX
C  AND MATCHES THE BREAKDOWN OF EACH CHEMICAL UP WITH ITS 
C  RESPECTIVE EXPERIMENTAL DATA. 

5510  CONTINUE
      IF ((MFIT.NE.3).OR.(MFIT.NE.4)) THEN
	 DO 125 I = 1, CMAX
	    DO 120 K = 1, NCOMP
	       IF (NPOINT(I, 1).EQ.CAS(K)) THEN 
		
C  READS IN BREAKDOWN INFO FOR EACH CHEMICAL IF IT MATCHES UP.                     
		  DO 115, J = 1,22
		     FRAGNEW(I, J) = FRAG(K,J)
115               CONTINUE
		  GOTO 125
	       END IF
120         CONTINUE
125      CONTINUE
	 DO 130, I = 1, CMAX
	    WRITE (55, 1002) NPOINT(I,1), (FRAGNEW(I,K),K=1,22)
130      CONTINUE
	 CLOSE(55)
      END IF

      IF(MFIT.EQ.1.AND.FTYPE.GE.1.AND.RTYPE.NE.1) GOTO 5500

C***********************TRUE SEED INPUT**************************      

C  THIS ROUTINE IDENTIFIES WHICH FRAGMENTS ARE IN EACH COMPOUND 
C  AND REPLACES THE DEFAULT SEED VALUE WITH THE TRUE SEED VALUE 
C  FROM TSEED.DAT.
C  SEED(GROUP*3-2) = A CONST
C  SEED(GROUP*3-1) = B CONST
C  SEED(GROUP*3) = C CONST
      
C  THE COMMENT LINES WITH 3 STARS ARE THE LINES THAT  NEED TO BE
C  REINSTATED IN ORDER TO OPTIMIZE ALL 3 PARAMETERS.  OTHERWISE, THE
C  PROGRAM WILL READ IN AND SORT ONLY THE A AND B CONSTANTS.

C  READ IN TSEED(226) or TSEED(226).      

5530  CONTINUE
      IF (MFIT.EQ.4) THEN 
	 GOTO 1885
      END IF     
      IF (FTYPE.LT.1.AND.MFIT.NE.4.OR.RTYPE.EQ.1) THEN
	 DO 5535, G=1,115
	    READ(56, *) TSEED(G,1),TSEED(G,2)
5535     CONTINUE
	 CLOSE(56)
      END IF
      IF (RTYPE.EQ.1.AND.FTYPE.EQ.1) GOTO 5540 
      IF (RTYPE.EQ.1.AND.FTYPE.EQ.2) GOTO 5540 
5570  CONTINUE
      NPAR = 0
      BADD = 0           
      DO 180, A = 1, CMAX
C         PRINT *, "FRAGNEW(A, 2) = ", FRAGNEW(A, 2)
	 N = FRAGNEW(A, 2)*2 +1
	 DO 160, C = 3, N, 2
	    NPAR = NPAR + 1
C            PRINT *, NPAR
C***           BADD = NPAR*3 - 2 
	    BADD = NPAR*2 - 1 
	    GROUP = FRAGNEW(A, C)
C  THE FOLLOWING DO LOOP CHECKS FOR REPETITIVE FRAGMENT GROUPS.                

C***            DO 170, I=1, BADD, 3
	    DO 170, I=1, BADD, 2
	       AR = (I+1)/2
	       IF (GROUP.EQ.NUMB(I).AND.RTYPE.EQ.0) THEN
		  NPAR = NPAR - 1
		  GOTO 160
	       ELSEIF (GROUP.EQ.NUMB(AR).AND.RTYPE.EQ.1) THEN
		  NPAR = NPAR - 1
		  GOTO 160
	       END IF
170         CONTINUE                
	    IF (RTYPE.NE.1) THEN
	       NUMB(BADD) = GROUP
	       NUMB(BADD+1) = GROUP
	    ELSEIF (RTYPE.EQ.1) THEN
	       NUMB(NPAR) = GROUP
	    END IF
	    IF (FTYPE.NE.2.AND.RTYPE.NE.1) THEN     
	       SEED(BADD) = TSEED(GROUP,1)
	       SEED(BADD+1) = TSEED(GROUP,2) 
	    ELSEIF (FTYPE.EQ.2.AND.RTYPE.EQ.1) THEN
               IF (LSINDEX.LT.1) THEN
	          SEED(NPAR) = TSEED(GROUP,2)
               ELSE
	          SEED(NPAR) = BLIN(GROUP)
               END IF
	    END IF
160      CONTINUE
180   CONTINUE

      CALL SORTSEED(NUMB, SEED, NPAR)
C      IF (FTYPE.NE.2) THEN
C	 DO 4000, I = 1, NPAR*2-1, 2
C           WRITE(52, *) NUMB(I), I, NPAR, SEED(I), 
C     &           SEED(I+1)
C	   PRINT *, NUMB(I), I, SEED(I), SEED(I+1)
C4000     CONTINUE
C      ELSEIF (RTYPE.EQ.1.AND.FTYPE.EQ.2) THEN
C	 DO 4006, I = 1, NPAR
C	   PRINT *, NUMB(I), I, SEED(I)
C4006     CONTINUE
C      END IF

C      PRINT *, 'NPAR*2 = ', NPAR*2      

C***********************INITIAL C VALUE SEEDS********************      
C  ADDS THE C VALUE INITIAL SEEDS TO THE SEED(xx) ARRAY

5520  CONTINUE
      IF(FTYPE.EQ.2.AND.RTYPE.NE.1) THEN
	 NPAR = 0
      END IF
5525  CONTINUE
      IF (CFIT.EQ.1.OR.CFIT.NE.1) THEN
	 CF = 0
	 CG = 0
	 CPAR0 = NPAR*2
	 CPAR = NPAR*2
	 IF (RTYPE.EQ.1.AND.(FTYPE.EQ.0.OR.FTYPE.EQ.2)) THEN
	    CPAR = 0
	 END IF
C        PRINT *, 'CPAR = ',CPAR, 'CMAX = ',CMAX
	 DO 1840, CC= 1, CMAX
	    CPAR = CPAR +1
	    CF = CF + 1
	    CG = CG + 1
	    CE = CPAR0
	    DO 1850, CD= 1, CF-1
	       CE = CE + 1
	       IF (FMGRP(CD).EQ.FMGRP(CF)) THEN
		  CSET(CC) = CSET(CD)
		  CPAR = CPAR-1
		  CG = CG-1
		  GOTO 1840
	       END IF
1850        CONTINUE
	    IF (RTYPE.LT.1.AND.CFIT.EQ.1) THEN
	       SEED(CPAR)=TVAL(CC)
	    END IF
	    CSET(CC) = CPAR
	    FMGRP2(CG) = FMGRP(CC)
	    DS2(CG) = CS(CC)
C           WRITE(52,*) 'SUBGRP: ', FMGRP(CC), ',  ', SEED(CPAR)
C     &                ,CC
C           PRINT *, 'SUBGRP: ', FMGRP(CC), ',  ', SEED(CPAR),CC,
C     &               NPOINT(CC,1), CS(CC)
C           PRINT *, 'FMGRP2(CG): ',FMGRP2(CG),CG,'DS2(CG): ',DS2(CG),
C     &                CG
1840     CONTINUE
	 MPAR = CPAR
C        PRINT *,'BEFORE CALL...'
	 CALL SORTC(CMAX,SEED,DS2,FMGRP2,CSET)
C        PRINT *, 'AFTER CALL...'
C        DO 4450, K = CPAR0+1,MPAR
C           PRINT *, K-CPAR0,'SUBGRP: ', FMGRP2(K-CPAR0), ',  ', 
C     &               SEED(K),',',DS2(K-CPAR0)
C4450     CONTINUE
      ELSEIF(CFIT.EQ.0.AND.FTYPE.NE.2) THEN
	 MPAR = NPAR*2
C***         MPAR = NPAR * 3
      END IF
      IF (RTYPE.EQ.1.AND.FTYPE.EQ.0) THEN
	 MPAR = NPAR*2
      ELSEIF (CFIT.EQ.0.AND.FTYPE.EQ.2) THEN
C         PRINT *, 'RP(1): ',RP(1),'CSET(4): ',CSET(4)
	 MPAR = NPAR
      END IF
C****************************************************************      

      PRINT *, ' RCOUNT = ',RCOUNT
      PRINT *, ' MPAR = ', MPAR

C  WRITES THE INITIAL SEED VALUES TO UNI3.TXT FOR VERIFICATION.      
     
      IF(LSINDEX.GT.0) THEN
	 GOTO 2100
      END IF 
C***      WRITE(57, 1003)
C***      WRITE(57, 1016) 
      WRITE(57, 2003)
      WRITE(57, 2016) 
      
      IF (CFIT.EQ.1.AND.FTYPE.NE.2) THEN
	 DO 250, FNUM = 1, 115
	    DO 260, SPUD = 1, CPAR0
	       IF (FNUM.EQ.NUMB(SPUD)) THEN
C***               WRITE(57, 1004) FNUM,SEED(SPUD),SEED(SPUD+1),
C***     &                     SEED(SPUD+2)
		  WRITE(57, 2004) FNUM, SEED(SPUD), SEED(SPUD+1)
		  GOTO 250
	       END IF
260         CONTINUE

	    Z = 1.
	    WRITE(57, 2005) FNUM        

250      CONTINUE
      
	 WRITE (57,'(//)')
	 WRITE (57, 2017)        
	 WRITE (57, 2018)        
	 PRINT *, 'CPAR0: ',CPAR0,'MPAR: ',MPAR
	 DO 1870, CG = CPAR0+1, MPAR
	    PRINT *, CG,FMGRP2(CG-CPAR0), SEED(CG)
	    WRITE(57, 2019) FMGRP2(CG-CPAR0), SEED(CG)
1870     CONTINUE
      ELSE IF(CFIT.EQ.1.AND.FTYPE.EQ.2) THEN
	 DO 1900, CG = 1, MPAR
	    WRITE(57, 2019) FMGRP2(CG-CPAR0), SEED(CG)
1900     CONTINUE
      ELSE IF(CFIT.EQ.0) THEN
	 DO 1890, FNUM = 1, 115
	    DO 1895, SPUD = 1, 230
	       IF (FNUM.EQ.NUMB(SPUD)) THEN
		  IF (FTYPE.NE.2) THEN
		     WRITE(57,2004) FNUM,SEED(SPUD),SEED(SPUD+1)
		     GOTO 1890
		  ELSEIF (FTYPE.EQ.2) THEN
		     WRITE(57,2004) FNUM,SEED(SPUD)
		     GOTO 1890
		  END IF
	       END IF
1895        CONTINUE
	    WRITE(57, 2005) FNUM        
1890     CONTINUE
      END IF
C NOTE: THIS LOOP IS FOR FITTING THE OVERALL ANTOINE CONSTANTS.  RIGHT
C       NOW I AM ASSIGNING THE INPUT VALUES DIRECTLY TO THE SEED ARRAY.

1885  CONTINUE
      IF (MFIT.EQ.4) THEN      
C        READ(56, *) (SEED(I), I = 1, 3)
	 WRITE(57, *) (SEED(K), K=1, 3)
	 MPAR = 3 
      END IF
C      CLOSE(56)
      CLOSE(57)
2100  CONTINUE      
      IF (MFIT.EQ.6) THEN
	 CALL GETCALC(MPAR, SEED, MTYPE,CFIT,FTYPE,MAXFRG,NPAR)
	 GOTO 1020
      END IF
C***********************CALL TO THE SIMPLEX ROUTINE**************
      FTOL = 1.E-15
      LTOL = 5.E-09
      S = 10.0
      MAXFCN = 500000
C      OPEN (91, FILE='sumup.out', STATUS='UNKNOWN', 
C     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      CALL DUMPOL(FCN, MPAR, SEED, S, FTOL, MAXFCN, X, FVALUE)
C      CLOSE(91)
C***************FTYPE=2 AND CONVERGENCE CRITERIA*****************

C  THIS BLOCK ASSIGNS THE C VALUES FROM SIMPLEX 
      
      LSINDEX = LSINDEX + 1
      PRINT *, 'The Number of Loops Completed:  ',LSINDEX
      
      IF (FTYPE.EQ.2) THEN
	 IF (LSINDEX.GT.1) THEN
	    IF (FVALUE.LT.LTOL*(1.+ABS(FVAL0))) THEN
	       GOTO 4620
	    END IF
	 END IF 
	 FVAL0 = FVALUE  
         IF (RTYPE.NE.1) THEN
	    DO 4600, J=1,CMAX
	       DO 4610, K=1,MPAR
	          IF(CSET(J).EQ.K) THEN
		     TVAL(J) = X(K)
C                     PRINT *,J,' TVAL(J): ',TVAL(J)
	          END IF
4610           CONTINUE
4600        CONTINUE
         ELSEIF (RTYPE.EQ.1) THEN
            DO 4630, AE= 1,NPAR
               BLIN(AE) = X(AE)
4630        CONTINUE
            DO 4640, AF=NPAR+1,115
               BLIN(AF) = 0.0
4640        CONTINUE
         END IF
	 CALL LINPREP(ALIN,BLIN)
         IF (RTYPE.NE.0) THEN
	    GOTO 5570
         ELSEIF (RTYPE.EQ.0) THEN
            GOTO 5520
         END IF
      END IF
4620  CONTINUE
C***********************OUTPUT BLOCK*****************************

C  THIS BLOCK OUTPUTS THE SIMPLEX RESULTS TO RESULTS.OUT

      WRITE(73, 1007) 
      WRITE(73, 1013)
      WRITE(73, 1014) FVALUE
      WRITE(*, 1014) FVALUE
      IF (MFIT.EQ.4) THEN 
	 WRITE(73, 3003)
	 WRITE(73, 3016)
	 WRITE(73, 3004) NPOINT(1,1), X(1), X(2), X(3)
	 GOTO 1875
      END IF
C***      WRITE(73, 1003)
C***      WRITE(73, 1016)
      WRITE(73, 2003)
      WRITE(73, 2016)

      IF (CFIT.EQ.1.AND.FTYPE.NE.2) THEN      
	 DO 300, FNUM = 1, 115
      
C***            DO 320, STUD = 1, 324
	    DO 320, STUD = 1, CPAR0
	       IF (FNUM.EQ.NUMB(STUD)) THEN
C***                  WRITE(73, 1004) FNUM, X(STUD), X(STUD+1), X(STUD+2)
		  WRITE(73, 2004) FNUM, X(STUD), X(STUD+1)*100.
		  GOTO 300
	       END IF

320         CONTINUE

C***            WRITE(73, 1005) FNUM       
	    WRITE(73, 2005) FNUM        

300      CONTINUE

	 WRITE (73,'(//)')
	 WRITE (73, 2017)        
	 WRITE (73, 2018)        
	 CL = 0
	 DO 1880, CH = CPAR0+1, MPAR
	    CL = CL+1 
	    WRITE(73, 2019) FMGRP2(CL), X(CH)*10.
1880     CONTINUE
      ELSE IF(CFIT.EQ.1.AND.FTYPE.EQ.2) THEN
	 DO 1910, CH = 1, MPAR
	    WRITE(73, 2019) FMGRP2(CH), X(CH)*10.
1910     CONTINUE

      ELSE IF(CFIT.EQ.0.AND.RTYPE.NE.1) THEN
	 DO 1860, FNUM = 1, 115
	    DO 1865, STUD = 1, 230
	       IF (FNUM.EQ.NUMB(STUD)) THEN
		  WRITE(73, 2004) FNUM, X(STUD), X(STUD+1)*100.
		  GOTO 1860
	       END IF
1865         CONTINUE

C***            WRITE(73, 1005) FNUM       
	    WRITE(73, 2005) FNUM        
1860      CONTINUE
      ELSE IF(CFIT.EQ.0.AND.RTYPE.EQ.1) THEN
	 DO 1940, FNUM = 1, 115
	    DO 1950, STUD = 1,NPAR 
	       IF (FNUM.EQ.NUMB(STUD)) THEN
		  WRITE(73, 2004) FNUM, ALIN(STUD),X(STUD) 
		  GOTO 1940
	       END IF
1950        CONTINUE
	    WRITE(73, 2005) FNUM        
1940     CONTINUE
      
      END IF
1875  CONTINUE 
      CLOSE(73)
C***********************FORMAT STATEMENTS************************

1001  FORMAT (A8,',',A16, 22(',',A4))
1002  FORMAT (I8,',', 22(',',I4))
1003  FORMAT (1X,' FRAG #',2X, '      A      ', 2X, '      B      ',
     &        2X, '      C      ')
1004  FORMAT (1X, I7, 3(2X, F13.8))
1005  FORMAT (1X, I7, 3(2X, '     NF     '))     
1006  FORMAT (1X, 'These chemicals are not in the UNIFAC breakdown',
     &' list:',//,2X,I8,2X,A16)
1007  FORMAT (1X, 'Andrew W. Loll, 11/96',/)      
C1007  FORMAT (1X, 'Andrew W. Loll, ',I2.2,1H/,I2.2,1H/,I2.2,/)      
1013  FORMAT (1X, 'The Results for the SIMPLEX Non-Linear Regression', 
     &        ' of the Antoine Constants are: ',//)
1014  FORMAT (1X, 'The Objective Function for this Run is:  ', E15.5,  
     &        //)
1016  FORMAT (1X, '-------', 2X, 3('-------------',2X),/) 
2003  FORMAT (1X,' FRAG #',2X, '      A      ', 2X, '      B      ')
2004  FORMAT (1X, I7, 2(2X, F13.8))
2005  FORMAT (1X, I7, 2(2X, '     NF     '))      
2016  FORMAT (1X, '-------', 2X, 2('-------------',2X),/) 
2017  FORMAT (1X, 'SUBGROUP', 2X, '  C VALUE   ')
2018  FORMAT (1X, '--------', 2X, '------------',/)
2019  FORMAT (1X, A8, 2X, F12.5)
3003  FORMAT (1X,'    CAS #   ',2X, '      A      ', 2X, '      B      ',
     &        2X, '      C      ')
3004  FORMAT (1X, I12, 3(2X, F13.8))
3016  FORMAT (1X,'------------', 2X, 3('-------------',2X),/) 
1020  CONTINUE      
      END
      
C***********************SUBROUTINE: FCN**************************

C  NEED TO GET SET UP WITH THE RIGHT VARIABLES AND COMMON BLOCKS, ETC.
      
      SUBROUTINE FCN (NN,XX,FF)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      DOUBLE PRECISION FF,TEMP,TSUMA,TSUMB,TSUMC,ALIN(115),PREF,
     &     BLIN(115),CINP,XX,RSUMA,RSUMB,RSUMC,REFC(75,5),REFP,TVAL(808)
      PARAMETER(DD = 220)
      INTEGER DS2(75),DS3(75),RP(75),NUMREF(DD),RTYPE,RCOUNT,
     &        FRAGLIN(808,115)
      DIMENSION XX(DD)
      EXTERNAL VMODEL,SUMUP,SUMREF,PARASET,WRITEITER,REFP
      COMMON /B/ SEED(DD),ECOUNT,NUMB(DD),CSET(808)
      COMMON /C/ TP(808,900),NPOINT(808,2),CMAX
      COMMON /D/ NUMGRP(DD)      
      COMMON /G/ CINP(100),MFIT,CFIT
      COMMON /L/ NPAR
      COMMON /N/ ALIN, BLIN, FTYPE,AC
      COMMON /P/ DS2,RP,RCOUNT,REFC,DS3,FRAGLIN
      COMMON /Q/ TVAL
      COMMON /R/ NUMREF
      
      INCLUDE 'settings.for'

C      OPEN (59, FILE='para.out', STATUS='UNKNOWN', 
C     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')

C      DO 6500, FT=1,75
C         PRINT *, FT, 'RP: ',RP(FT)
C6500  CONTINUE
      FF = 0.0
      NDAT = 0
      PASS = PASS+1
      CALL WRITEITER(PASS, DS2,XX, NN, NUMB)
      IF (PASS.GT.1) THEN
         CALL LINPREP(ALIN,BLIN)
      END IF
         
      DO 600, P = 1, CMAX

C  MAX IS THE NUMBER OF DATA POINTS(TEMP+PRESS) IN THE ARRAY TP(P, K).
C  THE 620 DO LOOP INCREMENTS BY 2 SO THAT K =2,4,ETC WILL ALWAYS BE
C  THE PRESSURES AND K-1 WILL ALWAYS BE THE TEMPERATURES.
C         PRINT *, 'P: ',P       
	 IF (MFIT.EQ.4) THEN
	    GOTO 630
	 END IF
	 IF (CFIT.EQ.1.AND.FTYPE.NE.2) THEN
	    NNN = NPAR*2
	 ELSE IF (CFIT.EQ.1.AND.FTYPE.EQ.2) THEN
	    NNN = AC
	 ELSE
	    NNN = NN
	 END IF        
C         PRINT *,'P: ',P,'RP: ',RP(CSET(P)),'CSET: ',CSET(P)    
	 CALL PARASET( NNN, P, NUMGRP,RP,NUMREF)
	 CALL SUMUP( P, NN, XX, TSUMA, TSUMB, TSUMC)
C**         CALL SUMUP( P, NN, XX, TSUMA, TSUMB)
	 RSUMA=1.
	 RSUMB=1.
	 RSUMC=1.
	 IF (RTYPE.EQ.1) THEN
C            PRINT *,P,RP(CSET(P)),CSET(P)
	    CALL SUMREF( P, NN, XX, RP,RSUMA, RSUMB, RSUMC)
C            PRINT *,P,RP(CSET(P)),CSET(P),RSUMA,RSUMB,RSUMC
	 END IF

630      IF (MFIT.EQ.4) THEN 
	    TSUMA = XX(1)
	    TSUMB = XX(2)
	    TSUMC = XX(3)
	 END IF         
C        PRINT *, NPOINT(P,1),TSUMA, TSUMB, TSUMC
C        PRINT *, NPOINT(RP(CSET(P)),1),RSUMA,RSUMB,RSUMC
	 MAX = NPOINT(P, 2)*2
	 DO 620, K = 2, MAX, 2     
C            PRINT *,P
	    TEMP = TP(P, K-1)
	    PREF=DLOG10(REFP(P,CSET,TEMP))
C           PRINT *,PREF
C**OBJECTIVE FUNCTION SECTION(BE SURE TO COMMENT OUT THE OTHERS)**
	    FF=FF+(VMODEL(TEMP,TSUMA,TSUMB,TSUMC,RSUMA,RSUMB,RSUMC,PREF) 
     &           - DLOG10(TP(P,K)))**2.
C           FF = FF + (VMODEL(TEMP, TSUMA, TSUMB, TSUMC) 
C     &           - DLOG10(TP(P,K)*760./101325.))**2.
C**            FF = FF + (VMODEL(TEMP, TSUMA, TSUMB) 
C**     &           - ALOG(TP(P,K)))**2.
C            FF = FF + ((TP(P,K) - 10.**(VMODEL(TEMP, TSUMA, 
C     &               TSUMB, TSUMC)))/ TP(P,K))**2. 
C           PRINT *, P,FF,TEMP,VMODEL(TEMP,TSUMA,TSUMB,TSUMC,RSUMA,
C     &               RSUMB,RSUMC,PREF),DLOG10(TP(P,K)) 
620      CONTINUE      
	 NDAT = NDAT + NPOINT(P, 2)
C         PRINT *, 'P: ',P
600   CONTINUE      

C      PRINT *, FF, NDAT
      FF = DSQRT((FF)/DFLOAT(NDAT))
C      PRINT *, 'FF = ', FF
C      FF = FF/DFLOAT(NDAT)
C      CLOSE(59)
C      CLOSE(91)
      RETURN
      END


C***********************MODEL FUNCTION***************************


      DOUBLE PRECISION FUNCTION VMODEL(TEMP,TSUMA,TSUMB,TSUMC,RSUMA,
     &                                 RSUMB,RSUMC,PREF)
C**      DOUBLE PRECISION FUNCTION VMODEL(TEMP, TSUMA, TSUMB)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      INTEGER RTYPE,MFIT,CFIT,FTYPE,MTYPE
      DOUBLE PRECISION PREF
      PARAMETER(DD = 220)
      COMMON /B/ SEED(DD),ECOUNT,NUMB(DD),CSET(808)

      INCLUDE 'settings.for'

C      PRINT *,TSUMA,TSUMB,TSUMC
      IF (RTYPE.EQ.0) THEN

C**1**THIS MODEL IS USED FOR THE 3-PARAMETER FRAGMENT CONTRIBUTION MODEL OR        
C     THE 2-PARAMETER FRAGMENT CONTRIBUTION MODEL WITH A CLASS SPECIFIC C VALUE
      
	 VMODEL = TSUMA -(TSUMB*100.)/(TSUMC*10.+(TEMP-273.15))

C**2**THIS MODEL IS USED FOR THE 2-PARAMETER FRAGMENT CONTRIBUTION SCHEME

C         VMODEL = TSUMA -(TSUMB*10.)/TEMP

C**3**THIS MODEL IS USED FOR THE 2-PARAMETER FRAGMENT CONTRIBUTION SCHEME
C     WITH AN OVERALL CONSTANT C(THE 260. IS THE 'C' DETERMINED FROM THE O.F.)

C         VMODEL = TSUMA -(TSUMB*10.)/(260.+TEMP-273.15)
C         PRINT *, TEMP, VMODEL
      
      ELSE IF (RTYPE.EQ.1) THEN
C        PRINT *, 'TSUMA: ',TSUMA
C        PRINT *, 'TSUMB: ',TSUMB
C        PRINT *, 'RSUMA: ',RSUMA
C        PRINT *, 'RSUMB: ',RSUMB
C        PRINT *, 'REFP: ',PREF

	 VMODEL = TSUMB/RSUMB*PREF-RSUMA*TSUMB/RSUMB+TSUMA
	 RSUMC = RSUMC
C        PRINT *, VMODEL
      END IF
      RETURN
      END

C***********************SUBROUTINE:  PARASET*********************

C***********************NOMENCLATURE*****************************
C
C  KS - DO LOOP COUNTER FOR SUBGRP CHECK LOOP.
C  KX -  DO LOOP COUNTER FOR SEED ARRAY.
C  KY - DO LOOP COUNTER FOR READING BREAKDOWN INFO FROM FRAGNEW.
C  NMAX - COUNTER FOR THE NUMBER OF DIFFERENT ELEMENTS IN THE 
C         BREAKDOWN LIST FROM FRAGNEW.
C  NUMB - HOLDS THE FRAG# FOR THE COMPRESSED SEED VECTOR.
C  NUMGRP - ARRAY HOLDING THE # OF GROUPS OF TYPE SUBGRP.  
C  SEED - THE INITIAL SEED VALUES MATRIX FED TO SIMPLEX
C  SUM - MATRIX COMPRISED OF NUMGRP*XX
C  TSUMA, TSUMB, TSUMC - TOTAL SUMMATION OF ALL THE ELEMENTS IN THE
C         SUM ARRAY IN THEIR RESPECTIVE ROWS.               
C  XX - PARAMETER VALUE
C
C****************************************************************

      SUBROUTINE PARASET( NNN, P, NUMGRP, RP,NUMREF)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      PARAMETER(DD = 220)
      INTEGER KY, FH, GY, HY,RTYPE,MTYPE,FTYPE,CFIT,MFIT,RP(75),RSET
      DIMENSION  NUMGRP(DD),NUMREF(DD) 
      COMMON /B/ SEED(DD),ECOUNT,NUMB(DD),CSET(808)
      COMMON /H/ FRAGNEW(808,25)

C  THE FOLLOWING BLOCK DETERMINES WHICH PARAMETERS IN THE 1x324 ARRAY   
C  ARE BEING OPTIMIZED FOR EACH COMPOUND.

      INCLUDE 'settings.for'
      ANDY = 0
      MEAT = 0
      KE = 0
      NMAX = FRAGNEW(P, 2)
C      PRINT *, 'NNN = ', NNN
      IF (FTYPE.EQ.2.AND.RTYPE.EQ.1) THEN
	 NX = NNN
      ELSE
	 NX = NNN/2
      END IF
      DO 760, KD = 1, NNN
	 KE =KE+1
	 NUMGRP(KE) = 0
760   CONTINUE
C      PRINT *, 'P: ',P
      DO 700, KY = 1, NMAX
	 GY = 0
	 HY = 0
	 MEAT = MEAT + 1
	 ANDY = MEAT*2+1
	 DO 720, FH = 1, NX
	    GY = GY+1
	    HY = GY*2-1
C            WRITE(59,*) NUMB(HY), FRAGNEW(P,ANDY)
C            PRINT *, HY,'  ',NUMB(HY)
            IF (RTYPE.NE.1) THEN
	       IF (NUMB(HY).EQ.FRAGNEW(P, ANDY)) THEN
		  NUMGRP(HY) = FRAGNEW(P, ANDY+1)
		  NUMGRP(HY+1) = FRAGNEW(P, ANDY+1)
C                PRINT *, 'NUMGRP(HY) =  ',NUMGRP(HY),
C     &                   ' FOR FRAG #:', NUMB(HY), HY
C                WRITE(59,*) NUMGRP(HY), NUMB(HY)
               END IF
	    ELSEIF (RTYPE.EQ.1) THEN
               IF (NUMB(GY).EQ.FRAGNEW(P,ANDY)) THEN
		  NUMGRP(GY) = FRAGNEW(P, ANDY+1)
C                  PRINT *,'P: ',P,GY,'NUMGRP: ',NUMGRP(GY)
	       END IF 
	    END IF
720      CONTINUE
700   CONTINUE
      
C*****REFERENCE COMPOUND BLOCK******

      IF (RTYPE.EQ.1) THEN
	 RSET = RP(CSET(P))
C         PRINT *, 'RP: ',RP(CSET(P))
	 NMAXR = FRAGNEW(RSET,2)
C         PRINT *, 'NMAXR: ',NMAXR
	 MT = 0
	 AY = 0

	 DO 730, FI = 1, NMAXR
	    GZ = 0
	    HZ = 0
	    MT = MT + 1
	    AY = MT*2+1
	    DO 740, FJ = 1, NX
	       GZ = GZ + 1
	       HZ = GZ*2-1
C               PRINT *,'NUMB: ',NUMB(HZ),'FRAGNEW: ',FRAGNEW(RSET,AY)
	       IF (FTYPE.NE.2) THEN
	          IF(NUMB(HZ).EQ.FRAGNEW(RSET,AY)) THEN
C                  PRINT *,FRAGNEW(RSET,AY+1)
		     NUMREF(HZ)=FRAGNEW(RSET,AY+1)
		     NUMREF(HZ+1)=FRAGNEW(RSET,AY+1)
C                     PRINT *,'NUMREF(HZ): ',NUMREF(HZ),'NUMREF(HZ+1)',
C     &                     NUMREF(HZ+1)
		     GOTO 730
                   END IF
	       ELSEIF (FTYPE.EQ.2) THEN
C               PRINT *,'NUMB: ',NUMB(GZ),'FRAGNEW: ',FRAGNEW(RSET,AY)
	          IF(NUMB(GZ).EQ.FRAGNEW(RSET,AY)) THEN
		     NUMREF(GZ)=FRAGNEW(RSET,AY+1)
C                     PRINT *,'RP: ',RP(CSET(P)),GZ,'NUMREF: ',NUMREF(GZ)
		     GOTO 730
		  END IF
	       END IF
740         CONTINUE
730      CONTINUE
      END IF
      DY = 0
      EY = 0
C      DO 750, K = 1, NX
C        DY = DY+1
C***           EY =DY*3-2
C        EY =DY*2-1
C         PRINT *, 'NUMGRP(EY) =  ',NUMGRP(EY),' FOR FRAG #:',NUMB(EY), 
C     &            EY
C        WRITE(59,*) NUMGRP(DY), NUMB(DY)
C750   CONTINUE
      RETURN
      END


C***********************SUBROUTINE: SUMUP*************************

      SUBROUTINE SUMUP( P, NN, XX, TSUMA, TSUMB, TSUMC)
C**      SUBROUTINE SUMUP( P, NN, XX, TSUMA, TSUMB)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      PARAMETER(DD = 220)
      DOUBLE PRECISION ALIN(115), BLIN(115),CINP,XX(NN),XSUM(324)
      INTEGER RTYPE
      COMMON /B/ SEED(DD),ECOUNT,NUMB(DD),CSET(808)
      COMMON /C/ TP(808, 900),NPOINT(808, 2),CMAX
      COMMON /D/ NUMGRP(DD)      
      COMMON /G/ CINP(100),MFIT,CFIT
      COMMON /H/ FRAGNEW(808,25)
      COMMON /J/ CPAR0,MPAR
      COMMON /N/ ALIN, BLIN, FTYPE,AC

      INCLUDE 'settings.for'
C  THIS BLOCK BUILDS THE ARRAY SUM(324) OR SUM(226) AND SUMS UP THE VALUES
C  FOR THE A, B, AND C CONSTANTS IN TSUMA, TSUMB, AND TSUMC.


      BY = 0
      CY = 0
      TSUMA = 0.
      TSUMB = 0.
      TSUMC = 0.
      MDIFF=MPAR-CPAR0
      NN2 = NN-MDIFF 
      IF (FTYPE.NE.2) THEN
C***         NY = NN/3
	 NY = NN2/2      
      ELSEIF (FTYPE.EQ.2) THEN
	 NY = AC/2
      END IF
C      PRINT *, 'NY: ',NY
      DO 800, KX =  1, NY
	 BY = BY+1
C***         CY = BY*3 - 2
	 CY = BY*2 - 1

	 IF(FTYPE.NE.2) THEN
	    XSUM(CY) = XX(CY) * DFLOAT(NUMGRP(CY))
C            PRINT *, 'A: ','XX(CY): ',XX(CY),NUMGRP(CY)
	    XSUM(CY+1) = XX(CY+1) * DFLOAT(NUMGRP(CY))
C***            XSUM(CY+2) = XX(CY+2) * DFLOAT(NUMGRP(CY))
C            PRINT *, 'B: ','XX(CY+1): ',XX(CY+1),NUMGRP(CY+1)
	    TSUMA = TSUMA + XSUM(CY)
	    TSUMB = TSUMB + XSUM(CY+1)
C***            TSUMC = TSUMC + XSUM(CY+2)
	 ELSE IF(FTYPE.EQ.2.AND.RTYPE.NE.1) THEN
	    XSUM(CY) = ALIN(NUMB(CY)) * DFLOAT(NUMGRP(CY))
C            WRITE(91,*) NUMB(CY),'ALIN: ',ALIN(NUMB(CY)),
C     &                  NUMGRP(CY)
	    XSUM(CY+1) = BLIN(NUMB(CY)) * DFLOAT(NUMGRP(CY))
C            WRITE(91,*) NUMB(CY),'BLIN: ',BLIN(NUMB(CY)),
C     &                  NUMGRP(CY)
	    TSUMA = TSUMA + XSUM(CY)
C            WRITE(91,*) 'TSUMA: ',TSUMA
	    TSUMB = TSUMB + XSUM(CY+1)
C            WRITE(91,*) 'TSUMB: ',TSUMB
	 ELSE IF(FTYPE.EQ.2.AND.RTYPE.EQ.1) THEN
	    XSUM(CY) = ALIN(NUMB(BY)) * DFLOAT(NUMGRP(BY))
C            WRITE(91,*) NUMB(BY),'ALIN: ',ALIN(NUMB(BY)),
C     &                  NUMGRP(B(CY)
	    TSUMA = TSUMA + XSUM(CY)
	    XSUM(CY+1) = XX(BY) * DFLOAT(NUMGRP(BY))
	    TSUMB = TSUMB + XSUM(CY+1)
	 END IF
800   CONTINUE
      IF (CFIT.EQ.1) THEN
C         PRINT *, 'CSET(P) = ',CSET(P), 'P: ',P
	 CZ = CSET(P)+CPAR0
	 TSUMC = XX(CZ)
C         PRINT *,'P: ',P, '  XX(CZ): ', XX(CZ), '  ',CZ
      END IF
C      PRINT*,'NN = ', NN
C      WRITE(91,*) ,P,NPOINT(P,1), 'A, B, C: ',TSUMA, TSUMB, TSUMC
C      PRINT *,P,NPOINT(P,1), 'A, B, C: ',TSUMA, TSUMB, TSUMC
      RETURN
      END

C***********************SUBROUTINE: SUMREF*************************

      SUBROUTINE SUMREF( P, NN, XX,RP,RSUMA, RSUMB, RSUMC)
C**      SUBROUTINE SUMREF( P, NN, XX, RSUMA, RSUMB)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      PARAMETER(DD = 220)
      DOUBLE PRECISION ALIN(115), BLIN(115),CINP,XX(NN),XSUM(324)
      INTEGER NUMREF(DD),RP(75), RSET
      COMMON /B/ SEED(DD),ECOUNT,NUMB(DD),CSET(808)
      COMMON /C/ TP(808,900),NPOINT(808, 2),CMAX
      COMMON /D/ NUMGRP(DD)      
      COMMON /G/ CINP(100),MFIT,CFIT
      COMMON /H/ FRAGNEW(808,25)
      COMMON /J/ CPAR0,MPAR
      COMMON /N/ ALIN, BLIN, FTYPE,AC
      COMMON /R/ NUMREF

      INCLUDE 'settings.for'
C  THIS BLOCK BUILDS THE REFERENCE COMPOUND ARRAY AND SUMS UP THE VALUES
C  FOR THE A, B, AND C CONSTANTS IN RSUMA, RSUMB, AND RSUMC.
      
      BY = 0
      CY = 0
      RSET = 0
      RSUMA = 0.
      RSUMB = 0.
      RSUMC = 0.
      MDIFF=MPAR-CPAR0
      NN2 = NN-MDIFF 
      IF (FTYPE.NE.2) THEN
C***         NY = NN/3
	 NY = NN2/2      
      ELSE
	 NY = AC/2
      END IF
C      PRINT *, 'NY: ',NY
      DO 800, KX =  1, NY
	 BY = BY+1
C***         CY = BY*3 - 2
	 CY = BY*2 - 1

	 IF(FTYPE.NE.2) THEN
	    XSUM(CY) = XX(CY) * DFLOAT(NUMREF(CY))
C            PRINT *, 'A: ','XX(CY): ',XX(CY),NUMREF(CY)
	    XSUM(CY+1) = XX(CY+1) * DFLOAT(NUMREF(CY))
C***            XSUM(CY+2) = XX(CY+2) * DFLOAT(NUMREF(CY))
C            PRINT *, 'B: ','XX(CY+1): ',XX(CY+1),NUMREF(CY+1)
	    RSUMA = RSUMA + XSUM(CY)
	    RSUMB = RSUMB + XSUM(CY+1)
C***            RSUMC = RSUMC + XSUM(CY+2)
	 ELSE IF(FTYPE.EQ.2.AND.RTYPE.NE.1) THEN
	    XSUM(CY) = ALIN(NUMB(CY)) * DFLOAT(NUMREF(CY))
C            WRITE(91,*) NUMB(CY),'ALIN: ',ALIN(NUMB(CY)),
C     &                  NUMREF(CY)
	    XSUM(CY+1) = BLIN(NUMB(CY)) * DFLOAT(NUMREF(CY))
C            WRITE(91,*) NUMB(CY),'BLIN: ',BLIN(NUMB(CY)),
C     &                  NUMREF(CY)
	    RSUMA = RSUMA + XSUM(CY)
C            WRITE(91,*) 'RSUMA: ',RSUMA
	    RSUMB = RSUMB + XSUM(CY+1)
C            WRITE(91,*) 'RSUMB: ',RSUMB
	 ELSE IF(FTYPE.EQ.2.AND.RTYPE.EQ.1) THEN
	    XSUM(CY) = ALIN(NUMB(BY)) * DFLOAT(NUMREF(BY))
C            WRITE(91,*) NUMB(BY),'ALIN: ',ALIN(NUMB(BY)),
C     &                  NUMREF(BY)
	    RSUMA = RSUMA + XSUM(CY)
C            WRITE(91,*) 'RSUMA: ',RSUMA
	    XSUM(CY+1) = XX(BY) * DFLOAT(NUMREF(BY))
C            WRITE(91,*) NUMB(BY),'XX: ',XX(BY),
C     &                  NUMREF(BY)
	    RSUMB = RSUMB + XSUM(CY+1)
C            WRITE(91,*) 'RSUMB: ',RSUMB
	 END IF
800   CONTINUE
      RSET = RP(CSET(P))
      IF (CFIT.EQ.1) THEN
C         PRINT *,'CSET(P) = ',CSET(P),'P: ',RSET
	 CZ = CSET(P)+CPAR0
	 RSUMC = XX(CZ)
C         PRINT *,'P: ',RSET, '  XX(CZ): ', XX(CZ), '  ',CZ
      END IF
C      PRINT*,'NN = ', NN
C      WRITE(91,*),NPOINT(RSET,1),'A,B,C: ',RSUMA,RSUMB,RSUMC
C      PRINT *,NPOINT(RSET,1),'A,B,C: ',RSUMA,RSUMB,RSUMC
      RETURN
      END

C***********************SUBROUTINE:  GETFITT*********************

      SUBROUTINE GETFITT(TP, NPOINT, CMAX, NP1, FM1,MAXFRG)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      INTEGER MAXFRG,FRAGCT(115),FRAGMENT(115),FRAGDP(115)
      PARAMETER(DD = 220)
      DOUBLE PRECISION TP(808, 900), CINP,TVAL(808) 
      CHARACTER*2 FMGRP, FM1(808)
      DIMENSION GFLAG(100), EXCLUDE(100), NP1(808,2),NPOINT(808,2),
     &          DSINGLE(800),NOFRG(115)
      EXTERNAL MFIT3, GETDATA, FAMCHEK
      COMMON /B/ SEED(DD),ECOUNT,NUMB(DD),CSET(808)
      COMMON /E/ FMGRP(808), CS(808)
      COMMON /F/ NCOMP, FRAG(1450, 25), CAS(1450)
      COMMON /G/ CINP(100),MFIT,CFIT
      COMMON /H/ FRAGNEW(808,25)
      COMMON /M/ MAXFRAG,FRAGMENT,NOFRG,MPMAX
      COMMON /Q/ TVAL

C  FMGRP - FAMILY GROUP OF EACH COMPOUND
C  P - CHEMICAL COUNTER
C  NPOINT(P, 1) HOLDS CAS#
C  NPOINT(P, 2) HOLDS # OF LINES OF DATA TO BE READ IN
C  TP(P, 1,3,5,...) HOLDS TEMPERATURES  (K)         
C  TP(P, 2,4,6,...) HOLDS PRESSURES (PA)

      WRITE(54, 1008)
      WRITE(54, 1009)
      WRITE(54, 1011)

C****************************************************************
C  CFIT  = 1
C  IF CFIT=1 THEN PROGRAM WILL OPTIMIZE THE C CONSTANT AS A FAMILY 
C  CONSTANT.

      IF (CFIT.EQ.1) THEN
1820     CA = 0
	 DO 1830, CZ=1,75
	    CA = CA+1
	    READ(67, *) CINP(CA)
1830     CONTINUE         
	 MCA=CA
C        PRINT *, 'MCA = ', MCA
      ELSEIF(CFIT.EQ.0)THEN
	 DO 1855, CY=1,75
	    CINP(CY) = 0.0
1855     CONTINUE   
      END IF      
      CLOSE(67)
      
      NG = 0
      NK = 0
      
      IF (MFIT.EQ.1.OR.MFIT.EQ.4.OR.MFIT.EQ.6) THEN 
	   GOTO 950
      ELSE IF (MFIT.EQ.2) THEN 
	   GOTO 895
      ELSE IF (MFIT.EQ.3) THEN 
	   GOTO 1705
      END IF

C****************************************************************
C  MFIT = 1,4, OR 6
C  THE FOLLOWING READS CAS# FROM SINGLE.DAT IF THERE ARE 
C  SPECIFIC CHEMICALS TO BE OPTIMIZED.(MFIT = 1)

950   CONTINUE
C      OPEN (64, FILE='single.dat', STATUS='UNKNOWN', 
C     &     ACCESS='SEQUENTIAL', FORM='FORMATTED')
      OPEN (64, FILE='single.ref', STATUS='UNKNOWN', 
     &     ACCESS='SEQUENTIAL', FORM='FORMATTED')
      GOOD = 0
970   GOOD = GOOD + 1
	 READ(64, *, ERR = 971) DSINGLE(GOOD)
      GOTO 970
971   MGOOD = GOOD - 1

1905  MD = 0
      
      DO 1930, MC = 1, 75
	 MD = MD+1
	 GFLAG(MD) = 1
1930  CONTINUE
      DO 980, P = 1, ECOUNT     
	 READ(61, *) NP1(P, 1), FM1(P), NP1(P, 2)
	 DO 990, PM = 1, MGOOD
	    IF (NP1(P,1).EQ.DSINGLE(PM)) THEN                
	       CALL FAMCHEK(P,GFLAG,NP1,FM1,CHEM,TVAL,FMGRP,NPOINT,TP,
     &                      CS)  
	       GOTO 955
	    END IF
990      CONTINUE
	 
	 DO 985, SKIP = 1, NP1(P, 2)
	    READ(61, *)
985      CONTINUE           
955      CONTINUE
980   CONTINUE
      GOTO 1755 
		

C****************************************************************
C  MFIT = 2
C  THE FOLLOWING READS IN FAMILY GROUP FLAGS FROM FAMGROUP.DAT
C  GFLAG(*) = 1 MEANS OPTIMIZE FAMILY GROUP
C  GFLAG(*) = 0 MEANS DONT OPTIMIZE WITH THIS FAMILY GROUP

895   CONTINUE
      
      DO 900, K = 1,75
	 READ(62, *) GFLAG(K)
900   CONTINUE
      GOTO 905

C***********************MFIT=3 OPTION****************************
C  MFIT = 3
C  THE FOLLOWING READS IN FRAGMENT VALUES FROM FRAGMENT.DAT THAT
C  CORRESPOND TO ALL CHEMICALS THAT CONTAIN THOSE FRAGMENTS.
C**NOTE** EVENTUALLY THERE WILL BE ANOTHER FLAG THAT WILL ALLOW 
C  THE CHEMICALS WITH ONLY THESE FRAGMENTS TO BE SELECTED FROM ONLY
C  PARTICULAR FAMILY GROUPS.

1705  MB = 0
      MN = 0     
      MP = 0
      DO 1720, I=1,115
	 MN = MN + 1
	 READ(66, *) FG
	 IF (FG.EQ.-1) THEN
	    MN = MN - 1
	    MP = MP + 1
	    NOFRG(MP) = I
	    GOTO 1720
	 END IF
	 FRAGMENT(MN) = FG
C        PRINT *, 'FRAGMENT: ', FRAGMENT(MN)
1720  CONTINUE
      MAXFRG  = MN
      MPMAX = MP
      DO 1730, MA = 1, 75
	 READ(62, *) GFLAG(MA)
1730  CONTINUE

C****************************************************************
C  READS IN CAS# OF CHEMICALS THAT NEED TO BE REMOVED FROM THE 
C  FITTING SET.

905   MUTT = 0
910   MUTT = MUTT + 1      
	 READ(63, *, ERR = 911) EXCLUDE(MUTT)
      GOTO 910
911   MMAX = MUTT - 1
C****************************************************************

C  READS IN EXPERIMENTAL V.P AND TEMP DATA FROM FITT.DAT.  THE   
C  IF-ELSEIF LOOP BELOW CHECKS GFLAG(*) TO DETERMINE THE GROUPS  
C  TO BE OPTIMIZED AND THEN CHECKS THE FAMILY GROUP OF EACH 
C  CHEMICAL.  THE EXPERIMENTAL DATA OF THE MATCHING CHEMICALS ARE
C  READ INTO TP(*,*).

      CHEM = 0
      NF = 0
      
      IF (MFIT.EQ.3) THEN
	 GOTO 925
      END IF

      DO 975, P = 1, ECOUNT     

	 READ(61, *) NP1(P, 1), FM1(P), NP1(P, 2)
C         PRINT *, ' P = ',P 

C  THE FOLLOWING BLOCK SETS FM1 EQUAL TO AN UNRECOGNIZABLE FAMILY
C  GROUP SO THAT THAT  CHEMICAL WILL NOT BE READ INTO NPOINT OR TP.
	   
	 DO 935, EC = 1, MMAX
	    IF (NP1(P, 1).EQ.EXCLUDE(EC)) THEN 
	       FM1(P) = 'ZZ'
	    END IF
935      CONTINUE
	 CALL FAMCHEK(P,GFLAG,NP1,FM1,CHEM,TVAL,FMGRP,NPOINT,TP,CS)  
975   CONTINUE
      
      GOTO 1755

C  ** THE FOLLOWING LOOP ROUTINE READS IN THE EXPERIMENTAL DATA IF
C     MFIT=3 AND ALSO COUNTS THE NUMBER OF CHEMICALS CONTAINING EACH 
C     FRAGMENT

925   CONTINUE     

      OPEN (77, FILE='frag.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      
      DO 3005, MF = 1, MAXFRG
	 FRAGCT(MF) = 0
	 FRAGDP(MF) = 0
3005  CONTINUE
      
      NK = 0

      DO 3010, P = 1, ECOUNT     
C        PRINT *, ' P = ',P 
	READ(61, *) NP1(P, 1), FM1(P), NP1(P, 2)
C        PRINT *, NP1(P,1),FM1(P),NP1(P,2)

C  THE FOLLOWING BLOCK SETS FM1 EQUAL TO AN UNRECOGNIZABLE FAMILY
C  GROUP SO THAT THAT CHEMICAL WILL NOT BE READ INTO NPOINT OR TP.
	   
	 DO 3015, EC = 1, MMAX
	    IF (NP1(P, 1).EQ.EXCLUDE(EC)) THEN 
	       GOTO 3085
	    END IF
3015     CONTINUE
	 NA = 0      
	 NC=0
	 DO 3020, K=1,NCOMP
	    NA = FRAG(K,2)
	    NB=0

C  THIS IF LOOP MATCHES THE CHEMICALS UP WITH THE UNIFACT.DAT LIST

	    IF(NP1(P,1).EQ.CAS(K)) THEN
	       DO 3025, J=1, NA
		  NB=NB+1                                          
		  NC=NB*2+1

C  THIS IF LOOP CHECKS TO SEE IF THE CHEMICAL HAS THE DESIRED FRAGMENT
C  IN IT.                   

		  DO 3070, M = 1,MAXFRG
		     IF(FRAG(K,NC).EQ.FRAGMENT(M)) THEN
			FRAGCT(M)=FRAGCT(M)+1     
			FRAGDP(M)=FRAGDP(M)+NP1(P,2)
C                        PRINT *, 'FRAG: ',FRAGMENT(M)
			WRITE (77, *) FRAGMENT(M), NP1(P,1), FRAGCT(M)
			GOTO 3025                        
		     END IF 
3070              CONTINUE
		  IF (NC.GT.3) THEN
		     DO 3075, MC = NC,3,-2
		       DO 4040, M=1,MAXFRG
			 IF (FRAGCT(FRAG(K,MC)).EQ.0.AND.FRAG(K,MC).EQ.
     &                      FRAGMENT(M))THEN
			   FRAGCT(M)=0
			   FRAGDP(M)=0
			   GOTO 3075
			 ELSE IF(FRAGCT(FRAG(K,MC)).GT.0.AND.FRAG(K,MC)
     &                          .EQ.FRAGMENT(M))THEN
			   FRAGCT(M)=FRAGCT(M)-1
			   FRAGDP(M)=FRAGDP(M)-NP1(P,2)
			   GOTO 3075
			 END IF
4040                   CONTINUE
3075                 CONTINUE
		     GOTO 3085
		  ELSEIF (NC.EQ.3) THEN
		    DO 4050, M=1,MAXFRG
C                      PRINT *,'FRAGCT(K,3): ',FRAGCT(FRAG(K,3)),
C     &                   'FRAG(K,3):',
C     &                   FRAG(K,3),'FRAGMENT(M): ',FRAGMENT(M)
		      IF (FRAGCT(FRAG(K,3)).EQ.0.AND.FRAG(K,3).EQ.
     &                  FRAGMENT(M))THEN
			FRAGCT(M)=0
			FRAGDP(M)=0
			GOTO 3085
		      ELSE IF(FRAGCT(FRAG(K,3)).GT.0.AND.FRAG(K,3).EQ. 
     &                      FRAGMENT(M)) THEN
			FRAGCT(M)=FRAGCT(M)-1
			FRAGDP(M)=FRAGDP(M)-NP1(P,2)
			GOTO 3085
		      END IF
4050                CONTINUE
		    GOTO 3085
		  END IF
 
3025           CONTINUE            
C               PRINT *, NP1(P,1)
	       CALL FAMCHEK(P,GFLAG,NP1,FM1,CHEM,TVAL,FMGRP,NPOINT,TP,  
     &            CS)   
	       IF(FM1(P).EQ.'ZZ') THEN
		  IF (NC.GT.3) THEN
		     DO 3095, MC = NC,3,-2
			DO 4020, M=1,MAXFRG
			  IF (FRAGCT(FRAG(K,MC)).EQ.0.AND.FRAG(K,MC)
     &                       .EQ.FRAGMENT(M))THEN
			    FRAGCT(M)=0
			    FRAGDP(M)=0
			  ELSE IF(FRAGCT(FRAG(K,MC)).GT.0.AND.FRAG(K,MC
     &                      ).EQ.FRAGMENT(M))THEN
			    FRAGCT(M)=FRAGCT(M)-1
			    FRAGDP(M)=FRAGDP(M)-NP1(P,2)
			  END IF
4020                    CONTINUE
3095                 CONTINUE
		  ELSEIF (NC.EQ.3) THEN
		     DO 4030,M=1,MAXFRG
		       IF (FRAGCT(FRAG(K,3)).EQ.0.AND.FRAG(K,3).EQ.
     &                    FRAGMENT(M))THEN
			 FRAGCT(M)=0
			 FRAGDP(M)=0
		       ELSE IF(FRAGCT(FRAG(K,3)).GT.0.AND.FRAG(K,3).EQ.
     &                      FRAGMENT(M)) THEN
			  FRAGCT(M)=FRAGCT(M)-1
			  FRAGDP(M)=FRAGDP(M)-NP1(P,2)
		       END IF
4030                 CONTINUE
		  END IF
		  GOTO 3010
	       END IF                 
	       NK = NK+1                  
	       DO 3050, B = 1, 22
		  FRAGNEW(NK,B) = FRAG(K,B)
3050           CONTINUE
	       GOTO 3010
	    END IF
3020     CONTINUE
3085     CONTINUE
	 DO 3040, SKIP = 1, NP1(P, 2) 
	    READ(61, *)
3040     CONTINUE           
3010  CONTINUE

      DO 3080, ME = 1, 115
	WRITE(77,*) FRAGMENT(ME), FRAGCT(ME), FRAGDP(ME)
3080  CONTINUE
1755  CONTINUE

      CMAX = CHEM

      DO 960, GG = 1, ECOUNT
	 NP1(GG, 1) = 0 
	 FM1(GG) = ' '
	 NP1(GG, 2) = 0
960   CONTINUE


C***********************SUBROUTINE FORMAT STATEMENTS*************

1008  FORMAT (1X, 'The Chemicals being optimized are:  ',//)
1009  FORMAT (6X, '  #  ' ,4X,'   CAS #    ', 4X, 'Family Group')     
1011  FORMAT (6X, '-----',4X,'------------', 4X, '------------', /)
      
      CLOSE(58)
      CLOSE(62)
      CLOSE(63)
      CLOSE(64)
      CLOSE(72)
      CLOSE(77)
      RETURN
      END

C***********************SUBROUTINE: GETDATA**********************

      SUBROUTINE GETDATA(NPOINT, CHEM, CNUM, TP)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      PARAMETER(DD = 220)
      DOUBLE PRECISION TP(808, 900)
      DIMENSION NPOINT(808, 2)
      COMMON /B/ SEED(DD),ECOUNT,NUMB(DD),CSET(808)

      GA = 0
      GB = 0
      MAX = 0
      MAX = NPOINT(CHEM, 2)
C      PRINT *, MAX, MAX-1
C      PRINT *, CHEM, NPOINT(CHEM, 2)
      DO 1920, I = 1, MAX
	 GA = GA+1
	 GB = GA*2-1
C         PRINT *, GB, CHEM
	 READ(61, *) CNUM, TP(CHEM, GB), TP(CHEM, GB+1) 
	 WRITE(71, *) CNUM, TP(CHEM, GB), TP(CHEM, GB+1)
C        PRINT *, CHEM, CNUM, TP(CHEM, GB), TP(CHEM, GB+1)
1920  CONTINUE
      RETURN
      END

C***********************SUBROUTINE:  GETCALC*********************

C  THIS SUBROUTINE CALCULATES VAPOR PRESSURES USING THE MODEL FRAGMENT 
C  VALUES.  (MFIT=6)

      SUBROUTINE GETCALC(NN, XX, MTYPE, CFIT,FTYPE,MAXFRG,NPAR)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      PARAMETER(DD = 220)
      INTEGER RP(75),DS2(75),DS3(75),NUMREF(DD),RTYPE,RCOUNT,
     &        FRAGLIN(808,115)
      DOUBLE PRECISION VNUM,VNUMA,LEXP,ALDE(200),AALDE,MALDE,PREF, 
     &  TALDE, TMAXP,TTALDE, SLD,SSLD,SRSSLD,NTEMP,XX(DD),REFC(75,5)
      EXTERNAL VMODEL, PARASET, SUMUP, SUMREF,NBP
      COMMON /B/ SEED(DD),ECOUNT,NUMB(DD),CSET(808)
      COMMON /C/ TP(808,900),NPOINT(808,2),CMAX
      COMMON /D/ NUMGRP(DD)
      COMMON /P/ DS2,RP,RCOUNT,REFC,DS3,FRAGLIN
      COMMON /R/ NUMREF

      INCLUDE 'settings.for'

      OPEN (53, FILE='alde.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      
      WRITE(53,1507) '   CAS_#    ','  NBP ','    AALDE     ',
     &         '    MALDE     '
      SSLD = 0.
      
      DO 1510, P = 1, CMAX
	 
	 WRITE(52, *) NPOINT(P, 1)
C         WRITE(52, 1501) NPOINT(P, 1)
C        WRITE(52, 1502)
C        WRITE(52, 1503)

	 IF (CFIT.EQ.1.AND.FTYPE.NE.2) THEN
	    NNN = NPAR*2
	 ELSE IF (CFIT.EQ.1.AND.FTYPE.EQ.2) THEN
	    NNN = MAXFRG*2
	 ELSE
	    NNN = NN
	 END IF        
	 CALL NBP(P,NTEMP)
	 CALL PARASET(NNN, P, NUMGRP, RP,NUMREF)

	 MAXP = NPOINT(P, 2) 
	 
	 CALL SUMUP( P, NN, XX, TSUMA, TSUMB, TSUMC)
C**         CALL SUMUP( P, NN, XX, TSUMA, TSUMB)
	 RSUMA = 1.
	 RSUMB = 1.
	 RSUMC = 1.
	 IF (RTYPE.EQ.1) THEN
	    CALL SUMREF( P, NN, XX, RP,RSUMA, RSUMB, RSUMC)
C           REFC = NPOINT(RP(CSET(P)),1)
	 END IF
	 CA=0
	 CB=0
	 SALDE=0.         
	 MALDE=0.
	 DO 1520, I=1, MAXP
	    CA=CA+1  
	    CB=CA*2-1
	    TEMP=TP(P,CB)
	    PREF=DLOG10(REFP(P,CSET,TEMP))
	    IF(MTYPE.EQ.0) THEN 
	       VNUM=VMODEL(TEMP,TSUMA,TSUMB,TSUMC,RSUMA,RSUMB,RSUMC,
     &                     PREF)
C               PRINT *, NPOINT(P,1),TEMP,TSUMA,TSUMB,TSUMC,VNUM
C**               VNUM=VMODEL(TEMP, TSUMA, TSUMB)
	    ELSEIF(MTYPE.EQ.1.AND.CFIT.EQ.0) THEN
	       VNUM=TSUMA-TSUMB/TEMP
	    ELSEIF(MTYPE.EQ.1.AND.CFIT.EQ.1) THEN
C               PRINT *,'Right On!!'
	       VNUM=TSUMA-TSUMB*100./(TEMP+TSUMC*10.-273.15)
	    END IF
C               PRINT *, NPOINT(P,1),TEMP,TSUMA,TSUMB,TSUMC
	    VNUMA = VNUM
	    LEXP = DLOG10(TP(P,CB+1))
C           LEXP = DLOG10(TP(P,CB+1)*760./101325.)
	    ALDE(CA) = LEXP-VNUMA
	    SLD = (ALDE(CA))**2.
	    WRITE(52, *) TEMP, LEXP, VNUMA, ALDE(CA)
C           PRINT *, TEMP, LEXP, VNUMA, ALDE(CA)
C            WRITE(52, 1504) TEMP, VNUMA
	    SALDE = SALDE + ALDE(CA)
	    SSLD = SSLD + SLD
C            PRINT *,'SLD: ',SLD,'SSLD: ',SSLD
	    MALDE = DMAX1(MALDE,ABS(ALDE(CA)))
1520     CONTINUE
	 TALDE = TALDE + SALDE
	 TMAXP = TMAXP+DFLOAT(MAXP)
	 AALDE=SALDE/DFLOAT(MAXP)
	 WRITE(53, 1508) NPOINT(P,1), NTEMP,AALDE, MALDE
C         WRITE(53,1507) MALDE
1510  CONTINUE
	 PRINT *,'TMAXP: ', TMAXP
	 TTALDE = TALDE/TMAXP
	 SRSSLD = DSQRT(SSLD/TMAXP)
	 PRINT *,'SSLD: ',SSLD,'  TMAXP: ',TMAXP,'  SRSSLD: ',SRSSLD
	 WRITE(53,1509) 'SRSSLD:  ', SRSSLD
1501  FORMAT(/,1X, 'CAS #:  ', I10,/)
1502  FORMAT(1X, 'TEMP (K) ', 4X, 'VAPOR PRESSURE ')
1503  FORMAT(1X, '---------', 4X, '---------------',/)
1504  FORMAT(1X, F9.4, 4X, F15.8) 
1507  FORMAT(A12,3X,A6,3X,A14,3X,A14)
1508  FORMAT(I12,3X,F6.2,3X,E14.8,3X,E14.8)
1509  FORMAT(A9,2X,E14.8)      
      CLOSE(52)
      CLOSE(53)
      RETURN
      END
      
C***********************SUBROUTINE: FAMCHEK*********************
C
C  THIS SUBROUTINE SORTS AND KEEPS THE APPROPRIATE CHEMICALS FOR
C  PARTICULAR FAMILY GROUPS.

      SUBROUTINE FAMCHEK(P,GFLAG,NP1,FM1,CHEM,TVAL, FMGRP,NPOINT,TP
     &                   ,CS)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      DOUBLE PRECISION CINP, TVAL(808), TP(808,900)
      CHARACTER*2 FM1(808),FMGRP(808)
      DIMENSION GFLAG(100), NP1(808,2), NPOINT(808,2), CS(808) 
      EXTERNAL GETDATA
      COMMON /F/ NCOMP, FRAG(1450, 25), CAS(1450)
      COMMON /G/ CINP(100),MFIT,CFIT

      IF (GFLAG(1).EQ.1 .AND. FM1(P).EQ.'AA') THEN       
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(1)
	 CS(CHEM) = 1
	 GOTO 930
      ELSE IF (GFLAG(2).EQ.1 .AND. FM1(P).EQ.'MA') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(2)
	 CS(CHEM) = 2
	 GOTO 930
      ELSE IF (GFLAG(3).EQ.1 .AND. FM1(P).EQ.'DA') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(3)
	 CS(CHEM) = 3
	 GOTO 930
      ELSE IF (GFLAG(4).EQ.1 .AND. FM1(P).EQ.'OA') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(4)
	 CS(CHEM) = 4
	 GOTO 930
      ELSE IF (GFLAG(5).EQ.1 .AND. FM1(P).EQ.'CA') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(5)
	 CS(CHEM) = 5
	 GOTO 930
      ELSE IF (GFLAG(6).EQ.1 .AND. FM1(P).EQ.'GA') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(6)
	 CS(CHEM) = 6
	 GOTO 930
      ELSE IF (GFLAG(7).EQ.1 .AND. FM1(P).EQ.'HA') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(7)
	 CS(CHEM) = 7
	 GOTO 930
      ELSE IF (GFLAG(8).EQ.1 .AND. FM1(P).EQ.'RA') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(8)
	 CS(CHEM) = 8
	 GOTO 930
      ELSE IF (GFLAG(9).EQ.1 .AND. FM1(P).EQ.'AE') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(9)
	 CS(CHEM) = 9
	 GOTO 930
      ELSE IF (GFLAG(10).EQ.1 .AND. FM1(P).EQ.'BE') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(10)
	 CS(CHEM) = 10
	 GOTO 930
      ELSE IF (GFLAG(11).EQ.1 .AND. FM1(P).EQ.'ME') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(11)
	 CS(CHEM) = 11
	 GOTO 930
      ELSE IF (GFLAG(12).EQ.1 .AND. FM1(P).EQ.'EE') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(12)
	 CS(CHEM) = 12
	 GOTO 930
      ELSE IF (GFLAG(13).EQ.1 .AND. FM1(P).EQ.'CE') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(13)
	 CS(CHEM) = 13
	 GOTO 930
      ELSE IF (GFLAG(14).EQ.1 .AND. FM1(P).EQ.'DE') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(14)
	 CS(CHEM) = 14 
	 GOTO 930
      ELSE IF (GFLAG(15).EQ.1 .AND. FM1(P).EQ.'YY') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(15)
	 CS(CHEM) = 15
	 GOTO 930
      ELSE IF (GFLAG(16).EQ.1 .AND. FM1(P).EQ.'AR') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(16)
	 CS(CHEM) = 16
	 GOTO 930
      ELSE IF (GFLAG(17).EQ.1 .AND. FM1(P).EQ.'BR') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(17)
	 CS(CHEM) = 17
	 GOTO 930
      ELSE IF (GFLAG(18).EQ.1 .AND. FM1(P).EQ.'MR') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(18)
	 CS(CHEM) = 18
	 GOTO 930
      ELSE IF (GFLAG(19).EQ.1 .AND. FM1(P).EQ.'DR') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(19)
	 CS(CHEM) = 19
	 GOTO 930
      ELSE IF (GFLAG(20).EQ.1 .AND. FM1(P).EQ.'OR') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(20)
	 CS(CHEM) = 20
	 GOTO 930
      ELSE IF (GFLAG(21).EQ.1 .AND. FM1(P).EQ.'PR') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(21)
	 CS(CHEM) = 21
	 GOTO 930
      ELSE IF (GFLAG(22).EQ.1 .AND. FM1(P).EQ.'TR') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(22)
	 CS(CHEM) = 22
	 GOTO 930
      ELSE IF (GFLAG(23).EQ.1 .AND. FM1(P).EQ.'HR') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(23)
	 CS(CHEM) = 23
	 GOTO 930
      ELSE IF (GFLAG(24).EQ.1 .AND. FM1(P).EQ.'LD') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(24)
	 CS(CHEM) = 24
	 GOTO 930
      ELSE IF (GFLAG(25).EQ.1 .AND. FM1(P).EQ.'KK') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(25)
	 CS(CHEM) = 25
	 GOTO 930
      ELSE IF (GFLAG(26).EQ.1 .AND. FM1(P).EQ.'AL') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(26)
	 CS(CHEM) = 26
	 GOTO 930
      ELSE IF (GFLAG(27).EQ.1 .AND. FM1(P).EQ.'OL') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(27)
	 CS(CHEM) = 27
	 GOTO 930
      ELSE IF (GFLAG(28).EQ.1 .AND. FM1(P).EQ.'CL') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(28)
	 CS(CHEM) = 28
	 GOTO 930
      ELSE IF (GFLAG(29).EQ.1 .AND. FM1(P).EQ.'RL') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(29)
	 CS(CHEM) = 29
	 GOTO 930
      ELSE IF (GFLAG(30).EQ.1 .AND. FM1(P).EQ.'PL') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(30)
	 CS(CHEM) = 30
	 GOTO 930
      ELSE IF (GFLAG(31).EQ.1 .AND. FM1(P).EQ.'AC') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(31)
	 CS(CHEM) = 31
	 GOTO 930
      ELSE IF (GFLAG(32).EQ.1 .AND. FM1(P).EQ.'OC') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(32)
	 CS(CHEM) = 32
	 GOTO 930
      ELSE IF (GFLAG(33).EQ.1 .AND. FM1(P).EQ.'DC') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(33)
	 CS(CHEM) = 33
	 GOTO 930
      ELSE IF (GFLAG(34).EQ.1 .AND. FM1(P).EQ.'RC') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(34)
	 CS(CHEM) = 34
	 GOTO 930
      ELSE IF (GFLAG(35).EQ.1 .AND. FM1(P).EQ.'HD') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(35)
	 CS(CHEM) = 35
	 GOTO 930
      ELSE IF (GFLAG(36).EQ.1 .AND. FM1(P).EQ.'FS') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(36)
	 CS(CHEM) = 36
	 GOTO 930
      ELSE IF (GFLAG(37).EQ.1 .AND. FM1(P).EQ.'ES') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(37)
	 CS(CHEM) = 37
	 GOTO 930
      ELSE IF (GFLAG(38).EQ.1 .AND. FM1(P).EQ.'BS') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(38)
	 CS(CHEM) = 38
	 GOTO 930
      ELSE IF (GFLAG(39).EQ.1 .AND. FM1(P).EQ.'SS') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(39)
	 CS(CHEM) = 39
	 GOTO 930
      ELSE IF (GFLAG(40).EQ.1 .AND. FM1(P).EQ.'US') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(40)
	 CS(CHEM) = 40
	 GOTO 930
      ELSE IF (GFLAG(41).EQ.1 .AND. FM1(P).EQ.'RS') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(41)
	 CS(CHEM) = 41
	 GOTO 930
      ELSE IF (GFLAG(42).EQ.1 .AND. FM1(P).EQ.'AT') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(42)
	 CS(CHEM) = 42
	 GOTO 930
      ELSE IF (GFLAG(43).EQ.1 .AND. FM1(P).EQ.'OT') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(43)
	 CS(CHEM) = 43
	 GOTO 930
      ELSE IF (GFLAG(44).EQ.1 .AND. FM1(P).EQ.'CT') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(44)
	 CS(CHEM) = 44
	 GOTO 930
      ELSE IF (GFLAG(45).EQ.1 .AND. FM1(P).EQ.'TT') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(45)
	 CS(CHEM) = 45
	 GOTO 930
      ELSE IF (GFLAG(46).EQ.1 .AND. FM1(P).EQ.'AH') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(46)
	 CS(CHEM) = 46
	 GOTO 930
      ELSE IF (GFLAG(47).EQ.1 .AND. FM1(P).EQ.'HH') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(47)
	 CS(CHEM) = 47
	 GOTO 930
      ELSE IF (GFLAG(48).EQ.1 .AND. FM1(P).EQ.'RH') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(48)
	 CS(CHEM) = 48
	 GOTO 930
      ELSE IF (GFLAG(49).EQ.1 .AND. FM1(P).EQ.'VH') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(49)
	 CS(CHEM) = 49
	 GOTO 930
      ELSE IF (GFLAG(50).EQ.1 .AND. FM1(P).EQ.'WH') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(50)
	 CS(CHEM) = 50
	 GOTO 930
      ELSE IF (GFLAG(51).EQ.1 .AND. FM1(P).EQ.'FH') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(51)
	 CS(CHEM) = 51
	 GOTO 930
      ELSE IF (GFLAG(52).EQ.1 .AND. FM1(P).EQ.'PH') THEN
	 CHEM = CHEM + 1
	 CS(CHEM) = 52
	 TVAL(CHEM) = CINP(52)
	 GOTO 930
      ELSE IF (GFLAG(53).EQ.1 .AND. FM1(P).EQ.'AM') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(53)
	 CS(CHEM) = 53
	 GOTO 930
      ELSE IF (GFLAG(54).EQ.1 .AND. FM1(P).EQ.'BM') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(54)
	 CS(CHEM) = 54
	 GOTO 930
      ELSE IF (GFLAG(55).EQ.1 .AND. FM1(P).EQ.'RM') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(55)
	 CS(CHEM) = 55
	 GOTO 930
      ELSE IF (GFLAG(56).EQ.1 .AND. FM1(P).EQ.'OM') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(56)
	 CS(CHEM) = 56
	 GOTO 930
      ELSE IF (GFLAG(57).EQ.1 .AND. FM1(P).EQ.'NX') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(57)
	 CS(CHEM) = 57
	 GOTO 930
      ELSE IF (GFLAG(58).EQ.1 .AND. FM1(P).EQ.'TN') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(58)
	 CS(CHEM) = 58
	 GOTO 930
      ELSE IF (GFLAG(59).EQ.1 .AND. FM1(P).EQ.'YN') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(59)
	 CS(CHEM) = 59
	 GOTO 930
      ELSE IF (GFLAG(60).EQ.1 .AND. FM1(P).EQ.'SD') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(60)
	 CS(CHEM) = 60
	 GOTO 930
      ELSE IF (GFLAG(61).EQ.1 .AND. FM1(P).EQ.'SF') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(61)
	 CS(CHEM) = 61
	 GOTO 930
      ELSE IF (GFLAG(62).EQ.1 .AND. FM1(P).EQ.'PC') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(62)
	 CS(CHEM) = 62
	 GOTO 930
      ELSE IF (GFLAG(63).EQ.1 .AND. FM1(P).EQ.'PS') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(63)
	 CS(CHEM) = 63
	 GOTO 930
      ELSE IF (GFLAG(64).EQ.1 .AND. FM1(P).EQ.'PO') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(64)
	 CS(CHEM) = 64
	 GOTO 930
      ELSE IF (GFLAG(65).EQ.1 .AND. FM1(P).EQ.'NP') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(65)
	 CS(CHEM) = 65
	 GOTO 930
      ELSE IF (GFLAG(66).EQ.1 .AND. FM1(P).EQ.'TM') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(66)
	 CS(CHEM) = 66
	 GOTO 930
      ELSE IF (GFLAG(67).EQ.1 .AND. FM1(P).EQ.'PM') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(67)
	 CS(CHEM) = 67
	 GOTO 930
      ELSE IF (GFLAG(68).EQ.1 .AND. FM1(P).EQ.'PN') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(68)
	 CS(CHEM) = 68
	 GOTO 930
      ELSE IF (GFLAG(69).EQ.1 .AND. FM1(P).EQ.'SP') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(69)
	 CS(CHEM) = 69
	 GOTO 930
      ELSE IF (GFLAG(70).EQ.1 .AND. FM1(P).EQ.'HP') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(70)
	 CS(CHEM) = 70
	 GOTO 930
      ELSE IF (GFLAG(71).EQ.1 .AND. FM1(P).EQ.'BP') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(71)
	 CS(CHEM) = 71
	 GOTO 930
      ELSE IF (GFLAG(72).EQ.1 .AND. FM1(P).EQ.'OP') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(72)
	 CS(CHEM) = 72
	 GOTO 930
      ELSE IF (GFLAG(73).EQ.1 .AND. FM1(P).EQ.'SX') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(73)
	 CS(CHEM) = 73
	 GOTO 930
      ELSE IF (GFLAG(74).EQ.1 .AND. FM1(P).EQ.'GI') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(74)
	 CS(CHEM) = 74
	 GOTO 930
      ELSE IF (GFLAG(75).EQ.1 .AND. FM1(P).EQ.'GS') THEN
	 CHEM = CHEM + 1
	 TVAL(CHEM) = CINP(75)
	 CS(CHEM) = 75
	 GOTO 930
      ELSE
C        PRINT *, NP1(P,2)
	 DO 915, SKIP = 1, NP1(P, 2) 
	    READ(61, *)
915      CONTINUE           
	 FM1(P)='ZZ'
	 GOTO 940
      END IF      

C  THE IF-THEN LOGIC IS USED SO THAT ALL OF THE EXPERIMENTAL DATA IS NOT READ
C  IN UNNECESSARILY UNTIL ONLY THE CHEMICALS CONTAINING THE DESIRED FRAGMENTS
C  ARE DETERMINED IF MFIT = 3.

930   CONTINUE
      NPOINT(CHEM, 1) = NP1(P, 1)
      FMGRP(CHEM) = FM1(P) 
      NPOINT(CHEM, 2) = NP1(P, 2)
C      WRITE(71, *) NPOINT(CHEM,1),FMGRP(CHEM),NPOINT(CHEM,2)
      WRITE(71, *) NPOINT(CHEM,1),'  ',FMGRP(CHEM),NPOINT(CHEM,2)
      WRITE(54, 1012) CHEM, NPOINT(CHEM, 1), FMGRP(CHEM), 
     &                NPOINT(CHEM,2)
      WRITE(72,*) NPOINT(CHEM,1)
C      PRINT *, NPOINT(CHEM, 1)
      CALL GETDATA(NPOINT, CHEM, CNUM, TP)
940   CONTINUE

C***********************FORMAT STATEMENTS************************

1012  FORMAT (6X, I5, 4X, I12, 9X, A2, 5X, I4)
3002  FORMAT (I8, 22(',',I4))
3003  FORMAT (6X, I5, 4X, I12, 9X, A2, 5X, I4)

      RETURN
      END

C**********************SUBROUTINE:  SORTSEED*********************

C  THIS SUBROUTINE SORTS THE A and B SEED VALUES SO THAT THEY ARE 
C  OUTPUTTED IN ASCENDING ORDER.

      SUBROUTINE SORTSEED(NUMB2, SEED2, NPAR2)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      PARAMETER(DD = 220)
      INTEGER  NUMB2(DD), NPAR2,RTYPE,ICOUNT,JCOUNT,LOCSMI
      DOUBLE PRECISION SEED2(DD)
      INCLUDE 'settings.for'

      CC = NPAR2*2-1
      ICOUNT = 0
      DO 3000 I=1, CC, 2
	 ICOUNT=ICOUNT+1
	 SMALL1 = NUMB2(I)
	 SMALL2 = NUMB2(I+1)
	 IF (FTYPE.NE.2) THEN
	    SMSEED1 = SEED2(I)
	    SMSEED2 = SEED2(I+1)
	 ELSEIF (FTYPE.EQ.2.AND.RTYPE.EQ.1) THEN
	    SMALL1 = NUMB2(ICOUNT)
	    SMSEED1 = SEED2(ICOUNT)
	 END IF
	 LOCSM = I
	 LOCSMI = ICOUNT
	 JCOUNT = ICOUNT
	 DO 3010 J = I+2, CC, 2
	    JCOUNT = JCOUNT + 1
            IF (FTYPE.NE.2) THEN
	       IF (NUMB2(J).LT.SMALL1) THEN
	          SMALL1 = NUMB2(J)
	          SMALL2 = NUMB2(J+1)
		  SMSEED1 = SEED2(J)
		  SMSEED2 = SEED2(J+1)
	          LOCSM = J
                  GOTO 3010
               END IF
	    ELSEIF (FTYPE.EQ.2.AND.RTYPE.EQ.1) THEN
	       IF (NUMB2(JCOUNT).LT.SMALL1) THEN
		  SMALL1 = NUMB2(JCOUNT)
		  SMSEED1 = SEED2(JCOUNT)
	          LOCSMI = JCOUNT
	       END IF
	    END IF
3010     CONTINUE

	 IF (RTYPE.NE.1) THEN
	    NUMB2(LOCSM) = NUMB2(I)
	    NUMB2(LOCSM+1) = NUMB2(I+1)
	    NUMB2(I) = SMALL1
	    NUMB2(I+1) = SMALL2
	 ELSEIF (RTYPE.EQ.1) THEN
	    NUMB2(LOCSMI) = NUMB2(ICOUNT)   
	    NUMB2(ICOUNT) = SMALL1
	 END IF
	 IF (FTYPE.NE.2) THEN
	    SEED2(LOCSM) = SEED2(I)
	    SEED2(LOCSM+1) = SEED2(I+1)
	    SEED2(I) = SMSEED1
	    SEED2(I+1) = SMSEED2
	 ELSEIF (FTYPE.EQ.2.AND.RTYPE.EQ.1) THEN
	    SEED2(LOCSMI) = SEED2(ICOUNT)
	    SEED2(ICOUNT) = SMSEED1
	 END IF
3000  CONTINUE

      RETURN
      END

C**********************SUBROUTINE:  SORTC*********************

C  THIS SUBROUTINE SORTS THE C VALUES AND REORDERS THE INDEX 
C  VARIABLES APPROPRIATELY.  

      SUBROUTINE SORTC(CMAX,SEED,DS2,FMGRP2,CSET)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      INTEGER  DS2(75),CSET(808),SMALL1
      DOUBLE PRECISION SEED(75),SMALL2
      CHARACTER*2 FMGRP2(808),SMALL3
      COMMON /J/ CPAR0,MPAR

C      PRINT *, CPAR0,MPAR
      DO 4500,CH=CPAR0+1,MPAR
	 SMALL1=DS2(CH-CPAR0)
	 SMALL2=SEED(CH)
	 SMALL3=FMGRP2(CH-CPAR0)
	 LOCSM = CH
	 DO 4520, CL=CH+1,MPAR
	    IF(DS2(CL-CPAR0).LT.SMALL1) THEN
	       SMALL1 = DS2(CL-CPAR0)
	       SMALL3 = FMGRP2(CL-CPAR0)
	       SMALL2 = SEED(CL)
	       LOCSM = CL
	    END IF
4520     CONTINUE
	 DS2(LOCSM-CPAR0) = DS2(CH-CPAR0)
	 SEED(LOCSM) = SEED(CH)
	 FMGRP2(LOCSM-CPAR0) = FMGRP2(CH-CPAR0)

	 DS2(CH-CPAR0) = SMALL1
	 SEED(CH) = SMALL2
	 FMGRP2(CH-CPAR0) = SMALL3
	 DO 4510, I=1,CMAX
	    IF(LOCSM.EQ.CH) THEN
	       GOTO 4500 
	    ELSE IF(LOCSM.NE.CH.AND.CSET(I).EQ.CH) THEN
	       CSET(I) = LOCSM-CPAR0
	    ELSE IF(LOCSM.NE.CH.AND.CSET(I).EQ.LOCSM) THEN
	       CSET(I) = CH-CPAR0
	    END IF
4510     CONTINUE 
4500  CONTINUE
      RETURN
      END
C***********************SUBROUTINE:  WRITEITER  *****************

C  THIS SUBROUTINE WRITE THE INTERMEDIATE PARAMETER MATRIX TO OUTPUT
C  FILES THAT CAN BE SUBSTITUTED ASTHE SEED INPUT FILES.
      
      SUBROUTINE WRITEITER(PASS, DS2,SEEDI, NN, NUMB)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      PARAMETER(DD = 220)
      CHARACTER*2 FMGRP2(75)
      INTEGER NN,PASS, NUMB(DD), PASS1, DS2(75)
      DOUBLE PRECISION SEEDI(NN),CINP
      COMMON /G/ CINP(100),MFIT,CFIT
      COMMON /J/ CPAR0,MPAR
      COMMON /K/ FMGRP2
      
      IF (PASS.EQ.1) THEN
	 PASS1=1
      END IF 

      IF (PASS1.GT.0) THEN
	OPEN (53, FILE='seedab1.log', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	ENDFILE (53)
	REWIND (53)
	 OPEN (68, FILE='cval1.log', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	 ENDFILE (68)
	 REWIND (68)
      ELSE IF (PASS1.LT.0) THEN
	OPEN (53, FILE='seedab2.log', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	ENDFILE (53)
	REWIND (53)
	 OPEN (68, FILE='cval2.log', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
	 ENDFILE (68)
	 REWIND (68)
      END IF

      PASS1=-(PASS1)
      WRITE(53, *) 'PASS: ',PASS
      WRITE(68, *) 'PASS: ',PASS
C***      WRITE(57, 1003)
C***      WRITE(57, 1016) 
      WRITE(53, 4003)
      WRITE(53, 4016) 
      
      IF (CFIT.EQ.1) THEN
	 DO 4250, FNUM = 1, 115
	    DO 4260, BB = 1, CPAR0
	       IF (FNUM.EQ.NUMB(BB)) THEN
C***               WRITE(53, 5004) FNUM,SEEDI(BB),SEEDI(BB+1),
C***     &                     SEEDI(BB+2)
		 WRITE(53, 4004) SEEDI(BB), SEEDI(BB+1)
		  GOTO 4250
	       END IF
4260        CONTINUE

	    Z = 0.
	   WRITE(53, 4004) Z, Z        

4250     CONTINUE
      
C         WRITE (68,'(//)')
C         WRITE (68, 4017)        
C         WRITE (68, 4018)     
	 BH = 0   
	 DO 4870, BG = CPAR0+1, MPAR
	    BH = BH + 1
	    WRITE(68, *) BG,FMGRP2(BH),SEEDI(BG),DS2(BH)
C           WRITE(68, 4019) FMGRP2(BH), SEEDI(BG), DS2(BH)
4870     CONTINUE
      ELSE IF(CFIT.EQ.0) THEN
	 DO 4890, FNUM = 1, 115
C***            DO 4895, BC = 1, 324
	    DO 4895, BC = 1, 230
	       IF (FNUM.EQ.NUMB(BC)) THEN
C***               WRITE(53, 5004) FNUM,SEEDI(BC),SEEDI(BC+1),
C***     &                  SEED(BC+2)
		 WRITE(53, 4004) SEEDI(BC), SEEDI(BC+1)
		  GOTO 4890
	       END IF
4895        CONTINUE
	   WRITE(53, 4004) Z, Z        
4890     CONTINUE
      END IF

4003  FORMAT (1X,' FRAG #',2X, '      A      ', 2X, '      B      ')
4004  FORMAT (1X,F13.8,',',F13.8)
4016  FORMAT (1X, '-------', 2X, 2('-------------',2X),/) 
4017  FORMAT (1X, 'SUBGROUP', 2X, '  C VALUE   ')
4018  FORMAT (1X, '--------', 2X, '------------',/)
4019  FORMAT (1X,A5,2X, F12.5,2X, I3)
5004  FORMAT (1X, I7, 3(2X, F13.8))
      CLOSE (53)
      CLOSE (68)
      RETURN
      END

C***********************SUBROUTINE:  LINPREP  *****************

C  THIS SUBROUTINE CALCULATES THE PARAMETER COEFFICIENTS WHICH WILL
C  BE FED INTO MLR.  THE LOG10(Psat) VALUES ARE ASSIGNED TO Y(NY) AND
C  THE OTHER COEFFICIENTS ON THE RHS TO XL(NZ,NY)
      
      SUBROUTINE LINPREP(AA,BB)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      INTEGER FRAGLIN(808,115),NPOINT,CMAX,I,J,K,IBIG,JBIG,
     &      FRAGMENT(115),DS2(75),RP(75),RCOUNT,DS3(75),CFIT
      CHARACTER*2 FMGRP(808)
C      CHARACTER*6 RUNA
C      CHARACTER*9 RUNCHAR
      DOUBLE PRECISION TP,ALDE,TVAL(808),REFC(75,5),PREF,
     &                 STDTOT,K0,K1,BB2(115)
      INCLUDE 'param.for'
      COMMON /C/ TP(808,900),NPOINT(808,2),CMAX
      COMMON /E/ FMGRP, CS(808)
      COMMON /M/ MAXFRG, FRAGMENT, NOFRG(115),MPMAX
      COMMON /P/ DS2,RP,RCOUNT,REFC,DS3,FRAGLIN
      COMMON /Q/ TVAL

      DOUBLE PRECISION C(PP,PP),B(PP),A(PP),IPVT(PP),XSUM,YSUM,STD,
     &                 AA(115),BB(115),CLP
      EXTERNAL LINPAC,REFP

      INCLUDE 'settings.for'

C      DO 5000, D=1,115
C         PRINT *, 'D: ',D,'  ','AA(D): ',AA(D),' BB(D): ',BB(D)
C5000  CONTINUE

C      OPEN (81, FILE='c.out', STATUS='UNKNOWN', 
C     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      OPEN (82, FILE='b.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')

C
C  THE FOLLOWING BLOCK INITIALIZES AND WRITES DESCRIPTIVE INFO FOR THE 
C  CURRENT RUN.
C

      PRINT *, 'Name of run: '
C      READ '(A)',RUNA
C      BZ = INDEX(RUNA, ' ')
C      BZ=BZ-1
      OPEN (84, FILE='ls1.log' , STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')

C      WRITE (84,*) 'The results of Run #  ',RUNA,' are:'
      WRITE(84,*)
      WRITE(84,*) '# of chemicals:  ',CMAX
      WRITE(84,*) '# of Fragments:  ',MAXFRG
      DPMAX = 0
      DO 4230, K=1,CMAX
	 DPMAX = DPMAX + NPOINT(K,2)
4230  CONTINUE
      WRITE(84,*) '# of Datapoints:  ',DPMAX
      WRITE(84,*)
C      DO 4220, I=1,MAXFRG
C       WRITE(84,*) '   Fragment #:  ',FRAGMENT(I)
C4220  CONTINUE

      IF(RTYPE.EQ.0) THEN
	 GOTO 4125
      ELSEIF (RTYPE.EQ.1) THEN
	 GOTO 4725
      END IF

C****THIS SECTION IS FOR THE ABSOLUTE LINEAR MODELS******************

C  THIS BLOCK SUMS UP THE DIFFERENTIAL MATRIX COEFFICIENTS ON THE LHS.
      
4125  CONTINUE
      FMAX = MAXFRG*2
C      PRINT *, 'MAXFRG: ',MAXFRG
      NZ = 0
      DO 4100, I=1,FMAX
	 DO 4110, J=1,FMAX
	    XSUM = 0.
C            PRINT *, 'CMAX: ',CMAX
	    DO 4120, K=1,CMAX
	       IF(CFIT.EQ.0) THEN
		  CLP = 0.0
	       ELSEIF(CFIT.EQ.1) THEN
		  CLP = DFLOAT(TVAL(K))-DFLOAT(27.315)
	       END IF
	       DO 4130, L=1,NPOINT(K,2)*2-1,2
		  NZ=NZ+1
		  IF (I.LE.MAXFRG.AND.J.LE.MAXFRG) THEN
		     XSUM=DFLOAT(FRAGLIN(K,I))*DFLOAT(FRAGLIN(K,J))+
     &                    XSUM
		  ELSEIF (I.LE.MAXFRG.AND.J.GT.MAXFRG) THEN
		     JBIG = J-MAXFRG
		     XSUM=DFLOAT(FRAGLIN(K,I))*DFLOAT(-FRAGLIN(K,JBIG))/
     &                     (DFLOAT(TP(K,L))+CLP*10.)+XSUM
		  ELSEIF (I.GT.MAXFRG.AND.J.LE.MAXFRG) THEN
		     IBIG = I-MAXFRG
		     XSUM=DFLOAT(FRAGLIN(K,J))*DFLOAT(-FRAGLIN(K,IBIG))/
     &                     (DFLOAT(TP(K,L))+CLP*10.)+XSUM
		  ELSEIF (I.GT.MAXFRG.AND.J.GT.MAXFRG) THEN
		     IBIG = I-MAXFRG
		     JBIG = J-MAXFRG
		     XSUM=DFLOAT(-FRAGLIN(K,JBIG))/(DFLOAT(TP(K,L))+
     &                    CLP*10.)*DFLOAT(-FRAGLIN(K,IBIG))/(DFLOAT(
     &                    TP(K,L))+CLP*10.)+XSUM
		  END IF
4130           CONTINUE 
4120        CONTINUE
	    C(I,J)=XSUM
C            PRINT *, 'C(I,J): ',C(I,J)
4110     CONTINUE
C	 PRINT *,' (C)PAR: ',I
4100  CONTINUE

C      DO 4200, I=1,FMAX
C        WRITE (81,*) (C(I,J),J=1,FMAX)
C         WRITE (81,4201) (C(I,J),J=1,FMAX)
C4200  CONTINUE
C 4201  FORMAT(1X,PP(2X,D10.3))
      CLOSE (81)      
      GOTO 4135
C****THIS SECTION IS FOR THE REFERENCE LINEAR MODELS******************      

C  THIS BLOCK SUMS UP THE DIFFERENTIAL MATRIX COEFFICIENTS ON THE LHS.

4725  CONTINUE
   
      FMAX = MAXFRG
      NZ = 0
      PREF = 0.
      DO 4700, I=1,MAXFRG
	 DO 4710, J=1,MAXFRG
	    XSUM = 0.
	    DO 4720, K=1,CMAX
	       K0 = 0.
	       K1 = 0.
	       DO 4770, EE=1, RCOUNT
		  IF (DS3(EE).EQ.CS(K)) THEN
		     G = RP(EE)
		     GOTO 4775
		  END IF
4770           CONTINUE
4775           CONTINUE
	       DO 4780, EF=1,MAXFRG
		  K1 = K1 + DFLOAT(FRAGLIN(K,EF))*BB(EF)
		  K0 = K0 + DFLOAT(FRAGLIN(G,EF))*BB(EF)
C                  PRINT *,'FRAGLIN(G,EF): ',FRAGLIN(G,EF),'BB: ',
C     &                    BB(EF)
4780           CONTINUE
	       DO 4730, L=1,NPOINT(K,2)*2-1,2
		  NZ=NZ+1
C                  PRINT *, 'K0: ',K0,G,K
C                  PRINT *, 'K ',NPOINT(K,1),'G ',NPOINT(G,1)
		  XSUM=(DFLOAT(FRAGLIN(K,I))-K1/K0*
     &                  DFLOAT(FRAGLIN(G,I)))*(-FLOAT(FRAGLIN(K,J))+
     &                  K1/K0*DFLOAT(FRAGLIN(G,J)))+XSUM
C                  PRINT *,'XSUM: ',XSUM
C                  IF (I.EQ.1) THEN
C                     WRITE (81,*) I,J,K0,K1,FRAGLIN(K,I),FRAGLIN(G,I),
C     &                    FRAGLIN(K,J),FRAGLIN(G,J),TP(K,L),XSUM
C                  END IF
4730           CONTINUE 
4720        CONTINUE
	    C(I,J)=XSUM
C            IF (J.EQ.1) THEN
C               PRINT *,I,J,'C(I,J): ',C(I,J)
C            END IF
C	    WRITE(81,*) 'I:',I,'J:',J,'C(I,J):',C(I,J)
4710     CONTINUE
C	 PRINT *,' (C)PAR: ',I
4700  CONTINUE
C      DO 4800, I=1,MAXFRG
C        WRITE (81,*) (C(I,J),J=1,FMAX)
C         WRITE (81,4201) (C(I,J),J=1,FMAX)
C4800  CONTINUE
C 4801  FORMAT(1X,PP(2X,D10.3))
C      CLOSE (81)
      GOTO 4735
	       
C****THIS SECTION IS FOR THE ABSOLUTE LINEAR MODELS******************

C  THIS BLOCK SUMS UP THE RHS COEFFICIENTS.

4135  CONTINUE

      DO 4140, I = 1, FMAX
	 YSUM = 0.
	 DO 4150, K= 1, CMAX
	    IF(CFIT.EQ.0) THEN
	       CLP = 0.0
	    ELSEIF(CFIT.EQ.1) THEN
	       CLP = DFLOAT(TVAL(K))-DFLOAT(27.315)
	    END IF
	    DO 4160, J=2,NPOINT(K,2)*2,2
	       IF (I.LE.MAXFRG) THEN
		  YSUM=DFLOAT(FRAGLIN(K,I))*DLOG10(DFLOAT(TP(K,J)))+YSUM
C                  PRINT *, FRAGLIN(K,I),DLOG10(DFLOAT(TP(K,J))),YSUM
C                  WRITE(82,*) I,K,FRAGLIN(K,I),DLOG10(DFLOAT(TP(K,J))),
C     &                        DFLOAT(TP(K,J-1)),CLP*10., YSUM
	       ELSEIF (I.GT.MAXFRG) THEN
		  IBIG = I-MAXFRG
		  YSUM=-DFLOAT(FRAGLIN(K,IBIG))/(DFLOAT(TP(K,J-1))+
     &                 CLP*10.)*DLOG10(DFLOAT(TP(K,J)))+YSUM
C                  PRINT *, FRAGLIN(K,IBIG),DLOG10(DFLOAT(TP(K,J))),
C     &                 DFLOAT(TP(K,J-1)),CLP*10.,YSUM
C                  WRITE(82,*) I,K,FRAGLIN(K,IBIG),DLOG10(DFLOAT(TP(K,J))
C     &                ),DFLOAT(TP(K,J-1)),CLP*10.,YSUM
C                  WRITE(82,*) I,K,-FRAGLIN(K,IBIG)/DFLOAT(TP(K,J-1)),
C     &                 DLOG10(DFLOAT(TP(K,J)))
	       END IF
4160        CONTINUE
4150     CONTINUE
	 B(I) = YSUM
C        PRINT *, 'I: ',I,' B(I): ',B(I)
C         WRITE(82,*) 'B(I): ',B(I)
4140  CONTINUE

C      WRITE(82,*) (B(K),K=1,FMAX)
C4202  FORMAT(1X,PP(2X,D10.3))
C      CLOSE(82) 
      GOTO 4145

C****THIS SECTION IS FOR THE REFERENCE LINEAR MODELS******************      

C  THIS BLOCK SUMS UP THE RHS COEFFICIENTS.
4735  CONTINUE

      DO 4740, I = 1,MAXFRG 
	 YSUM = 0.
	 DO 4750, K= 1, CMAX
	    K0 = 0.
	    K1 = 0.
	    DO 4940, EE=1, RCOUNT
	       IF (DS3(EE).EQ.CS(K)) THEN
		  G = RP(EE)
		  GOTO 4945
	       END IF
4940        CONTINUE
4945        CONTINUE
	    DO 4950, EF=1,MAXFRG
	       K1 = K1 + DFLOAT(FRAGLIN(K,EF))*BB(EF)
	       K0 = K0 + DFLOAT(FRAGLIN(G,EF))*BB(EF)
C               PRINT *,K,' FRAG#: ',EF,' VALUE: ',BB(EF),' #: ',
C     &                 FRAGLIN(G,EF), 'G: ',G,' K0: ',K0
4950        CONTINUE
C            PRINT *, 'K0: ',K0
C            PRINT *, 'NPOINT(K,2): ',NPOINT(K,2)
	    DO 4760, J=2,NPOINT(K,2)*2,2
C               PRINT *, REFP(K,CS,TP(K,J-1))
	       PREF = DLOG10(REFP(K,CS,TP(K,J-1)))
	       YSUM=(DLOG10(DFLOAT(TP(K,J)))-K1/K0*PREF)*
     &              (K1/K0*FRAGLIN(G,I)-FRAGLIN(K,I))+YSUM
C               PRINT *,'PREF: ',PREF,'YSUM: ',YSUM
              IF (I.EQ.1) THEN
                 WRITE(82,*) I,K,FRAGLIN(K,I),FRAGLIN(G,I),
     &               DLOG10(TP(K,J)),PREF,TP(K,J-1),K1,K0,YSUM
              END IF
4760        CONTINUE
4750     CONTINUE
	 B(I) = YSUM
	 PRINT *, 'I: ',I,' B(I): ',B(I)
	WRITE(82,*) 'I:',I,' B(I): ',B(I)
4740  CONTINUE

C      WRITE(82,*) (B(K),K=1,MAXFRG)
      CLOSE(82) 

4145  CONTINUE

C      PRINT *, 'GOING IN...'

      CALL LINPAC(FMAX, C, B, A, IPVT)      
C      PRINT *, 'COMING OUT!!'
C      DO 6000, ES=1,MAXFRG
C	 PRINT *, ES,' A: ',A(ES)
C6000  CONTINUE

C  THE FOLLOWING BLOCK CALCULATES THE STANDARD ERROR OF REGRESSION

C      OPEN (83, FILE='ff.out', STATUS='UNKNOWN', 
C     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
      OPEN (88, FILE='linseed.out', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')

      IF(RTYPE.EQ.0) THEN
	 GOTO 4225
      ELSEIF (RTYPE.EQ.1) THEN
	 GOTO 4825
      END IF

C****THIS SECTION IS FOR THE ABSOLUTE LINEAR MODELS******************
      
4225  CONTINUE      
      NS = 0
      PRINT *, 'CMAX: ',CMAX
      DO 4300, I = 1,CMAX
	 IF(CFIT.EQ.0) THEN
	    CLP = 0.0
	 ELSEIF (CFIT.EQ.1) THEN
	    CLP = TVAL(I)-DFLOAT(27.315)
	 END IF
C        WRITE(83,*) NPOINT(I,1)
	 DO 4310, J = 2, NPOINT(I,2)*2, 2
	    XSUM = 0.0
	    NS = NS + 1
	    DO 4320, K = 1,FMAX
	       IF (K.LE.MAXFRG) THEN
		  XSUM = XSUM + A(K)*DFLOAT(FRAGLIN(I,K))
C                  WRITE(83,*) NPOINT(I,1),A(K),FRAGLIN(I,K)
	       ELSEIF (K.GT.MAXFRG) THEN
		  XBIG = K-MAXFRG
		  XSUM = XSUM + A(K)*(-DFLOAT(FRAGLIN(I,XBIG)))
     &                   /(DFLOAT(TP(I,J-1))+CLP*10.)
C                  WRITE(83,*) NPOINT(I,1),A(K),FRAGLIN(I,XBIG),
C     &                    TP(I,J-1),CLP
	       END IF
4320        CONTINUE
	    ALDE = ABS(DLOG10(DFLOAT(TP(I,J)))-XSUM)
	    STD = STD + (DLOG10(DFLOAT(TP(I,J))) - XSUM)**2
	    PRINT *, 'STD: ',STD
C            WRITE(83,*) NPOINT(I,1),TP(I,J)
C           WRITE(83, *) TP(I,J-1),DLOG10(TP(I,J)),XSUM,ALDE
4310     CONTINUE
4300  CONTINUE
      GOTO 4335

C****THIS SECTION IS FOR THE REFERENCE LINEAR MODELS******************      

4825  CONTINUE
      NS = 0
      XSUM = 0.
      DO 4900, I = 1,CMAX
	 K0 = 0.
	 K1 = 0.
C        WRITE(83,*) NPOINT(I,1)
C         DO 6000, EM=1,CMAX
C            DO 6010, EN=1,MAXFRG
C               PRINT *,EM,EN,'FRAGLIN: ',FRAGLIN(EM,EN)
C6010        CONTINUE
C6000     CONTINUE
	 DO 4870, EE=1, RCOUNT
	    IF (DS3(EE).EQ.CS(K)) THEN
	       G = RP(EE)
	       GOTO 4875
	    END IF
4870     CONTINUE
4875     CONTINUE
	 DO 4880, EF=1,MAXFRG
	    K1 = K1 + DFLOAT(FRAGLIN(I,EF))*BB(EF)
	    K0 = K0 + DFLOAT(FRAGLIN(G,EF))*BB(EF)
C            PRINT *, 'FRAGLIN: ',FRAGLIN(I,EF),'AA: ',AA(EF),
C     &             'A: ',A(EF)
4880     CONTINUE
	 DO 4910, J = 2, NPOINT(I,2)*2, 2
C            PRINT *,'B(I): ',K1,'B(0): ',K0
	    XSUM=K1/K0*DLOG10(REFP(I,CS,TP(I,J-1)))
            ZZ=DLOG10(REFP(I,CS,TP(I,J-1)))
C            PRINT *, I, 'XSUM: ',XSUM
	    DO 4920, K = 1,MAXFRG
C               PRINT *,K,' A(K): ',A(K)
	       XSUM=XSUM+A(K)*(-K1/K0*DFLOAT(FRAGLIN(G,K))+
     &               DFLOAT(FRAGLIN(I,K)))
C               PRINT *, I, 'K: ',K,'XSUM: ',XSUM
4920        CONTINUE
4895        CONTINUE
	    NS = NS + 1
	    ALDE = ABS(DLOG10(DFLOAT(TP(I,J)))-XSUM)
	    STD = STD + (DLOG10(DFLOAT(TP(I,J))) - XSUM)**2
C            WRITE(83,*) NPOINT(I,1),TP(I,J)
C           WRITE(83, *) TP(I,J-1),ZZ,DLOG10(TP(I,J)),XSUM,ALDE
4910     CONTINUE
4900  CONTINUE

C****COMMON AREA TO BOTH LINEAR AND REFERENCE MODELS******************

4335  CONTINUE
      PRINT *, STD,'  ',DFLOAT(NS)
      STDTOT = DSQRT(STD/(DFLOAT(NS)))
C      STDTOT = DSQRT(STD/(DFLOAT(NS-FMAX-1)))
      WRITE(84,*)'The parameter values are:'
      PRINT *,'The parameter values are:'
      DO 4330, BC=1,MAXFRG
	 IF (RTYPE.EQ.0) THEN
	    AA(FRAGMENT(BC)) = A(BC)
	    BB(FRAGMENT(BC)) = A(BC+MAXFRG)/100. 
	 ELSEIF (RTYPE.EQ.1) THEN
	    AA(FRAGMENT(BC)) = A(BC)
	    BB2(FRAGMENT(BC)) = BB(BC)
	 END IF
4330  CONTINUE
      DO 4340, BD=1,MPMAX
	 AA(NOFRG(BD)) = 0.0
	 BB2(NOFRG(BD)) = 0.0
4340  CONTINUE
      DO 4350, BE=1,115
         BB(BE)=BB2(BE)
	 WRITE(84,*) BE,'A: ', AA(BE), '   B: ',BB(BE)
	 WRITE(88,*) AA(BE), ',',BB(BE)
	PRINT *, BE,'A: ', AA(BE), '   B: ',BB(BE)
4350  CONTINUE
      WRITE(84,*) 'The standard error of regression is: ',STDTOT
      PRINT *, 'The standard error of regression is: ',STDTOT
    
C*****************************************************************
4390  CONTINUE
      IF (RTYPE.EQ.1) THEN
	 GOTO 4380
      END IF
      DO 4360, BF=1,CMAX
	 DO 4370, BG = 1, BF-1
	    IF (CS(BG).EQ.CS(BF)) THEN
	       GOTO 4360
	    END IF
4370     CONTINUE
	 WRITE(84,*) 'FAMGRP#: ',CS(BF),'  =  ',TVAL(BF)
4360  CONTINUE
4380  CONTINUE
C      CLOSE(83)
      CLOSE(84)
      CLOSE(88)
      RETURN
      END
 
C***********************SUBROUTINE: NBP***************************


      SUBROUTINE NBP(P,NTEMP)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      DIMENSION CASN(1200)
      DOUBLE PRECISION NT(1200),NTEMP
      COMMON /C/ TP(808,900),NPOINT(808,2),CMAX

      FA = 0
     
      IF(P.EQ.1) THEN
	 OPEN (89, FILE='nbp.dat', STATUS='UNKNOWN', 
     &          ACCESS='SEQUENTIAL', FORM='FORMATTED')
4400     FA=FA+1
	 READ(89,*,ERR=4410) CASN(FA), NT(FA) 
	 GOTO 4400
4410     FAMAX=FA - 1
	 CLOSE(89)
      END IF
      DO 4420, K=1,FAMAX
	 IF(NPOINT(P,1).EQ.CASN(K)) THEN
	    NTEMP = NT(K)
	    GOTO 4430
	 END IF
4420  CONTINUE     
      PRINT *, 'NO BOILING POINT FOR CAS#: ',NPOINT(P,1)
4430  CONTINUE 
      RETURN
      END

C***********************FUNCTION: REFP***************************

      FUNCTION REFP(P,CSET,TREF)
      IMPLICIT INTEGER (A-G, M-P)
      IMPLICIT DOUBLE PRECISION (H-L,Q-Z)
      INTEGER RTYPE,RCOUNT,DS2(75),DS3(75),RP(75),FRAGLIN(808,115)
      DIMENSION REFC(75,5),CSET(808)      
      COMMON /P/ DS2,RP,RCOUNT,REFC,DS3,FRAGLIN

      INCLUDE 'settings.for'

      IF (RTYPE.EQ.0) THEN
	 G = CSET(P)
      ELSEIF (RTYPE.EQ.1) THEN
	 DO 5560, EG=1,RCOUNT
	    IF (DS3(EG).EQ.CSET(P)) THEN
	       G = EG
	       GOTO 5565
	    END IF
5560     CONTINUE 
5565     CONTINUE
      END IF
C      PRINT *, REFC(G,1),REFC(G,2),REFC(G,3),REFC(G,4),REFC(G,5),
C     &        'G: ', G, 'TREF: ',TREF
      REFP = DEXP(REFC(G,1)+REFC(G,2)/TREF+REFC(G,3)*DLOG(
     &              TREF)+REFC(G,4)*(TREF**REFC(G,5)))
C      DO 4750, NT=1,5
C         PRINT *, REFC(G,NT)
C4750  CONTINUE
      RETURN
      END
