////////////////////////////////////////////////////////////////////////////////
//
//  IIIIIII SSSSSS
//    II    SS                          InstallShield (R)
//    II    SSSSSS      (c) 1996-1998, InstallShield Software Corporation
//    II        SS      (c) 1990-1996, InstallShield Corporation
//  IIIIIII SSSSSS                     All Rights Reserved.
//
//
//  This code is generated as a starting setup template.  You should
//  modify it to provide all necessary steps for your setup.
//
//
//    File Name:  Setup.rul
//
//  Description:  InstallShield script
//
//     Comments:  This template script performs a basic setup. With minor
//                modifications, this template can be adapted to create
//                new, customized setups.
//
////////////////////////////////////////////////////////////////////////////////

// Added/changed to support template:
//
// This template contains all Project Wizard dialog options, but some may be
// remarked out because they are not appropriate for this template's sample
// application setup. Refer to the ShowDialogs function to see which dialogs
// are remarked out. To use a remarked-out dialog, remove the remark
// characters (//).
//
// *******************************************************************
// *             Licensing and Redistribution Information            *
// *******************************************************************
//
// Files redistributed and installed by this template are FOR
// DEMONSTRATION PURPOSES ONLY and should not be used or redistributed
// by you, your application, or your setups unless you are licensed
// to do so.
//
// YOU ARE RESPONSIBLE FOR ABIDING BY ALL APPLICABLE LICENSING AND
// REDISTRIBUTION AGREEMENTS REGARDING ALL FILES YOU REDISTRIBUTE
// IN YOUR APPLICATIONS AND SETUPS.
//
// Updated:  14 August, 1998

// Include header files

    #include "sdlang.h"
    #include "sddialog.h"

    // Added/changed to support template:
    // DAO & ODBC include
    #include "dao.h"
    #include "odbc.h"

////////////////////// string defines ////////////////////////////

    #define UNINST_LOGFILE_NAME      "Uninst.isu"

    // Added/changed to support template:
    // Added for VB support:
    #define REGTLBDLL                "_regtlb.dll"   // DLL called in ProcessAfterDataMove
    #define SERVICE_PACK             "Service Pack 5" // Used in ISCompareServicePack call.

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes
    // Added/changed to support template:
    // Added for VB support:
    prototype _regtlb.RegTlbFile32( STRING );  // Function to register .tlb files.

     // your DLL prototypes
     // SERIAL NUMBER VERIFICATION AND DATA DECODING.
     prototype cpaslib.snumVerify( POINTER );
     prototype cpaslib.snumIsModulePurchased( POINTER, INT );
     prototype cpaslib.snumGetVersionType( POINTER );
     prototype cpaslib.snumIsExpirationPresent( POINTER );
     prototype cpaslib.snumGetExpirationDay( POINTER );
     prototype cpaslib.snumGetExpirationMonth( POINTER );
     prototype cpaslib.snumGetExpirationYear( POINTER );
     prototype cpaslib.snumCpasLicGenerate( POINTER, POINTER, POINTER, POINTER, POINTER);

// ---- script function prototypes -----

    // generated by the Project Wizard
    prototype ShowDialogs();
    prototype MoveFileData();
    prototype HandleMoveDataError( NUMBER );
    prototype ProcessBeforeDataMove();
    prototype ProcessAfterDataMove();
    prototype SetupRegistry();
    prototype SetupFolders();
    prototype CleanUpInstall();
    prototype SetupInstall();
    prototype SetupScreen();
    prototype CheckRequirements();
    prototype DialogShowSdWelcome();
    prototype DialogShowSdLicense();
    prototype DialogShowSdShowInfoList();
    prototype DialogShowInstallNotes();
    prototype DialogShowSdRegisterUserEx();
    prototype DialogShowAskAboutManualInstalls();
    prototype DialogShowSdAskDestPath();
    prototype DialogShowSdSetupType();
    prototype DialogShowSdComponentDialog2();
    prototype DialogShowSdSelectFolder();
    prototype DialogShowSdStartCopy();
    prototype DialogShowSdFinishReboot();

    // your script function prototypes
     // your prototypes
     prototype CpasINI_Load();
     prototype CpasINI_Save();
     prototype CPASCHK_CreateLicenseFile();
     prototype Select_Purchased_Programs();
    prototype IsDirectoryNameValid83( STRING );
    prototype DialogShowInstallHistory();

    // ----- global variables ------

    // generated by the Project Wizard
    BOOL        bIsWindowsNT4, bIsWindowsNT351, bIsWindows98, bIsWindows95;
    BOOL        bIsShellExplorer, bInstallAborted, bIs32BitSetup;
    STRING      svDir;
    STRING      svName, svCompany, svSerial;
    STRING      svDefGroup;
    STRING      szAppPath;
    STRING      svSetupType;
    LIST        listStartCopy;


    // your global variables
    // Added/changed to support template:
    STRING      svUninstLogFile;

//
// MISCELLANEOUS DEFINITIONS.
//
//#define Default_InstallPath "C:\\ETDOT10"
//#define Default_ProgramGroup "ETDOT Programs"
//#define SHOWUSER_PROGRAM_NAME "ETDOT Programs"
//#define SHOWUSER_CONTROLPANEL_UNINSTALL_NAME "ETDOT Programs"

//
// MISCELLANEOUS GLOBAL VARIABLES.
//
STRING Save_WINDIR;
STRING Save_Startup_SRCDIR;


//
// REGISTRATION/LOCATION SELECTIONS.
//
STRING Global_SerialNumber;
STRING Global_UserName;
STRING Global_CompanyName;
STRING Global_InstallPath;
STRING Global_ProgramGroup;
//STRING Global_InstallHelp_Acrobat;
STRING Global_InstallHelp_Word97;

//
// DATA EXTRACTED FROM SERIAL NUMBER.
//
NUMBER iVersionType;
NUMBER iExpires;
NUMBER iExpiresDay;
NUMBER iExpiresMonth;
NUMBER iExpiresYear;
NUMBER iModule_ADDESIGNS;
NUMBER iModule_ASAP;
NUMBER iModule_STEPP;
NUMBER iModule_FAVOR;
NUMBER iModule_ADOX;
NUMBER iModule_STEPP2;
NUMBER iModule_SCENE;
NUMBER iModule_MPMS;
NUMBER iModule_CPASFRONT;
NUMBER iModule_VRAMODEL;
NUMBER iModule_FAME;
//NUMBER iModule_3;
//NUMBER iModule_4;
NUMBER iModule_ADDESIGNS_AMWAY;
NUMBER iModule_20_MFBMODEL;
NUMBER iModule_21_IONEXCHANGEDESIGNS;
NUMBER iModule_22_CATREAC;

NUMBER Overwrite_asap_dbase;
NUMBER Overwrite_ads_dbase;
NUMBER Overwrite_mfb_examples;

//
// VARIABLES FOR ETDOT/MFBMODEL/CPAS VARIANTS OF THIS INSTALL SOFTWARE.
//
STRING fn_IsMFB_DAT;
NUMBER FileExists_IsMFB_DAT;
STRING fn_IsCPAS_DAT;
NUMBER FileExists_IsCPAS_DAT;

STRING fpart_Infolist_TXT;
STRING fpart_Notes_TXT;
//STRING SHOWUSER_INSTALL_NAME;
STRING use_TITLE_MAIN;
STRING use_TITLE_CAPTIONBAR;
STRING use_COMPANY_NAME;
STRING use_PRODUCT_NAME;
STRING use_PRODUCT_VERSION;
STRING use_PRODUCT_KEY;
STRING use_UNINST_DISPLAY_NAME;
STRING use_UNINST_KEY;
STRING use_Default_InstallPath;
STRING use_Default_ProgramGroup;
NUMBER bool_Display_License_Agreement;





///////////////////////////////////////////////////////////////////////////////
//
//   MAIN PROGRAM
//
//      The setup begins here by hiding the visible setup
//      window.  This is done to allow all the titles, images, etc. to
//      be established before showing the main window.  The setup is
//      then performed in a series of calls to script defined functions,
//      with error checking at each step.
//
///////////////////////////////////////////////////////////////////////////////
program
    Save_WINDIR = WINDIR;
    Save_Startup_SRCDIR = SRCDIR;
    //SHOWUSER_INSTALL_NAME = "ETDOT Programs Install Software";
    //SHOWUSER_INSTALL_NAME = @

    Disable( BACKGROUND );

    //
    // DETECT WHETHER THIS IS THE SPECIAL VARIANT OF THE ETDOT PROGRAMS
    // INSTALL SOFTWARE KNOWN AS THE "MFBMODEL Install Software".
    //
    fn_IsMFB_DAT = SRCDIR ^ "ismfb.dat";
    FileExists_IsMFB_DAT = FALSE;
    fn_IsCPAS_DAT = SRCDIR ^ "iscpas.dat";
    FileExists_IsCPAS_DAT = FALSE;
    //SHOWUSER_INSTALL_NAME = "ETDOT Programs";
    use_TITLE_MAIN = "ETDOT Programs Install Software";
    use_TITLE_CAPTIONBAR = "ETDOT Programs Install Software";
    use_COMPANY_NAME = "CenCITT";
    use_PRODUCT_NAME = "ETDOT Programs";
    use_PRODUCT_VERSION = "1.00.000";
    use_PRODUCT_KEY = "cpaschk.exe";
    use_UNINST_DISPLAY_NAME = "ETDOT Programs";
    use_UNINST_KEY = "ETDOT Programs";
    use_Default_InstallPath = "C:\\ETDOT10";
    use_Default_ProgramGroup = "ETDOT Programs";
    fpart_Infolist_TXT = "infolist_etdot.txt";
    fpart_Notes_TXT = "notes_etdot.txt";
    bool_Display_License_Agreement = TRUE;
    if (Is(FILE_EXISTS,fn_IsMFB_DAT)) then
      FileExists_IsMFB_DAT = TRUE;
      //SHOWUSER_INSTALL_NAME = "MFBMODEL";

      //use_TITLE_MAIN = "MFBMODEL Install Software";
      //use_TITLE_CAPTIONBAR = "MFBMODEL Install Software";
      //use_COMPANY_NAME = "CenCITT";
      //use_PRODUCT_NAME = "MFBMODEL";
      //use_PRODUCT_VERSION = "3.00.000";
      //use_PRODUCT_KEY = "cpaschk.exe";
      //use_UNINST_DISPLAY_NAME = "MFBMODEL";
      //use_UNINST_KEY = "MFBMODEL";
      //use_Default_InstallPath = "C:\\MFB30";
      //use_Default_ProgramGroup = "MFBMODEL - Michigan Tech";
      //fpart_Infolist_TXT = "infolist_mfb.txt";
      //fpart_Notes_TXT = "notes_mfb.txt";

      use_TITLE_MAIN = "ISSWPP (International Space Station Water Processor Programs)";
      use_TITLE_CAPTIONBAR = "ISSWPP (International Space Station Water Processor Programs)";
      use_COMPANY_NAME = "CenCITT";
      use_PRODUCT_NAME = "ISSWPP";
      use_PRODUCT_VERSION = "1.00.000";
      use_PRODUCT_KEY = "cpaschk.exe";
      use_UNINST_DISPLAY_NAME = "ISSWPP";
      use_UNINST_KEY = "ISSWPP";
      use_Default_InstallPath = "C:\\MFB30";
      use_Default_ProgramGroup = "ISSWPP - Michigan Tech";
      fpart_Infolist_TXT = "infolist_isswpp.txt";
      fpart_Notes_TXT = "notes_isswpp.txt";
      bool_Display_License_Agreement = FALSE;
    endif;
    if (Is(FILE_EXISTS,fn_IsCPAS_DAT)) then
      FileExists_IsCPAS_DAT = TRUE;
      //SHOWUSER_INSTALL_NAME = "MFBMODEL";
      use_TITLE_MAIN = "CPAS Programs Install Software";
      use_TITLE_CAPTIONBAR = "CPAS Programs Install Software";
      use_COMPANY_NAME = "CenCITT";
      use_PRODUCT_NAME = "CPAS Programs";
      use_PRODUCT_VERSION = "1.00.000";
      use_PRODUCT_KEY = "cpaschk.exe";
      use_UNINST_DISPLAY_NAME = "CPAS Programs";
      use_UNINST_KEY = "CPAS Programs";
      use_Default_InstallPath = "C:\\CPAS10";
      use_Default_ProgramGroup = "CPAS Programs";
      fpart_Infolist_TXT = "infolist_cpas.txt";
      fpart_Notes_TXT = "notes_cpas.txt";
      bool_Display_License_Agreement = TRUE;
    endif;


    //if (FileExists_IsMFB_DAT) then
    //  MessageBox( "FileExists_IsMFB_DAT = TRUE", SEVERE );
    //else
    //  MessageBox( "FileExists_IsMFB_DAT = FALSE", SEVERE );
    //endif;

    CheckRequirements();

    SetupInstall();

    SetupScreen();

    CpasINI_Load();

    if (ShowDialogs()<0) goto end_install;

    if (ProcessBeforeDataMove()<0) goto end_install;

    if (MoveFileData()<0) goto end_install;

    if (ProcessAfterDataMove()<0) goto end_install;

    if (SetupRegistry()<0) goto end_install;

    if (SetupFolders()<0) goto end_install;

//MessageBox("Test point m1", SEVERE);
    if (CPASCHK_CreateLicenseFile()<0) goto end_install;
//MessageBox("Test point m2", SEVERE);

    CpasINI_Save();
//MessageBox("Test point m3", SEVERE);

    end_install:

    CleanUpInstall();

    // If an unrecoverable error occurred, clean up
    // the partial installation. Otherwise, exit normally.

    if (bInstallAborted) then
        abort;
    endif;

endprogram

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  CpasINI_Load                                                   //
//                                                                           //
//  Purpose:  This function loads the CPAS.INI settings if available.        //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function CpasINI_Load()
STRING fn_CPASDIR_INI;
STRING fn_CPAS_INI;
begin
    //
    // IF {WIN}\ETDOTDIR.INI EXISTS, INPUT {CPAS} DIRECTORY LOCATION.
    // IF IT DOESN'T EXIST, SET {CPAS} TO THE DEFAULT LOCATION.
    //
    fn_CPASDIR_INI = Save_WINDIR ^ "ETDOTDIR.INI";
    if (0 != GetProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath)) then
        Global_InstallPath = use_Default_InstallPath;
    endif;
    fn_CPAS_INI = Global_InstallPath ^ "DBASE" ^ "CPAS.INI";
    //
    // IF {CPAS}\DBASE\CPAS.INI EXISTS, INPUT THE REGISTRATION/LOCATION SETTINGS.
    // IF IT DOESN'T EXIST, USE THE DEFAULT SETTINGS.
    //
    if (0 != GetProfString(fn_CPAS_INI, "CPAS Setup", "User", Global_UserName)) then
        // SETTING TO "" TELLS THE DIALOG TO USE THE USER NAME SET BY WINDOWS.
        Global_UserName = "";
    endif;
    if (0 != GetProfString(fn_CPAS_INI, "CPAS Setup", "Company", Global_CompanyName)) then
        // SETTING TO "" TELLS THE DIALOG TO USE THE COMPANY NAME SET BY WINDOWS.
        Global_CompanyName = "";
    endif;
    if (0 != GetProfString(fn_CPAS_INI, "CPAS Setup", "SerialNumber", Global_SerialNumber)) then
        // SETTING TO "" ENSURES THE USER MUST ENTER SOMETHING.
        Global_SerialNumber = "";
    endif;
    if (0 != GetProfString(fn_CPAS_INI, "CPAS Setup", "ProgramGroup", Global_ProgramGroup)) then
        // USE THE DEFAULT PROGRAM GROUP NAME.
        Global_ProgramGroup = use_Default_ProgramGroup;
    endif;
    //if (0 != GetProfString(fn_CPAS_INI, "CPAS Setup", "InstallHelp_Acrobat", Global_InstallHelp_Acrobat)) then
    //    Global_InstallHelp_Acrobat = "N";
    //endif;
    if (0 != GetProfString(fn_CPAS_INI, "CPAS Setup", "InstallHelp_Word97", Global_InstallHelp_Word97)) then
        Global_InstallHelp_Word97 = "N";
    endif;
    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  CpasINI_Save                                                   //
//                                                                           //
//  Purpose:  This function loads the CPAS.INI settings if available.        //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function CpasINI_Save()
STRING fn_CPASDIR_INI;
STRING fn_CPAS_INI;
begin
    //
    // OUTPUT CURRENT SETTINGS TO {CPAS}\DBASE\CPAS.INI FOR FUTURE INSTALLS.
    //
    fn_CPAS_INI = Global_InstallPath ^ "DBASE" ^ "CPAS.INI";
    WriteProfString(fn_CPAS_INI, "CPAS Setup", "User", Global_UserName);
    WriteProfString(fn_CPAS_INI, "CPAS Setup", "Company", Global_CompanyName);
    WriteProfString(fn_CPAS_INI, "CPAS Setup", "SerialNumber", Global_SerialNumber);
    WriteProfString(fn_CPAS_INI, "CPAS Setup", "InstallPath", Global_InstallPath);
    WriteProfString(fn_CPAS_INI, "CPAS Setup", "ProgramGroup", Global_ProgramGroup);
    //WriteProfString(fn_CPAS_INI, "CPAS Setup", "InstallHelp_Acrobat", Global_InstallHelp_Acrobat);
    WriteProfString(fn_CPAS_INI, "CPAS Setup", "InstallHelp_Word97", Global_InstallHelp_Word97);
    //
    // OUTPUT {CPAS} LOCATION TO {WIN}\ETDOTDIR.INI FOR FUTURE INSTALLS.
    // NOTE, THIS MAY NOT BE POSSIBLE IF THE {WIN} DIRECTORY IS LOCKED.
    //
    fn_CPASDIR_INI = Save_WINDIR ^ "ETDOTDIR.INI";
    WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  ShowDialogs
//
//  Purpose:  This function manages the display and navigation of
//            the standard dialogs that exist in a setup.
//
///////////////////////////////////////////////////////////////////////////////
function ShowDialogs()
NUMBER nResult;
NUMBER DbaseDir_CurrentlyExists;
STRING fdir_dbase;
STRING fn_dbase;
NUMBER RetVal;
NUMBER got_this;
begin

    Dlg_Start:
    // beginning of dialogs label

    Dlg_SdWelcome:
    nResult = DialogShowSdWelcome();
    if (nResult = BACK) goto Dlg_Start;

    Dlg_SdLicense:
    if (bool_Display_License_Agreement = TRUE) then
      nResult = DialogShowSdLicense();
    endif;
    if (nResult = BACK) goto Dlg_SdWelcome;

    Dlg_InstallHistory:
    nResult = DialogShowInstallHistory();
    if (nResult = BACK) goto Dlg_SdLicense;

//    Dlg_SdShowInfoList:
//    // Added/changed to support template:
//    nResult = DialogShowSdShowInfoList();
//    if (nResult = BACK) goto Dlg_InstallHistory;

    Dlg_SdShowInstallNotes:
    nResult = DialogShowInstallNotes();
    if (nResult = BACK) goto Dlg_InstallHistory;

    Dlg_SdRegisterUserEx:
    // Added/changed to support template:
    nResult = DialogShowSdRegisterUserEx();
    if (nResult = BACK) goto Dlg_SdShowInstallNotes;

    Dlg_AskAboutManualInstalls:
    nResult = DialogShowAskAboutManualInstalls();
    if (nResult = BACK) goto Dlg_SdRegisterUserEx;

    Dlg_SdAskDestPath:
    nResult = DialogShowSdAskDestPath();
    if (nResult = BACK) goto Dlg_AskAboutManualInstalls;

//    Dlg_SdSetupType:
//    // Added/changed to support template:
////    nResult = DialogShowSdSetupType();
//    if (nResult = BACK) goto Dlg_SdAskDestPath;
//
//    Dlg_SdComponentDialog2:
//    if ((nResult = BACK) && (svSetupType != "Custom") && (svSetupType != "")) then
//        goto Dlg_SdSetupType;
//    endif;
//
//    // Added/changed to support template:
//    // Ensure default setup type is set if no other setup type selected.
//    if ( svSetupType = "" ) then
//        svSetupType = "Typical";
//        ComponentSetupTypeSet ( MEDIA, svSetupType );
//    endif;
//
//    nResult = DialogShowSdComponentDialog2();
//    if (nResult = BACK) goto Dlg_SdSetupType;

    Dlg_SdSelectFolder:
    nResult = DialogShowSdSelectFolder();
//    if (nResult = BACK) goto Dlg_SdComponentDialog2;
    if (nResult = BACK) goto Dlg_SdAskDestPath;

    Dlg_SdStartCopy:
    nResult = DialogShowSdStartCopy();
    if (nResult = BACK) goto Dlg_SdSelectFolder;

    //
    // ASK USER IF THEY WANT TO OVERWRITE EXISTING ASAP DATABASE FILES.
    //
    Overwrite_asap_dbase = FALSE;
    got_this = ComponentIsItemSelected(MEDIA,"ASAP");
    if (got_this) then
      Overwrite_asap_dbase = TRUE;
      fdir_dbase = Global_InstallPath ^ "asap" ^ "dbase";
      fn_dbase = Global_InstallPath ^ "asap" ^ "dbase" ^ "packuser.db";
      DbaseDir_CurrentlyExists = FALSE;
      if (ExistsDir(fdir_dbase) = EXISTS) then
        DbaseDir_CurrentlyExists = TRUE;
      endif;
      if (DbaseDir_CurrentlyExists) then
        if (Is(FILE_EXISTS,fn_dbase)) then
          RetVal = AskYesNo(
            "Setup has detected a copy of the ASAP user packing " +
            "database file on your hard drive, located at filename `" +
            fn_dbase + "`.  If you have added packings to the database " +
            "that you wish to keep, you should NOT overwrite this file.  " +
            "Do you wish to overwrite this file?", NO);
          if (RetVal = NO) then
            Overwrite_asap_dbase = FALSE;
          else
            Overwrite_asap_dbase = TRUE;
          endif;
        endif;
      endif;
    endif;

    //
    // ASK USER IF THEY WANT TO OVERWRITE EXISTING ADDESIGNS DATABASE FILES.
    //
    Overwrite_ads_dbase = FALSE;
    got_this = ComponentIsItemSelected(MEDIA,"AdDesignS");
    if (got_this) then
      Overwrite_ads_dbase = TRUE;
      fdir_dbase = Global_InstallPath ^ "ads" ^ "dbase";
      //fn_dbase = Global_InstallPath ^ "ads" ^ "dbase" ^ "packuser.db";
      DbaseDir_CurrentlyExists = FALSE;
      if (ExistsDir(fdir_dbase) = EXISTS) then
        DbaseDir_CurrentlyExists = TRUE;
      endif;
      if (DbaseDir_CurrentlyExists) then
        //if (Is(FILE_EXISTS,fn_dbase)) then
          RetVal = AskYesNo(
            "Setup has detected a copy of the AdDesignS database " +
            "directory on your hard drive, located at path name `" +
            fdir_dbase + "`.  If you have added records to the AdDesignS " +
            "databases that you wish to keep, you should NOT overwrite " +
            "the files in this directory.  " +
            "Do you wish to overwrite these files?", NO);
          if (RetVal = NO) then
            Overwrite_ads_dbase = FALSE;
          else
            Overwrite_ads_dbase = TRUE;
          endif;
        //endif;
      endif;
    endif;

    //
    // ASK USER IF THEY WANT TO OVERWRITE EXISTING MFBMODEL SIMULATION EXAMPLES.
    //
    Overwrite_mfb_examples = FALSE;
    got_this = ComponentIsItemSelected(MEDIA,"MFBMODEL");
    if (got_this) then
      Overwrite_mfb_examples = TRUE;
      fdir_dbase = Global_InstallPath ^ "mfb" ^ "sims";
      //fdir_dbase = Global_InstallPath ^ "ads" ^ "dbase";
      //fn_dbase = Global_InstallPath ^ "ads" ^ "dbase" ^ "packuser.db";
      DbaseDir_CurrentlyExists = FALSE;
      if (ExistsDir(fdir_dbase) = EXISTS) then
        DbaseDir_CurrentlyExists = TRUE;
      endif;
      if (DbaseDir_CurrentlyExists) then
        //if (Is(FILE_EXISTS,fn_dbase)) then
          RetVal = AskYesNo(
            "Setup has detected a copy of the MFBMODEL/IonExchangeDesignS simulation " +
            "directory on your hard drive, located at path name `" +
            fdir_dbase + "`.  If you have simulations files " +
            "that you wish to keep, you should NOT overwrite " +
            "the files in this directory.  " +
            "Do you wish to overwrite these files?", NO);
          if (RetVal = NO) then
            Overwrite_mfb_examples = FALSE;
          else
            Overwrite_mfb_examples = TRUE;
          endif;
        //endif;
      endif;
    endif;

    return 0;

end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: CPASCHK_CreateLicenseFile                                       //
//                                                                           //
//  Purpose: This function calls the CPASCHK.EXE module in order to          //
//           establish the CPAS.LIC licensing file.                          //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function CPASCHK_CreateLicenseFile()
NUMBER nResult;
STRING svTitle;
STRING svMsg;
NUMBER nvFileHandle;
STRING szPath;
STRING szFileName;
STRING szMsg;
STRING szTitle;
NUMBER ANY_FAILED;
STRING fn_BADNUM;
STRING fn_OKNUM;
STRING SAVE_TARGETDIR;
NUMBER got_this;
STRING fn_CPASDIR_INI;
NUMBER nvResult;
STRING Temp_CpasDir;
STRING Temp_WinDir;
STRING Temp_Number;
STRING Temp_UserName;
STRING Temp_UserCompany;
POINTER spCpasDir;
POINTER spWinDir;
POINTER spNumber;
POINTER spUserName;
POINTER spUserCompany;
NUMBER RetVal;
begin
    //
    // OUTPUT {AppPath}\CPASDIR.INI FOR EACH INSTALLED APPLICATION.
    //
//MessageBox("Test point p1", SEVERE);
    got_this = ComponentIsItemSelected(MEDIA, "CPAS Desktop");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "AdDesignS");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "ADS" ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "ASAP");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "ASAP" ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "StEPP");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "STEPP" ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "MFBMODEL");
    if (got_this) then
      // Maybe not even necessary due to current (May 24, 1999) lack
      // of serial number checking system in MFB.
      // But now (sometime before July 2, 1999) this is required!
      fn_CPASDIR_INI = Global_InstallPath ^ "MFB" ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "FaVOr");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "FAVOR" ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "AdOx");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "ADOX" ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "StEPP2");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "STEPP2" ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "SCENE");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "SCENE" ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "CPASFRONT");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "MPMS");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "MPMS" ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "CatReac");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "CATREAC" ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;
    got_this = ComponentIsItemSelected(MEDIA, "FaMe");
    if (got_this) then
      fn_CPASDIR_INI = Global_InstallPath ^ "FAME" ^ "CPASDIR.INI";
      WriteProfString(fn_CPASDIR_INI, "Directory", "CPASDIR", Global_InstallPath);
    endif;



//MessageBox("Test point p2", SEVERE);
    //
    // BEGIN USE OF CPASLIB.DLL MODULE.
    //
    nvResult = UseDLL( SUPPORTDIR ^ "cpaslib.dll" );
    if ( nvResult < 0 ) then
      MessageBox( "Error loading DLL!", SEVERE );
      abort;
    endif;
    //
    // SET UP INPUT PARAMETERS FOR CPASLIB.DLL CALL.
    //
    Temp_CpasDir = Global_InstallPath;
    Temp_WinDir = WINDIR;
    Temp_Number = Global_SerialNumber;
    Temp_UserName = Global_UserName;
    Temp_UserCompany = Global_CompanyName;
    spCpasDir = &Temp_CpasDir;
    spWinDir = &Temp_WinDir;
    spNumber = &Temp_Number;
    spUserName = &Temp_UserName;
    spUserCompany = &Temp_UserCompany;
    //
    // CALL ROUTINE IN CPASLIB.DLL TO CREATE THE LICENSE FILE.
    //
    RetVal = snumCpasLicGenerate(spCpasDir,spWinDir,spNumber,spUserName,spUserCompany);
    //
    // END USE OF CPASLIB.DLL MODULE.
    //
    UnUseDLL( SUPPORTDIR ^ "cpaslib.dll" );
    //
    // DID THE CALL SUCCEED?
    //
    if (RetVal = 0) then
      // CALL DID NOT SUCCEED; ABORT THE INSTALL.
      MessageBox("The licensing data could not be generated.  " +
          "Please re-run the install software.", SEVERE);
      abort;
    endif;
    return 0;

//    //
//    // SET FILEMODE TO APPEND TO FILES.
//    //
//    OpenFileMode(FILE_MODE_APPEND);
//    szPath     = Global_InstallPath ^ "DBASE";
//    szFileName = "NEWLIC.X";
//    //
//    // CREATE THE LICENSE-INPUT FILE.
//    //
//    if (CreateFile(nvFileHandle, szPath, szFileName) < 0) then
//      MessageBox("CreateFile failed: Unable to generate licensing data.", SEVERE);
//      abort;
//    endif;
//    ANY_FAILED = 0;
//MessageBox("Test point p3", SEVERE);
//    if (WriteLine(nvFileHandle, Global_SerialNumber) < 0) then ANY_FAILED = 1; endif;
//    if (WriteLine(nvFileHandle, Global_UserName) < 0) then ANY_FAILED = 1; endif;
//    if (WriteLine(nvFileHandle, Global_CompanyName) < 0) then ANY_FAILED = 1; endif;
//    if (WriteLine(nvFileHandle, "END") < 0) then ANY_FAILED = 1; endif;
//    if (ANY_FAILED = 1) then
//      MessageBox("WriteLine failed.", SEVERE);
//    endif;
//    CloseFile(nvFileHandle);
//MessageBox("Test point p4", SEVERE);
//    //
//    // CALL CPASCHK.EXE TO CREATE THE LICENSE FILE.
//    //
//    szTitle = Global_InstallPath ^ "DBASE" ^ "cpaschk.exe";
//    //MessageBox(szTitle,INFORMATION);
//    svMsg =  "-CREATE_FILE " + Global_InstallPath;
//    //MessageBox("About to launch " + szTitle + " and " + svMsg, SEVERE);
//    LaunchAppAndWait(szTitle, svMsg, WAIT);
//    fn_BADNUM = Global_InstallPath ^ "DBASE" ^ "badnum.x";
//    fn_OKNUM = Global_InstallPath ^ "DBASE" ^ "oknum.x";
//    ANY_FAILED = 0;
//    if (Is(FILE_EXISTS,fn_BADNUM)) then ANY_FAILED = 1; endif;
//    if (!Is(FILE_EXISTS,fn_OKNUM)) then ANY_FAILED = 1; endif;
//MessageBox("Test point p6", SEVERE);
//    SAVE_TARGETDIR = TARGETDIR;
//    TARGETDIR = Global_InstallPath ^ "DBASE";
//    if (Is(FILE_EXISTS,fn_BADNUM)) then DeleteFile("badnum.x"); endif;
//    if (Is(FILE_EXISTS,fn_OKNUM)) then DeleteFile("oknum.x"); endif;
//    TARGETDIR = SAVE_TARGETDIR;
//    if (ANY_FAILED) then
//      // BAD SERIAL NUMBER.  ABORT INSTALL.
//      MessageBox("The licensing data could not be generated.  " +
//          "Please re-run the install software.", SEVERE);
//      abort;
//    endif;
//MessageBox("Test point p9", SEVERE);

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessBeforeDataMove
//
//  Purpose: This function performs any necessary operations prior to the
//           actual file transfer.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessBeforeDataMove()
    // Added/changed to support template:
    STRING svLogFile, svInfo;
    NUMBER nResult, nvInfo;

begin

  // Create app information, uninstallation, and App Paths registry keys.

    //InstallationInfo(
    //    @COMPANY_NAME,
    //    @PRODUCT_NAME,
    //    @PRODUCT_VERSION,
    //    @PRODUCT_KEY );
    InstallationInfo(
        use_COMPANY_NAME,
        use_PRODUCT_NAME,
        use_PRODUCT_VERSION,
        use_PRODUCT_KEY );
    //InstallationInfo( @COMPANY_NAME, SHOWUSER_PROGRAM_NAME, @PRODUCT_VERSION, @PRODUCT_KEY );

    svLogFile = UNINST_LOGFILE_NAME;

    // Added/changed to support template:
    svUninstLogFile = svLogFile;

    //nResult = DeinstallStart( svDir, svLogFile, @UNINST_KEY, 0 );
    nResult = DeinstallStart( svDir, svLogFile, use_UNINST_KEY, 0 );
    if (nResult < 0) then
        MessageBox( @ERROR_UNINSTSETUP, WARNING );
    endif;

    szAppPath = TARGETDIR; // TO DO : if your application .exe is in a subfolder
                           // of TARGETDIR then add subfolder

    if ((bIs32BitSetup) && (bIsShellExplorer)) then
        //RegDBSetItem( REGDB_APPPATH, szAppPath );
        //RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
        //RegDBSetItem( REGDB_UNINSTALL_NAME, @UNINST_DISPLAY_NAME );
        RegDBSetItem( REGDB_APPPATH, szAppPath );
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ use_PRODUCT_KEY );
        RegDBSetItem( REGDB_UNINSTALL_NAME, use_UNINST_DISPLAY_NAME );
    endif;

    // TO DO : any other tasks you want to perform before file transfer
    //
    // If you are installing self-registering files using the
    // batch method, remove the slashes from the line below:
    //
    // Added/changed to support template:
    Enable ( SELFREGISTERBATCH );

    // Added/changed to support template:
    // If DAO component present, set DAO install flag and call DAO init routine.
    nResult = ComponentGetData( MEDIA, ISDAO_COMP_COREDAODIR, COMPONENT_FIELD_SELECTED, nvInfo, svInfo );
    if ( nResult = 0 ) then
        bInstallDAO = TRUE;
        if (ISDAOPreInitialize() < 0) then
            bInstallAborted = TRUE;
            return -1;
        endif;
    endif;

    // If ODBC Core component present, set ODBC install flag and check requirements.
    nResult = ComponentGetData( MEDIA, ISODBC_CORECOMP, COMPONENT_FIELD_SELECTED, nvInfo, svInfo );
    if ( nResult = 0 ) then
        bInstallODBC = TRUE;
        nResult = ISODBCCheckRequirements ( MEDIA );
        if ( nResult < 0 ) then
            bInstallAborted = TRUE;
            return -1;
        endif;
    endif;

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function:  MoveFileData
//
//  Purpose:  This function handles the file transfer for
//            the setup.
//
///////////////////////////////////////////////////////////////////////////////
function MoveFileData()
    NUMBER nResult, nDisk;

begin

    nDisk = 1;
    SetStatusWindow( 0, "" );
    Disable( DIALOGCACHE );
    Enable( STATUS );
    StatusUpdate( ON, 100 );

  //
  // SELECT PROGRAMS TO INSTALL: ONLY THE ONES THE USER HAS PURCHASED.
  //
  Select_Purchased_Programs();
  //
  // MOVE THE DATA.
  //
  nResult = ComponentMoveData( MEDIA, nDisk, 0 );

    HandleMoveDataError( nResult );

    Disable( STATUS );

    return nResult;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: HandleMoveDataError
//
//  Purpose: This function handles the error (if any) during the file transfer
//           operation.
//
///////////////////////////////////////////////////////////////////////////////
function HandleMoveDataError( nResult )
    STRING szErrMsg, svComponent , svFileGroup , svFile;

begin

    svComponent = "";
    svFileGroup = "";
    svFile = "";

    switch (nResult)
        case 0:
            return 0;
        default:
            ComponentError ( MEDIA , svComponent , svFileGroup , svFile , nResult );
            szErrMsg = @ERROR_MOVEDATA  + "\n\n" +
                @ERROR_COMPONENT + " " + svComponent + "\n" +
                @ERROR_FILEGROUP + " " + svFileGroup + "\n" +
                @ERROR_FILE      + " " + svFile;
            //SprintfBox( SEVERE, @TITLE_CAPTIONBAR, szErrMsg, nResult );
            SprintfBox( SEVERE, use_TITLE_CAPTIONBAR, szErrMsg, nResult );
            bInstallAborted = TRUE;
            return nResult;
    endswitch;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessAfterDataMove
//
//  Purpose: This function performs any necessary operations needed after
//           all files have been transferred.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessAfterDataMove()
    // Added/changed to support template:
    STRING szReferenceFile, szMsg;
    NUMBER nvResult;

begin

    // TO DO : update self-registered files and other processes that
    //        should be performed after the files have been transferred.
    //
    // If you are installing self-registering files using the
    // batch method, remove the slashes from the lines below:
    //
    // Added/changed to support template:
    if Do ( SELFREGISTRATIONPROCESS ) < 0 then
        szMsg = "File(s) failed to self-register: \n" + ERRORFILENAME;
        MessageBox (szMsg, WARNING);
    endif;

    // Added/changed to support template:
    // Call DAO finishing routine if DAO install flag set.
    if ( bInstallDAO = TRUE ) then
        if ( ISDAOPostInitialize()<0 ) then
            bInstallAborted = TRUE;
            return -1;
        endif;
    endif;

    // Added/changed to support template:
    // Call ODBC install routine if ODBC install flag set.
    if ( bInstallODBC = TRUE ) then
        //nvResult = ISODBCInstallODBC ( MEDIA, TARGETDIR, @UNINST_KEY );
        nvResult = ISODBCInstallODBC ( MEDIA, TARGETDIR, use_UNINST_KEY );
        if ( nvResult != 0 ) then
            bInstallAborted = TRUE;
            return -1;
        endif;
    endif;

    // DeinstallSetReference specifies a file to be checked before
    // uninstallation. If the file is in use, uninstallation will not proceed.

    //szReferenceFile = svDir ^ @PRODUCT_KEY; // TO DO : If your file is in a
    //                                        // subfolder of svDir add that here
    szReferenceFile = svDir ^ use_PRODUCT_KEY; // TO DO : If your file is in a
                                            // subfolder of svDir add that here
    DeinstallSetReference( szReferenceFile );

    // Added/changed to support template:
    // Register type libraries using RegTlbFile32 API in supplied DLL
    nvResult = UseDLL( SUPPORTDIR ^ REGTLBDLL );
    if ( nvResult < 0 ) then
        MessageBox( @ERROR_LOADDLL + REGTLBDLL, SEVERE );
        return nvResult;
    else
        RegTlbFile32( WINSYSDIR ^ "stdole2.tlb" );
        UnUseDLL( SUPPORTDIR ^ REGTLBDLL );
    endif;

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupRegistry
//
//  Purpose: This function makes the registry entries for this setup.
//
///////////////////////////////////////////////////////////////////////////////
function SetupRegistry()
    NUMBER nResult;

begin

    // TO DO : Add all your registry entry keys here.
    // Call registry functions and/or create keys from
    // the InstallShield IDE's Resources pane.

    nResult = CreateRegistrySet( "" );

    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupFolders
//
//  Purpose: This function creates all the folders and shortcuts for the
//           setup.  This includes program groups and items for Windows 3.1.
//
///////////////////////////////////////////////////////////////////////////////
function SetupFolders()
NUMBER nResult;
STRING szProgram, szPath, szUninstString, szUnODBCDLL;
STRING svMsg;
NUMBER got_this;
NUMBER got_this_AMWAY;
STRING s_AdDesignS_Name;
STRING use_path1;
STRING use_path2;
STRING use_path3;
STRING fn_PSDMROOM_DAT;
STRING SAVE_SRCDIR;
STRING SAVE_TARGETDIR;
STRING fn_INI;
begin
    SdShowMsg("Installing Program Group and Icons.", TRUE);
    AppCommand( PROGMAN, CMD_RESTORE );
    //if (bWinNT) then
//MessageBox("Test point A1", SEVERE);
  if (bIsWindowsNT4) then
//MessageBox("Test point A2", SEVERE);
      ProgDefGroupType(PERSONAL);
    endif;
//MessageBox("Test point A3", SEVERE);
    //if (nvOperatingSys = IS_WINDOWSNT) then ProgDefGroupType(PERSONAL); endif;
    if (CreateProgramFolder( Global_ProgramGroup ) < 0) then
        svMsg = "There was a problem creating the program folder:\n\t";
        svMsg = svMsg + Global_ProgramGroup + "\n";
        svMsg = svMsg + "Please re-install the software.";
        MessageBox(svMsg, SEVERE);
        abort;
    endif;
//MessageBox("Test point A4", SEVERE);
    Delay(1);
    //got_this = ComponentIsItemSelected(MEDIA,"CPAS Desktop");
    //if (got_this) then
    //    szProgram = Global_InstallPath;
    //    use_path1 = szProgram ^ "cpasfront.exe";
    //    use_path2 = szProgram;
    //    use_path3 = use_path1;
    //    LongPathToQuote( use_path1, TRUE );
    //    LongPathToQuote( use_path2, TRUE );
    //    AddFolderIcon( Global_ProgramGroup, "CPAS Desktop",
    //               use_path1,
    //               use_path2,
    //               use_path3, 0, "", REPLACE );
    //endif;
//MessageBox("Test point B1", SEVERE);


    got_this = ComponentIsItemSelected(MEDIA,"AdDesignS");
    got_this_AMWAY = ComponentIsItemSelected(MEDIA,"AdDesignS Amway");
    if (got_this_AMWAY) then
      //s_AdDesignS_Name = "IAFM";
      s_AdDesignS_Name = "IndoorAirAdDesignS";
    else
      s_AdDesignS_Name = "AdDesignS";
    endif;
    if (got_this) then
        szProgram = Global_InstallPath ^ "ads";
        //AddFolderIcon( globProgramGroup, "AdDesignS",
        //           szProgram ^ "adss.exe",
        //           szProgram ,
        //           szProgram ^ "adss.exe" , 0, "", REPLACE );
        use_path1 = szProgram ^ "ads.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, s_AdDesignS_Name,
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;
    got_this = ComponentIsItemSelected(MEDIA,"AdDesignS Manual Word97");
    if (got_this) then
        szProgram = Global_InstallPath ^ "ads";
        //use_path1 = szProgram ^ "help\\ads.pdf";
        use_path1 = szProgram ^ "help\\ads.doc";
        use_path2 = szProgram ^ "help";
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, s_AdDesignS_Name + " Manual",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;


 //MessageBox("Test point B2", SEVERE);
    got_this = ComponentIsItemSelected(MEDIA,"ASAP");
    if (got_this) then
        szProgram = Global_InstallPath ^ "asap";
        use_path1 = szProgram ^ "asap.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "ASAP",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;
    got_this = ComponentIsItemSelected(MEDIA,"ASAP Manual Word97");
    if (got_this) then
        szProgram = Global_InstallPath ^ "asap";
        //use_path1 = szProgram ^ "help\\asap.pdf";
        use_path1 = szProgram ^ "help\\readme.doc";
        use_path2 = szProgram ^ "help";
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "ASAP Manual",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;


//MessageBox("Test point B3", SEVERE);
    got_this = ComponentIsItemSelected(MEDIA,"MFBMODEL");
    if (got_this) then
        szProgram = Global_InstallPath ^ "mfb";
        use_path1 = szProgram ^ "mfb.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "MFBMODEL",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
        //use_path1 = szProgram ^ "help\\stepp.pdf";
        //use_path2 = szProgram ^ "help";
        //use_path3 = use_path1;
        //LongPathToQuote( use_path1, TRUE );
        //LongPathToQuote( use_path2, TRUE );
        //AddFolderIcon( Global_ProgramGroup, "StEPP Manual",
        //           use_path1,
        //           use_path2,
        //           use_path3, 0, "", REPLACE );
    endif;


    got_this = ComponentIsItemSelected(MEDIA,"StEPP");
    if (got_this) then
        szProgram = Global_InstallPath ^ "stepp";
        use_path1 = szProgram ^ "stepp.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "StEPP",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;
    got_this = ComponentIsItemSelected(MEDIA,"StEPP Manual Word97");
    if (got_this) then
        szProgram = Global_InstallPath ^ "stepp";
        //use_path1 = szProgram ^ "help\\stepp.pdf";
        use_path1 = szProgram ^ "help\\stepp.doc";
        use_path2 = szProgram ^ "help";
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "StEPP Manual",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;

    got_this = ComponentIsItemSelected(MEDIA,"FaVOr");
    if (got_this) then
        szProgram = Global_InstallPath ^ "favor";
        use_path1 = szProgram ^ "favor.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "FaVOr",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;
    got_this = ComponentIsItemSelected(MEDIA,"FaVOr Manual Word97");
    if (got_this) then
        szProgram = Global_InstallPath ^ "favor";
        //use_path1 = szProgram ^ "help\\stepp.pdf";
        use_path1 = szProgram ^ "help\\favor.doc";
        use_path2 = szProgram ^ "help";
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "FaVOr Manual",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;

    got_this = ComponentIsItemSelected(MEDIA,"AdOx");
    if (got_this) then
        //
        // First, set up AdOx icon.
        szProgram = Global_InstallPath ^ "adox";
        use_path1 = szProgram ^ "adox.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "AdOx",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
        //
        // Second, set up DyeStudy icon.
        szProgram = Global_InstallPath ^ "dyestudy";
        use_path1 = szProgram ^ "dyestudy.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "DyeStudy",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;
    got_this = ComponentIsItemSelected(MEDIA,"AdOx Manual Word97");
    if (got_this) then
        szProgram = Global_InstallPath ^ "adox";
        //use_path1 = szProgram ^ "help\\stepp.pdf";
        use_path1 = szProgram ^ "help\\adox.doc";
        use_path2 = szProgram ^ "help";
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "AdOx Manual",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;

    got_this = ComponentIsItemSelected(MEDIA,"StEPP2");
    if (got_this) then
        szProgram = Global_InstallPath ^ "stepp2";
        use_path1 = szProgram ^ "ppms_front.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "StEPP 2",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;

    got_this = ComponentIsItemSelected(MEDIA,"SCENE");
    if (got_this) then
        szProgram = Global_InstallPath ^ "scene";
        use_path1 = szProgram ^ "scene.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "SCENE",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
        //
        // ALSO: UPDATE MDAM_PLUGINS.INI.
        //
        //fn_INI = Global_InstallPath ^ "_cpasdir" ^ "dbase" ^ "mdam_plugins.ini";
        fn_INI = Global_InstallPath ^ "dbase" ^ "mdam_plugins.ini";
        WriteProfString(fn_INI, "DORT", "Path", Global_InstallPath ^ "scene" ^ "plugins" ^ "dort");
        WriteProfString(fn_INI, "EFRAT", "Path", Global_InstallPath ^ "scene" ^ "plugins" ^ "efrat");
    endif;

    got_this = ComponentIsItemSelected(MEDIA,"CPASFRONT");
    if (got_this) then
        szProgram = Global_InstallPath;
        use_path1 = szProgram ^ "cpasfront.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "CPAS Desktop",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;

    got_this = ComponentIsItemSelected(MEDIA,"MPMS");
    if (got_this) then
        szProgram = Global_InstallPath ^ "mpms";
        use_path1 = szProgram ^ "uppmem.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "MPMS",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;

    got_this = ComponentIsItemSelected(MEDIA,"CatReac");
    if (got_this) then
        szProgram = Global_InstallPath ^ "catreac";
        use_path1 = szProgram ^ "catreac.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        if (iModule_22_CATREAC = 1) then
          AddFolderIcon( Global_ProgramGroup, "CatReac",
                     use_path1,
                     use_path2,
                     use_path3, 0, "", REPLACE );
        else
          AddFolderIcon( Global_ProgramGroup, "VRAMODEL",
                     use_path1,
                     use_path2,
                     use_path3, 0, "", REPLACE );
        endif;
    endif;
    got_this = ComponentIsItemSelected(MEDIA,"CatReac Manual Word97");
    if (got_this) then
        szProgram = Global_InstallPath ^ "catreac";
        //use_path1 = szProgram ^ "help\\asap.pdf";
        use_path1 = szProgram ^ "help\\catreac_vra.doc";
        use_path2 = szProgram ^ "help";
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        if (iModule_22_CATREAC = 1) then
          AddFolderIcon( Global_ProgramGroup, "CatReac VRA Manual",
                     use_path1,
                     use_path2,
                     use_path3, 0, "", REPLACE );
        else
          AddFolderIcon( Global_ProgramGroup, "VRAMODEL Manual",
                     use_path1,
                     use_path2,
                     use_path3, 0, "", REPLACE );
        endif;
    endif;

    got_this = ComponentIsItemSelected(MEDIA,"FaMe");
    if (got_this) then
        szProgram = Global_InstallPath ^ "fame";
        use_path1 = szProgram ^ "fame.exe";
        use_path2 = szProgram;
        use_path3 = use_path1;
        LongPathToQuote( use_path1, TRUE );
        LongPathToQuote( use_path2, TRUE );
        AddFolderIcon( Global_ProgramGroup, "FaMe",
                   use_path1,
                   use_path2,
                   use_path3, 0, "", REPLACE );
    endif;

    //
    // IF ADDESIGNS-FOR-AMWAY WAS PURCHASED, GENERATE THE SPECIAL
    // $(ADS_AppPath)\PSDMROOM.DAT FILE.  THE EXISTENCE OF THIS FILE
    // TELLS AdDesignS TO EXPOSE THE PSDM-IN-ROOM MODEL FOR USAGE.
    //
//MessageBox("Test point C1", SEVERE);
    if (iModule_ADDESIGNS_AMWAY = 1) then
      szProgram = Global_InstallPath ^ "ads";
      fn_PSDMROOM_DAT = szProgram ^ "PSDMROOM.DAT";
      WriteProfString(fn_PSDMROOM_DAT, "Information", "INFO", "Do not delete this file");
    endif;


    SdShowMsg("Copying manual printing instructions.", TRUE);
    SAVE_SRCDIR = SRCDIR;
    SAVE_TARGETDIR = TARGETDIR;
    SRCDIR = Save_Startup_SRCDIR;
    TARGETDIR = Global_InstallPath ^ "dbase";
    nResult = CopyFile("printing.txt", "printing.txt");
    SRCDIR    = SAVE_SRCDIR;
    TARGETDIR = SAVE_TARGETDIR;


    //
    //======================================================================
    //     CREATE MISCELLANEOUS FILES.
    //======================================================================
    //
    SdShowMsg("Creating miscellaneous files.", TRUE);
    //
    // CREATE IS_IEDS.TXT IF NECESSARY.
    //
    if (iModule_21_IONEXCHANGEDESIGNS = 1) then
      fn_INI = Global_InstallPath ^ "MFB" ^ "IS_IEDS.TXT";
      WriteProfString(fn_INI, "CPAS Setup", "Data", "1");
    else
      SAVE_TARGETDIR = TARGETDIR;
      TARGETDIR = Global_InstallPath ^ "MFB";
      fn_INI = "IS_IEDS.TXT";
      DeleteFile(fn_INI);
      TARGETDIR = SAVE_TARGETDIR;
    endif;
    //
    // CREATE IS_CAT.TXT IF NECESSARY.
    //
    if (iModule_22_CATREAC = 1) then
      fn_INI = Global_InstallPath ^ "CATREAC" ^ "IS_CAT.TXT";
      WriteProfString(fn_INI, "CPAS Setup", "Data", "1");
    else
      SAVE_TARGETDIR = TARGETDIR;
      TARGETDIR = Global_InstallPath ^ "CATREAC";
      fn_INI = "IS_CAT.TXT";
      DeleteFile(fn_INI);
      TARGETDIR = SAVE_TARGETDIR;
    endif;


    SdShowMsg("Performing cleanup operations.", TRUE);


//MessageBox("Test point C2", SEVERE);
    return nResult;
end;


//    NUMBER nResult;
//    // Added/changed to support template;
//    STRING szTarget, szProgram, szUnODBCDLL, szUninstString;
//    NUMBER nDefGroupType;
//begin
//    // TO DO : Add all your folders (or program groups) along with shortcuts (or
//    // program items). Call CreateProgramFolder and AddFolderIcon, and/or create
//    // shortcuts etc. from the InstallShield IDE's Resources pane.
//    //
//    // Note : for 16-bit setups you should add an uninstaller icon pointing to
//    //        your log file.  Under 32-bit this is automatically done by Windows.
//
//    // Added/changed to support template:
//    szTarget = TARGETDIR ^ @PRODUCT_KEY;
//    LongPathToQuote ( szTarget, TRUE );
//    if ( bIsWindowsNT351 ) then //NT 3.51
//        // Build uninstall icon string when on NT 3.51 and ODBC install flag set.
//        if ( bInstallODBC = TRUE ) then
//            szProgram = UNINST;
//            LongPathToQuote ( szProgram, TRUE );
//            LongPathToQuote ( svUninstLogFile, TRUE );
//            szUninstString = szProgram + " -f" + svUninstLogFile;
//
//            //ProgDefGroupType ( COMMON );
//
//            // Added for ODBC support: Prepend "IS" (no quotes) to the AddFolderIcon
//            // call that adds the uninstaller icon on NT 3.51, creating a pass-through to the
//            // ODBC Template ISODBCAddFolderIcon function, which adds the ODBC uninstaller DLL
//            // to the uninstall string.
//            ISODBCAddFolderIcon ( SHELL_OBJECT_FOLDER, "unInstallShield", szUninstString,
//                              "", "", 0, "", REPLACE );
//        endif;
//    endif;
//    ComponentSetTarget( MEDIA, "<TargetVar>", szTarget );
//
//    nResult = CreateShellObjects( "" );
//
//    return nResult;
// end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: CleanUpInstall
//
//  Purpose: This cleans up the setup.  Anything that should
//           be released or deleted at the end of the setup should
//           be done here.
//
///////////////////////////////////////////////////////////////////////////////
function CleanUpInstall()

begin

    ListDestroy( listStartCopy );

    if (bInstallAborted) then
        return 0;
    endif;

    DialogShowSdFinishReboot();

    if (BATCH_INSTALL) then // ensure locked files are properly transferred
        CommitSharedFiles(0);
    endif;

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupInstall
//
//  Purpose: This will initialize the setup.  Any general initialization
//           needed for the installation should be performed here.
//
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()
begin
    Enable( CORECOMPONENTHANDLING );
    bInstallAborted = FALSE;
    //  Create list of end user selections to be displayed by DialogShowSdStartCopy()  //
    listStartCopy = ListCreate(STRINGLIST);
    ListAddString( listStartCopy, "Place the summary here.", AFTER );
    //if (bIs32BitSetup) then
        //svDir = PROGRAMFILES ^ @COMPANY_NAME ^ @PRODUCT_NAME;
        svDir = PROGRAMFILES ^ use_COMPANY_NAME ^ use_PRODUCT_NAME;
    //else
    //    svDir = PROGRAMFILES ^ @COMPANY_NAME16 ^ @PRODUCT_NAME16; // use short names
    //endif;
    TARGETDIR  = svDir;
    //SdProductName( @PRODUCT_NAME );
    SdProductName( use_PRODUCT_NAME );
    Enable( DIALOGCACHE );
    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  SetupScreen
//
//  Purpose:  This function establishes the screen look.  This includes
//            colors, fonts, and text to be displayed.
//
///////////////////////////////////////////////////////////////////////////////
function SetupScreen()

begin

//    Enable( FULLWINDOWMODE );
//    Enable( INDVFILESTATUS );
//    SetTitle( @TITLE_MAIN, 24, WHITE );
//    SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION ); // Caption bar text.
//    Enable( BACKGROUND );
//    Delay( 1 );

//    Enable( FULLWINDOWMODE );
//    Enable( INDVFILESTATUS );
//    SetTitle( SHOWUSER_INSTALL_NAME, 32, WHITE );
//    SetTitle( SHOWUSER_INSTALL_NAME, 32, BACKGROUNDCAPTION ); // Caption bar text.
//    Enable( BACKGROUND );
//    Delay( 1 );

    Enable( FULLWINDOWMODE );
    Enable( INDVFILESTATUS );

    //SetTitle( @TITLE_MAIN, 32, WHITE );
    //SetTitle( @TITLE_CAPTIONBAR, 32, BACKGROUNDCAPTION ); // Caption bar text.
    SetTitle( use_TITLE_MAIN, 32, WHITE );
    SetTitle( use_TITLE_CAPTIONBAR, 32, BACKGROUNDCAPTION ); // Caption bar text.

    Enable( BACKGROUND );
    Delay( 1 );
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  CheckRequirements
//
//  Purpose:  This function checks all minimum requirements for the
//            application being installed.  If any fail, then the user
//            is informed and the setup is terminated.
//
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
    NUMBER  nvDx, nvDy, nvResult;
    STRING  svResult;

begin

    bIsShellExplorer = FALSE;
    bIsWindowsNT4    = FALSE;
    bIsWindowsNT351  = FALSE;
    bIsWindows95     = FALSE;
    bIsWindows98     = FALSE;

    // Check screen resolution.
    GetExtents( nvDx, nvDy );

    if (nvDy < 480) then
        MessageBox( @ERROR_VGARESOLUTION, WARNING );
        abort;
    endif;

    // Set 'setup' operation mode
    bIs32BitSetup = TRUE;
    GetSystemInfo( ISTYPE, nvResult, svResult );
    if (nvResult = 16) then
        bIs32BitSetup = FALSE; // running 16-bit setup
        return 0; // no additional information required
    endif;

    // --- 32-bit testing after this point ---

    // Determine the target system's operating system.
    GetSystemInfo( OS, nvResult, svResult );

    if (nvResult = IS_WINDOWSNT) then
        // Check to see if OS is Windows NT 4.0 or Windows NT 3.51,
        // and if the shell being used is the Explorer shell.
        if (GetSystemInfo( WINMAJOR, nvResult, svResult ) = 0) then
            if (nvResult >= 4) then
                bIsShellExplorer = TRUE;
                bIsWindowsNT4 = TRUE;
            else
              bIsWindowsNT351 = TRUE;

                // Added/changed to support template:
                // Added for VB support: If target OS is NT 3.51, ensure
                // that at least Service Pack 5 is installed.
                nvResult = ISCompareServicePack( SERVICE_PACK );
                if ( nvResult < 0 ) then
                    bInstallAborted = TRUE;
                    MessageBox( @ERROR_SERVICEPACKSTRING, SEVERE );
                    return -1;
                elseif ( nvResult = LESS_THAN ) then
                    bInstallAborted = TRUE;
                    MessageBox( @ERROR_SERVICEPACKNUMBER + " " + SERVICE_PACK, SEVERE );
                    return -1;
                else
                    return 0;
                endif;
            endif;
        endif;

    elseif (nvResult = IS_WINDOWS9X) then
        bIsShellExplorer = TRUE;
        // Check to see if OS is Windows 95 or Windows 98
        GetSystemInfo (WINMINOR, nvResult, svResult);
        if (nvResult < 10) then
           bIsWindows95 = TRUE;
        else
           bIsWindows98 = TRUE;
        endif;
    endif;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdWelcome
//
//  Purpose: This function handles the standard welcome dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdWelcome()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin
    szTitle = "";
    ////szMsg   = "";
    ////szMsg = "Welcome to " + SHOWUSER_INSTALL_NAME + ".";
    //szMsg = "Welcome to " + @TITLE_MAIN + ".";
    szMsg = "Welcome to " + use_TITLE_MAIN + ".";
    nResult = SdWelcome( szTitle, szMsg );
    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdLicense
//
//  Purpose: This function displays the license agreement dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdLicense()
    NUMBER nResult;
    STRING szTitle, szMsg, szQuestion, szLicenseFile;

begin
    szLicenseFile = SUPPORTDIR ^ "license.txt";
    szTitle    = "";
    szMsg      = "";
    //szQuestion = "";
    szQuestion = "Do you accept all of the terms of the preceding " +
        "License Agreement?  If you choose No, Setup will close.  " +
        "To install the software, you must accept this agreement.";
    nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );
    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowInstallHistory
//
//  Purpose: This function displays the license agreement dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowInstallHistory()
    NUMBER nResult;
    STRING szTitle, szMsg, szQuestion, szLicenseFile;

begin
    //szLicenseFile = SUPPORTDIR ^ "infolist.txt";
    szLicenseFile = SUPPORTDIR ^ fpart_Infolist_TXT;
    szTitle    = "Version History";
    szMsg      = "Listed below are the details of the install software version history.";
    //szQuestion = "";
    szQuestion = "Do you wish to continue with the install process?  " +
        "If you choose No, Setup will close.  To install the software, " +
        "you must choose Yes.";
    nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );
    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowInstallNotes
//
//  Purpose: This function displays the license agreement dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowInstallNotes()
    NUMBER nResult;
    STRING szTitle, szMsg, szQuestion, szLicenseFile;
begin
    //szLicenseFile = SUPPORTDIR ^ "notes.txt";
    szLicenseFile = SUPPORTDIR ^ fpart_Notes_TXT;
    szTitle    = "Install Notes";
    szMsg      = "Listed below are some important things to note before installing.";
    //szQuestion = "";
    szQuestion = "Do you wish to continue with the install process?  " +
        "If you choose No, Setup will close.  To install the software, " +
        "you must choose Yes.";
    nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );
    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdShowInfoList
//
//  Purpose: This function displays the general information list dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdShowInfoList()
    NUMBER nResult;
    LIST   list;
    STRING szTitle, szMsg, szFile;
begin
    szFile = SUPPORTDIR ^ "infolist.txt";
    list = ListCreate( STRINGLIST );
    ListReadFromFile( list, szFile );
    szTitle  = "";
    szMsg    = " ";
    nResult  = SdShowInfoList( szTitle, szMsg, list );
    ListDestroy( list );
    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdRegisterUserEx
//
//  Purpose: This function displays the user registration dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdRegisterUserEx()
NUMBER nResult;
STRING szTitle, szMsg;
NUMBER nvResult;
NUMBER iLen;
STRING sTest;
POINTER spTest;
STRING sNumber;
POINTER spNumber;
NUMBER Select_This;
STRING sTemp;
begin

    //
    // INPUT USER NAME, COMPANY NAME, SERIAL NUMBER.
    //
ReTry_DataEntry:
    szTitle = "";
    szMsg   = "";
    svName = Global_UserName;
    svCompany = Global_CompanyName;
    svSerial = Global_SerialNumber;
    nResult = SdRegisterUserEx( szTitle, szMsg, svName, svCompany, svSerial );
    StrToUpper(sTemp, svSerial);
    Global_UserName = svName;
    Global_CompanyName = svCompany;
    Global_SerialNumber = sTemp;
    if (nResult = BACK) then
        return nResult;
    endif;

        //
        // VERIFY VALIDITY OF SERIAL NUMBER.
        //
        spNumber = &Global_SerialNumber;
        nvResult = UseDLL( SUPPORTDIR ^ "cpaslib.dll" );
        if ( nvResult < 0 ) then
          MessageBox( "Error loading DLL!", SEVERE );
          abort;
          //return nvResult;
        endif;
        nvResult = snumVerify(spNumber);
        if (nvResult = 0) then
          SprintfBox( SEVERE, "Invalid Serial Number",
          "The serial number `%s` is invalid.  Please enter " +
          "a valid serial number or cancel the install process.",
          Global_SerialNumber);
          goto ReTry_DataEntry;
        endif;
        //
        // EXTRACT DATA FROM VALID SERIAL NUMBER.
        //
        iModule_ADDESIGNS = snumIsModulePurchased(spNumber, 0);
        iModule_ASAP = snumIsModulePurchased(spNumber, 1);
        iModule_STEPP = snumIsModulePurchased(spNumber, 2);
        iModule_FAVOR = snumIsModulePurchased(spNumber, 3);
        iModule_ADOX = snumIsModulePurchased(spNumber, 4);
        iModule_STEPP2 = snumIsModulePurchased(spNumber, 5);
        iModule_SCENE = snumIsModulePurchased(spNumber, 6);
        iModule_MPMS = snumIsModulePurchased(spNumber, 7);
        iModule_CPASFRONT = snumIsModulePurchased(spNumber, 8);
        iModule_VRAMODEL = snumIsModulePurchased(spNumber, 9);
        iModule_FAME = snumIsModulePurchased(spNumber, 10);
        //iModule_3 = snumIsModulePurchased(spNumber, 3);
        //iModule_4 = snumIsModulePurchased(spNumber, 4);
        iModule_20_MFBMODEL = snumIsModulePurchased(spNumber, 20);
        iModule_21_IONEXCHANGEDESIGNS = snumIsModulePurchased(spNumber, 21);
        iModule_22_CATREAC = snumIsModulePurchased(spNumber, 22);
        iModule_ADDESIGNS_AMWAY = snumIsModulePurchased(spNumber, 40);
        iVersionType = snumGetVersionType(spNumber);
        iExpires = snumIsExpirationPresent(spNumber);
        iExpiresDay = snumGetExpirationDay(spNumber);
        iExpiresMonth = snumGetExpirationMonth(spNumber);
        iExpiresYear = snumGetExpirationYear(spNumber);
        if (0 = 1) then
          SprintfBox( SEVERE, "Title",
            "iModule_ADDESIGNS = %d, " +
            "iModule_ASAP = %d, " +
            "iModule_STEPP = %d, " +
            "iModule_FAVOR = %d, " +
            "iModule_ADOX = %d, " +
            "iVersionType = %d, " +
            "iExpires = %d, " +
            "iExpiresDay = %d, " +
            "iExpiresMonth = %d, " +
            "iExpiresYear = %d",
            iModule_ADDESIGNS,iModule_ASAP,iModule_STEPP,
            iModule_FAVOR,
            iModule_ADOX,
            iVersionType,iExpires,iExpiresDay,iExpiresMonth,iExpiresYear);
        endif;
        //
        // END USE OF THE CPASLIB.DLL MODULE.
        //
        UnUseDLL( SUPPORTDIR ^ "cpaslib.dll" );
        //
        // SELECT PROGRAMS TO INSTALL: ONLY THE ONES THE USER HAS PURCHASED.
        //
        Select_Purchased_Programs();
  return nResult;
end;

//    NUMBER nResult;
//    STRING szTitle, szMsg;
//begin
//    svName    = "";
//    svCompany = "";
//    szTitle = "";
//    szMsg   = "";
//    nResult = SdRegisterUserEx( szTitle, szMsg, svName, svCompany, svSerial );
//    return nResult;
//end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: Select_Purchased_Programs                                       //
//                                                                           //
//  Purpose: This function sets selection for the purchased programs.        //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function Select_Purchased_Programs()
NUMBER Select_This;
begin
        //
        // SELECT PROGRAMS TO INSTALL: ONLY THE ONES THE USER HAS PURCHASED.
        //
        // --------------------------------------------------------------------------------------------------------
        // ADDESIGNS AND/OR ADDESIGNS-FOR-AMWAY.
        Select_This = FALSE;
        if (iModule_ADDESIGNS = 1) then
          Select_This = TRUE;
        endif;
        if (iModule_ADDESIGNS_AMWAY = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "AdDesignS", Select_This);
        ////ComponentSelectItem( MEDIA, "AdDesignS Manual", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // ADDESIGNS-FOR-AMWAY.
        Select_This = FALSE;
        if (iModule_ADDESIGNS_AMWAY = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "AdDesignS Amway", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // ADDESIGNS: Overwrite files in database directory?
        Select_This = FALSE;
        if (iModule_ADDESIGNS = 1) then
          Select_This = TRUE;
        endif;
        if (iModule_ADDESIGNS_AMWAY = 1) then
          Select_This = TRUE;
        endif;
        if (Select_This = TRUE) then
          if (Overwrite_ads_dbase = FALSE) then
            Select_This = FALSE;
          endif;
          ComponentSelectItem( MEDIA, "AdDesignS Databases", Select_This);
        else
          // Not installing AdDesignS, so don't install AdDesignS databases.
          ComponentSelectItem( MEDIA, "AdDesignS Databases", FALSE);
        endif;
        //
        // --------------------------------------------------------------------------------------------------------
        // ASAP.
        Select_This = FALSE;
        if (iModule_ASAP = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "ASAP", Select_This);
        ////ComponentSelectItem( MEDIA, "ASAP Manual", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // ASAP: Overwrite files in database directory?
        Select_This = FALSE;
        if (iModule_ASAP = 1) then
          Select_This = TRUE;
        endif;
        if (Select_This = TRUE) then
          if (Overwrite_asap_dbase = FALSE) then
            Select_This = FALSE;
          endif;
          ComponentSelectItem( MEDIA, "ASAP Databases", Select_This);
        else
          // Not installing ASAP, so don't install ASAP databases.
          ComponentSelectItem( MEDIA, "ASAP Databases", FALSE);
        endif;
        //
        // --------------------------------------------------------------------------------------------------------
        // StEPP.
        Select_This = FALSE;
        if (iModule_STEPP = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "StEPP", Select_This);
        ////ComponentSelectItem( MEDIA, "StEPP Manual", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // FaVOr.
        Select_This = FALSE;
        if (iModule_FAVOR = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "FaVOr", Select_This);
        ////ComponentSelectItem( MEDIA, "StEPP Manual", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // AdOx.
        Select_This = FALSE;
        if (iModule_ADOX = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "AdOx", Select_This);
        ////ComponentSelectItem( MEDIA, "StEPP Manual", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // StEPP2.
        Select_This = FALSE;
        if (iModule_STEPP2 = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "StEPP2", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // SCENE.
        Select_This = FALSE;
        if (iModule_SCENE = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "SCENE", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // CPASFRONT.
        Select_This = FALSE;
        if (iModule_CPASFRONT = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "CPASFRONT", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // MPMS.
        Select_This = FALSE;
        if (iModule_MPMS = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "MPMS", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // CatReac.
        Select_This = FALSE;
        if (iModule_VRAMODEL = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "CatReac", Select_This);
        Select_This = FALSE;
        if (iModule_22_CATREAC = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "CatReac Examples (Non-VRA)", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // FaMe.
        Select_This = FALSE;
        if (iModule_FAME = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "FaMe", Select_This);
        //
        // --------------------------------------------------------------------------------------------------------
        // MFB AND/OR IONEXCHANGEDESIGNS.
        Select_This = FALSE;
        if (iModule_20_MFBMODEL = 1) then
          Select_This = TRUE;
        endif;
        if (iModule_21_IONEXCHANGEDESIGNS = 1) then
          Select_This = TRUE;
        endif;
        ComponentSelectItem( MEDIA, "MFBMODEL", Select_This);
        if (Select_This = TRUE) then
          if (Overwrite_mfb_examples = FALSE) then
            Select_This = FALSE;
          endif;
          ComponentSelectItem( MEDIA, "MFB Simulation Examples", Select_This);
        else
          // Not installing MFBMODEL, so don't install MFB simulation examples.
          ComponentSelectItem( MEDIA, "MFB Simulation Examples", FALSE);
        endif;
        //
        // --------------------------------------------------------------------------------------------------------
        // ALL PROGRAMS: MANUALS.
        ComponentSelectItem( MEDIA, "AdDesignS Manual", FALSE);
        ComponentSelectItem( MEDIA, "ASAP Manual", FALSE);
        ComponentSelectItem( MEDIA, "StEPP Manual", FALSE);
        ComponentSelectItem( MEDIA, "FaVOr Manual", FALSE);
        ComponentSelectItem( MEDIA, "AdOx Manual", FALSE);
        //if (StrCompare(Global_InstallHelp_Acrobat,"Y")=0) then
        //  ComponentSelectItem( MEDIA, "AdDesignS Manual", TRUE);
        //  ComponentSelectItem( MEDIA, "ASAP Manual", TRUE);
        //  ComponentSelectItem( MEDIA, "StEPP Manual", TRUE);
        //endif;
        ComponentSelectItem( MEDIA, "AdDesignS Manual Word97", FALSE);
        ComponentSelectItem( MEDIA, "ASAP Manual Word97", FALSE);
        ComponentSelectItem( MEDIA, "StEPP Manual Word97", FALSE);
        ComponentSelectItem( MEDIA, "FaVOr Manual Word97", FALSE);
        ComponentSelectItem( MEDIA, "AdOx Manual Word97", FALSE);
        ComponentSelectItem( MEDIA, "CatReac Manual Word97", FALSE);
        if (StrCompare(Global_InstallHelp_Word97,"Y")=0) then
          if (iModule_ADDESIGNS = 1) then
            ComponentSelectItem( MEDIA, "AdDesignS Manual Word97", TRUE);
          endif;
          if (iModule_ASAP = 1) then
            ComponentSelectItem( MEDIA, "ASAP Manual Word97", TRUE);
          endif;
          if (iModule_STEPP = 1) then
            ComponentSelectItem( MEDIA, "StEPP Manual Word97", TRUE);
          endif;
          if (iModule_FAVOR = 1) then
            ComponentSelectItem( MEDIA, "FaVOr Manual Word97", TRUE);
          endif;
          if (iModule_ADOX = 1) then
            ComponentSelectItem( MEDIA, "AdOx Manual Word97", TRUE);
          endif;
          if (iModule_VRAMODEL = 1) then
            ComponentSelectItem( MEDIA, "CatReac Manual Word97", TRUE);
          endif;
        endif;
        //if (StrCompare(Global_InstallHelp_Word97,"Y")=0) then
        //  ComponentSelectItem( MEDIA, "AdDesignS Manual Word97", TRUE);
        //  ComponentSelectItem( MEDIA, "ASAP Manual Word97", TRUE);
        //  ComponentSelectItem( MEDIA, "StEPP Manual Word97", TRUE);
        //  ComponentSelectItem( MEDIA, "FaVOr Manual Word97", TRUE);
        //  ComponentSelectItem( MEDIA, "AdOx Manual Word97", TRUE);
        //  ComponentSelectItem( MEDIA, "CatReac Manual Word97", TRUE);
        //endif;
        return(0);
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: IsDirectoryNameValid83
//
//  Purpose: This function checks sDirName to ensure it is 8.3 valid
//  according to my more stringent guidelines.  The guidelines are as follows:
//
//  (1.) The only acceptable characters are as follows:
//       !#$%&'()+,-0123456789;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`{}\:
//
//  (2.) Each backslash (\) delimited directory name may be a maximum
//       of 8 characters in length.
//
//  (3.) Only one colon character (:) must exist in the name, and
//       it must be the second character.
//
//  (4.) The third character must be the backslash (\) character.
//
//  Returns:
//      0 = INVALID
//      1 = VALID
//
///////////////////////////////////////////////////////////////////////////////
function IsDirectoryNameValid83(sDirName)
STRING sWorking;
STRING sTest;
NUMBER nRetVal;
NUMBER nLength;
NUMBER i;
STRING sValidChars;
NUMBER nColonCount;
STRING sThisName;
begin
  sWorking = sDirName;
  //
  // TEST CHARACTERS TO ENSURE NO INVALID CHARACTERS ARE PRESENT.
  //
  nLength = StrLength(sWorking);
  if (nLength < 4) then
    nRetVal = 0;
    MessageBox("Directory name is invalid: " +
      "must be at least 4 characters in length.", WARNING);
    goto exit_IsDirectoryNameValid83;
  endif;
  sValidChars = "!#$%&'()+,-0123456789;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`{}\\:";
  nColonCount = 0;
  for i=0 to nLength-1
    StrSub(sTest,sWorking,i,1);
    if (i=2) then
      if (StrFind("\\",sTest)<0) then
        // CHARACTER IS NOT A BACKSLASH (\); EXIT WITH ERROR.
        nRetVal = 0;
        MessageBox("Directory name is invalid: " +
          "the third character must be a backslash (\\) character.", WARNING);
        goto exit_IsDirectoryNameValid83;
      else
        // CHARACTER IS A BACKSLASH (\); DO NOTHING.
      endif;
    endif;
    if (StrFind(sValidChars,sTest)<0) then
      // NOT A VALID CHARACTER; EXIT WITH ERROR.
      nRetVal = 0;
      MessageBox("Directory name is invalid: " +
        "it contains one or more invalid characters.", WARNING);
      goto exit_IsDirectoryNameValid83;
    else
      // THAT IS A VALID CHARACTER; DO NOTHING.
    endif;
    if (StrFind(":",sTest)<0) then
      // NOT A COLON (:) CHARACTER; DO NOTHING.
    else
      // CHECK THIS COLON (:) CHARACTER FOR POSITION; IT SHOULD BE IN POSITION #2.
      nColonCount = nColonCount + 1;
      if (i!=1) then
        // COLON IS IMPROPERLY PLACED; EXIT WITH ERROR.
        nRetVal = 0;
        MessageBox("Directory name is invalid: " +
          "one or more improperly placed colon (:) characters.", WARNING);
        goto exit_IsDirectoryNameValid83;
      endif;
    endif;
  endfor;
  if (nColonCount!=1) then
    // IMPROPER NUMBER OF COLONS; EXIT WITH ERROR.
    nRetVal = 0;
    MessageBox("Directory name is invalid: " +
      "it contains an inappropriate number of colon (:) characters.", WARNING);
    goto exit_IsDirectoryNameValid83;
  endif;
  //
  // TEST EACH DIRECTORY NAME TO ENSURE NONE ARE LONGER THAN 8 CHARACTERS.
  //
  sThisName = "";
  for i=3 to nLength-1
    StrSub(sTest,sWorking,i,1);
    if (StrFind("\\",sTest)<0) then
      // NOT A BACKSLASH (\) CHARACTER; APPEND TO STRING-IN-PROGRESS.
      sThisName = sThisName + sTest;
      if (StrLength(sThisName) > 8) then
        // EXIT WITH ERROR.
        nRetVal = 0;
        MessageBox("Directory name is invalid: " +
          "it contains at least one name more than 8 characters in length.", WARNING);
        goto exit_IsDirectoryNameValid83;
      endif;
    else
      // THIS IS A BACKSLASH (\) CHARACTER.
      sThisName = "";
      // CHECK TO ENSURE PREVIOUS CHARACTER WASN'T A BACKSLASH.
      StrSub(sTest,sWorking,i-1,1);
      if (StrFind("\\",sTest)<0) then
        // IT WAS NOT A BACKSLASH.
      else
        // IT WAS A BACKSLASH; EXIT WITH ERROR.
        nRetVal = 0;
        MessageBox("Directory name is invalid: " +
          "it contains at least two consecutive backslash characters.", WARNING);
        goto exit_IsDirectoryNameValid83;
      endif;
    endif;
  endfor;
  //
  // DIR NAME IS OKAY.
  //
  nRetVal = 1;
exit_IsDirectoryNameValid83:
  return nRetVal;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdAskDestPath
//
//  Purpose: This function asks the user for the destination folder.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdAskDestPath()
NUMBER nResult;
STRING szTitle, szMsg;
NUMBER nRetVal;
begin
Do_Repeat:
    //MessageBox(szMsg, WARNING);       // see below ...
    szTitle = "";
    szMsg   = "";
    svDir = Global_InstallPath;
    nResult = SdAskDestPath( szTitle, szMsg, svDir, 0 );
    if (nResult = BACK) then
      return nResult;
    endif;
    nRetVal = IsDirectoryNameValid83( svDir );
    if (nRetVal = 0) then
      szMsg = "The folder name you entered is invalid; please enter " +
        "a valid folder name or cancel the install process.\n" +
        "\n" +
        "On the screen about to appear, you must specify a folder name " +
        "that will contain the software.  The folder may consist of any number " +
        "of sub-directories, each directory name may be a maximum of " +
        "8 characters in length, and the name must not contain any invalid " +
        "characters.  It is recommended that your folder name consist of " +
        "only alphanumeric characters and be located on a non-networked drive " +
        "(e.g. the C: drive).\n" +
        "\n" +
        "The following are valid names:\n" +
        "    C:\\ETDOT10\n" +
        "    C:\\WINAPPS\\ETDOT10\n" +
        "\n" +
        "The following are NOT valid names:\n" +
        "    C:\\ETDOT10PROGRAMS\n" +
        "    C:\\ETDOT 1.0\n";
      MessageBox(szMsg, WARNING);
      goto Do_Repeat;
    endif;
    Global_InstallPath = svDir;
    TARGETDIR = svDir;
    return nResult;
end;

//    NUMBER nResult;
//    STRING szTitle, szMsg;
//begin
//    szTitle = "";
//    szMsg   = "";
//    nResult = SdAskDestPath( szTitle, szMsg, svDir, 0 );
//    TARGETDIR = svDir;
//    return nResult;
//end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdSetupType
//
//  Purpose: This function displays the standard setup type dialog.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSetupType()
    NUMBER nResult, nType;
    STRING szTitle, szMsg;

begin

    switch (svSetupType)
    case "Typical":
        nType = TYPICAL;
    case "Custom":
        nType = CUSTOM;
    case "Compact":
        nType = COMPACT;
    case "":
        svSetupType = "Typical";
        nType = TYPICAL;
    endswitch;

    szTitle = "";
    szMsg   = "";
    nResult = SetupType( szTitle, szMsg, "", nType, 0 );

    switch (nResult)
        case COMPACT:
            svSetupType = "Compact";
        case TYPICAL:
            svSetupType = "Typical";
        case CUSTOM:
            svSetupType = "Custom";
    endswitch;

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdComponentDialog2
//
//  Purpose: This function displays the custom component dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdComponentDialog2()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    if ((svSetupType != "Custom") && (svSetupType != "")) then
        return 0;
    endif;

    szTitle  = "";
    szMsg    = "";
    nResult  = SdComponentDialog2( szTitle, szMsg, svDir, "" );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowAskAboutManualInstalls
//
//  Purpose: This function asks the user which type of manual format
//  to install, if any.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowAskAboutManualInstalls()
NUMBER nValue;
STRING szMsg;
STRING szText1;
STRING szText2;
NUMBER nvCheck1;
NUMBER nvCheck2;
NUMBER nResult;
begin
  szMsg = "Please select the desired manual format(s) to install, if any.";
  szText1 = "Microsoft Word97 Manual Format";
  //szText2 = "Adobe Acrobat Manual Format";
  nvCheck1 = FALSE;
  if (StrCompare(Global_InstallHelp_Word97,"Y")=0) then
    nvCheck1 = TRUE;
  endif;
  //nvCheck2 = FALSE;
  //if (StrCompare(Global_InstallHelp_Acrobat,"Y")=0) then
  //  nvCheck2 = TRUE;
  //endif;
  nValue = NONEXCLUSIVE;
  //nResult = AskOptions(nValue, szMsg,
  //    szText1, nvCheck1,
  //    szText2, nvCheck2);
  nResult = AskOptions(nValue, szMsg,
      szText1, nvCheck1);
  Global_InstallHelp_Word97 = "N";
  //Global_InstallHelp_Acrobat = "N";
  if (nvCheck1 = TRUE) then
    Global_InstallHelp_Word97 = "Y";
  endif;
  //if (nvCheck2 = TRUE) then
  //  Global_InstallHelp_Acrobat = "Y";
  //endif;
  return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdSelectFolder
//
//  Purpose: This function displays the standard folder selection dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSelectFolder()
NUMBER nResult;
STRING szTitle, szMsg;
begin
  //if (svDefGroup = "") then
  //  svDefGroup = @FOLDER_NAME;
  //endif;
  svDefGroup = Global_ProgramGroup;
  szTitle    = "";
  szMsg      = "";
  nResult    = SdSelectFolder( szTitle, szMsg, svDefGroup );
  Global_ProgramGroup = svDefGroup;
  return nResult;
end;

//    NUMBER nResult;
//    STRING szTitle, szMsg;
//begin
//    if (SHELL_OBJECT_FOLDER = "") then
//        SHELL_OBJECT_FOLDER = @FOLDER_NAME;
//    endif;
//    szTitle    = "";
//    szMsg      = "";
//    nResult    = SdSelectFolder( szTitle, szMsg, SHELL_OBJECT_FOLDER );
//    return nResult;
//end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdStartCopy
//
//  Purpose: This function displays the dialog preceding the start of the
//           file transfer process.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdStartCopy()
NUMBER nResult;
STRING szTitle, szMsg;
LIST listSelectedComps;
STRING svThisComponentName;
NUMBER Is_Visible;
STRING DummyStr1;
begin
        // SET UP CURRENT SETTINGS LIST.
        ListDestroy( listStartCopy );
        listStartCopy = ListCreate(STRINGLIST);
        ListAddString( listStartCopy, "User Name: " + Global_UserName, AFTER );
        ListAddString( listStartCopy, "Company: " + Global_CompanyName, AFTER );
        ListAddString( listStartCopy, "Serial Number: " + Global_SerialNumber, AFTER );
        ListAddString( listStartCopy, "Install Path: " + Global_InstallPath, AFTER );
        ListAddString( listStartCopy, "Program Group: " + Global_ProgramGroup, AFTER );
        ListAddString( listStartCopy, "Modules To Install:", AFTER );
        //
        // DISPLAY MANUAL INSTALL INFO.
        //
        //if (StrCompare(Global_InstallHelp_Acrobat,"Y")=0) then
        //  ListAddString( listStartCopy, "      Adobe Acrobat Format Manuals", AFTER );
        //endif;
        if (StrCompare(Global_InstallHelp_Word97,"Y")=0) then
          ListAddString( listStartCopy, "      Microsoft Word97 Format Manuals", AFTER );
        endif;
        //
        // OUTPUT LIST OF MODULES TO INSTALL.
        //
        listSelectedComps = ListCreate(STRINGLIST);
        ComponentListItems(MEDIA,"",listSelectedComps);
        nResult = ListGetFirstString(listSelectedComps, svThisComponentName);
        while (nResult != END_OF_LIST)
          ComponentGetData(MEDIA, svThisComponentName,
                           COMPONENT_FIELD_VISIBLE, Is_Visible, DummyStr1);
          if (Is_Visible) then
            if (ComponentIsItemSelected(MEDIA, svThisComponentName) = TRUE) then
              ListAddString( listStartCopy, "      " + svThisComponentName, AFTER );
            endif;
          endif;
          nResult = ListGetNextString(listSelectedComps, svThisComponentName);
        endwhile;
        ListDestroy( listSelectedComps );
        // OUTPUT WARNING.
        ListAddString( listStartCopy,
            "Note: The install process will overwrite any existing", AFTER );
        ListAddString( listStartCopy,
            "program executables or databases in the install path.", AFTER );

  szTitle = "";
  szMsg   = "";
  nResult = SdStartCopy( szTitle, szMsg, listStartCopy );
//SprintfBox(SEVERE,"Title","Point A: nResult = %d", nResult);
  return nResult;
 end;

//    NUMBER nResult;
//    STRING szTitle, szMsg;
//begin
//    szTitle = "";
//    szMsg   = "";
//    nResult = SdStartCopy( szTitle, szMsg, listStartCopy );
//    return nResult;
//end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdFinishReboot
//
//  Purpose: This function will show the last dialog of the product.
//           It will allow the user to reboot and/or show some readme text.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdFinishReboot()
    NUMBER nResult, nDefOptions;
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
    NUMBER bOpt1, bOpt2;

begin

    if (!BATCH_INSTALL) then
        //
        // LOCKED FILES DO NOT NEED UPDATING; CALL SdFinish().
        //
        bOpt1 = FALSE;
        bOpt2 = FALSE;
        //szMsg1 = "";
      //szMsg1 = "Setup has finished installing " + SHOWUSER_PROGRAM_NAME +
      //    " on your computer.";
      szMsg1 = "Setup has finished installing " + use_PRODUCT_NAME +
          " on your computer.";
        szMsg2 = "";
        szOption1 = "";
        szOption2 = "";
        nResult = SdFinish( szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2 );
        return 0;
    endif;

  //
  // LOCKED FILES _DO_ NEED UPDATING; CALL SdFinishReboot().
  //
    nDefOptions = SYS_BOOTMACHINE;
    szTitle     = "";
    szMsg1      = "";
    szMsg2      = "";
    nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );

    return nResult;
end;

// --- include script file section ---

#include "sddialog.rul"

// Added/changed to support template:
// DAO & ODBC include
#include "dao.rul"
#include "odbc.rul"






































